<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C语言创建 删除 重命名文件]]></title>
    <url>%2Fblog%2F65f494cf%2F</url>
    <content type="text"><![CDATA[C语言创建文件C语言重命名文件C语言删除文件实例参考链接C语言创建文件以只写方式打开文件，如果没有改文件的话则会创建该文件1234FILE* trainFILETemp=getFILE("trainTemp.txt","w");fprintf(trainFILETemp,"使用C语言创建文件");//关闭文件fclose(trainFILETemp);C语言重命名文件12345678int result;char oldname[] ="trainTemp.txt";char newname[] ="trainRename.txt";result= rename( oldname , newname );if ( result == 0 ) printf( "File successfully renamed" );else perror( "Error renaming file" );C语言删除文件在C语言中，有专门的删除文件函数remove。1、头文件：stdio.h2、声明：int remove(const char* filename);3、功能：删除文件名为filename的文件。4、返回值：删除成功，返回0.否则返回-1.实例1234567int ret;char deleteFile[]="trainRename.txt";ret = remove(deleteFile);//删除文件if(ret==0) printf("删除文件成功\n");else printf("删除文件失败\n");参考链接详解C语言中的rename()函数和remove()函数的使用方法如何用C语言创建和删除文件c 重命名文件本文链接: C语言创建 删除 重命名文件]]></content>
      <categories>
        <category>C语言</category>
        <category>文件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[解决C语言：error C2084：function 'xxx xxx()' already has a body]]></title>
    <url>%2Fblog%2F38f33943%2F</url>
    <content type="text"><![CDATA[分析原因解决方案总结分析原因这是因为头文件重复导入了，我在头文件userBuyMenu.h中导入了#include &quot;findMethod.h&quot;。然后又在主方法中同时导入了这个两个头文件：12#include "userBuyMenu.h"#include "findMethod.h"这样就findMethod.h被导入了两次，重复了，所以报这个错。解决方案注释掉userBuyMenu.h中导入的findMethod.h的语句：1//#include "findMethod.h"总结以后不要在头文件中导入头文件，再主方法中导入即可。本文链接: 解决C语言：error C2084：function ‘xxx xxx()’ already has a body]]></content>
      <categories>
        <category>C语言</category>
        <category>Debug</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[任务管理器中不小心关掉文件资源管理器explorer了怎么重新打开]]></title>
    <url>%2Fblog%2Fd400453f%2F</url>
    <content type="text"><![CDATA[我的问题我在任务管理器中的资源监视器中不小心关掉了文件资源管理器explorer.exe，然后就炸了，整个屏幕直接变蓝了，而其按下Win+R也无法调出运行窗口。解决方案不过还好任务管理器还可以使用，所以：进入任务管理器，点击文件&gt;运行新任务：然后输入explorer，按下回车即可启动文件资源管理器了，这样电脑就恢复正常了。启动其他程序也类似。本文链接: 任务管理器中不小心关掉文件资源管理器explorer了怎么重新打开]]></content>
      <categories>
        <category>其他</category>
        <category>Windows相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo next 文章密码访问]]></title>
    <url>%2Fblog%2F1edfe894%2F</url>
    <content type="text"><![CDATA[下面介绍加密访问的两种方式参考链接https://www.jianshu.com/p/e4203ee066e5https://www.jianshu.com/p/a2330937de6c本文链接: hexo next 文章密码访问]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>Next主题配置</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[程序设计题：热播电视剧的评价及推荐系统]]></title>
    <url>%2Fblog%2Fc28642cc%2F</url>
    <content type="text"><![CDATA[下面点击横线密码. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>我的软件</category>
        <category>课程设计</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[课程设计3：线上票务订购模拟系统]]></title>
    <url>%2Fblog%2F23713aec%2F</url>
    <content type="text"><![CDATA[下面点击横线输入密码. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>我的软件</category>
        <category>课程设计</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo next主题 修改不蒜子统计显示样式：图标后添加中文说明]]></title>
    <url>%2Fblog%2Fe696ddbe%2F</url>
    <content type="text"><![CDATA[点开文件路径：E:\Blog\bolg5\themes\next\layout\_third-party\analytics\busuanzi-counter.swig,在图标&lt;i class=&quot;fa fa-&quot;&gt;&lt;/i&gt;后面添加中文提示即可,如下所示：123456789101112131415161718&#123;% if theme.busuanzi_count.enable %&#125;&lt;div class=&quot;busuanzi-count&quot;&gt; &lt;!-- &lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; --&gt; &lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &#123;% if theme.busuanzi_count.total_visitors %&#125; &lt;span class=&quot;site-uv&quot; title=&quot;&#123;&#123; __(&apos;footer.total_visitors&apos;) &#125;&#125;&quot;&gt; &lt;i class=&quot;fa fa-&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;&quot;&gt;&lt;/i&gt; 总访客量:&lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt; &lt;/span&gt; &#123;% endif %&#125; &#123;% if theme.busuanzi_count.total_views %&#125; &lt;span class=&quot;site-pv&quot; title=&quot;&#123;&#123; __(&apos;footer.total_views&apos;) &#125;&#125;&quot;&gt; &lt;i class=&quot;fa fa-&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;&quot;&gt;&lt;/i&gt; 总访问量:&lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; &lt;/span&gt; &#123;% endif %&#125;&lt;/div&gt;&#123;% endif %&#125;显示效果：原来默认的是没有中文提示的，只有一个人头的图标和一个眼睛的图标。后续如果还要修改这里的样式，记得来E:\Blog\bolg5\themes\next\layout\_third-party\analytics\busuanzi-counter.swig这个文件中修改。本文链接: hexo next主题 修改不蒜子统计显示样式-添加中文提示]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>Next主题配置</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux 常用指令]]></title>
    <url>%2Fblog%2Fe44da%2F</url>
    <content type="text"><![CDATA[目录文件目录相关命令创建一个空白文件命令touch文件复制命令cp文件移动命令mv实例 移动文件到其他目录使用移动命令重命名文件文件删除命令rm参考链接我这里是在git-bash中运行的，因为懒得打开虚拟机了，在Linux终端上运行效果也一样。文件目录相关命令创建一个空白文件命令touch命令格式1touch 新文件名例如，在当前目录下创建一个test.txt的空白文件：1234567lan@DESKTOP-8ISAT6B MINGW64 /e/Blog/bolg5/source/_posts/Linux$ ls -ltotal 8-rw-r--r-- 1 lan 197609 3622 11月 11 17:06 &apos;Linux 常用指令.md&apos;-rw-r--r-- 1 lan 197609 1537 11月 5 17:17 linux下删除目录及其子目录下某种类型文件.mdlan@DESKTOP-8ISAT6B MINGW64 /e/Blog/bolg5/source/_posts/Linux$ touch text.txt运行结果：123456lan@DESKTOP-8ISAT6B MINGW64 /e/Blog/bolg5/source/_posts/Linux$ ls -ltotal 8-rw-r--r-- 1 lan 197609 3622 11月 11 17:06 &apos;Linux 常用指令.md&apos;-rw-r--r-- 1 lan 197609 1537 11月 5 17:17 linux下删除目录及其子目录下某种类型文件.md-rw-r--r-- 1 lan 197609 0 11月 11 17:06 text.txt文件复制命令cp命令格式1cp [option] source1 source2 source3 ... directory参数说明-a:是指archive的意思，也说是指复制所有的目录-d:若源文件为连接文件(link file)，则复制连接文件属性而非文件本身-f:强制(force)，若有重复或其它疑问时，不会询问用户，而强制复制-i:若目标文件(destination)已存在，在覆盖时会先询问是否真的操作-l:建立硬连接(hard link)的连接文件，而非复制文件本身-p:与文件的属性一起复制，而非使用默认属性-r:递归复制，用于目录的复制操作-s:复制成符号连接文件(symbolic link)，即“快捷方式”文件-u:若目标文件比源文件旧，更新目标文件例如将当前博客站点目录bolg5复制一份到到同级目录blog5copy:1234lan@DESKTOP-8ISAT6B MINGW64 /e/Blog/bolg5$ cd ..lan@DESKTOP-8ISAT6B MINGW64 /e/Blog$ cp -r bolg5 blog5copy运行结束后，就复制了一份站点目录文件到同级目录(Blog)下的blog5copy目录了。这个blog5copy相当于一个博客站点目录的备份。文件移动命令mv命令格式1mv [-fiv] source destination参数说明-f:force，强制直接移动而不询问-i:若目标文件(destination)已经存在，就会询问是否覆盖-u:若目标文件已经存在，且源文件比较新，才会更新实例 移动文件到其他目录12lan@DESKTOP-8ISAT6B MINGW64 /e/Blog/bolg5dug/source/_posts/Linux$ mv &apos;Linux 常用指令.md&apos; ../../../../*5/source/_posts/Linux这个命令会把/e/Blog/bolg5dug/source/_posts/Linux目录下的&#39;Linux 常用指令.md&#39;文件移动到，/e/Blog/bolg5/source/_posts/Linux目录下。使用移动命令重命名文件在当前目录下使用移动命令可以达到给文件重命名的效果：为了不误删我之前写的文章，先来创建一个测试文件：12345678lan@DESKTOP-8ISAT6B MINGW64 /e/Blog/bolg5/source/_posts/Linux$ touch test.txtlan@DESKTOP-8ISAT6B MINGW64 /e/Blog/bolg5/source/_posts/Linux$ ls -ltotal 8-rw-r--r-- 1 lan 197609 2447 11月 11 16:58 &apos;Linux 常用指令.md&apos;-rw-r--r-- 1 lan 197609 1537 11月 5 17:17 linux下删除目录及其子目录下某种类型文件.md-rw-r--r-- 1 lan 197609 0 11月 11 16:59 test.txt使用mv命令重命名：12$ mv test.txt rename.txtlan@DESKTOP-8ISAT6B MINGW64 /e/Blog/bolg5/source/_posts/Linux重命名结果：123456$ ls -ltotal 8-rw-r--r-- 1 lan 197609 2447 11月 11 16:58 &apos;Linux 常用指令.md&apos;-rw-r--r-- 1 lan 197609 1537 11月 5 17:17 linux下删除目录及其子目录下某种类型文件.md-rw-r--r-- 1 lan 197609 0 11月 11 16:59 rename.txtlan@DESKTOP-8ISAT6B MINGW64 /e/Blog/bolg5/source/_posts/Linux文件删除命令rm命令格式1rm [fir] 文件或目录参数说明-f:强制删除-i:交互模式，在删除前询问用户是否操作-r:递归删除，常用在目录的删除参考链接https://www.cnblogs.com/liaojie970/p/6746230.html本文链接: Linux 常用指令]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo next主题 valine评论系统 使用第三方邮件提醒]]></title>
    <url>%2Fblog%2Ff1fdd2cf%2F</url>
    <content type="text"><![CDATA[valine自带的邮件提醒设置使用第三方邮件提醒关闭valine自带的邮件提醒怎么获取SMTP授权码重新部署使环境变量生效提示邮件中文章链接错误加载不到评论valine自带的邮件提醒设置参见：Valine 评论系统中的邮件提醒设置使用第三方邮件提醒参见：https://github.com/zhaojun1998/Valine-Admin关闭valine自带的邮件提醒使用第三方评论插件的话，就不要使用valine自带的邮件提醒插件，在主题配置文件E:\Blog\bolg5\themes\next\_config.yml中把notify设置为false。1234valine: ...... notify: false # mail notifier , https://github.com/xCss/Valine/wiki #是否开启邮箱提醒 .......怎么获取SMTP授权码上面的文档没有介绍怎么获取SMTP授权码，我这里来说明一下，我使用的是163的邮箱：参见：163邮箱设置smtp密码步骤重新部署使环境变量生效设置好上述的环境变量后，需要重新部署一下让环境变量生效。提示邮件中文章链接错误加载不到评论可以正常收到邮件提醒后,点击前往参看链接：打开的链接为：https://www.lansheng.net.cn//blog/4f1b06ea/#comments这样地址是不对的，也就加载不到评论信息，这是因为上面设置的环境变量错了：这样也就加载不到评论了：解决方案：把错误的SITE_URLhttps://www.lansheng.net.cn/最后的斜杆删除掉，改成https://www.lansheng.net.cn,然后点击保存，然后点击部署标签，点击部署按钮，重新部署，让设置生效即可。本文链接: hexo next主题 valine评论系统 使用第三方邮件提醒]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>给博客添加功能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo next主题 如何自定义CSS样式]]></title>
    <url>%2Fblog%2Fcd4775fc%2F</url>
    <content type="text"><![CDATA[本文介绍修改next主题默认样式的详细步骤！目录用到的工具1 获取标签的css选择器2 编写css3 使用新的css样式4 刷新浏览器看效果5 部署用到的工具火狐浏览器—参看效果，获取css选择器vscode编辑器—自动补全，便于编写css1 获取标签的css选择器站点目录下，输入hexo s命令启动本地服务器，然后在火狐浏览器打开你的博文，选中你要调整的内容，如无须列表，点击鼠标右键，选中查看元素：在火狐浏览器的查看器中，选中你想要调整的html标签,我这里是&lt;ul&gt;标签，然后点击右键，选中复制，然后选择复制css选择器：这样就得到了该html标签(ul)的css选择器如下：1article.post:nth-child(1) &gt; div:nth-child(1) &gt; div:nth-child(5) &gt; ul:nth-child(2)2 编写css打开vscode,创建一个html文件，写下如下的html基本骨架：12345678910&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;然后在style标签之间编写css样式代码，这样vscode会自动补全，这对我这种小白来说很好，毕竟全部记住那么多css属性和值比较难。把上面的选择器粘贴到vscode中,：12345678910111213&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; article.post:nth-child(1) &gt; div:nth-child(1) &gt; div:nth-child(5) &gt; ul:nth-child(2) &#123; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;因为我需要选中所有的无序列表，所以这里需要稍微修改一下css选择器，如下：12345678910111213&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; article.post div div ul &#123; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;next主题默认的无须列表的内左边距太大了，如果无须列表下有太多的子孙无须列表，在手机端显示的时候，会很难看，所以我这里修改无须列表的内左边距为20px：123article.post div div ul &#123; padding-left: 20px;&#125;3 使用新的css样式修改后css样式后，接下来就是应用到next主题中，打开站点目录\themes\next\source\css\_custom\custom.styl，我这里是E:\Blog\bolg5\themes\next\source\css\_custom\custom.styl，把上面的css代码，粘贴到文本末尾即可：4 刷新浏览器看效果然后刷新浏览器即可看到效果,打开开发者工具，然后点查看器，点击刚才的ul标签，在右侧的布局窗口，可看到盒模型，可以看到左内边距已经变成20px了。5 部署在本地调试无误后，就可以部署了。本文链接: hexo next主题 如何自定义CSS样式]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>Next主题配置</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo博客中 使用javascript和jqurey播放audio]]></title>
    <url>%2Fblog%2F4f1b06ea%2F</url>
    <content type="text"><![CDATA[目录方式0 使用原生的audio播放音频方式1 使用javascript播放音频方式2 使用javascript播放音频 简写方式2 使用jquery播放音频总结markdown中可以插入html标签，所以可以插入audio标签来播放音频。方式0 使用原生的audio播放音频1&lt;audio src="http://fanyi.baidu.com/gettts?lan=en&amp;text=focus&amp;spd=5&amp;source=web" controls="controls"&gt;&lt;/audio&gt;显示效果：但是原生的audio标签控件太大了，占用文章太多空间,在电脑端，看起来还勉强凑合，但是在手机端的原生的audio控件会超出屏幕之外很不美观。所以我想着不用原生的audio,而是使用其他方式来打开音频。方式1 使用javascript播放音频1234567891011&lt;audio src="http://fanyi.baidu.com/gettts?lan=en&amp;text=document&amp;spd=3&amp;source=web" id="audio0"&gt;&lt;/audio&gt;&lt;input type="button" onclick="paly_audio0();" value="使用JS播放" /&gt;&lt;script&gt; function paly_audio0() &#123; //找到音频 var audio0 = document.getElementById("audio0"); if (audio0 != null) &#123; audio0.play(); &#125; &#125;&lt;/script&gt;显示效果：function paly_audio0(){var a=document.getElementById("audio0");null!=a&&a.play()}方式2 使用javascript播放音频 简写12&lt;audio src="http://fanyi.baidu.com/gettts?lan=en&amp;text=hello world&amp;spd=3&amp;source=web" id="audio1"&gt;&lt;/audio&gt;&lt;input type="button" onclick="document.getElementById('audio1').play();" value="播放"/&gt;这种方式，直接写在html中是可以播放的，但是写到在这里hexo 无法渲染。我用的是next主题，也不知道是hexo的原因，还是next主题的原因 。总之不要在文章中使用这种简写的方式就行了。方式2 使用jquery播放音频跟使用javascript方式，也可以使用jquery来播放：123456789101112&lt;audio src="http://fanyi.baidu.com/gettts?lan=en&amp;text=document&amp;spd=3&amp;source=web" id="documentAudio"&gt;&lt;/audio&gt;&lt;input type="button" id="documentPlay" value="播放document" /&gt;&lt;script src="http://code.jquery.com/jquery-2.1.1.min.js"&gt;&lt;/script&gt;&lt;script&gt; $('#documentPlay').click(function () &#123; //找到音频 var documentAudio = document.getElementById('documentAudio'); if (documentAudio != null) &#123; documentAudio.play(); &#125; &#125;)&lt;/script&gt;效果如下：$("#documentPlay").click(function(){var n=document.getElementById("documentAudio");null!=n&&n.play()})总结还是直接使用javascript来播放音频的好，这样还少几行代码，也不用引入jqurey库。本文链接: hexo next主题 使用jquery播放audio]]></content>
      <categories>
        <category>HTML</category>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo next主题博客中 文章中使用javascript和jquery]]></title>
    <url>%2Fblog%2F7a1ad816%2F</url>
    <content type="text"><![CDATA[目录描述演示效果实现使用javascript播放音频使用Jquery在代码块中显示当前时间使用jqurey播放audio描述之前知道可以在markdown文档中插入html标签,今天我发现其实也可以插入javascript脚本的。演示效果注意查看下面的代码框，记下当前的分钟，然后刷新当前页面后再查看。var d=new Date,span1=document.getElementById("span1");span1.innerText="当前分钟数->"+d.getMinutes()不出意料的话，上面代码框中的分钟数，与现在的分钟数是一致的。实现这个实现起来也很简单。把下面的JavaScript代码添加到markdown中即可：123456&lt;pre&gt;&lt;code&gt;&lt;span id="span1"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;script type="text/javascript"&gt; var d = new Date(); var span1 = document.getElementById("span1"); span1.innerText = "当前分钟数-&gt;"+d.getMinutes();&lt;/script&gt;需要注意的是需要用空行把上述代码和正文中的其他文字分割开，不然hexo渲染成html文件的时候会出错。使用javascript播放音频1234567891011&lt;audio src="http://fanyi.baidu.com/gettts?lan=en&amp;text=document&amp;spd=3&amp;source=web" id="audio0"&gt;&lt;/audio&gt;&lt;input type="button" onclick="paly_audio0();" value="使用JS播放" /&gt;&lt;script&gt; function paly_audio0() &#123; //找到音频 var audio0 = document.getElementById("audio0"); if (audio0 != null) &#123; audio0.play(); &#125; &#125;&lt;/script&gt;显示效果：function paly_audio0(){var a=document.getElementById("audio0");null!=a&&a.play()}使用Jquery在代码块中显示当前时间测试代码：123456789&lt;script src="http://code.jquery.com/jquery-2.1.1.min.js"&gt;&lt;/script&gt;&lt;pre calss="run"&gt;&lt;code&gt;&lt;span id="jqueryTestId"&gt;点击查看运行结果&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;script&gt; $('#jqueryTestId').click(function () &#123; var jqueryTestId = document.getElementById('jqueryTestId'); var date = new Date(); jqueryTestId.innerHTML = "当前时间：" + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds(); &#125;);&lt;/script&gt;效果：点击查看运行结果$("#jqueryTestId").click(function(){var e=document.getElementById("jqueryTestId"),t=new Date;e.innerHTML="当前时间："+t.getHours()+":"+t.getMinutes()+":"+t.getSeconds()})点击上面可以运行，这说明hexo next主题的文章中是可以使用jqurey的,可以通过这样来实现点击事件。使用jqurey播放audio12345678910111213原生audio控件：&lt;audio src="http://fanyi.baidu.com/gettts?lan=en&amp;text=document&amp;spd=3&amp;source=web" id="documentAudio"&gt;&lt;/audio&gt;&lt;audio src="http://fanyi.baidu.com/gettts?lan=en&amp;text=document&amp;spd=3&amp;source=web" controls="controls"&gt;&lt;/audio&gt;jquery播放：&lt;input type="button" id="documentPlay" value="点击播放document"/&gt;&lt;script&gt; $('#documentPlay').click(function () &#123; //找到音频 var documentAudio=document.getElementById('documentAudio'); if(documentAudio!=null) &#123; documentAudio.play(); &#125; &#125;)&lt;/script&gt;显示效果：原生audio控件：jquery播放：$("#documentPlay").click(function(){var n=document.getElementById("documentAudio");null!=n&&n.play()})本文链接: hexo next 主题 文章中插入使用JavaScript脚本]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>Next主题配置</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaScript常用对象3 Date对象]]></title>
    <url>%2Fblog%2F39300b18%2F</url>
    <content type="text"><![CDATA[目录创建Date对象Date对象的方法Date() 方法实例 将输出今天的日期和时间获取年份 getFullYear() 方法实例 获取当前的年份实例 从具体到日期提取年份获取月份 getMonth() 方法实例获取天数 getDate() 方法实例 输出当前月份的日期实例 输出具体日期变量中的天数获取星期数 getDay() 方法实例 查看今天星期几实例 使用数字查看今天星期几实例 获取当前的小时数参考链接在Web程序开发的过程中,可以使用 JavaScript的Date对象来对日期和时间进行操作。例如,如果想在网页中显示计时的时钟,就可以使用Date对象来获取当前系统的时间并按照指定的格式进行显示。下面将对Date对象进行详细介绍。创建Date对象Date对象是一个有关日期和时间的对象。它具有动态性,即必须使用new运算符创建一个实例创建Date对象的语法格式如下:123dateObject=new Date();dateobject=new Date(dateValue);dateobject=new Date(year, month, date[,hours[,minutes[,seconds[,ms]]]]);参数说明:dateValue:如果是数值,则表示指定日期与1970年1月1日午夜间全球标准时间相差的毫秒数;如果是字符串,则 dateValue按照 parse()方法中的规则进行解析。year:一个4位数的年份。如果输入的是0~99之间的值,则给它加上1900month:表示月份,值为0~11之间的整数,即0代表1月份。date:表示日,值为1~31之间的整数。hours:表示小时,值为0~23之间的整数minutes:表示分钟,值为0~59之间的整数。seconds:表示秒钟,值为0~59之间的整数。ms:表示毫秒,值为0~999之间的整数创建一个代表当前系统日期的Date对象的代码如下:1var now=new Date();Date对象的方法Date对象没有提供直接访问的属性,只具有获取、设置日期和时间的方法。Date对象的常用方法如下所示方法描述Date()返回当日的日期和时间。getDate()从 Date 对象返回一个月中的某一天 (1 ~ 31)。getDay()从 Date 对象返回一周中的某一天 (0 ~ 6)。getMonth()从 Date 对象返回月份 (0 ~ 11)。getFullYear()从 Date 对象以四位数字返回年份。getYear()请使用 getFullYear() 方法代替。getHours()返回 Date 对象的小时 (0 ~ 23)。getMinutes()返回 Date 对象的分钟 (0 ~ 59)。getSeconds()返回 Date 对象的秒数 (0 ~ 59)。getMilliseconds()返回 Date 对象的毫秒(0 ~ 999)。getTime()返回 1970 年 1 月 1 日至今的毫秒数。getTimezoneOffset()返回本地时间与格林威治标准时间 (GMT) 的分钟差。getUTCDate()根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。getUTCDay()根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。getUTCMonth()根据世界时从 Date 对象返回月份 (0 ~ 11)。getUTCFullYear()根据世界时从 Date 对象返回四位数的年份。getUTCHours()根据世界时返回 Date 对象的小时 (0 ~ 23)。getUTCMinutes()根据世界时返回 Date 对象的分钟 (0 ~ 59)。getUTCSeconds()根据世界时返回 Date 对象的秒钟 (0 ~ 59)。getUTCMilliseconds()根据世界时返回 Date 对象的毫秒(0 ~ 999)。parse()返回1970年1月1日午夜到指定日期（字符串）的毫秒数。setDate()设置 Date 对象中月的某一天 (1 ~ 31)。setMonth()设置 Date 对象中月份 (0 ~ 11)。setFullYear()设置 Date 对象中的年份（四位数字）。setYear()请使用 setFullYear() 方法代替。setHours()设置 Date 对象中的小时 (0 ~ 23)。setMinutes()设置 Date 对象中的分钟 (0 ~ 59)。setSeconds()设置 Date 对象中的秒钟 (0 ~ 59)。setMilliseconds()设置 Date 对象中的毫秒 (0 ~ 999)。setTime()以毫秒设置 Date 对象。setUTCDate()根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。setUTCMonth()根据世界时设置 Date 对象中的月份 (0 ~ 11)。setUTCFullYear()根据世界时设置 Date 对象中的年份（四位数字）。setUTCHours()根据世界时设置 Date 对象中的小时 (0 ~ 23)。setUTCMinutes()根据世界时设置 Date 对象中的分钟 (0 ~ 59)。setUTCSeconds()根据世界时设置 Date 对象中的秒钟 (0 ~ 59)。setUTCMilliseconds()根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。toSource()返回该对象的源代码。toString()把 Date 对象转换为字符串。toTimeString()把 Date 对象的时间部分转换为字符串。toDateString()把 Date 对象的日期部分转换为字符串。toGMTString()请使用 toUTCString() 方法代替。toUTCString()根据世界时，把 Date 对象转换为字符串。toLocaleString()根据本地时间格式，把 Date 对象转换为字符串。toLocaleTimeString()根据本地时间格式，把 Date 对象的时间部分转换为字符串。toLocaleDateString()根据本地时间格式，把 Date 对象的日期部分转换为字符串。UTC()根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。valueOf()返回 Date 对象的原始值。Date() 方法定义和用法Date() 方法可返回当天的日期和时间。语法Date()实例 将输出今天的日期和时间123&lt;script type="text/javascript"&gt;document.write(Date())&lt;/script&gt;运行结果：var newDate=document.getElementById("newDate");newDate.innerText=new Date获取年份 getFullYear() 方法定义和用法getFullYear() 方法可返回一个表示年份的 4 位数字。语法dateObject.getFullYear()返回值当 dateObject 用本地时间表示时返回的年份。返回值是一个四位数，表示包括世纪值在内的完整年份，而不是两位数的缩写形式。实例 获取当前的年份1234&lt;script type="text/javascript"&gt; var d = new Date() document.write(d.getFullYear())&lt;/script&gt;运行结果：var d=new Date,getFullYear=document.getElementById("getFullYear");getFullYear.innerText=d.getFullYear()实例 从具体到日期提取年份1234&lt;script type="text/javascript"&gt; var born = new Date("July 21, 1983 01:15:00") document.write("I was born in " + born.getFullYear())&lt;/script&gt;运行结果：1I was born in 1983getYear() 方法定义和用法getYear()方法可返回表示年份的两位或四位的数字。语法dateObject.getYear()返回值返回 Date 对象的年份字段。提示和注释 ：注释：由 getYear() 返回的值不总是 4 位的数字！对于介于 1900 与 1999 之间的年份，getYear() 方法仅返回两位数字。对于 1900 之前或 1999 之后的年份，则返回 4 位数字！注释：该方法总是结合一个 Date 对象来使用。重要事项： 从 ECMAScript v3 开始，JavaScript 的实现就不再使用该方法，而使用 getFullYear() 方法取而代之 ！获取月份 getMonth() 方法定义和用法getMonth() 方法可返回表示月份的数字。语法dateObject.getMonth()返回值dateObject 的月份字段，使用本地时间。返回值是 0（一月） 到 11（十二月） 之间的一个整数。实例1234567891011121314151617&lt;script type="text/javascript"&gt; var d=new Date(); var month=new Array(12); month[0]="January"; month[1]="February"; month[2]="March"; month[3]="April"; month[4]="May"; month[5]="June"; month[6]="July"; month[7]="August"; month[8]="September"; month[9]="October"; month[10]="November"; month[11]="December"; document.write("The month is " + month[d.getMonth()]);&lt;/script&gt;运行结果：var d=new Date,month=new Array(12);month[0]="January",month[1]="February",month[2]="March",month[3]="April",month[4]="May",month[5]="June",month[6]="July",month[7]="August",month[8]="September",month[9]="October",month[10]="November",month[11]="December";var getMonth=document.getElementById("getMonth");getMonth.innerText="The month is "+month[d.getMonth()]获取天数 getDate() 方法定义和用法getDate() 方法可返回月份的某一天。语法dateObject.getDate()返回值dateObject所指的月份中的某一天，使用本地时间。返回值是 1 ~ 31 之间的一个整数。实例 输出当前月份的日期1234&lt;script type="text/javascript"&gt; var d = new Date() document.write(d.getDate())&lt;/script&gt;运行结果：var d=new Date,getHours1=document.getElementById("getDate0");getDate0.innerText=d.getDate()实例 输出具体日期变量中的天数1234&lt;script type="text/javascript"&gt; var birthday = new Date("July 21, 1983 01:15:00") document.write(birthday.getDate())&lt;/script&gt;运行结果：var birthday=new Date("July 21, 1983 01:15:00"),getHours1=document.getElementById("getHours1");getDate1.innerText=birthday.getDate()获取星期数 getDay() 方法定义和用法getDay() 方法可返回表示星期的某一天的数字。语法dateObject.getDay()返回值dateObject 所指的星期中的某一天，使用本地时间。返回值是 0（周日） 到 6（周六） 之间的一个整数。实例 查看今天星期几1234567891011121314151617181920212223242526272829303132333435&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;JavaScript Date对象获取星期getDay方法.html&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; var day = new Date().getDay(); switch (day) &#123; case 0: week = "Today it's Sunday"; break; case 1: week = "Today it's Monday"; break; case 2: week = "Today it's Tuesday"; break; case 3: week = "Today it's Wednesday"; break; case 4: week = "Today it's Thursday"; break; case 5: week = "Today it's Friday"; break; case 6: week = "Today it's Saturday"; break; &#125; document.write(week); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;运行结果：var day=(new Date).getDay();switch(day){case 0:week="Today it's Sunday";break;case 1:week="Today it's Monday";break;case 2:week="Today it's Tuesday";break;case 3:week="Today it's Wednesday";break;case 4:week="Today it's Thursday";break;case 5:week="Today it's Friday";break;case 6:week="Today it's Saturday"}var getDay1=document.getElementById("getDay1");getDay1.innerText=week实例 使用数字查看今天星期几123456789101112&lt;script type="text/javascript"&gt; var d = new Date() var weekday = new Array(7) weekday[0] = "Sunday" weekday[1] = "Monday" weekday[2] = "Tuesday" weekday[3] = "Wednesday" weekday[4] = "Thursday" weekday[5] = "Friday" weekday[6] = "Saturday" document.write("Today it is " + weekday[d.getDay()])&lt;/script&gt;运行结果：var d=new Date,weekday=new Array(7);weekday[0]="Sunday",weekday[1]="Monday",weekday[2]="Tuesday",weekday[3]="Wednesday",weekday[4]="Thursday",weekday[5]="Friday",weekday[6]="Saturday";var getDay2=document.getElementById("getDay2");getDay2.innerText="Today it is "+weekday[d.getDay()]返回小时的方法 getHours() 方法定义和用法getHours() 方法可返回时间的小时字段。语法dateObject.getHours()返回值dateObject 的小时字段，以本地时间显示。返回值是 0 （午夜） 到 23 （晚上 11 点）之间的一个整数。提示和注释注释：由 getHours() 返回的值是一个两位的数字。不过返回值不总是两位的，如果该值小于 10，则仅返回一位数字。实例 获取当前的小时数1234&lt;script type="text/javascript"&gt; var d = new Date() document.write(d.getHours())&lt;/script&gt;运行结果：var d=new Date,getHours1=document.getElementById("getHours1");getHours1.innerText=d.getHours()获取 小时 分钟 秒 毫秒数getHours() 可返回时间的小时字段。返回值是 0 （午夜） 到 23 （晚上 11 点）之间的一个整数。getMinutes() 方法可返回时间的分钟字段。返回值是 0 ~ 59 之间的一个整数。getSeconds() 方法可返回时间的秒。返回值是 0 ~ 59 之间的一个整数。getMilliseconds() 方法可返回时间的毫秒。返回值是 0 ~ 999 之间的一个整数。提示和注释由 getHours() 返回的值是一个两位的数字。不过返回值不总是两位的，如果该值小于 10，则仅返回一位数字由 getMinutes() 返回的值是一个两位的数字。不过返回值不总是两位的，如果该值小于 10，则仅返回一位数字。由 getSeconds() 返回的值是一个两位的数字。不过返回值不总是两位的，如果该值小于 10，则仅返回一位数字。由 getMilliseconds() 返回的值是一个三位的数字。不过返回值不总是三位的，如果该值小于 100，则仅返回两位数字，如果该值小于 10，则仅返回一位数字。参考链接http://www.w3school.com.cn/jsref/jsref_obj_date.asp本文链接: JavaScript常用对象3 Date对象]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[下载百度翻译英文读音]]></title>
    <url>%2Fblog%2F9022bbc4%2F</url>
    <content type="text"><![CDATA[目录下载百度翻译英文读音使用html5 audio控件播放百度翻译读音链接说明实例 中文和朗读参考链接下载百度翻译英文读音链接如下，把你要查的单词替换成你要查找的单词，然后用浏览器打开,即可下载该该单词的读音。1http://fanyi.baidu.com/gettts?lan=en&amp;text=YouWord&amp;spd=5&amp;source=web使用html5 audio控件播放当然也可以添加audio标签，这样就可以放在网页中，点击即可播放：1&lt;audio src=&quot;http://fanyi.baidu.com/gettts?lan=en&amp;text=focus&amp;spd=5&amp;source=web&quot;&gt;&lt;/audio&gt;显示效果：buzhici单词和读音放在一行为了把单词和读音放在一行，我又套了一个表格在外面，这样比较美观。12345678&lt;table style=&quot;width: 30%;&quot;&gt; &lt;tr&gt; &lt;td&gt;focus&lt;/td&gt; &lt;td&gt; &lt;audio src=&quot;http://fanyi.baidu.com/gettts?lan=en&amp;text=focus&amp;spd=5&amp;source=web&quot; controls=&quot;controls&quot;&gt;focus&lt;/audio&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;不过在Markdown中插入表格的话，要把所有的html代码写在一行。不然表格和表格上的文本会出现很多空白行，所以最终的代码为：1&lt;table style="width: 30%;"&gt;&lt;tr&gt;&lt;td &gt;focus&lt;/td&gt;&lt;td&gt;&lt;audio src="http://fanyi.baidu.com/gettts?lan=en&amp;text=focus&amp;spd=5&amp;source=web" controls="controls"&gt;focus&lt;/audio&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;显示效果：focusfocus百度翻译读音链接说明12http://fanyi.baidu.com/gettts?lan=en&amp;text=focus&amp;spd=5&amp;source=webhttp://fanyi.baidu.com/gettts?lan=zh&amp;text=focus&amp;spd=5&amp;source=weblan 表示读音的方法en 表示英式读音zh 表示中式读音text 表示需要朗读的文本spd 表示朗读的速度source 这一项我不知道是什么意思实例 中文和朗读1234567891011121314&lt;table style="width: 30%;"&gt; &lt;tr&gt; &lt;td&gt;focus(en)&lt;/td&gt; &lt;td&gt; &lt;audio src="http://fanyi.baidu.com/gettts?lan=en&amp;text=focus&amp;spd=5&amp;source=web" controls="controls"&gt;focus&lt;/audio&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;小明(zh)&lt;/td&gt; &lt;td&gt; &lt;audio src="http://fanyi.baidu.com/gettts?lan=zh&amp;text=小明&amp;spd=5&amp;source=web" controls="controls"&gt;小明&lt;/audio&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/table效果如下：focus(en)focus小明(zh)focus参考链接https://www.v2ex.com/amp/t/393846http://www.w3school.com.cn/tags/tag_audio.asp本文链接: 下载百度翻译英文读音]]></content>
      <categories>
        <category>HTML</category>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo next 设置表格的宽度]]></title>
    <url>%2Fblog%2F51caa039%2F</url>
    <content type="text"><![CDATA[使用html表格标签即可,这样可以自定义样式。正确写法1&lt;table style="width: 50%;"&gt;&lt;tr&gt;&lt;th&gt;标题1&lt;/th&gt;&lt;th&gt;标题2&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;单元格1&lt;/td&gt;&lt;td&gt;单元格2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;显示效果:标题1标题2单元格1单元格2错误写法标题1标题2单元格1单元格2本文链接: hexo next 设置表格的宽度]]></content>
      <categories>
        <category>HTML</category>
        <category>表格</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo Coding无法部署：Coding 提示 Repo size exceeded quota 512M 仓库容量超限 512M]]></title>
    <url>%2Fblog%2F39481c48%2F</url>
    <content type="text"><![CDATA[目录问题描述解决方案登录coding 清空仓库重新部署重新开启pages服务重新绑定域名问题描述今天部署到coding的时候，我又无法部署了，说我超出了容量(512M),我不可能写了那么多东西,我很奇怪。12345678910Coding 提示: Repo size exceeded quota: 512M (100.02%).仓库容量超限: 512M (100.02%)， 查看您的会员计划: https://coding.net/vip......fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: Coding 提示: Repo size exceeded quota: 512M (100.02%).仓库容量超限: 512M (100.02%)， 查看您的会员计划: https://coding.net/vip......解决方案登录coding 清空仓库登录到coding.net,打开你的仓库，点击设置-&gt;仓库设置-&gt;清空仓库。重新部署站点目录下，打开git-bash 输入命令hexo clean&amp;&amp;hexo g&amp;&amp;hexo d重新部署，部署后,点开设置-&gt;项目预览，可以看到我这次推送占用的容量为：这个Git仓库你每部署(推送)一次,就会占用一些容量。推送多了就会超出容量限制(512M)了，所以还是不要频繁部署。重新开启pages服务清空仓库后，pages服务默认关掉了，需要重新开启,点击代码-&gt;Pages服务。然后开启Pages服务：重新绑定域名开启服务后，就可以使用Coding默认的域名(https://用户名.coding.me)来访问了。如果使用coding的默认域名的话到这里就可以了。如果之前绑定了自己买的域名的话，清空仓库后，之前绑定的域名也失效了，需要重新绑定。但是奇怪的是，我在coding上一直绑定不上。也不知道为什么，我猜是域名解析的问题，所以我到万网上，先删除coding和github的解析，然后在重新添加Coding的解析。然后回到Coding.net上绑定域名，神奇的是，这样就可以绑定上了，最后在重新添加github的解析就行了。本文链接: hexo Coding无法部署：Coding 提示 Repo size exceeded quota 512M 仓库容量超限 512M]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaScript常用对象1 Window对象]]></title>
    <url>%2Fblog%2F7d3bc6dd%2F</url>
    <content type="text"><![CDATA[目录JavaScript Window 对象方法键盘焦点方法focus() 方法实例 把焦点移到新窗口blur() 方法实例 从新窗口移开焦点定时器方法setInterval() 方法clearInterval() 方法实例 使用 setInterval() 和 clearInterval()setTimeout() 方法实例 简单的计时实例 另一个简单的计时实例 递归无限计时实例 时钟clearTimeout() 方法实例 带有停止按钮的计时程序打开关闭窗口方法open() 方法实例 通过按钮来打开一个窗口实例 打开一个新窗口并设置该窗口的形状，坐标实例 打开多个窗口close() 方法实例 通过按钮打开和关闭浏览器窗口调整窗口大小方法resizeBy() 方法实例resizeTo() 方法实例滚动页面方法scrollBy() 方法实例 通过 scrollBy() 滚动文档scrollTo() 方法实例 回到顶部移动窗口方法moveBy() 方法实例 移动浏览器窗体弹窗方法弹窗警告框 alert()方法实例输入框 prompt() 方法实例confirm() 方法实例其他方法createPopup() 方法print() 方法实例 打印当前html页面参考链接JavaScript Window 对象方法键盘焦点方法方法描述focus()把键盘焦点给予一个窗口。blur()把键盘焦点从顶层窗口移开。读音单词读音focusfocusfunction paly_audioID20181110171813(){var a=document.getElementById("audioID20181110171813");null!=a&&a.play()}function paly_audioID20181110171747(){var a=document.getElementById("audioID20181110171747");null!=a&&a.play()}focus() 方法定义和用法focus() 方法可把键盘焦点给予一个窗口。语法window.focus()下面的例子可确保新的窗口得到焦点：实例 把焦点移到新窗口1234567&lt;script type="text/javascript"&gt; //打开新窗体 myWindow = window.open('', '', 'width=200,height=100') myWindow.document.write("This is 'myWindow'") //让新窗体获取焦点 myWindow.focus()&lt;/script&gt;运行该代码，浏览器将会打开一个新的窗体，让该窗体获取到焦点，然后在该窗体中写入This is &#39;myWindow&#39;:blur() 方法定义和用法blur() 方法可把键盘焦点从顶层窗口移开。语法window.blur()说明方法 blur() 可把键盘焦点从顶层浏览器窗口移走，整个窗口由 Window 对象指定。哪个窗口最终获得键盘焦点并没有指定。提示和注释注释：在某些浏览器上，该方法可能无效。实例 从新窗口移开焦点12345678910111213141516&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;JS Windowns对象blur方法&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/javascript"&gt; //打开一个窗体 myWindow = window.open('', '', 'width=200,height=100'); //写入页面中 myWindow.document.write("This is 'myWindow'"); //当前顶层窗体失去焦点, myWindow.blur();//让新窗体得到焦点 &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;我看不出有什么效果，后续再补上吧。定时器方法方法描述setInterval()按照指定的周期（以毫秒计）来调用函数或计算表达式。clearInterval()取消由 setInterval() 设置的 timeout。setTimeout()在指定的毫秒数后调用函数或计算表达式。clearTimeout()取消由 setTimeout() 方法设置的 timeout。读音：单词读音Intervalfunction paly_audioID20181111121031(){var a=document.getElementById("audioID20181111121031");null!=a&&a.play()}setInterval() 方法定义和用法setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。语法setInterval(code,millisec[,&quot;lang&quot;])参数描述code必需。要调用的函数或要执行的代码串。millisec必须。周期性执行或调用 code 之间的时间间隔，以毫秒计。返回值一个可以传递给 Window.clearInterval() 从而取消对 code 的周期性执行的值。clearInterval() 方法定义和用法clearInterval() 方法可取消由 setInterval() 设置的 timeout。clearInterval() 方法的参数必须是由 setInterval() 返回的 ID 值。语法clearInterval(id_of_setinterval)参数描述id_of_setinterval由 setInterval() 返回的 ID 值。实例 使用 setInterval() 和 clearInterval()12345678910111213141516171819202122&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;JS Windows对象setInterval clearInterval方法&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 函数输出框 --&gt; &lt;input type="text" id="clock" size="50" /&gt; &lt;script language=javascript&gt; //每隔50毫秒调用一次clock()函数,并把id记录在变量id_of_setinterval中 var id_of_setinterval = self.setInterval("clock()", 50) //被周期调用的函数 function clock() &#123; var t = new Date() //写入日期 document.getElementById("clock").value = t &#125; &lt;/script&gt; &lt;!-- 使用id_of_setinterval来停止周期调用 --&gt; &lt;button onclick="id_of_setinterval=window.clearInterval(id_of_setinterval)"&gt;Stop interval&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;setTimeout() 方法定义和用法setTimeout() 方法 用于在指定的毫秒数后调用函数或计算表达式 。语法setTimeout(code,millisecond)参数描述code必需。要调用的函数后要执行的 JavaScript 代码串millisecond必需。在执行代码前需等待的毫秒数。提示和注释提示： setTimeout() 只执行 code 一次 。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。读音单词读音millisecondfunction paly_audioID20181110173032(){var a=document.getElementById("audioID20181110173032");null!=a&&a.play()}实例 简单的计时123456789101112131415&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;JS Windows对象setTimeOut方法&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; function timedMsg() &#123; //在5000毫秒后，也就是5秒后调用&quot;alert();&quot; var t = setTimeout(&quot;alert(&apos;3秒钟到啦&apos;)&quot;, 3000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;3秒钟后弹出警告框&quot; onClick=&quot;timedMsg()&quot;&gt;&lt;/body&gt;&lt;/html&gt;运行结果：实例 另一个简单的计时1234567891011121314151617181920&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function timedText() &#123; var t1 = setTimeout("document.getElementById('txt').value='1 seconds!'", 1000) var t2 = setTimeout("document.getElementById('txt').value='2 seconds!'", 2000) var t3 = setTimeout("document.getElementById('txt').value='3 seconds!'", 3000) var t4 = setTimeout("document.getElementById('txt').value='4 seconds!'", 4000) var t5 = setTimeout("document.getElementById('txt').value='5 seconds!'", 5000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt; &lt;input type="button" value="开始计时:" onClick="timedText()"&gt; &lt;input type="text" id="txt"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;运行结果：实例 递归无限计时123456789101112131415161718192021222324&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;JS Windows对象setTimeOut方法无限计时&lt;/title&gt; &lt;script type="text/javascript"&gt; var c = 0 var t function timedCount() &#123; document.getElementById('txt').value = c c = c + 1 //递归 t = setTimeout("timedCount()", 1000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt; &lt;!-- 按钮 --&gt; &lt;input type="button" value="开始计时！" onClick="timedCount()"&gt; &lt;!-- 输出框 --&gt; &lt;input type="text" id="txt"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;运行结果：实例 时钟1234567891011121314151617181920212223242526&lt;html&gt;&lt;head&gt; &lt;title&gt;JS Windows对象setTimeOut方法时钟&lt;/title&gt; &lt;script type="text/javascript"&gt; function startTime() &#123; var today = new Date() var h = today.getHours() var m = today.getMinutes() var s = today.getSeconds() // add a zero in front of numbers&lt;10 m = checkTime(m) s = checkTime(s) document.getElementById('txt').innerHTML = h + ":" + m + ":" + s t = setTimeout('startTime()', 500) &#125; function checkTime(i) &#123; //如果该数小于10,在前面补上0 if (i &lt; 10) &#123; i = "0" + i &#125; return i &#125; &lt;/script&gt;&lt;/head&gt;&lt;body onload="startTime()"&gt; &lt;div id="txt"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;运行结果：clearTimeout() 方法定义和用法clearTimeout() 方法可取消由 setTimeout() 方法设置的 timeout。语法clearTimeout(id_of_settimeout)参数描述id_of_settimeout由 setTimeout() 返回的 ID 值。该值标识要取消的延迟执行代码块。实例 带有停止按钮的计时程序12345678910111213141516171819202122232425&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;JS Windows对象setTimeOut方法clearTimeOUt方法&lt;/title&gt; &lt;script type="text/javascript"&gt; var c = 0; var id_of_settimeout; function timedCount() &#123; document.getElementById('txt').value = c c = c + 1 id_of_settimeout = setTimeout("timedCount()", 1000) &#125; function stopCount() &#123; clearTimeout(id_of_settimeout) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt; &lt;input type="button" value="开始计时" onClick="timedCount()"&gt; &lt;input type="text" id="txt"&gt; &lt;input type="button" value="停止计时" onClick="stopCount()"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;运行结果：打开关闭窗口方法方法描述open()打开一个新的浏览器窗口或查找一个已命名的窗口。close()关闭浏览器窗口。open() 方法定义和用法open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。语法window.open(URL,name,features,replace);参数描述URL：一个可选的字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者它的值是空字符串，那么新窗口就不会显示任何文档。name：一个可选的字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 a 和 form 的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。features: 一个可选的字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。详细说明如下：width=pixels 窗口的文档显示区的宽度。以像素计。height=pixels 窗口文档显示区的高度。以像素计。left=pixels 窗口的 x 坐标。以像素计。top=pixels 窗口的 y 坐标。channelmode=yes|no|1|0 是否使用剧院模式显示窗口。默认为 no。directories=yes|no|1|0 是否添加目录按钮。默认为 yes。fullscreen=yes|no|1|0 是否使用全屏模式显示浏览器。默认是 no。处于全屏模式的窗口必须同时处于剧院模式。location=yes|no|1|0 是否显示地址字段。默认是 yes。menubar=yes|no|1|0 是否显示菜单栏。默认是 yes。resizable=yes|no|1|0 窗口是否可调节尺寸。默认是 yes。scrollbars=yes|no|1|0 是否显示滚动条。默认是 yes。status=yes|no|1|0 是否添加状态栏。默认是 yes。titlebar=yes|no|1|0 是否显示标题栏。默认是 yes。toolbar=yes|no|1|0 是否显示浏览器的工具栏。默认是 yes。replace: 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true：URL 替换浏览历史中的当前条目。false：URL 在浏览历史中创建新的条目。提示和注释重要事项：请不要混淆方法 Window.open() 与方法 Document.open()，这两者的功能完全不同。为了使您的代码清楚明白，请使用 Window.open()，而不要使用 open()。读音单词读音featuresfunction paly_audioID20181110173318(){var a=document.getElementById("audioID20181110173318");null!=a&&a.play()}实例 通过按钮来打开一个窗口1234567891011121314&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Window对象 open方法&lt;/title&gt; &lt;script&gt; function open_win() &#123; window.open("http://www.lansheng.net.cn") &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=button value="打开我的博客首页" onclick="open_win()" /&gt;&lt;/body&gt;&lt;/html&gt;实例 打开一个新窗口并设置该窗口的形状，坐标123456789101112131415161718&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;script type="text/javascript"&gt; function opentest() &#123; //打开新的页面,url为空,窗口宽度200,窗口高度100,x坐标100像素,y坐标100像素 myWindow = window.open('', '', 'width=200,height=100,left=100,top=100') myWindow.document.write("This is 'myWindow'") myWindow.focus() &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=button value="打开新页面" onclick="opentest()" /&gt;&lt;/body&gt;&lt;/html&gt;运行结果：实例 打开多个窗口12window.open("http://www.lansheng.net.cn/")window.open("http://www.w3school.com.cn/")close() 方法定义和用法close() 方法用于关闭浏览器窗口。语法1window.close()说明方法 close() 将关闭有 window 指定的顶层浏览器窗口。某个窗口可以通过调用 self.close() 或只调用 close() 来关闭其自身。只有通过 JavaScript 代码打开的窗口才能够由 JavaScript 代码关闭。这阻止了恶意的脚本终止用户的浏览器。实例 通过按钮打开和关闭浏览器窗口123456789101112131415161718192021&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function closeWin() &#123; myWindow.close() &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/javascript"&gt; function openWin() &#123; myWindow = window.open('', 'myWindow', 'width=200,height=100,left=200,top=200') myWindow.document.write("This is 'myWindow'") &#125; &lt;/script&gt;&lt;input type="button" value="打开'myWindow'" onclick="openWin()" /&gt; &lt;input type="button" value="关闭'myWindow'" onclick="closeWin()" /&gt;&lt;/body&gt;&lt;/html&gt;点击打开按钮：点击关闭按钮：调整窗口大小方法方法描述resizeBy()按照指定的像素调整窗口的大小。resizeTo()把窗口的大小调整到指定的宽度和高度。resizeBy() 方法定义和用法resizeBy() 方法用于根据指定的像素来调整窗口的大小。语法resizeBy(width,height)参数描述width必需。要使窗口宽度增加的像素数。可以是正、负数值。height可选。要使窗口高度增加的像素数。可以是正、负数值。实例1234567891011121314151617181920&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;window对象 resizeBy方法.html&lt;/title&gt; &lt;script type="text/javascript"&gt; function resizeWindow() &#123; //窗体宽度和高度减少100像素, openwin.resizeBy(-100, -100); &#125; function openWin() &#123; openwin=window.open('','','width=200,height=200,left=200,top=200'); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type="button" onclick="openWin()" value="open window"&gt; &lt;input type="button" onclick="resizeWindow()" value="Resize window"&gt;&lt;/body&gt;&lt;/html&gt;open window：Resize window:resizeTo() 方法定义和用法resizeTo() 方法用于把窗口大小调整为指定的宽度和高度。语法resizeTo(width,height)参数描述width必需。想要调整到的窗口的宽度。以像素计。height可选。想要调整到的窗口的高度。以像素计。实例12345678910111213141516171819&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Window对象 resizeTo方法.html&lt;/title&gt; &lt;script type="text/javascript"&gt; function resizeWindow() &#123; openwin.resizeTo(100, 300); &#125; function openWindow() &#123; openwin=window.open('','','width=200,height=200,left=200,top=100'); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type="button" onclick="openWindow()" value="opent window"&gt; &lt;input type="button" onclick="resizeWindow()" value="ResizeTo window"&gt;&lt;/body&gt;&lt;/html&gt;运行结果opent window：ResizeTo window：滚动页面方法方法描述scrollBy()按照指定的像素值来滚动内容。scrollTo()把内容滚动到指定的坐标。scrollBy() 方法定义和用法scrollBy() 方法可把内容滚动指定的像素数。语法scrollBy(xnum,ynum)参数描述xnum必需。把文档向右滚动的像素数。ynum必需。把文档向下滚动的像素数。实例 通过 scrollBy() 滚动文档12345678910111213141516171819&lt;html&gt;&lt;head&gt; &lt;title&gt;Windown对象 scrollBy方法.html&lt;/title&gt; &lt;script type="text/javascript"&gt; function scrollWindow() &#123; window.scrollBy(500, 500) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type="button" onclick="scrollWindow()" value="Scroll" /&gt; &lt;br&gt; &lt;script&gt; for (var i = 0; i &lt; 200; i++) &#123; document.write(i + "&lt;br&gt;"); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;运行结果初始状态：滚动后：scrollTo() 方法定义和用法scrollTo() 方法可把内容滚动到指定的坐标。语法scrollTo(xpos,ypos)参数描述xpos必需。要在窗口文档显示区左上角显示的文档的 x 坐标。ypos必需。要在窗口文档显示区左上角显示的文档的 y 坐标。实例 把内容滚动到指定坐标12345678910111213141516171819&lt;html&gt;&lt;head&gt; &lt;title&gt;Windown对象 scrollTo方法.html&lt;/title&gt; &lt;script type="text/javascript"&gt; function scrollWindow() &#123; window.scrollTo(0, 1000) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type="button" onclick="scrollWindow()" value="Scroll" /&gt; &lt;br&gt; &lt;script&gt; for (var i = 0; i &lt; 200; i++) &#123; document.write(i + "&lt;br&gt;"); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;滚动之前：滚动之后:实例 回到顶部12345678910111213141516171819&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Windown对象 scrollTo方法.html&lt;/title&gt; &lt;script type="text/javascript"&gt; function scrollWindow() &#123; window.scrollTo(0, 0) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; for (var i = 0; i &lt; 100; i++) &#123; document.write(i + "&lt;br&gt;"); &#125; &lt;/script&gt; &lt;input type="button" onclick="scrollWindow()" value="回到首部" /&gt;&lt;/body&gt;&lt;/html&gt;文章底部按钮：回到顶部移动窗口方法方法描述moveBy()可相对窗口的当前坐标把它移动指定的像素。moveTo()把窗口的左上角移动到一个指定的坐标。moveBy() 方法定义和用法moveBy() 把窗口从当前的坐标移动指定的像素。语法12window.moveBy(x,y)&gt;参数描述x要把窗口右移的像素数y要把窗口下移的像素数实例 移动浏览器窗体123456789101112131415161718192021&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Window对象moveBy方法&lt;/title&gt; &lt;script type="text/javascript"&gt; function moveWin() &#123; myWindow.moveBy(200, 0) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/javascript"&gt; function openWin() &#123; myWindow = window.open('','','width=200,height=100,top=200') myWindow.document.write("This is 'myWindow'") &#125; &lt;/script&gt; &lt;input type="button" value="open 'myWindow'" onclick="openWin()" /&gt; &lt;input type="button" value="Move 'myWindow'" onclick="moveWin()" /&gt;&lt;/body&gt;&lt;/html&gt;移动前移动后：弹窗方法方法描述alert()显示带有一段消息和一个确认按钮的警告框。prompt()显示可提示用户输入的对话框。confirm()显示带有一段消息以及确认按钮和取消按钮的对话框。读音列名列名alertpromptconfirmfunction paly_audioID20181110173704(){var a=document.getElementById("audioID20181110173704");null!=a&&a.play()}function paly_audioID20181110173634(){var a=document.getElementById("audioID20181110173634");null!=a&&a.play()}function paly_audioID20181110173541(){var a=document.getElementById("audioID20181110173541");null!=a&&a.play()}弹窗警告框 alert()方法定义和用法alert() 方法用于显示带有一条指定消息和一个 OK 按钮的警告框。语法1alert(message)参数描述message要在 window 上弹出的对话框中显示的纯文本（而非 HTML 文本）实例1234567891011121314151617181920&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;JS Windows对象alert方法&lt;/title&gt; &lt;script type="text/javascript"&gt; function display_alert() &#123; alert("I am an alert box!!") &#125; function disp_alert() &#123; alert("再打个招呼。这里演示了" + "\n" + "如何在消息框中添加折行。") &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt; &lt;input type="button" onclick="display_alert()" value="Display alert box" /&gt; &lt;input type="button" onclick="disp_alert()" value="显示折行消息框" /&gt; &lt;/center&gt;&lt;/body&gt;&lt;/html&gt;运行结果：输入框 prompt() 方法定义和用法prompt() 方法用于显示可提示用户进行输入的对话框。语法12prompt(text,defaultText)&gt;参数描述text可选。要在对话框中显示的纯文本（而不是 HTML 格式的文本）。defaultText可选。默认的输入文本。说明如果用户单击提示框的取消按钮，则返回 null。如果用户单击确认按钮，则返回输入字段当前显示的文本。在用户点击确定按钮或取消按钮把对话框关闭之前，它将阻止用户对浏览器的所有输入。在调用 prompt() 时，将暂停对 JavaScript 代码的执行，在用户作出响应之前，不会执行下一条语句。实例123456789101112131415161718&lt;html&gt;&lt;head&gt; &lt;title&gt;Windown对象prompt方法.html&lt;/title&gt; &lt;script type="text/javascript"&gt; function disp_prompt() &#123; var name = prompt("Please enter your name", "xiaoming") if (name != null &amp;&amp; name != "") &#123; document.write("Hello " + name + "!") &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt; &lt;input type="button" onclick="disp_prompt()" value="Display a prompt box" /&gt; &lt;/center&gt;&lt;/body&gt;&lt;/html&gt;点击按钮，输入xiaoming(默认)：如果点击确定：如果点击取消， prompt()方法返回null,显示输入错误：confirm() 方法定义和用法confirm() 方法用于显示一个带有指定消息和 OK 及取消按钮的对话框。语法12confirm(message)&gt;参数描述message要在 window 上弹出的对话框中显示的纯文本（而非 HTML 文本）说明如果用户点击确定按钮，则 confirm() 返回 true。如果点击取消按钮，则 confirm() 返回 false。在用户点击确定按钮或取消按钮把对话框关闭之前，它将阻止用户对浏览器的所有输入。在调用 confirm() 时，将暂停对 JavaScript 代码的执行，在用户作出响应之前，不会执行下一条语句。实例12345678910111213141516171819202122&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Windown对象 confirm方法.html&lt;/title&gt; &lt;script type="text/javascript"&gt; function disp_confirm() &#123; var r = confirm("Press a button") if (r == true) &#123; document.write("You pressed OK!") &#125; else &#123; document.write("You pressed Cancel!") &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt; &lt;input type="button" onclick="disp_confirm()" value="Display a confirm box" /&gt; &lt;/center&gt;&lt;/body&gt;&lt;/html&gt;点击按钮：如果点确认：如果点取消：其他方法方法描述createPopup()创建一个 pop-up 窗口。print()打印当前窗口的内容。createPopup() 方法定义和用法createPopup() 方法用于创建一个 pop-up 窗口。pop-up窗口就是弹出窗口，经常用于弹窗广告窗口。语法12window.createPopup()&gt;注意： 只有 IE 浏览器支持 createPopup() 方法，其他浏览器都不支持。既然这样，就不给出实例了，珍爱生命远离IEprint() 方法定义和用法print() 方法用于打印当前窗口的内容。调用 print() 方法所引发的行为就像用户单击浏览器的打印按钮。通常，这会产生一个对话框，让用户可以取消或定制打印请求。语法12window.print()&gt;实例 打印当前html页面1234567891011121314&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Window对象print()方法.html&lt;/title&gt; &lt;script type="text/javascript"&gt; function printpage() &#123; window.print() &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type="button" value="Print this page" onclick="printpage()" /&gt;&lt;/body&gt;&lt;/html&gt;运行结果：参考链接JavaScript Window 对象JavaScript Window 对象 setTimeOut方法本文链接: JavaScript常用对象1 Window对象]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo next 解决手机端表格英文显示错误 让td标签中英文按单词换行]]></title>
    <url>%2Fblog%2F200a993a%2F</url>
    <content type="text"><![CDATA[目录问题描述修改next主题样式文件写表格时用空格分隔每个单词实例 错误写法实例 正确写法参考链接问题描述最近写完文章后部署后，在手机端查看的时候，我发现英文显示不正确了，其他栏目特别大，英文行压缩成小小的一列，看起来很别扭，如下所示：修改next主题样式文件修改样式文件,打开next主题样式文件：E:\Blog\bolg5\themes\next\source\css\_custom\custom.styl,在其中添加下面的CSS代码：123td&#123; word-break: normal;&#125;然后hexo clean&amp;&amp;hexo g&amp;&amp;hexo d部署，在手机端打开就可以正常显示了。写表格时用空格分隔每个单词在表格太长的英文单词不要写成一串，中间用空格分隔开，这样手机端就能更好的从空格处换行。例如对于函数:fontcolor(colorValue)这种写法所有的单词写成一串，浏览器会把它当成一个单词,这样移动端显示的时候，无法拆分这个几个单词，这样就会显示在一行,从而让这一列特别大，挤占其他列的空间。应该用空格把单词分开写成fontcolor( colorValue )，这样就可以正确的换行了。实例 错误写法123456|方法|描述|结果||:--|:--||`fontcolor(colorValue)`|字符串设置颜色|在字符串首尾加上 HTML的&amp;lt;font color=&quot;colorValue&quot;&amp;gt;&amp;lt;/font&amp;gt; 标记对, 设置 color属性的值为参数colorValuer， color属性可以是颜色的十六进制值,也可以是颜色的预定义名||`fontsize(sizeValue)`|字符串设置大小|在字符串首尾加上 HTML的&amp;lt;font size=&quot;sizeValue&quot;&amp;gt;&amp;lt;/font&amp;gt; 标记对,并设置size属性的值为参数sizeValue||`anchor(name)`|创建 HTML 锚|在字符串首尾加上 HTML的 &amp;lt;a name=&quot;name&quot;&amp;gt;&amp;lt;/a&amp;gt; 标记对||`link(url)`|创建HTML超链接|在字符串首尾加上 HTML的 &amp;lt;a href=&quot;url&quot;&amp;gt;&amp;lt;/a&amp;gt; 标记对|显示效果(注意用手机打开这篇文章)：方法描述结果fontcolor(colorValue)字符串设置颜色在字符串首尾加上 HTML的&lt;font color=”colorValue”&gt;&lt;/font&gt; 标记对, 设置 color属性的值为参数colorValuer， color属性可以是颜色的十六进制值,也可以是颜色的预定义名fontsize(sizeValue)字符串设置大小在字符串首尾加上 HTML的&lt;font size=”sizeValue”&gt;&lt;/font&gt; 标记对,并设置size属性的值为参数sizeValueanchor(name)创建HTML锚在字符串首尾加上 HTML的 &lt;a name=”name”&gt;&lt;/a&gt; 标记对link(url)创建HTML超链接在字符串首尾加上 HTML的 &lt;a href=”url”&gt;&lt;/a&gt; 标记对实例 正确写法123456|方法|描述|结果||:--|:--||`fontcolor( colorValue )`|字符串设置颜色|在字符串首尾加上 HTML的&amp;lt;font color=&quot;colorValue&quot;&amp;gt;&amp;lt;/font&amp;gt; 标记对, 设置 color属性的值为参数colorValuer， color属性可以是颜色的十六进制值,也可以是颜色的预定义名||`fontsize( sizeValue )`|字符串设置大小|在字符串首尾加上 HTML的&amp;lt;font size=&quot;sizeValue&quot;&amp;gt;&amp;lt;/font&amp;gt; 标记对,并设置size属性的值为参数sizeValue||`anchor( name )`|创建 HTML 锚|在字符串首尾加上 HTML的 &amp;lt;a name=&quot;name&quot;&amp;gt;&amp;lt;/a&amp;gt; 标记对||`link( url )`|创建HTML超链接|在字符串首尾加上 HTML的 &amp;lt;a href=&quot;url&quot;&amp;gt;&amp;lt;/a&amp;gt; 标记对|显示效果：方法描述结果fontcolor( colorValue )字符串设置颜色在字符串首尾加上 HTML的 &lt;font color=”colorValue”&gt;&lt;/font&gt; 标记对, 设置 color属性的值为参数colorValuer， color属性可以是颜色的十六进制值,也可以是颜色的预定义名fontsize( sizeValue )字符串设置大小在字符串首尾加上 HTML的&lt;font size=”sizeValue”&gt;&lt;/font&gt; 标记对,并设置size属性的值为参数sizeValueanchor( name )创建HTML锚在字符串首尾加上 HTML的 &lt;a name=”name”&gt;&lt;/a&gt; 标记对link(url)创建HTML超链接在字符串首尾加上 HTML的 &lt;a href=”url”&gt;&lt;/a&gt; 标记对css word-break属性word-break属性用来规定自动换行的处理方式，它不仅可以让浏览器在半角空格或连字符的后面换行，也可以实现在任意位置换行，可选值有 normal | keep-all | break-all，默认值为 normal。normal 表示根据语言自身的换行规则，确定换行方式，中文将容器边界处的汉字换到下一行，西方文字则将整个单词换到下一行；keep-all 表示不允许把单词截断，只能在半角空格或连字符处换行；break-all 允许把单词截断，在单词内换行。white-space、word-wrap、word-break的区别white-space: nowrap 让一段文本不换行，在一行内显示。word-wrap: normal 使一个单词或URL不折行，在一行内显示。word-wrap: break-word 在容器边界自动换行，会把整个长单词看成一个整体放到下一行，而不会把单词截断。word-break: break-all 在行末宽度不够显示整个单词时，会把单词截断。参考链接td自动换行时不切断英文单词CSS 单词换行 word-break属性本文链接: hexo next 解决手机端表格英文显示错误 让td标签中英文按单词换行]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaScript常用对象2 String对象]]></title>
    <url>%2Fblog%2Ff52e78d1%2F</url>
    <content type="text"><![CDATA[目录String对象属性实例 获取字符串对象的长度String对象方法在字符串两端添加html标记的方法实例获取字符串中某个下标对应的字符字符串连接方法查找子字符串的下标方法实例：从一个邮箱地址中查找@所在的位置解码Unicode值实例比较两个字符串是否相等大小写转换方法正则表达式相关方法search()方法match()方法实例：不使用正则表达式实例2：使用正则全局匹配replace()方法实例 使用字符串替换匹配文本实例 使用正则表达式进行替换实例 替换所有正则匹配的字串实例 使用函数：把字符串中所有单词的首字母都转换为大写split() 方法实例：使用空格和空字符进行分割实例 字符串分割为字符实例:使用正则表达式进行分割实例：分隔符位于首部和尾部的情况截取子串相关方法slice() 方法实例 提取字符串中从位置 6 开始的所有字符实例 提取字符串中从位置 6 到位置 11 的所有字符实例 提取字符串中从位置 -1 到位置 -6 的所有字符substring() 方法实例substr() 方法实例对象方法toString() 方法valueOf() 方法String 对象描述参考链接String对象是动态对象,需要创建对象实例后才能引用其属性和方法。但是,由于在 JavaScript中可以将用单引号或双引号括起来的一个字符串当作一个字符串对象的实例,所以可以直接在某个字符串后面加上点“.”去调用Srng对象的属性和方法。下面对Strng对象的常用属性和方法进行详细介绍。String对象属性String对象最常用的属性是 length,该属性用于返回String对象的长度。 length属性的语法格式如下1string. length返回值:一个只读的整数,它代表指定字符串中的字符数,每个汉字按一个字符计算实例 获取字符串对象的长度12345678910&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; window.alert("中文123abc"+" 有 "+"中文123abc".length+" 个字符"); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;运行结果：1中文123abc有8个字符String对象方法String对象提供了很多用于对字符串进行操作的方法,如下表所示。在字符串两端添加html标记的方法方法描述结果italics()使用斜体显示字符串在字符串首尾加上 HTML的 &lt;i&gt;&lt;/i&gt; 标记对bold()使用粗体显示字符串在字符串首尾加上 HTML的 &lt;b&gt;&lt;/b&gt; 标记对big()用大号字体显示字符串在字符串首尾加上 HTML的 &lt;big&gt;&lt;/big&gt; 标记对small()使用小字号来显示字符串在字符串首尾加上 HTML的 &lt;small&gt;&lt;/small&gt; 标记对strike()使用删除线来显示字符串在字符串首尾加上 HTML的 &lt;strike&gt;&lt;/strike&gt; 标记对fixed()以打字机文本显示字符串在字符串首尾加上 HTML的 &lt;fixed&gt;&lt;/fixed&gt; 标记对blink()显示闪动字符串在字符串首尾加上 HTML的 &lt;blink&gt;&lt;/blink&gt; 标记对sup()把字符串显示为上标在字符串首尾加上 HTML的 &lt;sup&gt;&lt;/sup&gt; 标记对sub()把字符串显示为下标在字符串首尾加上 HTML的 &lt;sub&gt;&lt;/sub&gt; 标记对fontcolor( colorValue)字符串设置颜色在字符串首尾加上 HTML的 &lt;font color=”colorValue”&gt;&lt;/font&gt; 标记对, 设置 color属性的值为参数colorValuer， color属性可以是颜色的十六进制值,也可以是颜色的预定义名fontsize( sizeValue)字符串设置大小在字符串首尾加上 HTML的 &lt;font size=”sizeValue”&gt;&lt;/font&gt; 标记对,并设置size属性的值为参数sizeValueanchor( name)创建 HTML 锚在字符串首尾加上 HTML的 &lt;a name=”name”&gt;&lt;/a&gt; 标记对link( url)创建HTML超链接在字符串首尾加上 HTML的 &lt;a href=”url”&gt;&lt;/a&gt; 标记对这里blink标签好像没有闪烁，我在火狐和谷歌浏览器中都打开了，都没有看到闪烁的效果。实例1234567891011121314151617181920212223242526272829303132333435363738394041&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;style&gt; .rightalign &#123; text-align: right; &#125; code &#123; color: #fc6423; background: #fbf7f8; margin: 2px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/javascript"&gt; var str = "显示效果"; document.write("&lt;table border=\"1\"&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;斜体:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.italics()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.italics() + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;粗体:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.bold()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.bold() + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;大号字:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.big()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.big() + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;小号字:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.small()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.small() + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;删除线:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.strike()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.strike() + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;打字机文本:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.fixed()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.fixed() + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;闪烁文本:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.blink()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.blink() + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;上标:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.sup()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;"+ "参考文本 "+str.sup() + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;下标:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.sub()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.sub() + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;红色字体:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.fontcolor(\"red\")&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.fontcolor("red") + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;字体大小:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.fontsize(18)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.fontsize(18) + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;锚点:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.anchor(\"锚点\")&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.anchor("锚点") + "&lt;/td&gt;"); document.write("&lt;tr&gt;&lt;td class=\"rightalign\"&gt;超链接:&lt;/td&gt;&lt;td class=\"rightalign\"&gt;&lt;code&gt;str.link(\"http://www.lansheng.net.cn\")&lt;/code&gt;&lt;/td&gt;&lt;td&gt;" + "参考文本 "+str.link("http://www.lansheng.net.cn") + "&lt;/td&gt;"); document.write("&lt;/table&gt;"); for (var i = 0; i &lt; 30; i++) &#123; document.write("&lt;br&gt;"); &#125; &lt;/script&gt; &lt;a href="#锚点"&gt;跳转到锚点&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;显示效果获取字符串中某个下标对应的字符方法描述charAt(index)返回字符串对象中指定索引号的字符组成的字符串,位置的有效值为0到字符串长度减1的数值。一个字符串的第一个字符的索引位置为0,第二个字符位于索引位置1,依此类推。当指定的索引位置超出有效范围时,charAt()方法返回一个空字符串charCodeAt(index)返回一个整数,该整数表示字符串对象中指定位置处的字符的Unicode编码字符串连接方法方法描述concat(sl,…,sn)将调用方法的字符串与指定字符串结合,结果返回新字符串略查找子字符串的下标方法方法描述indexOf(patterm)返回字符串中包含 pattern所代表参数第一次出现的位置值。 如果该字符串中不包含要查找的模式,则返回-1indexOf(patterm, startIndex)返回字符串中包含 pattern所代表参数最后一次出现的位置值,如果该字符串中不包含要查找的模式,则返回-1, 只是检索从 startIndex指定的位置开始lastIndexOf(pattern)返回字符串中包含 pattern所代表参数最后一次出现的位置值, 如果该字符串中不包含要查找的模式,则返回-1lastIndexOf(pattern, startIndex)返回字符串中包含 patten所代表参数最后一次出现的位置值, 如果该字符串中不包含要査找的模式,则返回-1,只是检索从 startIndex指定的位置开始实例：从一个邮箱地址中查找@所在的位置12345678910111213&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;JS String对象下标相关方法测试&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; var email="123456789@123.com"; document.write(email+"中第一个@123的下标为："+email.indexOf("@123")+"&lt;br&gt;"); document.write(email+"中最后一个123的开始下标为："+email.lastIndexOf("123")+"&lt;br&gt;"); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;运行结果，浏览器显示：12123456789@123.com中第一个@123的下标为：9123456789@123.com中最后一个123的开始下标为：10解码Unicode值方法描述fromCharCode()可接受一个指定的 Unicode 值，然后返回一个字符串实例12345&lt;script type="text/javascript"&gt; document.write(String.fromCharCode(72,69,76,76,79)) document.write("&lt;br /&gt;") document.write(String.fromCharCode(65,66,67))&lt;/script&gt;运行结果：12HELLOABC比较两个字符串是否相等方法描述localeCompare(s)用特定比较方法比较字符串与s字符串。如果字符串相等,则返回0,否则返回非0数字值大小写转换方法方法描述toLocaleLowerCase()把字符串转换为小写。toLocaleUpperCase()把字符串转换为大写。toLowerCase()把字符串转换为小写。toUpperCase()把字符串转换为大写。实例：省略正则表达式相关方法方法描述match()找到一个或多个正则表达式的匹配replace()替换与正则表达式匹配的子串search(regexp)检索与正则表达式相匹配的值split(separator, howmany)把一个字符串分割成字符串数组。javascript中的整个则表达式需要写在两个斜杠//之间search()方法定义和用法search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。语法stringObject.search(regexp)参数regexp: 该参数可以是需要在 stringObject 中检索的子串，也可以是需要检索的 RegExp 对象。注释：search() 对大小写敏感，要执行忽略大小写的检索，要在正则表达式式标记后追加标志 i，也就是使用：/正则表达式/i的形式，而不是使用/正则表达式/。返回值stringObject 中第一个与 regexp 相匹配的子串的起始位置。注释：如果没有找到任何匹配的子串，则返回 -1。说明search() 方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 stringObject 的第一个匹配的位置。实例1 返回字符串中字母的第一个匹配位置：123456&lt;script type="text/javascript"&gt; var str = "123456abc123456"; document.write(str + " 中第一个小写字母的起始下标: " + str.search(/[a-z]/)+"&lt;br&gt;"); document.write(str + " 中第一个大写字母的起始下标: " + str.search(/[A-Z]/)+"&lt;br&gt;"); document.write(str + " 中第一个字母(忽略大小写)的起始下标: " + str.search(/[A-Z]/i)+"&lt;br&gt;");&lt;/script&gt;运行结果：123123456abc123456中第一个小写字母的起始下标: 6123456abc123456中第一个大写字母的起始下标: -1123456abc123456中第一个字母(忽略大小写)的起始下标: 6match()方法定义和用法match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。语法123&gt; stringObject.match(searchvalue)&gt; stringObject.match(regexp)&gt;参数参数可以是字符串，也可以是正则表达式：字符串：searchvalue。规定要检索的字符串值。正则表达式：regexp。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。返回值存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。说明match() 方法将检索字符串 stringObject，以找到一个或多个与 regexp 匹配的文本。这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。**如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本，match() 将返回 null。如果找到匹配的文本，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。注意：在全局检索模式下，match() 即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的位置。如果您需要这些全局检索的信息，可以使用 RegExp.exec()。实例：不使用正则表达式1234567&lt;script&gt; var str = "Hello world!" document.write(str.match("world") + "&lt;br /&gt;") document.write(str.match("World") + "&lt;br /&gt;") document.write(str.match("worlld") + "&lt;br /&gt;") document.write(str.match("world!"))&lt;/script&gt;运行结果：1234worldnullnullworld!实例2：使用正则全局匹配使用全局匹配将会返回所有匹配的子串，而不使用全局匹配只会得到第一个匹配的子串。12345&lt;script type="text/javascript"&gt; var str = "1 plus 2 equal 3"; document.write(str+" 中的所有英文单词: "+str.match(/[a-zA-Z]+/g)+"&lt;br&gt;"); document.write(str+" 中的英文单词: "+str.match(/[a-zA-Z]+/)+"&lt;br&gt;");&lt;/script&gt;运行结果：121 plus 2 equal 3 中的所有英文单词: plus,equal1 plus 2 equal 3 中的英文单词: plusreplace()方法定义和用法replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。语法12&gt; stringObject.replace(regexp/substr,replacement)&gt;参数描述regexp/substr必需。规定子字符串或要替换的模式的 RegExp 对象。请注意，如果该值是一个字符串，则将它作为要检索文本，而不是首先被转换为 RegExp 对象。replacement必需。一个字符串值。规定了替换文本或生成替换文本的函数。返回值一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。说明字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 replacement 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。replacement 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符表示前向引用,也就是使用匹配文本的全部或部分类替换原来的文本,如下表所示字符替换文本$1、$2、…、$99与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。$&amp;与 regexp 相匹配的子串。$`位于匹配子串左侧的文本。$’位于匹配子串右侧的文本。$$直接量符号。注意：ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是 stringObject 本身。实例 使用字符串替换匹配文本1234&lt;script type="text/javascript"&gt; var str="Hello world!" document.write(str.replace(/world/, "java"));&lt;/script&gt;运行结果：1Hello java实例 使用正则表达式进行替换1234&lt;script type="text/javascript"&gt; var str = "Hello 123 world 456" document.write(str.replace(/\d+/, "java"));&lt;/script&gt;运行结果：1Hello java world 456这里，只会替换第一正则表达式匹配的文本,如果想要全部替换的化，要使用全局匹配模式实例 替换所有正则匹配的字串12var str = "Hello 123 world 456"document.write(str.replace(/\d+/g, "java"));运行结果：1Hello java world java实例 使用函数：把字符串中所有单词的首字母都转换为大写12345678910111213var name = 'hello world java';//使用函数返回的结果替换匹配的子串var uw = name.replace(/\b\w+\b/g, function (word) &#123; //word 表示匹配到的文本 //首字母 var first=word.substring(0, 1); //剩下的字母 var rest=word.substring(1); //首字母大写后返回 return first.toUpperCase() + rest;&#125;);document.write(uw);运行结果：1Hello World Javasplit() 方法定义和用法split() 方法用于把一个字符串分割成字符串数组。语法12&gt; stringObject.split(separator,howmany)&gt;参数描述separator必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。howmany可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。返回值一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 separator 自身。但是，如果 separator 是包含子表达式的正则表达式，那么返回的数组中包括与这些子表达式匹配的字串（但不包括与整个正则表达式匹配的文本）。提示和注释注释：如果把空字符串 (&quot;&quot;) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。注释：String.split() 执行的操作与 Array.join 执行的操作是相反的。实例：使用空格和空字符进行分割123456&lt;script type="text/javascript"&gt; var str = "How are you doing today?" document.write(str.split(" ") + "&lt;br /&gt;") document.write(str.split("") + "&lt;br /&gt;") document.write(str.split(" ", 3))&lt;/script&gt;运行结果：123How,are,you,doing,today?H,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?How,are,you实例 字符串分割为字符123456&lt;script&gt; var array="hello".split("") //可返回 ["h", "e", "l", "l", "o"] array.forEach(element =&gt; &#123; document.write(element+"&lt;br&gt;"); &#125;);&lt;/script&gt;运行结果：12345hello实例:使用正则表达式进行分割1234567&lt;script type="text/javascript"&gt; var str = "How are you doing today?" var array = str.split(/\s+/); array.forEach(element =&gt; &#123; document.write(element+ "&lt;br /&gt;") &#125;);&lt;/script&gt;运行结果：12345Howareyoudoingtoday?实例：分隔符位于首部和尾部的情况1234567891011121314151617&lt;script type="text/javascript"&gt; var str = "|How|are|you|doing|today?" var array1 = str.split("|");//分割结果: ["","How","are","you","doing","today?"] array1.forEach(element =&gt; &#123; document.write(":"+element+ "&lt;br/&gt;") &#125;); document.write("-------------------------&lt;br&gt;"); var array2 = str.split("?");//分割结果: ["|How|are|you|doing|today",""] array2.forEach(element =&gt; &#123; document.write(":"+element+ "&lt;br/&gt;"); &#125;); document.write("-------------------------&lt;br&gt;"); var array3 = str.split(/\||\?/);//分割结果: ["","How","are","you","doing","today",""] array3.forEach(element =&gt; &#123; document.write(":"+element+ "&lt;br/&gt;"); &#125;);&lt;/script&gt;运行结果1234567891011121314151617::How:are:you:doing:today?-------------------------:|How|are|you|doing|today:-------------------------::How:are:you:doing:today:截取子串相关方法slice() 方法定义和用法slice() 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。语法12&gt; stringObject.slice(start,end)&gt;参数描述start要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。end紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。返回值一个新的字符串。包括字符串 stringObject 从 start 开始（包括 start）到 end 结束（不包括 end）为止的所有字符。说明String 对象的方法 slice()、substring() 和 substr() （不建议使用）都可返回字符串的指定部分。slice() 比 substring() 要灵活一些，因为它允许使用负数作为参数。slice() 与 substr() 有所不同，因为它用两个字符的位置来指定子串，而 substr() 则用字符位置和长度来指定子串。还要注意的是，String.slice() 与 Array.slice() 相似。实例 提取字符串中从位置 6 开始的所有字符1234&lt;script type="text/javascript"&gt; var str="Hello happy world!" document.write(str.slice(6))&lt;/script&gt;输出：1happy world!实例 提取字符串中从位置 6 到位置 11 的所有字符1234&lt;script type="text/javascript"&gt; var str="Hello happy world!" document.write(str.slice(6,11))&lt;/script&gt;输出：1happy实例 提取字符串中从位置 -1 到位置 -6 的所有字符1234&lt;script type="text/javascript"&gt; var str="Hello happy world!" document.write(str.slice(-6,-1));&lt;/script&gt;运行结果：1world需要注意的是,start和end要同时是整数和负数,同时start要小于end.substring() 方法定义和用法substring() 方法用于提取字符串中介于两个指定下标之间的字符。语法stringObject.substring(start,stop)参数描述start必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。stop可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。 如果省略该参数，则从start截取到真个字符串的结尾返回值一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。说明substring() 方法返回的子串包括 start 处的字符，但不包括 stop 处的字符。如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。提示和注释重要事项：与 slice() 和 substr() 方法不同的是，substring() 不接受负的参数。实例12345678&lt;script type="text/javascript"&gt; var str = "Hello world!" document.write("substring截取前开后闭,下标从0开始&lt;br&gt;"); document.write(str+"&lt;br&gt;"); document.write("从下标3开始: "+str.substring(3)+"&lt;br&gt;") document.write("从下标0截取到下标3之前的: "+str.substring(0,3)+"&lt;br&gt;") document.write("从下标4截取到下标0之前的: "+str.substring(4,0)+"&lt;br&gt;")&lt;/script&gt;运行结果：12345substring截取前开后闭,下标从0开始Hello world!从下标3开始: lo world!从下标0截取到下标3之前的: Hel从下标4截取到下标0之前的: Hellsubstr() 方法定义和用法substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。语法12&gt; stringObject.substr(start,length)&gt;参数描述start必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。length可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。返回值一个新的字符串，包含从 stringObject 的 start（包括 start 所指的字符） 处开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到 stringObject 的结尾的字符。提示和注释注释：substr() 的参数指定的是子串的开始位置和长度，因此它可以替代 substring() 和 slice() 来使用。重要事项：ECMAscript 没有对该方法进行标准化，因此反对使用它。重要事项：在 IE 4 中，参数 start 的值无效。在这个 BUG 中，start 规定的是第 0 个字符的位置。在之后的版本中，此 BUG 已被修正。实例对象方法toString() 方法定义和用法toString() 方法返回字符串。语法12&gt; stringObject.toString()&gt;返回值stringObject 的原始字符串值。一般不会调用该方法。抛出当调用该方法的对象不是 String 时抛出 TypeError 异常。valueOf() 方法定义和用法valueOf() 方法可返回 String 对象的原始值。原始值是由从 String 对象下来的所有对象继承的。valueOf() 方法通常由 JavaScript 在后台自动进行调用，而不是显式地处于代码中。语法12&gt; stringObject.valueOf()&gt;抛出当调用该方法的对象不是 String 时抛出 TypeError 异常。String 对象描述字符串是 JavaScript 的一种基本的数据类型。String 对象的 length 属性声明了该字符串中的字符数。String 类定义了大量操作字符串的方法，例如从字符串中提取字符或子串，或者检索字符或子串。需要注意的是，JavaScript 的字符串是不可变的（immutable），String 类定义的方法都不能改变字符串的内容。像 String.toUpperCase() 这样的方法，返回的是全新的字符串，而不是修改原始字符串。参考链接JavaScript String 对象JavaScript String 对象 search()方法JavaScript String 对象 replace()方法JavaScript String 对象 split()方法本文链接: JavaScript常用对象2 String对象]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo NexT主题自定义代码块样式过程]]></title>
    <url>%2Fblog%2Ff270cba2%2F</url>
    <content type="text"><![CDATA[阅读文本前提使用工具：火狐浏览器查看器准备：CSS知识需要修改的样式文件：~/blog/themes/next/source/css/_custom/custom.styl修改Next主题样式实例修改代码快文字大小修改代码快文字大小博客站点目录下,打开git-bash，输入hexo s启动本地服务器。然后打开火狐浏览器，点开你一篇文章，找到代码块部分，全选其中的文本，按下鼠标右键。选择查看元素。修改对应的对应的css样式，例如修改字体大小font-size，字体间距line-height:然后浏览器会显示修改后的样式，调到自己想要的效果之后，复制该CSS代码到站点根目录\themes\next\source\css\_custom\custom.styl中:然后保存即可。这样即使显示不正确，删掉next\source\css\_custom\custom.styl中的错误样式代码即可。尽量不要去修改E:\Blog\bolg5\themes\next\layout\_custom的样式，如果改蹦了可能不好改回来。参考文章http://www.cduyzh.com/hexo-settings-3/本文链接: hexo NexT主题自定义代码块样式过程]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>Next主题配置</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo NexT主题 添加背景图片]]></title>
    <url>%2Fblog%2Fdea46275%2F</url>
    <content type="text"><![CDATA[通过 jquery-backstretch，具体操作呢，编辑文件：文件位置：~/blog/themes/next/layout/_layout.swig，把下面的代码添加到&lt;/body&gt;标签之前。1234&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery-backstretch/2.0.4/jquery.backstretch.min.js&quot;&gt;&lt;/script&gt;;&lt;script&gt;$(&quot;body&quot;).backstretch(&quot;https://背景图.jpg&quot;);&lt;/script&gt;也就是：12345+ &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery-backstretch/2.0.4/jquery.backstretch.min.js&quot;&gt;&lt;/script&gt;;+ &lt;script&gt;+ $(&quot;body&quot;).backstretch(&quot;https://背景图.jpg&quot;);+ &lt;/script&gt;&lt;/body&gt;然后启动本地服务器即可看到效果：参考文章：https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html本文链接: hexo NexT主题 添加背景图片]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>Next主题配置</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化]]></title>
    <url>%2Fblog%2F32d14fd%2F</url>
    <content type="text"><![CDATA[参考链接：https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html#%E6%9B%B4%E6%96%B0%E6%8F%90%E7%A4%BA%EF%BC%88%E5%8F%AF%E4%BB%A5%E6%9C%80%E5%90%8E%E7%9C%8B%EF%BC%89本文链接: 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>Next主题配置</category>
        <category>主题个性化优化</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo 百度主动推送]]></title>
    <url>%2Fblog%2F7ac3f85%2F</url>
    <content type="text"><![CDATA[百度主动推送的作用在hexo中添加百度主动推送功能安装hexo-baidu-url-submit插件在站点配置文件中添加baidu-url-submit的配置项在站点配置文件中加入新的deploy配置项验证配置是否成功参考链接百度主动推送的作用作用：某些主机，比如Github，禁止百度爬虫访问博客，导致博客无法被百度收录。多亏百度提供了主动提交的接口，这才有了个补救的方法。除此之外， 使用主动推送还会达到如下功效：及时发现：可以缩短百度爬虫发现您站点新链接的时间，使新发布的页面可以在第一时间被百度收录保护原创：对于网站的最新原创内容，使用主动推送功能可以快速通知到百度，使内容可以在转发之前被百度发现在hexo中添加百度主动推送功能安装hexo-baidu-url-submit插件首先，在Hexo站点根目录下，打开git-bash，输入下面命令安装插件：1npm install hexo-baidu-url-submit --save在站点配置文件中添加baidu-url-submit的配置项把以下内容配置到站点配置文件_config.yml中。123456#设置百度主动推送baidu_url_submit: count: 200 #比如200，代表提交最新的200个链接 host: www.lansheng.net.cn # 在百度站长平台中注册的域名，这个改为你自己的域名 token: your_token # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里，这个默认这个秘钥可以从百度站长平台的自动推送接口那里获取到，如下图所示：在站点配置文件中加入新的deploy配置项同样在站点配置文件中找到deploy项，添加新的推送项，如下所示：1234567deploy:- type: git repo: coding: git@git.coding.net:你的coding用户名/你的coding用户名.coding.me.git #coding地址 github: git@github.com:你的github用户名/你的github用户名.github.io.git # Github地址 branch: master- type: baidu_url_submitter验证配置是否成功最后输入命令hexo s看看能不能启动本地服务器，如果就没问题了。可以输入命令hexo d部署即可。成功不是可以在git-bash中看到如下的信息：12345INFO Deploying: baidu_url_submitterINFO Submitting urls......&#123;&quot;remain&quot;:4999900,&quot;success&quot;:100&#125;INFO Deploy done: baidu_url_submitter就说明主动推送成功了。参考链接参考文章:https://www.jianshu.com/p/f37452d4978e插件GitHub地址:https://github.com/huiwang/hexo-baidu-url-submit官方说明文档：https://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/本文链接: hexo 百度主动推送]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>SEO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ERROR Deployer not found：baidu_xz_url_submitter]]></title>
    <url>%2Fblog%2F2740f49f%2F</url>
    <content type="text"><![CDATA[百度主动推送是没有问题的，但是报错：123456INFO Deploying: baidu_url_submitterINFO Submitting urls......&#123;&quot;remain&quot;:4998354,&quot;success&quot;:20&#125;INFO Deploy done: baidu_url_submitterERROR Deployer not found: baidu_xz_url_submitter这是之前使用使用npm install hexo-baidu-url-submit --save安装的插件，最新版的hexo-baidu-url-submit还不能这样安装，需要换一种方式安装插件。解决方案修改package.json安装最新的hexo-baidu-url-submit插件配置站点配置文件baidu_url_submit 配置deploy 配置部署登录熊掌号查看提交效果参考链接解决方案修改package.json安装最新的hexo-baidu-url-submit插件进入站点根目录，打开package.json,把hexo-baidu-url-submit配置项改为：123&quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.7.0&quot;, &quot;hexo-baidu-url-submit&quot;: &quot;https://github.com/huiwang/hexo-baidu-url-submit&quot;,然后在站点目录下，输入npm install命令安装最新的hexo-baidu-url-submit插件。安装需要一段过程，中途不要管它。安装成功：1234567$ npm installnpm WARN registry Unexpected warning for https://registry.npmjs.org/: Miscellaneous Warning ETIMEDOUT: request to https://registry.npmjs.org/xmlhttprequest failed, reason: connect ETIMEDOUT 104.16.17.35:443npm WARN registry Using stale package data from https://registry.npmjs.org/ due to a request error during revalidation.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)updated 1 package in 266.405s然后在站点配置文件中添加下面两个配置：配置站点配置文件baidu_url_submit 配置12345678baidu_url_submit: count: 1000 ## 提交最新的一个链接 host: alili.tech ## 在百度站长平台中注册的域名 token: xxxxx ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 xz_appid: &apos;xxxxxx&apos; ## 你的熊掌号 appid xz_token: &apos;xxxxxx&apos; ## 你的熊掌号 token xz_count: 10 ## 从所有的提交的数据当中选取最新的10条,该数量跟你的熊掌号而定注意熊掌号的appid，支架填在单引号中就行了。不要去掉单引号。deploy 配置12345678deploy:- type: git repo: coding: git@git.coding.net:你的coding/你的coding.coding.me.git #coding地址 github: git@github.com:你的Github用户名/你的Github用户名.github.io.git # Github pages地址 branch: master- type: baidu_url_submitter #百度主动推送- type: baidu_xz_url_submitter #百度熊掌号部署输入hexo clean&amp;&amp;hexo g&amp;&amp;hexo d部署即可，部署时结束后插件会自动向百度提交，成功推送到熊账号的命令输出：12345678910INFO Deploying: baidu_xz_url_submitterINFO new urls......&#123;&quot;success_realtime&quot;:10,&quot;remain_realtime&quot;:0&#125;INFO 最新数据提交完成INFO all urls......&#123;&quot;success_batch&quot;:20,&quot;remain_batch&quot;:4999980&#125;INFO 历史数据提交完成INFO Deploy done: baidu_xz_url_submitter登录熊掌号查看提交效果提交完毕后当了百度熊掌号的链接提页面，可以看到今日的10条额度已经用完了：好了，事情到这里就靠一段落了，过几天再来看效果吧。参考链接参考文章：https://alili.tech/archive/9d64fe09/hexo-baidu-url-submit插件官方位置：https://github.com/huiwang/hexo-baidu-url-submit本文链接: ERROR Deployer not found：baidu_xz_url_submitter]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java网络编程 URLEncoder只编码URL中的中文,空格编码为百分之20]]></title>
    <url>%2Fblog%2F7865fbca%2F</url>
    <content type="text"><![CDATA[之前我自动生成的URL代码我发现转载到CSDN上CSDN不认识，这是因为我没有把URL进行编码，所以这里来介绍URL编码：只编码URL里的中文同时编码中文和空格方案1：先把空格编码成加号，然后用%20替换方案2：只编码中文,直接用%20替换空格需求把下面的带中文的URL：1https://www.lansheng.net.cn/2018/10/30/Java/Java IO流/Java IO流 使用RandomAccessFile快速读写文本文件最后一行/编码成：1https://www.lansheng.net.cn/2018/10/30/Java/Java%20IO%E6%B5%81/Java%20IO%E6%B5%81%20%E4%BD%BF%E7%94%A8RandomAccessFile%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C/只编码URL里的中文java中，默认的URLEcoder.encode()方法对URL进行编码的时候，会把特殊字符:,.,空格等都进行编码,这与我从浏览器中复制粘贴出来的显然不一样。12String str = "https://www.lansheng.net.cn/2018/10/30/Java/Java IO流/Java IO流 使用RandomAccessFile快速读写文本文件最后一行/";System.out.println(URLEncoder.encode(str,"utf-8"));运行结果：1https%3A%2F%2Fwww.lansheng.net.cn%2F2018%2F10%2F30%2FJava%2FJava+IO%E6%B5%81%2FJava+IO%E6%B5%81+%E4%BD%BF%E7%94%A8RandomAccessFile%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%2F可以看到默认的URLEncoder.encode(str,”utf-8”)方法，把:编码成%3A,/编码成%2F并不需要编码那么多，只需要编码中文即可,这里来使用正则表达式对中文进行编码：123456789101112131415public static String encode(String str, String charset) throws UnsupportedEncodingException&#123; //匹配中文和空格的正则表达式 String zhPattern = "[\u4e00-\u9fa5]+"; Pattern p = Pattern.compile(zhPattern); Matcher m = p.matcher(str); StringBuffer b = new StringBuffer(); while (m.find()) &#123; m.appendReplacement(b, URLEncoder.encode(m.group(0), charset)); &#125; m.appendTail(b); return b.toString();&#125;运行结果：1https://www.lansheng.net.cn/2018/10/30/Java/Java IO%E6%B5%81/Java IO%E6%B5%81 %E4%BD%BF%E7%94%A8RandomAccessFile%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C/这里可以看到，空格没有被编码。同时编码中文和空格这里有两个方案，方案1：在正则表达式中匹配空格，也就是把正则表达式改成[\u4e00-\u9fa5 ]这样空格就会被编码了。方案1：先把空格编码成加号，然后用%20替换运行结果：1https://www.lansheng.net.cn/2018/10/30/Java/Java+IO%E6%B5%81/Java+IO%E6%B5%81+%E4%BD%BF%E7%94%A8RandomAccessFile%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C/可以看到这里空格被编码为加号+,但是，不幸的是，我复制到浏览器中，还是打不开我的这篇文章。：解决方案，使用正则表达式把加号+，替换为%20即可：只对中文和空格进行编码1234567891011121314151617181920212223242526/** * 只对中文和空格进行编码。 * * @param str * 被替换的字符串 * @param charset * 字符集 * @return 替换好的 * @throws UnsupportedEncodingException * 不支持的字符集 */ public static String encodeSpaceChinese(String str, String charset) throws UnsupportedEncodingException&#123; //匹配中文和空格的正则表达式 String zhPattern = "[\u4e00-\u9fa5 ]+"; Pattern p = Pattern.compile(zhPattern); Matcher m = p.matcher(str); StringBuffer b = new StringBuffer(); while (m.find()) &#123; m.appendReplacement(b, URLEncoder.encode(m.group(0), charset)); &#125; m.appendTail(b); return b.toString();&#125;main方法：12345String str = "https://www.lansheng.net.cn/2018/10/30/Java/Java IO流/Java IO流 使用RandomAccessFile快速读写文本文件最后一行/";String url=encodeSpaceChinese(str, "UTF-8");System.out.println(url);url=url.replaceAll("\\+", "%20");System.out.println(url);运行结果：12https://www.lansheng.net.cn/2018/10/30/Java/Java+IO%E6%B5%81/Java+IO%E6%B5%81+%E4%BD%BF%E7%94%A8RandomAccessFile%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C/https://www.lansheng.net.cn/2018/10/30/Java/Java%20IO%E6%B5%81/Java%20IO%E6%B5%81%20%E4%BD%BF%E7%94%A8RandomAccessFile%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C/这样就可以成功打来我的这篇文章了：因为这与我从浏览器中复制粘贴的地址格式已经完全一样了：1https://www.lansheng.net.cn/2018/10/30/Java/Java%20IO%E6%B5%81/Java%20IO%E6%B5%81%20%E4%BD%BF%E7%94%A8RandomAccessFile%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C/方案2：只编码中文,直接用%20替换空格这里钻了个空子：我可以直接编码中文，然后把没有编码的空格直接替换为%20。这样少了一步操作。只对中文进行编码：123456789101112131415public static String encodeChinese(String str, String charset) throws UnsupportedEncodingException&#123; //匹配中文和空格的正则表达式 String zhPattern = "[\u4e00-\u9fa5]+"; Pattern p = Pattern.compile(zhPattern); Matcher m = p.matcher(str); StringBuffer b = new StringBuffer(); while (m.find()) &#123; m.appendReplacement(b, URLEncoder.encode(m.group(0), charset)); &#125; m.appendTail(b); return b.toString();&#125;main方法：12345String str = "https://www.lansheng.net.cn/2018/10/30/Java/Java IO流/Java IO流 使用RandomAccessFile快速读写文本文件最后一行/";String url=encodeChinese(str, "UTF-8");System.out.println(url);url=url.replaceAll(" ", "%20");System.out.println(url);运行结果：12https://www.lansheng.net.cn/2018/10/30/Java/Java IO%E6%B5%81/Java IO%E6%B5%81 %E4%BD%BF%E7%94%A8RandomAccessFile%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C/https://www.lansheng.net.cn/2018/10/30/Java/Java%20IO%E6%B5%81/Java%20IO%E6%B5%81%20%E4%BD%BF%E7%94%A8RandomAccessFile%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C/当然这两个方法基本差不多，我这里就简单记录一下两种可能，个人习惯用第二中方法。完整代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788package url.encoder.hz;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * 正则替换字符串里面的汉字部分。 */public class URLEncoderCH&#123; public static void main(String[] args) throws Exception &#123; String str = "https://www.lansheng.net.cn/2018/10/30/Java/Java IO流/Java IO流 使用RandomAccessFile快速读写文本文件最后一行/";// 把URL中表示空格的+替换成%20,因为有些应用不认+表示的空格，只认%20 String url = URLEncode(str); System.out.println(url); &#125; /**编码为浏览器可以直接访问的URL。 * @param str * @return * @throws UnsupportedEncodingException */ public static String URLEncode(String str) throws UnsupportedEncodingException &#123; String url=encodeChinese(str, "UTF-8"); System.out.println(url); url=url.replaceAll(" ", "%20"); return url; &#125; /** * 只对中文进行编码。 * * @param str * 被替换的字符串 * @param charset * 字符集 * @return 替换好的 * @throws UnsupportedEncodingException * 不支持的字符集 */ public static String encodeChinese(String str, String charset) throws UnsupportedEncodingException &#123; //匹配中文和空格的正则表达式 String zhPattern = "[\u4e00-\u9fa5]+"; Pattern p = Pattern.compile(zhPattern); Matcher m = p.matcher(str); StringBuffer b = new StringBuffer(); while (m.find()) &#123; m.appendReplacement(b, URLEncoder.encode(m.group(0), charset)); &#125; m.appendTail(b); return b.toString(); &#125; /** * 只对中文和空格进行编码。 * * @param str * 被替换的字符串 * @param charset * 字符集 * @return 替换好的 * @throws UnsupportedEncodingException * 不支持的字符集 */ public static String encodeSpaceChinese(String str, String charset) throws UnsupportedEncodingException &#123; //匹配中文和空格的正则表达式 String zhPattern = "[\u4e00-\u9fa5 ]+"; Pattern p = Pattern.compile(zhPattern); Matcher m = p.matcher(str); StringBuffer b = new StringBuffer(); while (m.find()) &#123; m.appendReplacement(b, URLEncoder.encode(m.group(0), charset)); &#125; m.appendTail(b); return b.toString(); &#125;&#125;参考链接URLEncoder的只编码中文字符的类：https://blog.csdn.net/a332324956/article/details/18991243URL中关于空格的编码转换成＋或转换成％20的问题：https://www.jianshu.com/p/4a7eb969235d本文链接: Java网络编程 URLEncoder只编码URL中的中文,空格编码为百分之20]]></content>
      <categories>
        <category>Java</category>
        <category>java 网络编程</category>
        <category>API</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 使用RandomAccessFile快速读写文本文件最后一行]]></title>
    <url>%2Fblog%2F4cd2c62c%2F</url>
    <content type="text"><![CDATA[今天写了一个使用RandomAccessFile来操作文本文件的最后一行的工具类，下面来介绍其中各个方法，我想以后我可能用的到。返回文本文件中最后一行的起始位置重载方法1 使用File参数表示的文件重载方法2 使用RandomAccessFile参数表示的文件获取文本文件中最后一行文本在文本文件最后一行追加文本重载方法1 使用File参数表示的文件重载方法2 使用RandomAccessFile参数表示的文件在文本文件最后一行后插入另一行文本删除文本文件最后一行重载方法1 使用File参数表示的文件重载方法2 使用RandomAccessFile参数表示的文件更新文本文件最后一行整个类的代码返回文本文件中最后一行的起始位置重载方法1 使用File参数表示的文件1234567891011121314151617181920212223242526272829303132333435363738394041/** * 返回文本文件的最后一行的起始位置。 * @param file 文本文件 * @return 最后一行的下标 */public static long getLastLinePos(File file)&#123; long lastLinePos = 0L; RandomAccessFile raf; try &#123; raf = new RandomAccessFile(file, "r"); // 获取文件占用字节数 long len = raf.length(); if (len &gt; 0L) &#123; // 向前走一个字节 long pos = len - 1; while (pos &gt; 0) &#123; pos--; // 移动指针 raf.seek(pos); // 判断这个字节是不是回车符 if (raf.readByte() == '\n') &#123; lastLinePos = pos;// 记录下位置 break;// 前移到会第一个回车符后结束 // return pos; &#125; &#125; &#125; &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return lastLinePos;&#125;重载方法2 使用RandomAccessFile参数表示的文件返回最后一行的起始位置，并移动文件指针到最后一行的起始位置，这个方法适合于其他方法一起使用，以重用RandomAccessFile对象。1234567891011121314151617181920212223242526272829303132/** * 返回最后一行的起始位置,并移动文件指针到最后一行的起始位置。 * @param raf RandomAccessFile对象 * @return 最后一行的起始位置 * @throws IOException */private static long getLastLinePos(RandomAccessFile raf) throws IOException&#123; long lastLinePos = 0L; // 获取文件占用字节数 long len = raf.length(); if (len &gt; 0L) &#123; // 向前走一个字节 long pos = len - 1; while (pos &gt; 0) &#123; pos--; // 移动指针 raf.seek(pos); // 判断这个字节是不是回车符 if (raf.readByte() == '\n') &#123; // lastLinePos = pos;// 记录下位置 // break;// 前移到会第一个回车符后结束 return pos; &#125; &#125; &#125; return lastLinePos;&#125;获取到最后一行的位置后就可以获取最后一行的文本了。如下所示：获取文本文件中最后一行文本123456789101112131415161718192021222324252627282930313233343536373839404142/** * 获取文本文件最后一行中的字符串。 * @param file * 目标文件 * @param charset * 字符编码 * @return 文本文件中最后一行中的字符串。 */public static String getLastLineStr(File file, String charset)&#123; String lastLine = null; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "rwd"); //获取最后一行的起始位置，并移动指针到指定位置。 long lastLinePos = getLastLinePos(raf); //获取文件的大小：也就是占用的字节数 long length = raf.length(); byte[] bytes = new byte[(int) ((length - 1) - lastLinePos)]; //上面的getLastLinePos(raf);方法已经移动文件指针到最后一行的起始位置了，所以这里只需要读取即可。 raf.read(bytes); if (charset == null) &#123; lastLine = (new String(bytes)); &#125; else &#123; lastLine = (new String(bytes, charset)); &#125; &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return lastLine;&#125;在文本文件最后一行追加文本重载方法1 使用File参数表示的文件这个方法在最后一行后面追加文本，不会另起一行。12345678910111213141516171819202122232425262728293031323334353637/** * 在文本文件最后一行末尾插入文本。 * * @param file * 目标文件 * @param newLastLine * 要插入的文本 * @param charset * 字符编码名称 */public static void insertInLastLine(File file, String newLastLine, String charset)&#123; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "rwd"); // 移动指针到最后一行 raf.seek(raf.length()); raf.write(newLastLine.getBytes(charset)); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; if (raf != null) &#123; try &#123; raf.close(); &#125; catch (IOException e) &#123; &#125; &#125; &#125;&#125;重载方法2 使用RandomAccessFile参数表示的文件这个方法适合于其他方法一起使用，以重用RandomAccessFile对象。1234567891011121314151617/** * 在文本文件最后一行末尾追加文本。 * * @param newLastLine 要追加的文本 * @param charset 字符编码名称 * @param raf RandomAccessFile表示的文件 * @throws IOException * @throws UnsupportedEncodingException */private static void insertInLastLine(String newLastLine, String charset, RandomAccessFile raf) throws IOException, UnsupportedEncodingException&#123; // 移动指针到最后一行 raf.seek(raf.length()); raf.write(newLastLine.getBytes(charset));&#125;在文本文件最后一行后插入另一行文本那么怎么在最后一行后面插入另一行文本呢，只需要在前面添加一个换行符就行了。12345678910111213141516/** * 在最后一行中末尾中插入文本。 * * @param file * 目标文件 * @param newLastLine * 即将插入的文本 * @param charset * 字符编码名称 */public static void insertAfterLastLine(File file, String newLastLine, String charset)&#123; newLastLine = "\n" + newLastLine; insertInLastLine(file, newLastLine, charset);&#125;删除文本文件最后一行重载方法1 使用File参数表示的文件123456789101112131415161718192021222324252627282930313233/** * 删除本文文件最后一行。 * @param file */public static void deleteLastLine(File file)&#123; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "rwd"); // 获取最后一行的位置 long lastLinePos = getLastLinePos(raf); // 删除最后一行 raf.setLength(lastLinePos); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; if (raf != null) &#123; try &#123; raf.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;重载方法2 使用RandomAccessFile参数表示的文件这个方法适合于其他方法一起使用，以重用RandomAccessFile对象。123456789101112/** * 删除本文文件最后一行。 * @param raf * @throws IOException */private static void deleteLastLine(RandomAccessFile raf) throws IOException&#123; // 获取最后一行的位置 long lastLinePos = getLastLinePos(raf); // 删除最后一行 raf.setLength(lastLinePos);&#125;更新文本文件最后一行更新的思想是：先删除最后一行，然后再在文件后面追加就行了。1234567891011121314151617181920212223242526272829303132333435363738/** * 更新最后一行文本。 * * @param file * 目标文件 * @param newLastLine * 替换文本 * @param charset * 字符编码名称 */public static void updateLastLine(File file, String newLastLine, String charset)&#123; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "rwd"); // 删除最后一行文本 deleteLastLine(raf); // 在最后一行插入新的一行文本 insertInLastLine(newLastLine, charset, raf); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; if (raf != null) &#123; try &#123; raf.close(); &#125; catch (IOException e) &#123; &#125; &#125; &#125;&#125;整个类的代码import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.io.RandomAccessFile;import java.io.UnsupportedEncodingException;public class LastLineInFileTools&#123; /** * 获取文本文件最后一行中的字符串。 * * @param file * 目标文件 * @param charset * 字符编码 * @return 文本文件中最后一行中的字符串。 */ public static String getLastLineStr(File file, String charset) &#123; String lastLine = null; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "rwd"); long lastLinePos = getLastLinePos(raf); long length = raf.length(); byte[] bytes = new byte[(int) ((length - 1) - lastLinePos)]; raf.read(bytes); if (charset == null) &#123; // return new String(bytes); lastLine = (new String(bytes)); &#125; else &#123; // return new String(bytes, charset); lastLine = (new String(bytes, charset)); &#125; &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return lastLine; &#125; /** * 在最后一行中末尾中插入文本。 * * @param file * 目标文件 * @param newLastLine * 即将插入的文本 * @param charset * 字符编码名称 */ public static void insertAfterLastLine(File file, String newLastLine, String charset) &#123; newLastLine = "\n" + newLastLine; insertInLastLine(file, newLastLine, charset); &#125; /** * 更新最后一行文本。 * * @param file * 目标文件 * @param newLastLine * 替换文本 * @param charset * 字符编码名称 */ public static void updateLastLine(File file, String newLastLine, String charset) &#123; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "rwd"); // 删除最后一行文本 deleteLastLine(raf); // 在最后一行插入新的一行文本 insertInLastLine(newLastLine, charset, raf); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; if (raf != null) &#123; try &#123; raf.close(); &#125; catch (IOException e) &#123; &#125; &#125; &#125; &#125; /** * 在文本文件最后一行末尾追加文本。 * * @param newLastLine 要追加的文本 * @param charset 字符编码名称 * @param raf RandomAccessFile表示的文件 * @throws IOException * @throws UnsupportedEncodingException */ private static void insertInLastLine(String newLastLine, String charset, RandomAccessFile raf) throws IOException, UnsupportedEncodingException &#123; // 移动指针到最后一行 raf.seek(raf.length()); raf.write(newLastLine.getBytes(charset)); &#125; /** * 在文本文件最后一行末尾插入文本。 * * @param file * 目标文件 * @param newLastLine * 要插入的文本 * @param charset * 字符编码名称 */ public static void insertInLastLine(File file, String newLastLine, String charset) &#123; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "rwd"); // 移动指针到最后一行 raf.seek(raf.length()); raf.write(newLastLine.getBytes(charset)); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; if (raf != null) &#123; try &#123; raf.close(); &#125; catch (IOException e) &#123; &#125; &#125; &#125; &#125; /** * 删除本文文件最后一行。 * @param raf * @throws IOException */ private static void deleteLastLine(RandomAccessFile raf) throws IOException &#123; // 获取最后一行的位置 long lastLinePos = getLastLinePos(raf); // 删除最后一行 raf.setLength(lastLinePos); &#125; /** * 删除本文文件最后一行。 * @param file */ public static void deleteLastLine(File file) &#123; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "rwd"); // 获取最后一行的位置 long lastLinePos = getLastLinePos(raf); // 删除最后一行 raf.setLength(lastLinePos); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; if (raf != null) &#123; try &#123; raf.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; /** * 返回最后一行的起始位置,并移动文件指针到最后一行的起始位置。 * @param raf RandomAccessFile对象 * @return 最后一行的起始位置 * @throws IOException */ private static long getLastLinePos(RandomAccessFile raf) throws IOException &#123; long lastLinePos = 0L; // 获取文件占用字节数 long len = raf.length(); if (len &gt; 0L) &#123; // 向前走一个字节 long pos = len - 1; while (pos &gt; 0) &#123; pos--; // 移动指针 raf.seek(pos); // 判断这个字节是不是回车符 if (raf.readByte() == '\n') &#123; // lastLinePos = pos;// 记录下位置 // break;// 前移到会第一个回车符后结束 return pos; &#125; &#125; &#125; return lastLinePos; &#125; /** * 返回文本文件的最后一行的起始位置。 * @param file 文本文件 * @return 最后一行的下标 */ public static long getLastLinePos(File file) &#123; long lastLinePos = 0L; RandomAccessFile raf; try &#123; raf = new RandomAccessFile(file, "r"); // 获取文件占用字节数 long len = raf.length(); if (len &gt; 0L) &#123; // 向前走一个字节 long pos = len - 1; while (pos &gt; 0) &#123; pos--; // 移动指针 raf.seek(pos); // 判断这个字节是不是回车符 if (raf.readByte() == '\n') &#123; lastLinePos = pos;// 记录下位置 break;// 前移到会第一个回车符后结束 // return pos; &#125; &#125; &#125; &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return lastLinePos; &#125;&#125;本文链接: Java IO流 使用RandomAccessFile快速读写文本文件最后一行]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo博客支持百度熊掌号推送]]></title>
    <url>%2Fblog%2F5f9ceba2%2F</url>
    <content type="text"><![CDATA[首先注册熊掌号点击：https://xiongzhang.baidu.com/site/register注册一个熊账号：然后选择个人：然后填入其他信息，上传身份证，提交审核，略去不写。等待审核成功。先写到这里，后续审核通过了我在再增加,注册这个只是为了，让我的博客站点在百度搜索中的排名靠前点。SEO还真心不容易啊。Hexo安装插件支持百度熊掌号自动推送具体参照我的这篇文章：ERROR Deployer not found：baidu_xz_url_submitter我不想再重复写一次了。本文链接: hexo博客支持百度熊掌号推送]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>SEO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo 使用永久链接]]></title>
    <url>%2Fblog%2F7ac3f84%2F</url>
    <content type="text"><![CDATA[1然后浏览器上打开这篇文章，可以看到链接已经变成了：https://www.lansheng.net.cn/blog/7ac3f84/`这样链接就永远是这个https://www.lansheng.net.cn/blog/7ac3f84/地址了，后面我可以随意修改标题，部署后链接还是不变。这样有利于搜索引擎收录。参考文章http://muyunyun.cn/posts/f55182c5/#文章链接唯一化https://github.com/rozbo/hexo-abbrlink本文链接: hexo 使用永久链接]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>SEO</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java快速读取一个很大的文本文件的最后一行]]></title>
    <url>%2Fblog%2F487a7f53%2F</url>
    <content type="text"><![CDATA[思想用RandomAccessFile.seek(long pos) 跳到最后一个字节，然后一个字节一个字节往回查，查到换行符为止。返回文本文件最后一行java代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465public static String readLastLine(File file, String charset) throws IOException&#123; if (!file.exists() || file.isDirectory() || !file.canRead()) &#123; return null; &#125; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "r"); //获取文件占用字节数 long len = raf.length(); if (len == 0L) &#123; return ""; &#125; else &#123; //向前走一个字节 long pos = len - 1; while (pos &gt; 0) &#123; pos--; //移动指针 raf.seek(pos); //判断这个字节是不是回车符 if (raf.readByte() == '\n') &#123; break;//前移到会第一个回车符后结束 &#125; &#125; if (pos == 0) &#123; raf.seek(0); &#125; //记录下当前位置 byte[] bytes = new byte[(int) (len - pos)]; //读取从回车符位置到文件结尾的所有字节 raf.read(bytes); if (charset == null) &#123; return new String(bytes); &#125; else &#123; return new String(bytes, charset); &#125; &#125; &#125; catch (FileNotFoundException e) &#123; &#125; finally &#123; if (raf != null) &#123; try &#123; raf.close(); &#125; catch (Exception e2) &#123; &#125; &#125; &#125; return null;&#125;参考：https://blog.csdn.net/q_linchao/article/details/79630906读取本文文件最后一行，并记下最后一行的位置如果文本文件最后一行也有特殊的意义，需要动态的更新最后一行，单单读取最后一行是远远不够的，所以我在上面代码的基础上进一步封装成一个工具类，把文本文件的最后一行，以及最后一行的位置。保存在内部成员属性中，源代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.io.RandomAccessFile;public class LastLineInFile&#123; private long lastlinestart; private String lastLine; public LastLineInFile() &#123; this.lastlinestart=0; this.lastLine=null; &#125; public long getLastlinestart() &#123; return lastlinestart; &#125; public String getLastLine() &#123; return lastLine; &#125; private void setLastlinestart(long pos) &#123; this.lastlinestart = pos; &#125; private void setLastLine(String lastLine) &#123; this.lastLine = lastLine; &#125; public void readLastLine(File file, String charset) throws IOException &#123; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(file, "r"); //获取文件占用字节数 long len = raf.length(); if (len == 0L) &#123; setLastLine(""); &#125; else &#123; //向前走一个字节 long pos = len - 1; while (pos &gt; 0) &#123; pos--; //移动指针 raf.seek(pos); //判断这个字节是不是回车符 if (raf.readByte() == '\n') &#123; break;//前移到会第一个回车符后结束 &#125; &#125; if (pos == 0) &#123; raf.seek(0); &#125; //记录下当前位置 setLastlinestart(pos); byte[] bytes = new byte[(int) (len - pos)]; //读取从回车符位置到文件结尾的所有字节 raf.read(bytes); if (charset == null) &#123; setLastLine(new String(bytes)); &#125; else &#123; setLastLine(new String(bytes,charset)); &#125; &#125; &#125; catch (FileNotFoundException e) &#123; &#125; finally &#123; if (raf != null) &#123; try &#123; raf.close(); &#125; catch (Exception e2) &#123; &#125; &#125; &#125; &#125;&#125;这样我记下了最后一行的位置之后，就可以动态的更新最后一行了,使用代码片段如下所示：123456789101112131415161718192021LastLineInFile lastLineInFile=new LastLineInFile();File localFile=new File(localPath);//读取最后一行，得到最后一行的位置，和最后一行的字符串lastLineInFile.readLastLine(localFile, "utf-8");//获取最后一行的字符串String lastLine=lastLineInFile.getLastLine();//更新文章最后一行。//以读写方式打开,同时要求每个更新都写入底层设备RandomAccessFile rf=new RandomAccessFile(localFile, "rwd");//获取最后一行的位置long filelastpos=lastLineInFile.getLastlinestart();System.out.println("最后一行位置："+filelastpos);//截取文件，是最后一行被截走，相当于删除掉最后一行rf.setLength(filelastpos);//指针移动到文件末尾rf.seek(filelastpos);//写入新的信息rf.write(hyperLinks.getBytes("utf-8"));//关闭文件rf.close();本文链接: Java快速读取一个很大的文本文件的最后一行]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git命令集合]]></title>
    <url>%2Fblog%2F504e809a%2F</url>
    <content type="text"><![CDATA[收集一下我常用到的一些git命令。分支相关查询分支git branch创建分支1git checkout -b devgit checkout命令加上-b参数表示创建并切换，相当于以下两条命令：12git branch devgit checkout dev本文链接: Git命令集合]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用Java在每篇hexo文章中加入本文链接]]></title>
    <url>%2Fblog%2Fc0eb3251%2F</url>
    <content type="text"><![CDATA[使用Java在每篇hexo文章中加入本文链接我发现的个人hexo博客很难再百度上搜索出来，所以我想先在自己的博客网站上写好，然后转载到CSDN上去，并在文章最后面，加上这篇文章在我的网站的链接。这样如果有人在CSDN上读取到我的文章后，有兴趣的话可以点到我的个人博客上来，增加访问量。思路获取文章(markdown文档)在本地的路径例如(D:\Blog\bolg5\source\_posts\我的软件\Hexo博客工具程序\使用Java在每篇hexo文章中加入本文链接.md)，然后从把本地站点的路径替换成发布后的路径即可。路径分析先拿本地一篇文章来分析路径：本地路径localpath: “D:\Blog\bolg5\source_posts\Hexo搭建博客\遇到问题\Coding内存不足\coding绑定腾讯云扩容项目容量到512M.md”文章的date标记dateStr: date: 2018-10-28 13:48:34发布路径URL：https://www.lansheng.net.cn/2018/10/28/Hexo搭建博客/遇到问题/Coding内存不足/coding绑定腾讯云扩容项目容量到512M/编码实现这里我先来自定义URL的格式：headStr+dateStr+tailStr,对于URL：https://www.lansheng.net.cn/2018/10/28/Hexo搭建博客/遇到问题/Coding内存不足/coding绑定腾讯云扩容项目容量到512M/首先，先把路径中的D:\Blog\bolg5\source\_posts去除掉：变成本地相对路径relativePath\Hexo搭建博客\遇到问题\Coding内存不足\coding绑定腾讯云扩容项目容量到512M.mdheadStr=https://www.lansheng.net.cn,这个也就是的根目录,因为是自己的网站，这个是固定的，不需要代码去生成dateStr=2018/10/28,这个跟自己文章中front-matter中写的date字段有关。所以要读取一遍文章，找到文章中的dateStr字段。tailStr=/Hexo搭建博客/遇到问题/Coding内存不足/coding绑定腾讯云扩容项目容量到512M/,这个跟文件在本地中的路径有关生成tailStrjava代码：12345String localRoot="D:\\Blog\\bolg5\\source\\_posts";String localPath="D:\\Blog\\bolg5\\source\\_posts\\Hexo搭建博客\\遇到问题\\Coding内存不足\\coding绑定腾讯云扩容项目容量到512M.md";String relativePath=localPath.substring(localPath.indexOf(localRoot)+localRoot.length());System.out.println(relativePath);运行结果：1\Hexo搭建博客\遇到问题\Coding内存不足\coding绑定腾讯云扩容项目容量到512M.md然后把,把相对路径relativePath中的斜杠”\”,替换成反斜杠”/“,这样就得到了：1/Hexo搭建博客/遇到问题/Coding内存不足/coding绑定腾讯云扩容项目容量到512M.md对应java代码为：1relativePath=relativePath.replace("\\", "/");然后就是把relativePath中的.md替换为”/“，这样就得到了本地的相对地址：1/Hexo搭建博客/遇到问题/Coding内存不足/coding绑定腾讯云扩容项目容量到512M/也就的到了URL的尾部：https://www.lansheng.net.cn/2018/10/28/Hexo搭建博客/遇到问题/Coding内存不足/coding绑定腾讯云扩容项目容量到512M/生成dateStr读取文章找到front-matter中的date标记这个可以用java的字符流来实现：12345678910111213141516171819202122232425262728String frontMatterDate=null;try&#123; BufferedReader reader = new BufferedReader(new InputStreamReader( new FileInputStream(new File(localPath)), "utf-8")); String line=null; while((line=reader.readLine())!=null) &#123; if(line.startsWith("date:")) &#123; frontMatterDate=line; System.out.println("front-matter中的date :"+frontMatterDate); break; &#125; &#125;&#125; catch (UnsupportedEncodingException e)&#123; // TODO Auto-generated catch block e.printStackTrace();&#125; catch (FileNotFoundException e)&#123; // TODO Auto-generated catch block e.printStackTrace();&#125; catch (IOException e)&#123; // TODO Auto-generated catch block e.printStackTrace();&#125;运行结果：1front-matter中的date :date: 2018-10-28 13:48:34获取到front-matter中的date标记后，接下来就根据这个获取到的date标记来生成URL中的dateStr项了。首先要从frontMatterDate中取出年月日;这个功能可以通过正则表达式来实现:123System.out.println("front-matter中的date---:"+frontMatterDate);frontMatterDate=frontMatterDate.replaceAll("date: (\\d&#123;4&#125;-\\d+-\\d+).*", "$1");System.out.println("年月日:"+frontMatterDate);获取到日期项之后，生成URL中的dateStr项就很简单了，只要把里面的连字符”-“替换成斜线就行了。java代码如下：12String dateStr=frontMatterDate.replace("-", "/");System.out.println("dateStr:"+dateStr);运行结果：1dateStr:2018/10/28加上网站根目录地址,生成完整的URLjava代码如下：123String webRoot="https://www.lansheng.net.cn/";String URL=webRoot+dateStr+relativePath;System.out.println(URL);运行结果：1https://www.lansheng.net.cn/2018/10/28/Hexo搭建博客/遇到问题/Coding内存不足/coding绑定腾讯云扩容项目容量到512M/测试能否用浏览器打开：https://www.lansheng.net.cn/2018/10/28/Hexo搭建博客/遇到问题/Coding内存不足/coding绑定腾讯云扩容项目容量到512M/嗯，是可以用浏览器打开的！链接算是拼接成功了。将拼接好的链接写到每篇文章尾部本文链接: 使用Java在每篇hexo文章中加入本文链接]]></content>
      <categories>
        <category>我的软件</category>
        <category>Hexo博客工具程序</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[markdown中让图片和表格显示在一行]]></title>
    <url>%2Fblog%2Ff0d2185d%2F</url>
    <content type="text"><![CDATA[原本的markdown表格语法是没有这个功能的,只能通过html代码来实现,在表格和图片外面再套上一个表格，外表格的第一个单元格放内表格，第二个单元格中放图片标签。这样图片和内表格就能显示在一行中了。具体html代码如下：123456789101112131415161718192021222324252627&lt;table&gt; &lt;tr&gt; &lt;td width="80%"&gt; &lt;table&gt; &lt;tr&gt; &lt;td align="right"&gt;姓名&lt;/td&gt; &lt;td align="left"&gt;xxx&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="right"&gt;性别&lt;/td&gt; &lt;td align="left"&gt;xxx&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="right"&gt;电话&lt;/td&gt; &lt;td align="left"&gt;xxxx&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="right"&gt;邮箱&lt;/td&gt; &lt;td align="left"&gt;xxxxxxx@xxx&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/td&gt; &lt;td width="20%" height="100%"&gt; &lt;img src="url" alt="我的照片" /&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;还有就是markdown中html表格标签中不要有换行符，显示的时候回出现好多空白行。删除上面的表格标签中的空白符后显示自效果如下：本文链接: markdown中让图片和表格显示在一行]]></content>
      <categories>
        <category>markdown使用</category>
        <category>markdown语法</category>
        <category>使用html标签</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[优秀个人博客收录]]></title>
    <url>%2Fblog%2F44df1069%2F</url>
    <content type="text"><![CDATA[这里来收录一些看到的一些个人博客，有时间可以去看看，看看别人都在写什么。干货多https://www.hollischuang.com/：干货挺多，java,框架都有。“屈定’s Blog”：干货挺多，夯实Java基础,设计模式，Spring系列。https://www.se7ensec.cn/ 网站UI做的很好。https://alili.tech/archives/ 前段相关有点东西http://www.fogsail.net/categories/index.htmlhttps://suchenrain.github.io/categories/:github.io，东西有点，但是零散。shenzekun.cn：文章，主要有前端的东西。还有前端相关的链接。本文链接: 优秀个人博客收录]]></content>
      <categories>
        <category>其他</category>
        <category>优秀个人博客收录</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[coding绑定腾讯云扩容项目容量到512M]]></title>
    <url>%2Fblog%2F71fcdb17%2F</url>
    <content type="text"><![CDATA[今天写了文章,使用hexo d部署的时候，无法部署上去了，原因是我之前coding的空间只有128M的容量，让我扩容。然后我登录了coding,点击升级的链接：发现Coding上的官方文档写的不清不楚的：注册了腾讯云，但是却在腾讯云的链接里找不到地方绑定Coding的地方,反反复复搞得我好烦。转念一想应该可以在Coding里面绑定腾讯云！操作如下：登录coding,然后点击头像，打开个人设置。然后点击下面的绑定设置：在腾讯云项点击绑定即可：这样就可以免费升级到Coding的银牌会员了。项目的存储空间也就提升到512M,当然这比GitHub的1G要小一半。暂时先这样用吧。参考https://www.jianshu.com/p/5ded8e64951e本文链接: coding绑定腾讯云扩容项目容量到512M]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
        <category>Coding内存不足</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客 百度sitemap无法抓取]]></title>
    <url>%2Fblog%2Febaabcd4%2F</url>
    <content type="text"><![CDATA[之前有人说Github不允许百度蜘蛛抓取，我又再部署衣服到coding上，双线部署了。地址解析也改成默认解析到coding,境外解析到github。按理说这样应该没问题了，但是百度老是说我提交的sitemap地址不正确。真是的，我再重新来走一下配置流程！安装插件配置站点配置文件_config.yml部署查看本地生成的baidusitemap.xml文件确认浏览器中可以打开baidusitemap.xml文件复制浏览器中的地址提交给百度安装插件在站点目录下，打开git-bash,输入下面的命令安装插件。12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save配置站点配置文件_config.yml在站点配置文件_config.yml中添加如下配置，我之前就没有在站点配置文件中填写下面的配置项。12345678Plugins:- hexo-generator-baidu-sitemap- hexo-generator-sitemapbaidusitemap: path: baidusitemap.xmlsitemap: path: sitemap.xml部署输入命令:1hexo clean&amp;&amp;hexo g&amp;&amp;hexo d部署到github和coding。查看本地生成的baidusitemap.xml文件部署后打开本地站点镜像目录：可以看到站点目录下生成了baidusitemap.xml文件，把这个文件提交给百度即可。确认浏览器中可以打开baidusitemap.xml文件在这之前先来确认浏览器能不能打开baidusitemap.xml文件：输入地址：https://www.lansheng.net.cn/baidusitemap.xml是可以访问到baidusitemap.xml的：复制浏览器中的地址提价给百度那么剩下的就是提交到百度的链接不对了：复制浏览器上面baidusitemap.xml地址栏的地址：https://www.lansheng.net.cn/baidusitemap.xml填写到百度sitemap提交位置即可。注意要写全url,不要写成www.lansheng.net.cn/baidusitemap.xml,我之前就是没有写https://百度抓取的是http://www.lansheng.net.cn/baidusitemap.xml,这样就抓取失败了。抓取成功显示如下：等过两天后再查看提交量，应该就可以看到sitemap提交的数目了：其他配置可以点击的下面的参考链接查看：需要注意的是它这里的提交的百度链接不正确。参考：https://www.jianshu.com/p/9c2d6db2f855本文链接: Hexo博客 百度sitemap无法抓取]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通第3章 3-6常用对象 JavaScript Windows对象]]></title>
    <url>%2Fblog%2F7d4ba91e%2F</url>
    <content type="text"><![CDATA[通过前面的学习,知道 JavaScript是一种基于对象的语言,它可以应用自己创建的对象,因此许多功能来自于脚本环境中对象的方法与脚本的相互作用。下面将对 JavaScript的常用对象进行详细介绍。Window对象Window对象的属性Window对象的方法String对象Window对象Window对象即浏览器窗口对象,是一个全局对象,是所有对象的顶级对象,在 JavaScript中起着举足轻重的作用。 Window对象提供了许多属性和方法,这些属性和方法被用来操作浏览器页面的内容。Window对象同Math对象一样,也不需要使用new关键字创建对象实例,而是直接使用“对象名.成员”的格式来访问其属性或方法。下面将对 Window对象的属性和方法进行介绍。Window对象的属性Window对象的常用属性如下表所示：Window对象的常用属性属性描述document对窗口或框架中含有文档的 Document对象的只读引用defaultStatus一个可读写的字符,用于指定状态栏中的默认消息frames表示当前窗口中所有Frame对象的集合location用于代表窗口或框架的Location对象。如果将一个URL赋予该属性,则浏览器将加载并显示该URL指定的文档length窗口或框架包含的框架个数histoy对窗口或框架的History对象的只读引用name用于存放窗口对象的名称status一个可读写的字符,用于指定状态栏中的当前信息top表示最项层的浏览器窗口parent表示包含当前窗口的父窗口opener表示打开当前窗口的父窗口closed一个只读的布尔值,表示当前窗口是否关闭。当浏览器窗口关闭时,表示该窗口的 Window对象并不会消失,不过其 closed属性被设置为trueself表示当前窗口screen对窗口或框架的 Screen 对象的只读引用,提供屏幕尺寸、颜色深度等信息navigator窗口或框架的 Navigator对象的只读引用,通过 Navigator对象可以获得与浏览器相关的信息Window对象的方法Window对象的常用方法如下表所示:Window对象的常用方法方法描述alert()弹出一个警告对话框confirm()显示一个确认对话框,单击“确认”按钮时返回true,否则返回 falseprompt()弹出一个提示对话框,并要求输入一个简单的字符串blur()将键盘焦点从顶层浏览器窗口中移走。在多数平台上,这将使窗口移到最后面close()关闭窗口focus()将键盘焦点赋予顶层浏览器窗口。在多数平台上,这将使窗口移到最前面open()打开一个新窗口scrollTo(x,y)把窗口滚动到x,y坐标指定的位置scrollBy(offsetx, offsety)按照指定的位移量滚动窗口setTimeout(timer)在经过指定的时间后执行代码clearTimeout()取消对指定代码的延迟执行moveTo(x,y)将窗口移动到一个绝对位置moveBy(offsetx,offsety)将窗口移动到指定的位移量处resizeTo(x,y)设置窗口的大小resizeBy(offsetx,offsety)按照指定的位移量设置窗口的大小print()相当于浏览器工具栏中的“打印”按钮setInterval()周期性执行指定的代码clearInterval()停止周期性地执行代码由于wmdw对象使用十分频繁,又是其他对象的父对象,所以在使用 Window对象的属性和方法时, JavaScript允许省略 Window对象的名称。例如,在使用 Window对象的alert方法弹出一个提示对话框时,可以使用下面的语句:1window.alert("提示对话框");也可以使用下面的语句:1alert("提示对话框");由于 Window对象的open()方法和close()方法在实际网站开发中经常用到,下面将对其进行详细的介绍。open()方法open()方法用于打开一个新的浏览器窗口,并在该窗口中装载指定URL地址的网页。open()方法的的语法格式如下:1windowVar=window.open(url,windowname[,location]);参数说明:windowVar:当前打开窗口的句柄。如果open()方法执行成功,则windowVar的值为一个Window对象的句柄,否则windowVar的值是一个空值。url: 目标窗口的URL。如果URL是一个空字符串,则浏览器将打开一个空白窗口,允许用write()方法创建动态HTML。windownane: 用于指定新窗口的名称,该名称可以作为&lt;a&gt;标记和&lt;form&gt;的 target属性的值。如果该参数指定了一个已经存在的窗口,那么 open方法将不再创建一个新的窗口,而只是返回对指定窗口的引用。location: 对窗口属性进行设置,其可选参数如下表所示。对窗口属性进行设置的可选参数参数描述width窗口的宽度height窗口的高度top窗口顶部距离屏幕顶部的像素数left窗口左端距离屏幕左端的像素数scrollbars是否显示滚动条,值为yes或noresizable设定窗口大小是否固定,值为yes或notoolbar浏览器工具栏,包括后退及前进按钮等,值为yes或nomenubar菜单栏,一般包括文件、编辑及其他菜单项,值为yes或nolocation定位区,也叫地址栏,是可以输入URL的浏览器文本区,值为yes或no当 Window对象赋给变量后,也可以使用打开窗口句柄的 close()方法关闭窗口例如,打开一个新的浏览器窗口,在该窗口中显示openTest.htm文件,设置打开窗口的名称为openTest,并设置窗口的顶边距、左边距、宽度和高度。代码如下:12window.open("openTest.html","OpenTest","width=500,height=402,top=50,left=20");//打开openTest.html文件，标题为OpenTest，窗体宽度500，高度402，窗体距离显示器上边50，距离左边20完整代码：1234567891011121314&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; var openTest = window.open("openTest.html", "OpenTest", "width=600,height=200,top=100,left=100"); /* openTest.close(); */ &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;运行结果,运行上面的代码，将打开一个窗口，该窗口中显示同目录下的openTest.html中的内容：close()方法close方法用于关闭当前窗口。其语法格式如下:1window.close()在上面的代码中，如果打开了获取到打开窗口的引用，则可以使用这个引用来关闭打来的窗口：12var openTest = window.open("openTest.html", "OpenTest", "width=600,height=200,top=100,left=100");openTest.close();运行效果是，浏览器打来一个窗口，然后又马上关掉这个窗口。还有需要说明的是在firefox中我直接调用window.close()无法关闭当前窗口窗口的，控制台中显示：1脚本不得关闭非脚本打开的窗口。解决方案：这样在Firefox中就可通过window.close()关闭当前窗口了。参考：http://flyer0126.iteye.com/blog/865462参考链接JavaScript String 对象本文链接: Java Web从入门到精通第3章 3-6常用对象 JavaScript Windows对象]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通第3章 3-6常用对象]]></title>
    <url>%2Fblog%2Fba120c66%2F</url>
    <content type="text"><![CDATA[通过前面的学习,知道 JavaScript是一种基于对象的语言,它可以应用自己创建的对象,因此许多功能来自于脚本环境中对象的方法与脚本的相互作用。下面将对 JavaScript的常用对象进行详细介绍。Window对象Window对象的属性Window对象的方法String对象Window对象Window对象即浏览器窗口对象,是一个全局对象,是所有对象的顶级对象,在 JavaScript中起着举足轻重的作用。 Window对象提供了许多属性和方法,这些属性和方法被用来操作浏览器页面的内容。Window对象同Math对象一样,也不需要使用new关键字创建对象实例,而是直接使用“对象名.成员”的格式来访问其属性或方法。下面将对 Window对象的属性和方法进行介绍。Window对象的属性Window对象的常用属性如下表所示：Window对象的常用属性属性描述document对窗口或框架中含有文档的 Document对象的只读引用defaultStatus一个可读写的字符,用于指定状态栏中的默认消息frames表示当前窗口中所有Frame对象的集合location用于代表窗口或框架的Location对象。如果将一个URL赋予该属性,则浏览器将加载并显示该URL指定的文档length窗口或框架包含的框架个数histoy对窗口或框架的History对象的只读引用name用于存放窗口对象的名称status一个可读写的字符,用于指定状态栏中的当前信息top表示最项层的浏览器窗口parent表示包含当前窗口的父窗口opener表示打开当前窗口的父窗口closed一个只读的布尔值,表示当前窗口是否关闭。当浏览器窗口关闭时,表示该窗口的 Window对象并不会消失,不过其 closed属性被设置为trueself表示当前窗口screen对窗口或框架的 Screen 对象的只读引用,提供屏幕尺寸、颜色深度等信息navigator窗口或框架的 Navigator对象的只读引用,通过 Navigator对象可以获得与浏览器相关的信息Window对象的方法Window对象的常用方法如下表所示:Window对象的常用方法方法描述alert()弹出一个警告对话框confirm()显示一个确认对话框,单击“确认”按钮时返回true,否则返回 falseprompt()弹出一个提示对话框,并要求输入一个简单的字符串blur()将键盘焦点从顶层浏览器窗口中移走。在多数平台上,这将使窗口移到最后面close()关闭窗口focus()将键盘焦点赋予顶层浏览器窗口。在多数平台上,这将使窗口移到最前面open()打开一个新窗口scrollTo(x,y)把窗口滚动到x,y坐标指定的位置scrollBy(offsetx, offsety)按照指定的位移量滚动窗口setTimeout(timer)在经过指定的时间后执行代码clearTimeout()取消对指定代码的延迟执行moveTo(x,y)将窗口移动到一个绝对位置moveBy(offsetx,offsety)将窗口移动到指定的位移量处resizeTo(x,y)设置窗口的大小resizeBy(offsetx,offsety)按照指定的位移量设置窗口的大小print()相当于浏览器工具栏中的“打印”按钮setInterval()周期性执行指定的代码clearInterval()停止周期性地执行代码由于wmdw对象使用十分频繁,又是其他对象的父对象,所以在使用 Window对象的属性和方法时, JavaScript允许省略 Window对象的名称。例如,在使用 Window对象的alert方法弹出一个提示对话框时,可以使用下面的语句:1window.alert("提示对话框");也可以使用下面的语句:1alert("提示对话框");由于 Window对象的open()方法和close()方法在实际网站开发中经常用到,下面将对其进行详细的介绍。open()方法open()方法用于打开一个新的浏览器窗口,并在该窗口中装载指定URL地址的网页。open()方法的的语法格式如下:1windowVar=window.open(url,windowname[,location]);参数说明:windowVar:当前打开窗口的句柄。如果open()方法执行成功,则windowVar的值为一个Window对象的句柄,否则windowVar的值是一个空值。url: 目标窗口的URL。如果URL是一个空字符串,则浏览器将打开一个空白窗口,允许用write()方法创建动态HTML。windownane: 用于指定新窗口的名称,该名称可以作为&lt;a&gt;标记和&lt;form&gt;的 target属性的值。如果该参数指定了一个已经存在的窗口,那么 open方法将不再创建一个新的窗口,而只是返回对指定窗口的引用。location: 对窗口属性进行设置,其可选参数如下表所示。对窗口属性进行设置的可选参数参数描述width窗口的宽度height窗口的高度top窗口顶部距离屏幕顶部的像素数left窗口左端距离屏幕左端的像素数scrollbars是否显示滚动条,值为yes或noresizable设定窗口大小是否固定,值为yes或notoolbar浏览器工具栏,包括后退及前进按钮等,值为yes或nomenubar菜单栏,一般包括文件、编辑及其他菜单项,值为yes或nolocation定位区,也叫地址栏,是可以输入URL的浏览器文本区,值为yes或no当 Window对象赋给变量后,也可以使用打开窗口句柄的 close()方法关闭窗口例如,打开一个新的浏览器窗口,在该窗口中显示openTest.htm文件,设置打开窗口的名称为openTest,并设置窗口的顶边距、左边距、宽度和高度。代码如下:12window.open("openTest.html","OpenTest","width=500,height=402,top=50,left=20");//打开openTest.html文件，标题为OpenTest，窗体宽度500，高度402，窗体距离显示器上边50，距离左边20完整代码：1234567891011121314&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; var openTest = window.open("openTest.html", "OpenTest", "width=600,height=200,top=100,left=100"); /* openTest.close(); */ &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;运行结果,运行上面的代码，将打开一个窗口，该窗口中显示同目录下的openTest.html中的内容：close()方法close方法用于关闭当前窗口。其语法格式如下:1window.close()在上面的代码中，如果打开了获取到打开窗口的引用，则可以使用这个引用来关闭打来的窗口：12var openTest = window.open("openTest.html", "OpenTest", "width=600,height=200,top=100,left=100");openTest.close();运行效果是，浏览器打来一个窗口，然后又马上关掉这个窗口。还有需要说明的是在firefox中我直接调用window.close()无法关闭当前窗口窗口的，控制台中显示：1脚本不得关闭非脚本打开的窗口。解决方案：这样在Firefox中就可通过window.close()关闭当前窗口了。参考：http://flyer0126.iteye.com/blog/865462String对象String对象是动态对象,需要创建对象实例后才能引用其属性和方法。但是,由于在 JavaScript中可以将用单引号或双引号括起来的一个字符串当作一个字符串对象的实例,所以可以直接在某个字符串后面加上点“.”去调用Srng对象的属性和方法。下面对Strng对象的常用属性和方法进行详细介绍。本文链接: Java Web从入门到精通第3章 3-6常用对象]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[html设置表格名称]]></title>
    <url>%2Fblog%2F5270044b%2F</url>
    <content type="text"><![CDATA[参考：http://www.w3school.com.cn/tags/tag_caption.asp本文链接: html设置表格名称]]></content>
      <categories>
        <category>HTML</category>
        <category>表格</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通第3章 3-5事件处理]]></title>
    <url>%2Fblog%2F3eb7f149%2F</url>
    <content type="text"><![CDATA[通过前面的学习,知道 JavaScript可以以事件驱动的方式直接对客户端的输入作出响应,无须经过服务器端程序;也就是说, JavaScript是事件驱动的。它可以使在图形界面环境下的一切操作变得简单化。下面将对事件及事件处理程序进行详细介绍。什么是事件处理程序JavaScript常用事件事件处理程序的调用在JavaScript中指定事件处理程序在HTML中指定事件处理程序什么是事件处理程序JavaScript与web页面之间的交互是通过用户操作浏览器页面时触发相关事件来实现的。例如,在页面载入完毕时将触发 onload(载入)事件,当用户单击按钮时将触发按钮的 onclick事件等。事件处理程序则是用于响应某个事件而执行的处理程序。事件处理程序可以是任意 JavaScript语句,但通常使用特定的自定义函数( Function)来对事件进行处理。JavaScript常用事件表多数浏览器内部对象都拥有很多事件,下面将以表格的形式给出常用的事件及何时触发这些事件。Javascript的常用事件事件何时触发onabort对象载入被中断时触发onblur元素或窗口本身失去焦点时触发onchange&lt;select&gt;元素中的选项或其他表单失去焦点,并且在其获取焦点后内容发生过改变时触发onclick单击鼠标左键时触发。当光标的焦点在按钮上,并按下 Enter键时,也会触发该事件ondblclick双击鼠标左键时触发onerror出现错误时触发onfocus任何元素或窗口本身获得焦点时触发onkeydown键盘上的按键(包括Shift或Alt等键)被按下时触发,如果一直按着某键,则会不断触发。当返回false时,取消默认动作onkeypress键盘上的按键被按下,并产生一个字符时发生。也就是说,当按下Shift或At等键时先不触发,在按下其他键时触发。如果一直按下某键时,会不断触发。当返回 false时,取消默认动作onkeyup释放键盘上的按键时触发onload页面完全载入后,在 Window对象上触发;所有框架都载入后,在框架集上触发;&lt;img&gt; 标记指定的图像完全载入后,在其上触发;或&lt;object&gt;标记指定的对象完全载入后,在其上触发onmousedown单击任何一个鼠标按键时触发onmousemove鼠标在某个元素上移动时持续触发onmouseout将鼠标从指定的元素上移开时触发onmouseover鼠标移到某个元素上时触发onmouseup释放任意一个鼠标按键时触发onreset单击重置按钮时,在&lt;form&gt;上触发onresize窗口或框架的大小发生改变时触发onscroll在任何带滚动条的元素或窗口上滚动时触发onselect选中文本时触发onsubmit单击提交按钮时,在&lt;form&gt;上触发onunload页面完全卸载后,在 Window对象上触发:或者所有框架都卸载后,在框架集上触发事件处理程序的调用在使用事件处理程序对页面进行操作时,最主要的是如何通过对象的事件来指定事件处理程序。指定方式主要有以下两种。在JavaScript中指定事件处理程序在 JavaScript中调用事件处理程序,首先需要获得要处理对象的引用,然后将要执行的处理函数值给对应的事件。1234567891011121314151617&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt; &lt;input name="save_button" id="save_button" type="button" value="保存按钮"&gt; &lt;/center&gt; &lt;script&gt; var save_button = document.getElementById("save_button"); save_button.onclick = function () &#123; alert("单击了保存按钮"); &#125; &lt;/script&gt;&lt;/body&gt;运行结果:注意在上面的代码中,一定要将input标记放在JavaScript代码的上方,否则将出现”save_button”为空或不是对象”的错误提示。在 JavaScript中指定事件处理程序时,事件名称必须小写,才能正确响应事件。在HTML中指定事件处理程序在HTML中分配事件处理程序,只需要在HTML标记中添加相应的事件,并在其中指定要执行的代码或是函数名即可。实例代码：12345678910111213141516&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;script&gt; function save_buttonFun() &#123; alert("单击了保存按钮"); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt; &lt;input name="save_button" type="button" value="保存按钮" onclick="save_buttonFun()"&gt; &lt;/center&gt;&lt;/body&gt;&lt;/html&gt;运行结果：本文链接: Java Web从入门到精通第3章 3-5事件处理]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通第3章 3-4函数]]></title>
    <url>%2Fblog%2F431b8409%2F</url>
    <content type="text"><![CDATA[摘要javascript函数的定义javascript函数的调用函数实质上就是一组 JavaScript代码。使用函数可以使代码更为简提高重用性。在 JavaScript中,大约95%的代码都是包含在函数中的。由此可见,函数在 JavaScript中是非常重要的。函数的定义函数是由关键字 function、函数名加一组参数以及置于大括号中需要执行的一段代码定义的。定义函数的基本语法如下:1234function functionName([parameter1, parameter2, ......]) &#123; statements [return expression;]&#125;参数说明:functionName: 必选项,用于指定函数名。在同一个页面中,函数名必须是唯一的,并且区分大小写。parameter: 可选项,用于指定参数列表。当使用多个参数时,参数间使用逗号进行分隔。个函数最多可以有255个参数。statements: 必选项,是函数体,用于实现函数功能的语句。expression: 可选项,用于返回函数值。 expression为任意的表达式、变量或常量。实例：定义一个用于计算商品金额的函数 account(),该函数有两个参数,用于指定单价和数量,返回值为计算后的金额。具体代码如下:1234function account(price,number) &#123; var sum=price*number;//计算金额 return sum;//返回计算后的金额&#125;这里要注意的，这里的函数和Java中的方法是不一样的，参数列表中直接写变量名就行了。而java不行,上述方法的java版本为：1234int account(int price,int number) &#123; int sum=price*number;//计算金额 return sum;//返回计算后的金额&#125;对比可以看到java中的返回值有可以是基本数据类型也可以是引用数据类型。而javascript中这个位置直接写function就行了。函数的调用函数的调用比较简单,如果要调用不带参数的函数,使用函数名加上括号即可;如果要调用的函数带参数,则在括号中加上需要传递的参数;如果包含多个参数,各参数间用逗号分隔；如果函数有返回值,则可以使用赋值语句将函数值赋给一个变量。例如 上面的函数 account可以通过以下代码进行调用。1account(10.6,10);在JavaScript中,由于函数名区分大小写,在调用函数时也需要注意函数名的大小写。实例：定义一个 JavaScript函数checkReaIName(),用于验证输入的字符串是否为汉字。(1)在页面中添加用于输入真实姓名的表单及表单元素。具体代码如下：12345&lt;form name="form1" method="post" action=""&gt; 请输入真实姓名： &lt;input name="realName" type="text" id="realName"&gt; &lt;input name="Button" type="button" onClick="checkRealName()" value="检测"&gt;&lt;/form&gt;(2)编写自定义的 Javascript函数 checkRealName(),用于验证输入的真实姓名是否正确,即判断输入的内容是否为两个或两个以上的汉字。 checkRealName()函数的具体代码如下:123456789101112131415&lt;script language="javascript"&gt; function checkRealName() &#123; var str = form1.realName.value; //获取输入的真实姓名 if (str == "") &#123; //当真实姓名为空时 alert("请输入真实姓名！"); form1.realName.focus(); return; &#125; else &#123; //当真实姓名不为空时 var objExp = /[\u4E00-\u9FA5]&#123;2,&#125;/; //创建正则表达式对象 if (objExp.test(str) == true) &#123; //判断是否匹配 alert("姓名正确"); &#125; else &#123; alert("非法姓名！"); &#125; &#125; &#125;&lt;/script&gt;非法姓名运行结果:正确姓名运行结果：本文链接: Java Web从入门到精通第3章 3-4函数]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java读取jar包内的文件]]></title>
    <url>%2Fblog%2F18ab79a8%2F</url>
    <content type="text"><![CDATA[怎么把资源文件打包到可执行jar包中读取jar包中的文件读取jar包中资源文件子目录中的文件首先介绍怎么把资源文件打包到可执行jar包中打开eclipse，在你Java项目下建立一个资源文件夹res，然后在里面放入要打包到可执行jar包中的文件(我这里是JSTest.html)，如下图所示：这样等我们打包成可执行jar包时，JSTest.html被放到jar包里面的根目录下：读取jar包中的文件那么我们怎么在JSTest类中读取jar包中的这个JSTest.html文件呢，使用下面的代码即可获取包内文件的InputStream实例。后面就跟读取普通文件一样了。1InputStream inputStream = JSTest.class.getResourceAsStream(&quot;/JSTest.html&quot;);完整代码：12345678910111213141516171819202122232425262728293031323334353637383940package js.test;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;public class JSTest&#123; public static void main(String[] args) &#123; InputStream inputStream = JSTest.class.getResourceAsStream("/JSTest.html"); try &#123; BufferedReader reader = new BufferedReader( new InputStreamReader(inputStream, "UTF-8")); StringBuilder builder = new StringBuilder(); char[] charArray = new char[200]; int number = -1; while ((number = reader.read(charArray)) != -1) &#123; builder.append(charArray,0,number); &#125; System.out.println(builder.toString()); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;JSTest.html文件内容：12345678&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt;然后我们打包成可执行jar包，运行该可执行jar包即可读取它自己包内的JSTest.html文件：可以看到，已经成功把JSTest.html中的内容输出到控制台了。读取jar包中资源文件子目录中的文件如下图所示，如果想读取资源目录res下的子目录son中的文件inside.txt。只需要把上面的代码改成即可：1InputStream inputStream = JSTest.class.getResourceAsStream("/son/inside.txt");其他的代码不用改动。打包成可执行jar包红，inside.txt在jar包中的位置：运行可执行jar包：同样运行成功。本文链接: java读取jar包内的文件]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通第3章 3-3流程控制语句]]></title>
    <url>%2Fblog%2F3fb0a147%2F</url>
    <content type="text"><![CDATA[流程控制语句对于任何一门编程语言都是至关重要的, JavaScript也不例外。在 JavaScript中提供了:if条件判断语句、switch多分支语句、for循环语句、while循环语句、do.. while循环语句、break语句continue语句7种流程控制语句，下面来逐一进行介绍。if条件语句介绍，省略。实例：应用if语句验证用户登录信息(1)在页面中添加用户登录表单及表单元素。具体代码如下:12345678910111213141516171819202122232425&lt;form name="form1" method="post" action=""&gt; &lt;table width="221" border="1" cellspacing="0" cellpadding="0" bordercolor="#FFFFFF" bordercolordark="#CCCCCC" bordercolorlight="#FFFFFF"&gt; &lt;tr&gt; &lt;td height="30" colspan="2" bgcolor="#eeeeee"&gt;用户登录&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width="59" height="30"&gt;用户名：&lt;/td&gt; &lt;td width="162"&gt; &lt;input name="user" type="text" id="user"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td height="30"&gt;密&amp;nbsp;&amp;nbsp;码：&lt;/td&gt; &lt;td&gt; &lt;input name="pwd" type="text" id="pwd"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td height="30" colspan="2" align="center"&gt; &lt;input name="Button" type="button" class="btn_grey" value="登录" onClick="check()"&gt; &amp;nbsp; &lt;input name="Submit2" type="reset" class="btn_grey" value="重置"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/form&gt;(2)编写自定义的 JavaScript函数 check(),用于通过if语句验证登录信息是否为空。 check函数的具体代码如下:12345678910111213&lt;script language="javascript"&gt; function check() &#123; if (form1.user.value == "") &#123; //判断用户名是否为空 alert("请输入用户名！"); form1.user.focus(); eturn; &#125; else if (form1.pwd.value == "") &#123; //判断密码是否为空 alert("请输入密码！"); form1.pwd.focus(); return; &#125; else &#123; form1.submit(); //提交表单 &#125; &#125;&lt;/script&gt;(3)在“登录”按钮的 onclick事件中调用 check函数。具体代码如下：1&lt;input name="Button" type="button" class="btn_grey" value="登录" onClick="check()"&gt;switch多分支语句介绍省略，实例：应用 switch语句输出今天是星期几1234567891011121314151617181920212223242526272829&lt;script language="javascript"&gt; var now = new Date(); //获取系统日期 var day = now.getDay(); //获取星期 var week; switch (day) &#123; case 1: week = "星期一"; break; case 2: week = "星期二"; break; case 3: week = "星期三"; break; case 4: week = "星期四"; break; case 5: week = "星期五"; break; case 6: week = "星期六"; break; default: week = "星期日"; break; &#125; document.write("今天是" + week); //输出中文的星期&lt;/script&gt;程序的运行结果如下图所示：判断条件较少的使用if条件语句，多条件判断使用switch语句。for循环语句for循环语句也称为计次循环语句,一般用于循环次数已知的情况。其他介绍，省略。实例：计算100以内所有奇数的和1234567891011121314&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt;&lt;/head&gt;&lt;body&gt; &lt;script language="javascript"&gt; var sum = 0; for (i = 1; i &lt; 100; i += 2) &#123; sum = sum + i; &#125; alert("100以内所有奇数的和为：" + sum); //输出计算结果 &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;显示效果：注意避免死循环。while循环语句介绍省略。while循环语句经常用于循环执行的次数不确定的情况下。实例：列举出累加和不大于10的所有自然数1234567891011&lt;script language="javascript"&gt; var i = 1; //由于是计算自然数，所以i的初始值设置为1 var sum = i; var result = ""; document.write("累加和不大于10的所有自然数为：&lt;br&gt;"); while (sum &lt; 10) &#123; sum = sum + i; //累加i的值 document.write(i + '&lt;br&gt;'); //输出符合条件的自然数 i++; //该语句一定不要少 &#125;&lt;/script&gt;运行结果:do…while循环语句介绍省略实例: 应用do. while循环语句列举出累加和不大于10的所有自然数1234567891011&lt;script language="javascript"&gt; var i = 1; //由于是计算自然数，所以i的初始值设置为1 var sum = i; var result = ""; document.write("累加和不大于10的所有自然数为：&lt;br&gt;"); while (sum &lt; 10) &#123; sum = sum + i; //累加i的值 document.write(i + '&lt;br&gt;'); //输出符合条件的自然数 i++; //该语句一定不要少 &#125;&lt;/script&gt;显示效果如下所示：break与 continue语句break与 continue语句都可以用于跳出循环,但两者也存在着一些区别。break语句用于退出本次循环或者退出一个 switch语句。continue语句用于中止本次循环,并开始下一次循环。break实例123456789101112&lt;script&gt; document.write("测试break&lt;br&gt;"); for(var i=0;i&lt;3;i++) &#123; for(var j=0;j&lt;10;j++) &#123; document.write(i+"---&gt;"+j+"&lt;br&gt;"); if(j==2) break; &#125; &#125;&lt;/script&gt;运行结果：可以看到当j==2成立时，内层循环会直接退出，这里break对外层循环没有影响。continue实例12345678910&lt;script&gt; document.write("测试continue&lt;br&gt;"); for (var i = 0; i &lt; 3; i++) &#123; for (var j = 0; j &lt; 5; j++) &#123; if (j == 2) continue; document.write(i + "---&gt;" + j + "&lt;br&gt;"); &#125; &#125;&lt;/script&gt;运行结果：可以看到当j==2成立时，continue跳出内层循环，继续执行下一个循环。同样这里continue不影响到外层循环。实例: 在for语句中通过 continue语句计算金额大于等于1000的数据的和的代码如下:12345678910&lt;script&gt; var total = 0; var sum = new Array(1000, 1200, 100, 600, 736, 1107, 1205); for (i = 0; i &lt; sum.length; i++) &#123; if (sum[i] &lt; 1000) continue; total += sum[i]; &#125; document.write("累加和为："+total);&lt;/script&gt;显示结果为：本文链接: Java Web从入门到精通第3章 3-3流程控制语句]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正则应用 删除文章中空行]]></title>
    <url>%2Fblog%2F59f64c86%2F</url>
    <content type="text"><![CDATA[匹配空行的正则表达式1(?m)^\s*$(\n|\r\n)替换正则表达式使用空字符串(也就什么都不输入)，替换即可。实例删除下面多余的空行：123456789101112定义和用法&lt;kbd&gt; 标签定义键盘文本。说到技术概念上的特殊样式时，就要提到 &lt;kbd&gt; 标签。正如你已经猜到的，它用来表示文本是从键盘上键入的。浏览器通常用等宽字体来显示该标签中包含的文本。&lt;kbd&gt; 标签经常用在于计算机相关的文档和手册中。例如：键入 &lt;kbd&gt;quit&lt;/kbd&gt; 来退出程序，或者键入 &lt;kbd&gt;menu&lt;/kbd&gt; 来返回主菜单。在notepad++使用按下Ctrl+H打开替换，勾选上正则表达式功能，然后使用上面的正则表达式进行替换：替换结果：123456定义和用法&lt;kbd&gt; 标签定义键盘文本。说到技术概念上的特殊样式时，就要提到 &lt;kbd&gt; 标签。正如你已经猜到的，它用来表示文本是从键盘上键入的。浏览器通常用等宽字体来显示该标签中包含的文本。&lt;kbd&gt; 标签经常用在于计算机相关的文档和手册中。例如：键入 &lt;kbd&gt;quit&lt;/kbd&gt; 来退出程序，或者键入 &lt;kbd&gt;menu&lt;/kbd&gt; 来返回主菜单。在Java中使用,添加反斜杠注释即可。1string.replaceAll("(?m)^\\s*$(\\n|\\r\\n)", "");本文链接: 正则应用 删除文章中空行]]></content>
      <categories>
        <category>正则表达式</category>
        <category>实例</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[markdown文档中使用键盘键]]></title>
    <url>%2Fblog%2F6507a83c%2F</url>
    <content type="text"><![CDATA[markdown中可以插入html标签来实现更加丰富的显示效果。例如&lt;kbd&gt;标签来插入键盘按键：Ctrl+H键盘键定义和用法&lt;kbd&gt;标签定义键盘文本。说到技术概念上的特殊样式时，就要提到 &lt;kbd&gt;标签。正如你已经猜到的，它用来表示文本是从键盘上键入的。浏览器通常用等宽字体来显示该标签中包含的文本。&lt;kbd&gt;标签经常用在于计算机相关的文档和手册中。例如：键入&lt;kbd&gt;quit&lt;/kbd&gt;来退出程序，或者键入&lt;kbd&gt;menu&lt;/kbd&gt;来返回主菜单。1&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;H&lt;/kbd&gt;显示效果：Ctrl+H参考：http://www.w3school.com.cn/tags/tag_kbd.asp本文链接: markdown文档中使用键盘键]]></content>
      <categories>
        <category>markdown使用</category>
        <category>markdown语法</category>
        <category>使用html标签</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客使用hexo-neat插件压缩页面以提高响应速度]]></title>
    <url>%2Fblog%2Fd42afc7b%2F</url>
    <content type="text"><![CDATA[安装hexo-neat插件在站点配置文件中添加配置不压缩某文件的正确配置方式解决桃心效果失效安装hexo-neat插件在站点根目录下安装hexo-neat1npm install hexo-neat --save在站点配置文件中添加配置下边是我自己站点的相关配置，直接添加到站点配置文件_config.yml的末尾就可以。可以安装自己的需求去自定义那些文件需要压缩,主要是有些js可能压缩后会失效。12345678910111213141516171819202122# hexo-neat# 博文压缩neat_enable: true# 压缩htmlneat_html: enable: true exclude:# 压缩css neat_css: enable: true exclude: - &apos;**/*.min.css&apos;# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - &apos;**/*.min.js&apos; - &apos;**/jquery.fancybox.pack.js&apos; - &apos;**/index.js&apos;不压缩某文件的正确配置方式如果按照官方插件的文档说明来配置exclude排除项，你会发现完全不起作用。1234neat_css: enable: true exclude: - &apos;*.min.css&apos;这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下，把路径改为1234neat_css: enable: true exclude: - &apos;**/*.min.css&apos;解决桃心效果失效当然有些博客加了桃心效果，需要添加配置项，让hexo-neat不压缩桃心的js文件。参见，把上面的配置改为下面即可：123456789101112131415161718192021222324# 博文压缩neat_enable: true# 压缩htmlneat_html: enable: true exclude:# 压缩css neat_css: enable: true exclude: - &apos;**/*.min.css&apos;# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - &apos;**/*.min.js&apos; - &apos;**/jquery.fancybox.pack.js&apos; - &apos;**/index.js&apos; - &apos;**/love.js&apos;# 压缩博文配置结束插件官方位置：https://github.com/rozbo/hexo-neat参考文章：https://blog.csdn.net/lewky_liu/article/details/82432003本文链接: Hexo博客使用hexo-neat插件压缩页面以提高响应速度]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用Hexo-neat压缩</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用hexo-neat压缩博客后桃心效果失效]]></title>
    <url>%2Fblog%2F3c08b8e0%2F</url>
    <content type="text"><![CDATA[可能桃心js文件不能被压缩吧，在站点配置文件中，找到hexo-neat的配置项，不压缩桃心js就行了。在站点配置文件中的排除掉桃心的js文件,不压缩即可，即在exclude下面添加- &#39;**/index.js&#39;如下所示：修改前hexo-neat的配置项：1234567891011121314151617181920212223# 博文压缩neat_enable: true# 压缩htmlneat_html: enable: true exclude:# 压缩css neat_css: enable: true exclude: - &apos;**/*.min.css&apos;# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - &apos;**/*.min.js&apos; - &apos;**/jquery.fancybox.pack.js&apos; - &apos;**/index.js&apos; # 压缩博文配置结束修改后整个hexo-neat的配置项如下所示：123456789101112131415161718192021222324# 博文压缩neat_enable: true# 压缩htmlneat_html: enable: true exclude:# 压缩css neat_css: enable: true exclude: - &apos;**/*.min.css&apos;# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - &apos;**/*.min.js&apos; - &apos;**/jquery.fancybox.pack.js&apos; - &apos;**/index.js&apos; - &apos;**/love.js&apos;# 压缩博文配置结束后面没有发现什么问题。参考：https://blog.csdn.net/lewky_liu/article/details/82432003本文链接: 使用hexo-neat压缩博客后桃心效果失效]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用Hexo-neat压缩</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next正确安装配置RSS插件]]></title>
    <url>%2Fblog%2F82e4ee34%2F</url>
    <content type="text"><![CDATA[安装插件修改站点配置文件修改主题配置文件部署看效果安装插件进入本地hexo站点目录，打开git-bash。输入以下命令1npm install hexo-generator-feed修改站点配置文件hexo站点根目录下的_config.yml文件中，添加以下配置。12345678# 设置RSS插件plugin:- hexo-generator-feed#Feed Atomfeed: type: atom path: atom.xml limit: 0 #0表示生成全部文章的RSS链接，其他修改主题配置文件打开主题目录下的_config.yml文件，找到rss配置项，在后面添加如下配置：12345678910111213# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.# Set rss to specific value if you have burned your feed already.rss: /atom.xml# 配置RSS#feed: #feed 类型 (atom/rss2)# type: atom# rss localhost:4000# path: atom.xml# #在 rss 中最多生成的文章数(0显示所有)# limit: 0 #显示所有的文章主题配置文件中的feed配置项，注释掉,因为已经在站点配置文件配置了，在主题配置文件虽然也可以使用RSS，但是只能默认生成20条，及时就该limit也不行，不知道为什么。部署看效果输入命令hexo -d部署到GithHub上，点击RSS按钮即可订阅整个站点的文章。参考：https://blog.csdn.net/u011303443/article/details/52333695本文链接: Hexo Next正确安装配置RSS插件]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>给博客添加功能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next使用RSS快速向百度主动推送自己的文章]]></title>
    <url>%2Fblog%2Fb8b226f8%2F</url>
    <content type="text"><![CDATA[使用Hexo Next主题的博客已经有了RSS功能，正确的配置请看我的这篇文章你的站点已经被百度收录已经安装自动推送JS代码，可以向百度自动推送。自动推送是百度搜索资源平台为提高站点新增网页发现速度推出的工具，安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度从上面可以知道，要向百度推送，我们只需要点击自己的文章即可。如果你写的文章有点多，为了向百度推送，我们得一次次的点击自己的文章。如果某一篇忘了点击了，就不会推送到百度。百度也就不会收录这篇文章。现在来介绍使用RSS订阅来快速访问新文章，这样这些新文章就会推送给百度让百度收录。步骤1.使用hexo d部署到GitHub2.访问自己的网站3.订阅自己的网站4.点击订阅按钮，展开链接列表，然后点击以标签页打开书签组。这样我们一下子可以一下子访问了201篇文章，同时也向百度推动了201篇文章。当然一下子打开这么多标签，内存占用也是惊人的：都加载完毕后火狐内存占用：也还行，还在我电脑的承受范围之内哈哈，可惜的是这个操作向百度自动推送了所有的文章了。本文链接: Hexo Next使用RSS快速向百度主动推送自己的文章]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>给博客添加功能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[eclipse导出可执行jar时Launch configuration下拉列表选项太多]]></title>
    <url>%2Fblog%2F956cc103%2F</url>
    <content type="text"><![CDATA[问题描述我们知道，用eclipse打包jar的时候，需要指定一个main函数。需要先运行一下main函数，eclipse的Runnable JAR File Specification 下的Launch configuration下拉列表才会有记录。但是，有时候Launch configuration下拉列表的主方法记录实在是太多了，导出的时候需要花费好长时间才能找到主类。所以需要定时清理掉Launch configuration下拉列表里面这些主类的记录。解决方案如果想要删除Launch configuration下拉列表的主类历史记录，只要进入到要打包的这个工程所在的目录，也就是工作空间目录找到这个：1/.metadata/.plugins/org.eclipse.debug.core/.launches文件夹，清空里面的内容，然后重启eclipse即可：参考：http://coderlxl201209164551.iteye.com/blog/2126652本文链接: eclipse导出可执行jar时Launch configuration下拉列表选项太多]]></content>
      <categories>
        <category>Java</category>
        <category>IDE设置</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo next主题修改分类页面的超链接样式]]></title>
    <url>%2Fblog%2F2c0fac8a%2F</url>
    <content type="text"><![CDATA[分类页面的超链接都是黑色的，看起来不是很明显，如下所示：修改后的样式：实现过程而且我喜欢在文章首部添加摘要信息：我希望文章中的链接也如上面所示：这需要修改样式文件，可以参考：这篇文章中的：修改文章内链接文本样式。首先把带摘要的文章例子下载下来，用VScode打开看看页面的html源码。定位文章页面的源码：123456789101112131415&lt;div class="post-body" itemprop="articleBody" style="opacity: 1; display: block; transform: translateY(0px);"&gt; &lt;h1 id="第三章Maven使用入门"&gt; &lt;a href="#第三章Maven使用入门" class="headerlink" title="第三章Maven使用入门"&gt;&lt;/a&gt;第三章Maven使用入门&lt;/h1&gt; &lt;h2 id="摘要"&gt; &lt;a href="#摘要" class="headerlink" title="摘要"&gt;&lt;/a&gt;摘要&lt;/h2&gt; &lt;ul&gt; &lt;li&gt; &lt;a href="https://www.lansheng.net.cn/2018/10/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Maven%E5%AE%9E%E6%88%98%20%E8%AE%B8%E6%99%93%E6%96%8C%E8%91%97/%E7%AC%AC3%E7%AB%A0/Maven%E5%AE%9E%E6%88%98%20%E8%AE%B8%E6%99%93%E6%96%8C%E8%91%97%20%E7%AC%AC3%E7%AB%A0%20Maven%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#%E7%BC%96%E5%86%99POM"&gt;编写POM&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="https://www.lansheng.net.cn/2018/10/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Maven%E5%AE%9E%E6%88%98%20%E8%AE%B8%E6%99%93%E6%96%8C%E8%91%97/%E7%AC%AC3%E7%AB%A0/Maven%E5%AE%9E%E6%88%98%20%E8%AE%B8%E6%99%93%E6%96%8C%E8%91%97%20%E7%AC%AC3%E7%AB%A0%20Maven%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/#%E7%BC%96%E5%86%99%E4%B8%BB%E4%BB%A3%E7%A0%81"&gt;编写主代码&lt;/a&gt; &lt;/li&gt; ...... &lt;/ul&gt;&lt;/div&gt;可以看到摘要信息的链接标签位置为：1&lt;div class="post-body"&gt;&lt;ul&gt;&lt;li&gt;&lt;a&gt;编写POM&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;我们只需要用CSS选中器选中该超链接，然后设置颜色样式即可：1234567891011// 文章无序列表超链接(文章摘要)样式:颜色为蓝色，选中该连接显示橙色.post-body ul li a&#123; color: #0593d3;//默认的链接样式 border-bottom: none; border-bottom: 1px solid #0593d3;//选时显示橙色 &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125;那么在哪里添加这超链接呢？,打开Next主题的下面的：themes\next\source\css\_common\components\post\post.styl在.post-body选择器下面添加上面的选择器：如下图所示：然后启动本地服务器即可看到效果，确认无误后就部署到GitHub上。本文链接: hexo next主题修改分类页面的超链接样式]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>Next主题配置</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用java给Hexo博客内文章更新HexoFrontMatter]]></title>
    <url>%2Fblog%2Fe767edb8%2F</url>
    <content type="text"><![CDATA[之前我已经用java写了一个自动生成HexoFrontMatter的工具程序，我用的也还行。但是，我之前写的文章很不规范，目录也乱放。后面我绝对markdown文件名不和是，或者所在的目录不合适我都会修改过来，但是这就要求对相应的HexoFrontMatter也要对应的修改过来。之前的程序不能满足这样的功能。我需要重新写一个工具程序，或者，修正之前的代码，支持更新功能。本文链接: 使用java给Hexo博客内文章更新HexoFrontMatter]]></content>
      <categories>
        <category>我的软件</category>
        <category>Hexo博客工具程序</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo部署问题 Error Connection reset by 192.30.253.112 port 22]]></title>
    <url>%2Fblog%2F2842eab3%2F</url>
    <content type="text"><![CDATA[今天双线部署的时候遇到了下面的问题,因为网络中途断了,传输过程被打断，而导致传输失败,后面也一直部署不上。我发现部署到GitHub上是没问题的，部署到Coding的时候一直部署不上去。后面一通乱试了之后，解决了问题，下面是过程：1234567891011121314151617181920212223INFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master 75140863] Site updated: 2018-10-24 22:50:16 29 files changed, 347 insertions(+), 347 deletions(-)Connection reset by 192.30.253.112 port 22fatal: The remote end hung up unexpectedlyfatal: The remote end hung up unexpectedlyFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: Connection reset by 192.30.253.112 port 22fatal: The remote end hung up unexpectedlyfatal: The remote end hung up unexpectedly at ChildProcess.&lt;anonymous&gt; (D:\Blog\bolg5\node_modules\hexo-util\lib\spawn.js:37:17) at emitTwo (events.js:126:13) at ChildProcess.emit (events.js:214:7) at ChildProcess.cp.emit (D:\Blog\bolg5\node_modules\cross-spawn\lib\enoent.js:40:29) at maybeClose (internal/child_process.js:915:16) at Socket.stream.socket.on (internal/child_process.js:336:11) at emitOne (events.js:116:13) at Socket.emit (events.js:211:7) at Pipe._handle.close [as _onclose] (net.js:561:12)有人建议删除.deploy_git文件夹，然后重新部署。我试了无效，GitHub可以部署，Coding还是无法部署上去，因为我用的双线部署。我猜的GitHub已经部署成功了，在部署Coding的时候，网络刚好断开了。所以无法部署到Coding。然后我尝试，单独部署到Coding看看，所以注释掉GitHub的部署配置项：123456deploy: type: git repo: #github: git@github.com:用户名/用户名.github.io.git # Github pages地址 coding: git@git.coding.net:用户名/用户名.coding.me.git #coding地址 branch: master单独部署到coding上，发现是可以的。然后我再重新重新尝试双部署。发现又可以了123456deploy: type: git repo: github: git@github.com:用户名/用户名.github.io.git # Github pages地址 coding: git@git.coding.net:用户名/用户名.coding.me.git #coding地址 branch: master所以呢，这篇文章写得什么东西呢?额，就当是记录一个把问题范围缩小的思想吧，一个可能的解决方案，虽然我不知道发生了什么。参考：http://www.cnblogs.com/wumz/p/9820295.html参考：http://www.cnblogs.com/wumz/p/9820314.html本文链接: Hexo部署问题 Error Connection reset by 192.30.253.112 port 22]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正则应用：匹配Windows路径]]></title>
    <url>%2Fblog%2F93d942f1%2F</url>
    <content type="text"><![CDATA[下面的文本中有好多路径如:D:\dev\workspace\HexoTools，我想用markdown代码段标记出来。123456### 文件位置 ###- java工程位置：D:\dev\workspace\HexoTools- java源码位置：D:\dev\workspace\HexoTools\src\front\matter\tools\HexoFrontMatter.java- jar包文件位置：D:\dev\java\my\runable\HexoTools\FrontMatter\HexoFrontMatter.jar- bat文件位置：D:\dev\java\my\runable\HexoTools\FrontMatter\HexoFrontMatter.bat- 快捷方式位置：D:\快捷方式\HexoFrontMatter.lnk也就是替换为：123456### 文件位置 ###- java工程位置：`D:\dev\workspace\HexoTools`- java源码位置：`D:\dev\workspace\HexoTools\src\front\matter\tools\HexoFrontMatter.java`- jar包文件位置：`D:\dev\java\my\runable\HexoTools\FrontMatter\HexoFrontMatter.jar`- bat文件位置：`D:\dev\java\my\runable\HexoTools\FrontMatter\HexoFrontMatter.bat`- 快捷方式位置：`D:\快捷方式\HexoFrontMatter.lnk`这里使用的编辑器是：editplus，打开这篇文章，按下ctrl+h,打开查找替换，使用下面的正则表达式查找正则:1(\w:(?:\\.+)+)替换正则：1`$1`这个匹配的不是很正确，使用的时候我还不敢点全部替换，我对正则表达式的掌握还不够,还得继续去学。本文链接: 正则应用：匹配Windows路径]]></content>
      <categories>
        <category>正则表达式</category>
        <category>实例</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客问题 新部署文章的加载不出来]]></title>
    <url>%2Fblog%2F6da07097%2F</url>
    <content type="text"><![CDATA[这是因为浏览器缓存的原因，所以最新推送的文章可能不能很快刷新出来。解决方法:在浏览器中按下Ctrl+F5强制刷新,强制刷新会直接从服务器获取文件,这样就能看到新发布的文章了。本文链接: Hexo博客问题 新部署文章的加载不出来]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EditPlus自定义markdown插件]]></title>
    <url>%2Fblog%2F35941a7a%2F</url>
    <content type="text"><![CDATA[问题描述因为MarkdownPad2不支持正则表达式，我不能进行匹配的操作，无意中发现EditPlus这个文本编辑器支持正则表达式。而且它还支持用户自定义插件，这点我很喜欢。网上找了一通，没有现成的EditPlus的Markdown插件(快捷键)。所以我就自己来写吧。现在支持的操作有：标题：H1H2H3H4代码段代码块租体斜体引用超链接图片具体的实现步骤如下：标题H1.java代码：12345678910package editplus.markdown.tools.heads;public class H1&#123; public static void main(String[] args) &#123; //1级标题 System.out.print("# "+args[0]+" #"); &#125;&#125;嗯，代码就真简单。然后把H1.java打包成可执行H1.jar包,记下H1.jar包的路径,我这里是：D:\dev\java\my\runable\EditplusTools\heading然后，打开editplus进行设置，点击Tools--&gt;Configure User Tools…然后在Groups and tool items:下拉框中选择一个Group,然后点击Group Name…按钮，在弹出的对话框中，输入新的名字MarkdownTools,点击OK.然后点击Add Tool&gt;&gt;，选择Program然后在Menu Text:中输入工具的名称H1,在Command：中输入指令java -jar.接着点击Argument：对话框右边带黑色三角形的按钮，展开参数列表。在参数列表中选择Current Selection,这个参数表示，我们当前选中的文本。然后在参数前面，加上jar包的名称:H1.jar,然后打上一个空格分隔两个参数。这样参数就设置好了，现在来设置Initial项，点击右侧的按钮，然后点击Browse…找到H1.jar所在的目录(D:\dev\java\my\runable\EditplusTools\heading),或者直接把路径粘贴进来也行。然后来设置Action项，选择：Run as Text Filter(Replace),这个选项表示，使用程序H1.jar的运行结果(这里的运行结构指的是控制台输出,也就是System.out.print(&quot;# &quot;+args[0]+&quot; #&quot;);),来替换当前选中的文本。这样就设置完毕了，可以使用了。点击Apply或者Ok即可。然后选择我们刚设置的插件：Tools--&gt;User Tool Group--&gt;MarkdownTools，我这里因为之前配置好了，所以有两个MarkdownTools。然后，新建一个测试.md文件，随便写点东西，然后选中文本，点击Tools--&gt;H1,或者按下快捷键ctrl+1:然后就可以看到效果了：其他插件H2,H3,H4都类似，只是代码不同而已，如，H4.java,就相应的设置为：12345678910package editplus.markdown.tools.heads;public class H4&#123; public static void main(String[] args) &#123; //4级标题 System.out.print("#### "+args[0]+" ####"); &#125;&#125;代码段123456789package editpuls.markdown.tools.code;public class CodeSegment&#123; public static void main(String[] args) &#123; System.out.println("`"+args[0]+"`"); &#125;&#125;代码块123456789package editpuls.markdown.tools.code;public class CodeBlock&#123; public static void main(String[] args) &#123; System.out.print("```\n"+args[0]+"\n```"); &#125;&#125;粗体123456789package editpuls.markdown.tools.stong;public class Strong&#123; public static void main(String[] args) &#123; System.out.print("**"+args[0]+"**"); &#125;&#125;斜体123456789package editpuls.markdown.tools.italic;public class Italic&#123; public static void main(String[] args) &#123; System.out.print("*"+args[0]+"*"); &#125;&#125;引用123456789package editpuls.markdown.tools.quote;public class Quote&#123; public static void main(String[] args) &#123; System.out.print("&gt; "+args[0]); &#125;&#125;超链接1234567891011package editpuls.markdown.tools.hyperlink;import clipboard.util.SysClipboardUtil;public class Hyperlink2&#123; public static void main(String[] args) &#123; System.out.print("["+args[0]+"]("+SysClipboardUtil.getSysClipboardText()+")"); &#125;&#125;这里的默认的超链接是放在剪贴板中的，一般在markdown中超链接也是通过粘贴的方式输入的。在editplus中传入更多的命令行参数来实现，但是比较复杂，而且效果也不好。所以先复制好超链接再来调用该插件。图片1234567891011package editpuls.markdown.tools.image;import clipboard.util.SysClipboardUtil;public class Image&#123; public static void main(String[] args) &#123; System.out.print("!["+args[0]+"]("+SysClipboardUtil.getSysClipboardText()+")"); &#125;&#125;和超链接一样，图片的链接也要实现放在剪贴板中。这样的方式代码量最小。总结主要看第一步，后面的代码都差不多。还可以接着设置更过的自定义插件。本文链接: EditPlus自定义markdown插件]]></content>
      <categories>
        <category>我的软件</category>
        <category>Markdown工具</category>
        <category>自定义插件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java中BufferedImage类的用法]]></title>
    <url>%2Fblog%2Fd819de9c%2F</url>
    <content type="text"><![CDATA[首先必须明确的是：要想操作一张图片，首先必须将其从磁盘加载到内存中，然后才能对图片做进一步的处理。继承关系123java.lang.Object |----&gt; java.awt.Image |----&gt; java.awt.image.BufferedImageBufferedImage是Image的一个子类，Image和BufferedImage的主要作用就是将一副图片加载到内存中。BufferedImage生成的图片在内存里有一个图像缓冲区，利用这个缓冲区我们可以很方便的操作这个图片，通常用来做图片修改操作如大小变换、图片变灰、设置图片透明或不透明等。Java将一副图片加载到内存中的方法是：1BufferedImage bufferedImage = ImageIO.read(new FileInputStream(filePath));本文链接: java中BufferedImage类的用法]]></content>
      <categories>
        <category>Java</category>
        <category>java 图片操作</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[移除win10多余的微软拼音输入法]]></title>
    <url>%2Fblog%2F3cc3e684%2F</url>
    <content type="text"><![CDATA[问题描述我不是很喜欢win10自带的微软拼音输入法，自己安装了搜狗拼音输入法，但是这样同时用两个输入法，经常需要按下shift+ctrl进行切换。我不喜欢来回切换输入法,现在来介绍移除多余的微软拼音输入法。步骤打开设置进入时间和语言选择区域和语言单击中文(中华人民共和国)，然后选择选项然后再键盘中单机微软拼音，然后点击删除即可移除掉微软拼音输入法本文链接: 移除win10多余的微软拼音输入法]]></content>
      <categories>
        <category>其他</category>
        <category>Windows相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[markdown语法 待办事项]]></title>
    <url>%2Fblog%2F8859faa9%2F</url>
    <content type="text"><![CDATA[摘要Markdown待办事项语法MarkdownPad2 中支持待办事项Markdown待办事项语法不是所有的markdown都支持待办事项的，语法：横框+ 空格+方括号（方括号中必须有空格或者x） + 空格+ 文本。例如：123- [x] test- [ ] test2- [ ] test4已经完成的事项，在中括号中写入英文x,未完成的事项在中括号中的写入空格,显示效果：已经完成的事项未完成的事项MarkdownPad2 中支持待办事项点击左下角的M图标切换CSS模式，选择GitHub Flavored Markdown (Offline)。这样导出的html就支持待办事项了。再按下ctrl+shift+1导出为html，就可查看效果了：本文链接: markdown语法 待办事项]]></content>
      <categories>
        <category>markdown使用</category>
        <category>markdown语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[重装系统后的Git配置]]></title>
    <url>%2Fblog%2F68ac5364%2F</url>
    <content type="text"><![CDATA[第1步 重新创建SSH key第2步 GitHub中添加新的公钥第3步 配置GitHub上的邮箱和用户名第4步: 部署到GitHub pages第1步创建SSH Key。在用户主目录(Windows中对应：C:\Users\用户名\)下：看看有没有.ssh目录,如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了这两个文件，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：1ssh-keygen -t rsa -C &quot;youremail@example.com&quot;你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。第2步 GitHub中添加新的公钥登陆GitHub，点击头像上的下拉菜单，打开“Settings”，“SSH and GPG keys”页面：然后，点击delete按钮删除掉之前的无效公钥，因为重装系统后私钥已经丢失了的。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：第3步 配置GitHub上的邮箱和用户名更换密钥后还需要再git中配置邮箱和用户名，如果没有配置邮箱和用户名的话无法部署到github中，错误信息如下：123456789101112131415$ hexo dINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...*** Please tell me who you are.Run git config --global user.email &quot;you@example.com&quot; git config --global user.name &quot;Your Name&quot;to set your account&apos;s default identity.Omit --global to set the identity only in this repository.按照提示信息，输入你GitHub上的邮箱和用户名即可：12git config --global user.email &quot;you@example.com&quot;git config --global user.name &quot;Your Name&quot;第4步: 部署到GitHub pages设置成功后，现在打开giit-bash中，cd到站点目录下，运行Hexo d：把博客部署到GitHub上：12345678910$ hexo d...... rewrite page/6/index.html (66%) copy page/&#123;5 =&gt; 7&#125;/index.html (71%) rename page/&#123;7 =&gt; 8&#125;/index.html (71%) rename page/&#123;8 =&gt; 9&#125;/index.html (67%)Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;git@github.com:lanlan2017/lanlan2017.github.io.git&apos;.To github.com:lanlan2017/lanlan2017.github.io.git 7090d3f9..69a6b246 HEAD -&gt; masterINFO Deploy done: git可以看到已经部署成功了。本文链接: 重装系统后的Git配置]]></content>
      <categories>
        <category>其他</category>
        <category>重装系统</category>
        <category>备份与恢复</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[NodeJS安装以及环境变量配置]]></title>
    <url>%2Fblog%2Fa99b2ae3%2F</url>
    <content type="text"><![CDATA[1、本机系统：Windows 10 专业版（64位）2、Node.js：v8.12.0LTS（64位）安装具体步骤看这篇博客，我懒得再写一遍了：https://www.cnblogs.com/zhouyu2017/p/6485265.html安装完毕后，记下Node.js的安装位置，我这里是：F:\Program Files\nodejs\。配置环境变量创建全局模块安装目录，缓存目录说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，这样会占用C盘空间。例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【F:\Program Files\nodejs】下创建两个文件夹【node_global】及【node_cache】如：创建完两个空文件夹之后，打开cmd命令窗口，输入：12npm config set prefix &quot;F:\Program Files\nodejs\node_global&quot;npm config set cache &quot;F:\Program Files\nodejs\node_cache&quot;这里的F:\Program Files\nodejs是我的node.js安装路径。以你的路径为准。配置环境变量新建系统环境变量：NODE_PATH，输入：1F:\Program Files\nodejs\node_global\node_modules同样，我这里的F:\Program Files\nodejs\是Node.js的安装路径，以你的为准。然后在Path环境变量中添加新的值:1F:\Program Files\nodejs\node_global六、测试配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，输入如下命令进行模块的全局安装：1npm install express -g这样模块就安装到的F盘了,这样可以减少C盘的占用。本文链接: NodeJS安装以及环境变量配置]]></content>
      <categories>
        <category>其他</category>
        <category>重装系统</category>
        <category>备份与恢复</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[重装后Hexo相关配置]]></title>
    <url>%2Fblog%2Fd299d5c4%2F</url>
    <content type="text"><![CDATA[系统重装后,跟最初搭建的步骤一致：首先重新安装Node.js然后安装Hexo测试安装Hexo是否成功安装：输入hexo s命令查看效果。安装配置Node.js安装Hexo重新配置好Node.js后：博客站点目录，输入下面命令安装Hexo:1npm install hexo-cli -g使用hexo 命令管理博客输入命令:1hexo s启动本地服务器，如果，启动成功，则说明没有问题，在浏览器中打开即可。参考https://blog.csdn.net/gdutxiaoxu/article/details/53576018本文链接: 重装后Hexo相关配置]]></content>
      <categories>
        <category>其他</category>
        <category>重装系统</category>
        <category>备份与恢复</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[重装后无法使用Node.js命令]]></title>
    <url>%2Fblog%2F287a2db3%2F</url>
    <content type="text"><![CDATA[问题描述电脑中毒崩溃后，我重装系统后我发现node命令无法使用了，hexo命令也无法使用。解决方案如果node.js和hexo安装在系统盘，那么重装node.js,重装hexonode.js和hexo安装在非系统盘，那重新配置环境变量即可。我这里采用第一中方案，虽然我的node.js安装在非系统盘，但是我现在并不知道，node.js需要什么环境变量。所以我这里先重装，在看看Node.js会创建什么环境变量，我将记下这些变量，下次我就直接配置就行了，免得我在重新安装。下载node.js和安装细节忽略Node.js需要的环境变量安装后，我翻看了环境变量列表，发现新增Path环境变量：1F:\Program Files\nodejs\其他环境变量暂时没有找到，以后如果电脑再次崩溃，先给Node.js配置Path环境变量。应该不需要配置其他环境变量。本文链接: 重装后无法使用Node.js命令]]></content>
      <categories>
        <category>其他</category>
        <category>重装系统</category>
        <category>备份与恢复</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通第3章 3-2了解 JavaScript]]></title>
    <url>%2Fblog%2F6b4d0bbb%2F</url>
    <content type="text"><![CDATA[什么是 JavaScriptJavaScript的主要特点JavaScript的语法什么是 JavaScriptJavaScript是一种基于对象和事件驱动并具有安全性能的解释型脚本语言,在Web应用中得到了非常广泛的应用。它不需要进行编译,而是直接嵌入在HTP页面中,把静态页面转变成支持用户交互并响应应用事件的动态页面。在 Java Web程序中,经常应用 JavaScript进行数据验证、控制浏览器以及生成时钟、日历和时间戳文档等。JavaScript的主要特点JavaScript适用于静态或动态网页,是一种被广泛使用的客户端脚本语言。它具有解释性、基于对象、事件驱动、安全性和跨平台等特点,下面进行详细介绍。解释性JavaScript是一种脚本语言,采用小程序段的方式实现编程。和其他脚本语言一样, JavaScript也是一种解释性语言,它提供了一个简易的开发过程。基于对象javaScript是种基于对象的语言.它可以应用自己创建的对象,因此许多功能来自于脚本环境中象的方法与脚本的相互作用。事件驱动JavaScript可以以事件驱动的方式直接对客户端的输入作出响应,无须经过服务器端程序。说明事件驱动就是用户进行某种操作(如按下鼠标、选择菜单等),计算机随之作出相应的响应。这里的某种操作称之为事件,而计算机作出的响应称之为事件响应。安全性JavaScript具有安全性。它不允许访问本地硬盘,不能将数据写入到服务器上,并且不允许对网络文档进行修改和删除,只能通过浏览器实现信息浏览或动态交互,从而有效地防止数据的丢失。跨平台JavaScript依赖于浏览器本身,与操作系统无关,只要浏览器支持 Javascript, JavaScript的程序代码就可以正确执行。JavaScript的语法JavaScript与Java在语法上有些相似,但也不尽相同。下面将结合Java语言对编写 JavaScript代码时需要注意的事项进行详细介绍JavaScript区分大小写JavaScript区分大小写,这一点与Java语言是相同的。例如,变量 username与变量 userName是两个不同的变量。每行结尾的分号可有可无与Java语言不同, JavaScript并不要求必须以分号(;)作为语句的结束标记。如果语句的结束处没有分号, JavaScript会自动将该行代码的结尾作为语句的结尾每行末尾添加分号与不添加分号,实例代码如下:12alert("您好!欢迎访问我公司网站!")alert("您好!欢迎访问我公司网站!");不过，最妤的代码编写习惯是在每行代码的结尾处加上分号,这样可以保证每行代码的准确性。变量是弱类型的与Java语言不同, JavaScript的变量是弱类型的。因此在定义变量时,只使用var运算符,就可以将变量初始化为任意的值。例如,通过以下代码可以将变量 username初始化为 “haha”,而将变量age初始化为20。12var username="haha";var age=20;使用大括号标记代码块与Java语言相同, JavaScript也是使用一对大括号标记代码块,被封装在大括号内的语句将按顺序执行。注释在 JavaScript中,提供了两种注释,即单行注释和多行注释。下面进行详细介绍。单行注释使用双斜线”\\”开头,在”\\”后面的文字为注释内容,在代码执行过程中不起任何作用。多行注释以”/*“开头,以”*/“结尾,在”/“和”*/“之间的内容为注释内容,在代码执行过程中不起任何作用。JavaScript中的关键字JavaScript中的关键字是指在 JavaScript中具有特定含义的、可以成为 JavaScript语法中一部分的字符。与其他编程语言一样, JavaScript中也有许多关键字, JavaScript中的关键字如下表所示。列名列名列名列名列名列名abstractcontinuefinallyinstanceofprivatethisbooleandefaultfoatintpublicthrowbreakdoforinterfacereturntypeofbytedoublefunctionlongshorttruecaseelsegotonativestaticvarcatchextendsImplementsnewsupervoidcharfalseImportnullswitchwhileclassfinalinackagesynchronizedwith注意:javascript中的关键字不能用作变量名、函数名以及循环标签。JavaScript的数据类型JavaScript的数据类型比较简单,主要有数值型、字符型、布尔型、转义字符、空值(null)和未定义值6种,下面分别进行介绍。数值型javaScript的数值型数据又可以分为整型和浮点型两种,下面分别进行介绍。整型JavaScript的整型数据可以是正整数、负整数和0,并且可以采用十进制、八进制或十六进制来表示。例如定义整型变量:123789 //十进制071 //八进制0x9405B //十六进制说明:以0开头的数为八进制数,以0x开头的数为十六进制数浮点型浮点型数据由整数部分加小数部分组成,只能采用十进制,但是可以使用科学记数法或是标准方法来表示。例如:123.1415926; //用标准方法表示1.6E5; //用科学记数法表示,代表$1.6\time10^&#123;5&#125;$字符串型字符型数据是使用单引号或双引号括起来的一个或多个字符JavaScript与Java不同,它没有char数据类型,要表示单个字符,必须使用长度为1的字符串布尔型布尔型数据只有两个值,即true或fase,主要用来说明或代表一种状态或标志。在 JavaScript中,也可以使用整数0表示 false,使用非0的整数表示true。转义字符以反斜杠开头的不可显示的特殊字符通常称为控制字符,也被称为转义字符。通过转义字符可以在字符串中添加不可显示的特殊字符,或者防止引号匹配混乱的问题。 JavaScript常用的转义字符如下表所示。序号转义字符描述1\b退格2\f换页3\r回车符4\n换行符5\tTab符6\&#39;单引号7\&quot;双引号8\\反斜杠9\xnn十六进制代码nn表示的字符10\unnnn十六进制代码nnnn表示的Unicode字符11\0nnn八进制代码nnn表示的字符实例在网页中弹出一个提示对话框,并应用转义字符“r”将文字分为两行显示,代码如下:1alert("欢迎访问我公司网站!\n http://www.yousite.com");空值JavaScript中有一个空值(null),用于定义空的或不存在的引用。如果试图引用一个没有定义的变量,则返回一个null值。注意：空值不等于空的字符串(\”)或0。未定义值当使用了一个并未声明的变量,或者使用了一个已经声明但没有赋值的变量时,将返回未定义值(undefined)。JavaScript中还有一种特殊类型的数字常量NaN,即“非数字”。当在程序中由于某种原因发生计算错误后,将产生一个没有意义的数字,此时 JavaScript返回的数字值就是NaN变量的定义及使用变量是指程序中一个已经命名的存储单元,其主要作用就是为数据操作提供存放信息的容器。在使用变量前,必须明确变量的命名规则、变量的声明方法以及变量的作用域。变量的命名规则JavaScript变量的命名规则如下:变量名由字母、数字或下划线组成,但必须以字母或下划线开头。变量名中不能有空格、加号、减号或逗号等符号。不能使用 Javascript中的关键字。JavaScript的变量名是严格区分大小写的。例如, arr_week与 arr_Week代表两个不同的变量。变量的声明在 JavaScript中,可以使用关键字var声明变量,其语法格式如下:1var vanable;参数说明:variable:用于指定变量名,该变量名必须遵守变量的命名规则。变量声明规则在声明变量时需要遵守以下规则:可以使用一个关键字var同时声明多个变量可以在声明变量的同时对其进行赋值,即初始化如果只是声明了变量,但未对其赋值,则其默认值为 undefined当给一个尚未声明的变量赋值时, JavaScript会自动用该变量名创建一个全局变量。在一个函数内部,通常创建的只是一个仅在函数内部起作用的局部变量,而不是一个全局变量。要创建一个全局变量,则必须使用var关键字进行变量声明。由于 JavaScript采用弱类型,所以在声明变量时不需要指定变量的类型,而变量的类型将根据变量的值来确定。变量的作用域变量的作用域是指变量在程序中的有效范围。在 JavaScript中,根据变量的作用域可以将变量分为全局变量和局部变量两种。全局变量是定义在所有函数之外,作用于整个脚本代码的变量;局部变量是定义在函数体内,只作用于函数体内的变量。下面的代码将说明变量的作用域1234567&lt;script&gt; var globalVar = &quot;全局变量&quot;; //该变量在函数外声明，作用于整个脚本代码 function show() &#123; var localVar=&quot;局部变量&quot;; //该变量在函数内声明，只作用于该函数体 &#125;&lt;/script&gt;运算符的应用赋值运算符算术运算符比较运算符逻辑运算符条件运算符条件运算符是 JavaScript支持的一种特殊的三目运算符,其语法格式如下:1操作数?结果1:结果2如果“操作数”的值为tue,则整个表达式的结果为“结果1”,否则为“结果2”。字符串运算符字符串运算符是用于两个字符型数据之间的运算符,除了比较运算符外,还可以是+和+=运算符。其中,+运算符用于连接两个字符串,而+=运算符则连接两个字符串,并将结果赋给第一个字符串。【例317】在网页中弹出一个提示对话框,显示进行字符串运算后变量a的值。代码如下:12345&lt;script&gt; var hello = "hello"; hello += "world"; alert(hello);&lt;/script&gt;显示效果：本文链接: Java Web从入门到精通第3章 3-2了解 JavaScript]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通第3章 3-1本章概述]]></title>
    <url>%2Fblog%2F9f6068bc%2F</url>
    <content type="text"><![CDATA[JavaScript是Web页面中一种比较流行的脚本语言,它由客户端浏览器解释执行,可以应用在JSP、PHP、ASP等网站中。同时,随着Ajax进入Web开发的主流市场, JavaScript已经被推到了舞台的中心,因此,熟练掌握并应用 JavaScript对于网站开发人员来说非常重要。本章将详细介绍 JavaScript的基本语法、常用对象及DOM技术。通过阅读本章,您可以:了解什么是 JavaScript以及 JavaScript的主要特点掌握 JavaScript语言基础掌握 JavaScript的流程控制语句掌握 JavaScript中函数的应用掌握 JavaScript常用对象的应用掌握 DOM技术本文链接: Java Web从入门到精通第3章 3-1本章概述]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[笔记本扬声器突然没有声音]]></title>
    <url>%2Fblog%2Fd33f0352%2F</url>
    <content type="text"><![CDATA[我是因为前阵子收件吧瑞星驱动删除掉了，把瑞星驱动下载下来重新安装即可。点击扬声器的按钮，识别扬声器的名字如：1扬声器( conexant20751 SmartAudio hd)然后下载对应的驱动，进行安装即可。我当初在卸载软件的时候，不小心把驱动删掉了。重新下载安装即可。本文链接: 笔记本扬声器突然没有声音]]></content>
      <categories>
        <category>其他</category>
        <category>Windows相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[word中使用MathType插入LaTeX公式]]></title>
    <url>%2Fblog%2Fbff020ff%2F</url>
    <content type="text"><![CDATA[准备安装word2016安装MathType熟悉Latex语法首先需要先安装MathType,安装最新版即可。要安装到C盘，安装到其他地方可能使用不了。word2016成功集成了MathType的效果：Word2016中切换到MathType选项卡，点击Inline,把公式：$c=\frac{a}{b}$,复制，然后粘贴到MathTyte输入框即可显示公式。显示效果：word中显示效果：但是这样好奇快啊，我总不能先在word中写好公式，然后在复制粘贴看效果，就先这么用吧。本文链接: word中使用MathType插入LaTeX公式]]></content>
      <categories>
        <category>其他</category>
        <category>Windows相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正则实例：多行html代码合并为一行]]></title>
    <url>%2Fblog%2F72162c39%2F</url>
    <content type="text"><![CDATA[有时候为了阅读方便，可以使用正则表达式把多行html代码合并到一行。有下面这样一段HTML代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;span style="cursor:auto"&gt; Auto&lt;/span&gt; &lt;br /&gt;&lt;span style="cursor:crosshair"&gt; Crosshair&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:default"&gt; Default&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:pointer"&gt; Pointer&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:move"&gt; Move&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:e-resize"&gt; e-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:ne-resize"&gt; ne-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:nw-resize"&gt; nw-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:n-resize"&gt; n-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:se-resize"&gt; se-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:sw-resize"&gt; sw-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:s-resize"&gt; s-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:w-resize"&gt; w-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:text"&gt; text&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:wait"&gt; wait&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:help"&gt; help&lt;/span&gt;例如第一句：123&lt;span style="cursor:auto"&gt; Auto&lt;/span&gt; &lt;br /&gt;改成：1&lt;span style="cursor:auto"&gt;Auto&lt;/span&gt;&lt;br /&gt;当然我是不可能一行行的来改的。使用正则表达式来做比较方便。匹配表达式：1(&lt;span.*?&gt;)\n\s+(.*&lt;/span&gt;)\n\s+匹配效果(VScode中)：html代码，会被括号捕获到，而换行符和空白符就不会被捕获，使用捕获到的html代码替换掉原来匹配的文本即可。所以替换的正则表达式为：1$1$2$1表示第一个捕获组，$2表示第二个捕获组。捕获组不同的软件(体系)中的表示方式不同。VScode中是使用$1,$2,… 而NotePad++中使用的是\1,\2,\3...。使用上述正则表达式是进行替换即可。替换后的结果为：123456789101112131415161718&lt;p&gt;请把鼠标移动到单词上，可以看到鼠标指针发生变化：&lt;/p&gt;&lt;span style="cursor:auto"&gt;Auto&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:crosshair"&gt;Crosshair&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:default"&gt;Default&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:pointer"&gt;Pointer&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:move"&gt;Move&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:e-resize"&gt;e-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:ne-resize"&gt;ne-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:nw-resize"&gt;nw-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:n-resize"&gt;n-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:se-resize"&gt;se-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:sw-resize"&gt;sw-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:s-resize"&gt;s-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:w-resize"&gt;w-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:text"&gt;text&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:wait"&gt;wait&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:help"&gt; help&lt;/span&gt;当然最后一句，并没有能够成功匹配到。但这样的效果。还算满意,因为现在我只需要修改最后一行的效果。当然最佳的方式，应该是现在VScode中看匹配的结果。编写更好的正则表达式，尽可能匹配到所有的内容。完美的正则表达式为：1(&lt;span.*?&gt;)\n\s+(.*&lt;/span&gt;)(:?\n\s+)?这样所有的span标签都会被匹配到。替换后的效果为：1234567891011121314151617&lt;p&gt;请把鼠标移动到单词上，可以看到鼠标指针发生变化：&lt;/p&gt;&lt;span style="cursor:auto"&gt;Auto&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:crosshair"&gt;Crosshair&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:default"&gt;Default&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:pointer"&gt;Pointer&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:move"&gt;Move&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:e-resize"&gt;e-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:ne-resize"&gt;ne-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:nw-resize"&gt;nw-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:n-resize"&gt;n-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:se-resize"&gt;se-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:sw-resize"&gt;sw-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:s-resize"&gt;s-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:w-resize"&gt;w-resize&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:text"&gt;text&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:wait"&gt;wait&lt;/span&gt;&lt;br /&gt;&lt;span style="cursor:help"&gt;help&lt;/span&gt;本文链接: 正则实例：多行html代码合并为一行]]></content>
      <categories>
        <category>正则表达式</category>
        <category>实例</category>
        <category>匹配HTML标签</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通 第二章 小结，实践与练习]]></title>
    <url>%2Fblog%2F95fa3c8d%2F</url>
    <content type="text"><![CDATA[小结实践与练习练习1 创建HIML页面,实现在页面中使用删除线样式标注商品特价相关知识：span标签CSS text-decoration 属性练习2 创建HTML页面,并在其中添加表格,实现在浏览网站信息时鼠标经过表格的某个单元格,会显示相关的提示信息。相关知识：title属性小结本章介绍了网页设计中不可缺少的内容,即HTML标记与CSS样式。HTML是构成网页的灵魂,对于制作一般的网页,尤其是静态网页来说,HIML完全可以胜任,但如果要制作漂亮的网页,CSS是不可缺少的。本章除了对HTML与CSS样式表的基础内容进行讲解外,还对2010年较受关注的内容HTML5与CSS3进行了简单的介绍,以此来带领广大读者进入Web学习之旅。实践与练习练习1要求创建HIML页面,实现在页面中使用删除线样式标注商品特价。实现代码123456789101112131415&lt;html&gt;&lt;head&gt; &lt;title&gt;使用删除线样式标注商品特价&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;/head&gt;&lt;body&gt; &lt;img src="bike.jpg" width="200" height="165"&gt; &lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;span style="text-decoration:line-through"&gt;原价：796（元）&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span&gt;现价：399（元）&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;显示效果：这里，我不懂span标签，先来查一下&lt;span&gt;元素。&lt;span&gt;元素定义和用法&lt;span&gt;标签被用来组合文档中的行内元素。span 没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。例子1&lt;p&gt;&lt;span&gt;span中的文本。&lt;/span&gt;其他文本&lt;/p&gt;显示效果：span中的文本。其他文本如果不对 span 应用样式，那么 span 元素中的文本与其他文本不会任何视觉上的差异。尽管如此，上例中的 span 元素仍然为 p 元素增加了额外的结构。可以为 span 应用 id 或 class 属性，这样既可以增加适当的语义，又便于对 span 应用样式。可以对同一个&lt;span&gt; 元素应用 class 或 id 属性，但是更常见的情况是只应用其中一种。这两者的主要差异是，class 用于元素组（类似的元素，或者可以理解为某一类元素），而 id 用于标识单独的唯一的元素。提示：事实上，您也许已经注意到了，W3School 站点上有一些文本的样式与其他文本是不同的。比如“提示”使用了粗体的橘红色。尽管实现这种效果的方法非常多，但是我们的做法是：使用“提示”使用 span 元素，然后对这个 span 元素的父元素，即 p 元素应用 class，这样就可以对这个类的子元素 span 应用相应的样式了。HTML:1&lt;p class="tip"&gt;&lt;span&gt;提示：&lt;/span&gt;... ... ...&lt;/p&gt;CSS:1234p.tip span &#123; font-weight:bold; color:#ff9955;&#125;完整代码：12345678910111213141516171819&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;测试span标签&lt;/title&gt; &lt;style&gt; /* 定义span标签的样式，这个span标签是是class为tip的p元素的子标签 */ p.tip span &#123; font-weight: bold; color: #ff9955; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class="tip"&gt;&lt;span&gt;提示：&lt;/span&gt;事实上，您也许已经注意到了，W3School 站点上有一些文本的样式与其他文本是不同的。比如“提示”使用了粗体的橘红色。尽管实现这种效果的方法非常多，但是我们的做法是：使用“提示”使用 span 元素，然后对这个 span 元素的父元素，即 p 元素应用 class，这样就可以对这个类的子元素 span 应用相应的样式了。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;显示效果如下：其次我也不懂这个text-decorationCSS属性，查资料CSS text-decoration 属性定义和用法text-decoration 属性规定添加到文本的修饰。注释：修饰的颜色由 “color” 属性设置。说明这个属性允许对文本设置某种效果，如加下划线。如果后代元素没有自己的装饰，祖先元素上设置的装饰会“延伸”到后代元素中。不要求用户代理支持 blink。可能的值值描述none默认。定义标准的文本。underline下划线。overline上划线line-through定义穿过文本下的一条线。也就是删除线blink定义闪烁的文本。inherit规定应该从父元素继承 text-decoration 属性的值。实例12345678910111213141516171819&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;style type="text/css"&gt; h1 &#123;text-decoration: overline&#125; h2 &#123;text-decoration: line-through&#125; h3 &#123;text-decoration: underline&#125; h4 &#123;text-decoration:blink&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;使用上划线 1&lt;/h1&gt; &lt;h2&gt;使用删除线 2&lt;/h2&gt; &lt;h3&gt;使用下划线 3&lt;/h3&gt; &lt;h4&gt;使用闪烁 4&lt;/h4&gt;&lt;/body&gt;&lt;/html&gt;显示效果：练习2创建HTML页面,并在其中添加表格,实现在浏览网站信息时鼠标经过表格的某个单元格,会显示相关的提示信息。实例代码：123456789101112131415161718192021222324252627282930&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;/head&gt;&lt;body&gt; &lt;table width="98%" height="114" border="0" cellpadding="0" cellspacing="1" bgcolor="#000000"&gt; &lt;!-- bgcolor="#666666" --&gt; &lt;tr&gt; &lt;!-- bgcolor="#FFFFFF" --&gt; &lt;td bgcolor="#FFFFFF" title="单元格1"&gt;单元格1&lt;/td&gt; &lt;td bgcolor="#FFFFFF" title="单元格2"&gt;单元格2&lt;/td&gt; &lt;td bgcolor="#FFFFFF" title="单元格3"&gt;单元格3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td bgcolor="#FFFFFF" title="单元格4"&gt;单元格4&lt;/td&gt; &lt;td bgcolor="#FFFFFF" title="单元格5"&gt;单元格5&lt;/td&gt; &lt;td bgcolor="#FFFFFF" title="单元格6"&gt;单元格6&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td bgcolor="#FFFFFF" title="单元格7"&gt;单元格7&lt;/td&gt; &lt;td bgcolor="#FFFFFF" title="单元格8"&gt;单元格8&lt;/td&gt; &lt;td bgcolor="#FFFFFF" title="单元格9"&gt;单元格9&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;显示效果：分析通过title属性可以实现上述效果。title属性定义和用法title 属性规定关于元素的额外信息。这些信息通常会在鼠标移到元素上时显示一段工具提示文本（tooltip text）提示：title 属性常与 form 以及 a 元素一同使用，以提供关于输入格式和链接目标的信息。同时它也是 abbr 和 acronym 元素的必需属性。语法1&lt;element title="value"&gt;title实例1&lt;abbr title="People's Republic of China"&gt;PRC&lt;/abbr&gt; was founded in 1949.bgcolor 属性定义和用法语法1&lt;body bgcolor="value"&gt;bgcolor 属性规定文档的背景颜色。bgcolor属性值值描述color_name规定颜色值为颜色名称的字体颜色（比如 “red”）。hex_number规定颜色值为十六进制值的字体颜色（比如 “#ff0000”）。rgb_number规定颜色值为 rgb 代码的字体颜色（比如 “rgb(255,0,0)”）。在上面上面的表格中，整个表格的背景颜色设置为黑色#000000而，单元格的背景颜色设置为白色#FFFFFF。这样达到了边框的效果。创建HTML页面,并在其中添加超链接,实现当鼠标经过超链接时,鼠标指针变为不同的形状。代码：123456789101112&lt;html&gt;&lt;head&gt; &lt;title&gt;改变鼠标的形状&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;/head&gt;&lt;body&gt; &lt;a href="#" style="cursor:pointer"&gt;将鼠标移动到我上，鼠标指针将变形&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;解析：这里主要是通过cursor属性来实现的。本文链接: Java Web从入门到精通 第二章 小结，实践与练习]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第2章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[自动生成for循环]]></title>
    <url>%2Fblog%2F49b2f12a%2F</url>
    <content type="text"><![CDATA[这里用java写了一个小工具，用来自动生成计数for循环。在编程中经常用到计数循环，如循环10遍：1234for(int i=0;i&lt;10;i++)&#123;&#125;经常要手动写还是很麻烦的，而eclipse中的自动补全代码生成的我并不满意。于是我自己来写一个for命令来自动生成计数for循环：1234567891011121314151617181920212223242526package auto.cerate.forloop;public class ForNum&#123; public static void main(String[] args) &#123; int times; String var=null; switch (args.length) &#123; case 1 : // 获取命令参数 times = Integer.parseInt(args[0]); System.out.println("for(int i=0;i&lt;" + times + ";i++)\n&#123;\n\n&#125;"); break; case 2 : //第一个命令行参数表示 计数变量 var=args[0]; //第一个命令行参数表示 次数 times = Integer.parseInt(args[1]); System.out.println("for(int "+var+"=0;"+var+"&lt;" + times + ";"+var+"++)\n&#123;\n\n&#125;"); break; &#125; &#125;&#125;现在把上面的代码打包成可执行jar,然后在运行窗口(快捷键：win+r)调用。下面是命令的发布和调用步骤：打包为可执行jar使用bat脚本调用jar在可执行jar同目录下，创建for.bat，内容如下：12@echo offstart javaw -jar for.jar %1 %2第一句代码表示关闭回显，第二句代码表示：以后台进程程方式启动for.jar程序。%1 %2表示for.bat接收到的第一个和第二个命令行参数，我们把这两个命令行参数传递给for.jar进程。到这里程序就可在cmd命令行中通过for.bat来调用了，如输入：for.bat 3,运行程序不会有任何输出。这是因为以javaw方式运行的java程序不带控制台，不会像控制台输出信息。那运行结果在哪里呢，就在剪贴板里。只需要按下ctrl+v快捷键粘贴即可：1234for(int i=0;i&lt;3;i++)&#123;&#125;代码中也不可能只有一层循环，如果有内层循环，则循环变量就不能在为i了，这时一般设第二层的循环变量为j,第三次循环变量为k。当然这个根据个人洗好进行选择。下面来测试两个参数的情况：cmd中输入for.bat k 3,命令执行完毕后，剪贴板中的内容：1234for(int k=0;k&lt;3;k++)&#123;&#125;好的，得到的效果和我想的一样。但是这样还是存在问题的，每次要先打开cmd命令行，然后cd到for.bat目录，然后再运行代码。这么多时间，我早就把代码打出来了。在运行窗口中运行java代码接下来介绍如何在运行窗口中运行上述命令，首先应该创建一个名为快捷方式的文件夹。并把该文件的路径配置到Path环境变量中。然后把for.bat的快捷方式发送到桌面，然后，重名名为for,放到快捷方式文件夹中。这样之后就可以直接在win+r运行窗口中直接输入命令for 次数来生成计数循环了：运行后剪贴板中的内容：1234for(int i=0;i&lt;3;i++)&#123;&#125;然后同时指定循环变量名和循环次数也是没问题的，如输入for k 6:1234for(int k=0;k&lt;6;k++)&#123;&#125;嗯，我的要求达到了。。。然后回去写代码去。本文链接: 自动生成for循环]]></content>
      <categories>
        <category>我的软件</category>
        <category>代码生成工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[自动生成Markdown表格(MDTable)]]></title>
    <url>%2Fblog%2Ffb891bcd%2F</url>
    <content type="text"><![CDATA[这里用java写了一个生成markdown表格的工具，使用命令行参数来控制表格的对齐方式和是否带编号。功能支持对齐方式：center：表示居中对齐left: 表示左对齐right: 表示右对齐支持表格编号命令行参数：auto，该模式下使用默认对齐，也就是左对齐，而且在表格第一列加入自动编号，自动编号不计算在总列数中，也就是如果你输入的列数为4，那么加上自动编号的列，整个表格实际上有5列。程序运行效果左对齐表格12345|列名|列名|列名|列名||:--|:--|:--|:--||1|2|3|4||5|6|7|8||1|2|3|4|显示效果如下：列名列名列名列名123456781234右对齐表格12345|列名|列名|列名|列名||--:|--:|--:|--:||1|2|3|4||1|2|3|4||1|2|3|4|显示效果如下列名列名列名列名123412341234居中对齐表格123456|列名|列名|列名||:--:|:--:|:--:||1|2|3||1|2|3||1|2|3||1|2|3|显示效果如下：列名列名列名123123123123自动编号的表格1234|序号|列名|列名|列名||:--|:--|:--|:--||1|1|2|3||2|1|2|3|显示效果如下序号列名列名列名11232123自动编号右对齐1234|序号|列名|列名|列名||--:|--:|--:|--:||1|2|2|2||2|3|3|3|显示效果：序号列名列名列名12222333自动编号，左对齐(默认)1234|序号|列名|列名|列名||:--|:--|:--|:--||1|||||2||||填入列表项，显示效果：序号列名列名列名1信息信息信息2信息信息信息自动编号，居中对齐程序生成：1234|序号|列名|列名|列名||:--:|:--:|:--:|:--:||1|||||2||||填入列表项，显示效果如下：序号列名列名列名12342上是是序号列名列名列名12实现代码如下：package create.markdown.table;import java.util.Scanner;import clipboard.util.SysClipboardUtil;public class MDTable&#123; public static void main(String[] args) &#123; switch (args.length) &#123; case 1 : oneArgs(args); break; case 2 : twoArgs(args); break; default : noArgs(); break; &#125; &#125; static void oneArgs(String[] args) &#123; int[] rowsCols = getRowsCols(); // java7之后switch条件语句支持String // 设置缓冲，默认长度为500 StringBuilder buff = new StringBuilder(300); // 假设一个表格每一行有20,300个字符是15行够了，一般的表格没这个长 switch (args[0]) &#123; case "left" : leftTable(rowsCols, buff); break; case "right" : rightTable(rowsCols, buff); break; case "center" : centerTable(rowsCols, buff); break; case "auto" : autoTable(rowsCols, buff); break; &#125; System.out.println("into oneArgs()"); System.out.println("--------------------------------"); System.out.println(buff.toString()); SysClipboardUtil.setSysClipboardText(buff.toString()); &#125; static void twoArgs(String[] args) &#123; int[] rowsCols = getRowsCols(); StringBuilder buff = new StringBuilder(300); System.out.println("into twoArgs()"); // 两个参数，如auto center,支持同时自动编号并且设定对齐方式。 // 相应的命令为： // auto left // auto right // auto center // 如果第一个参数是auto if ("auto".equals(args[0])) &#123; switch (args[1]) &#123; case "left" : autoLeftTable(rowsCols, buff); break; case "right" : autoRightTable(rowsCols, buff); break; case "center" : autoCenterTable(rowsCols, buff); break; &#125; &#125; System.out.println("--------------------------------"); System.out.println(buff.toString()); SysClipboardUtil.setSysClipboardText(buff.toString()); &#125; static void noArgs() &#123; // 没有收到参数，默认左对齐，不自动编号 int[] rowsCols = getRowsCols(); StringBuilder buff = new StringBuilder(300); leftTable(rowsCols, buff); System.out.println("--------------------------------"); System.out.println(buff.toString()); SysClipboardUtil.setSysClipboardText(buff.toString()); &#125; public static int[] getRowsCols() &#123; int[] rowsCols = new int[2]; Scanner scanner = new Scanner(System.in); System.out.print("行数:"); rowsCols[0] = scanner.nextInt(); System.out.print("列数:"); rowsCols[1] = scanner.nextInt(); scanner.close(); return rowsCols; &#125; private static void leftTable(int[] rowsCols, StringBuilder buff) &#123; // 生成表格首部 createTableHead(rowsCols, buff); // 生成左对齐格式 crateTableLeftAlign(rowsCols, buff); // 生成表格体 createTableBody(rowsCols, buff); &#125; private static void rightTable(int[] rowsCols, StringBuilder buff) &#123; // 生成表格头 createTableHead(rowsCols, buff); // 生成表格对齐方式 crateTableRightAlign(rowsCols, buff); // 生成表格体 createTableBody(rowsCols, buff); &#125; static void centerTable(int[] rowsCols, StringBuilder buff) &#123; createTableHead(rowsCols, buff); crateTableCenterAlign(rowsCols, buff); createTableBody(rowsCols, buff); &#125; private static void autoTable(int[] rowsCols, StringBuilder buff) &#123; autoLeftTable(rowsCols, buff); &#125; /** * @param rowsCols * @param buff */ public static void autoLeftTable(int[] rowsCols, StringBuilder buff) &#123; createAutoTableHead(rowsCols, buff); createAutoTableLeftAlign(rowsCols, buff); createAutoTableBody(rowsCols, buff); &#125; public static void autoRightTable(int[] rowsCols, StringBuilder buff) &#123; createAutoTableHead(rowsCols, buff); createAutoTableRightAlign(rowsCols, buff); createAutoTableBody(rowsCols, buff); &#125; public static void autoCenterTable(int[] rowsCols, StringBuilder buff) &#123; createAutoTableHead(rowsCols, buff); createAutoTableCenterAlign(rowsCols, buff); createAutoTableBody(rowsCols, buff); &#125; public static void createAutoTableLeftAlign(int[] rowsCols, StringBuilder buff) &#123; // 使用默认对齐：左对齐，列数多了一列 for (int i = 0; i &lt; rowsCols[1] + 1; i++) &#123; buff.append("|:--"); &#125; buff.append("|\n"); &#125; public static void createAutoTableRightAlign(int[] rowsCols, StringBuilder buff) &#123; // 使用默认对齐：左对齐，列数多了一列 for (int i = 0; i &lt; rowsCols[1] + 1; i++) &#123; buff.append("|--:"); &#125; buff.append("|\n"); &#125; public static void createAutoTableCenterAlign(int[] rowsCols, StringBuilder buff) &#123; // 使用默认对齐：左对齐，列数多了一列 for (int i = 0; i &lt; rowsCols[1] + 1; i++) &#123; buff.append("|:--:"); &#125; buff.append("|\n"); &#125; /** * @param rowsCols * @param buff */ public static void createTableHead(int[] rowsCols, StringBuilder buff) &#123; // 生成表格名---&gt;这个所有的代码都不变 for (int i = 0; i &lt; rowsCols[1]; i++) &#123; buff.append("|列名"); &#125; buff.append("|\n"); &#125; /** * @param rowsCols * @param buff */ public static void createAutoTableHead(int[] rowsCols, StringBuilder buff) &#123; // 列数多了一列 for (int i = 0; i &lt; rowsCols[1] + 1; i++) &#123; if (i == 0) &#123; buff.append("|序号"); &#125; else &#123; buff.append("|列名"); &#125; &#125; buff.append("|\n"); &#125; /** * @param rowsCols * @param buff */ public static void crateTableLeftAlign(int[] rowsCols, StringBuilder buff) &#123; for (int i = 0; i &lt; rowsCols[1]; i++) &#123; buff.append("|:--"); &#125; buff.append("|\n"); &#125; /** * @param rowsCols */ public static void crateTableRightAlign(int[] rowsCols, StringBuilder buff) &#123; for (int i = 0; i &lt; rowsCols[1]; i++) &#123; buff.append("|--:"); &#125; buff.append("|\n"); &#125; /** * @param rowsCols */ public static void crateTableCenterAlign(int[] rowsCols, StringBuilder buff) &#123; for (int i = 0; i &lt; rowsCols[1]; i++) &#123; buff.append("|:--:"); &#125; buff.append("|\n"); &#125; /** * @param rowsCols * @param buff */ public static void createTableBody(int[] rowsCols, StringBuilder buff) &#123; // 生成表格体---&gt;这个所有的代码都不变 for (int i = 0; i &lt; rowsCols[0]; i++) &#123; for (int j = 0; j &lt; rowsCols[1]; j++) &#123; buff.append("|"); &#125; buff.append("|\n"); &#125; &#125; /** * @param rowsCols * @param buff */ public static void createAutoTableBody(int[] rowsCols, StringBuilder buff) &#123; // 生成表格体，行数不变 for (int i = 0; i &lt; rowsCols[0]; i++) &#123; buff.append("|" + (i + 1)); for (int j = 0; j &lt; rowsCols[1]; j++) &#123; buff.append("|"); &#125; buff.append("|\n"); &#125; &#125;&#125;本文链接: 自动生成Markdown表格(MDTable)]]></content>
      <categories>
        <category>我的软件</category>
        <category>Markdown工具</category>
        <category>表格工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正则表达式最短匹配]]></title>
    <url>%2Fblog%2F36444501%2F</url>
    <content type="text"><![CDATA[这里来介绍正则表达式的最短匹配，也叫非贪婪匹配。贪婪与懒惰当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。考虑这个表达式：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在*后面加上一个问号?,形成*？。这样a.*?b就意味着匹配任意数量的字符，但是在保证整个匹配成功的前提下，匹配最少的任意字符。现在看看懒惰版的例子吧：a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。懒惰匹配量词表量词说明*?重复任意次，但尽可能少重复+?重复1次或更多次，但尽可能少重复??重复0次或1次，但尽可能少重复{n,m}?重复n到m次，但尽可能少重复{n,}?重复n次以上，但尽可能少重复参考https://blog.csdn.net/liliflashfly/article/details/5331685本文链接: 正则表达式最短匹配]]></content>
      <categories>
        <category>正则表达式</category>
        <category>语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正则应用：把Markdown中的加粗文本改为标题文本]]></title>
    <url>%2Fblog%2F1d153e30%2F</url>
    <content type="text"><![CDATA[前言今天在修订前面的文章的时候，我之前好多标题都是用加粗来显示的，这样阅读起来是没什么问题。但是不利于博客系统根据标题自动生成边栏书签。所以我需要把之前用加粗标记的标题，改用标题标记。需求对于文章(markdown)中使用加粗表示的标题：1234......**2、尽量重用对象****特别是String对象的使用，出现大量字符串连接时应该使用StringBuilder/StringBuffer代替**。由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。......改为使用三级标题：1234......###2、尽量重用对象###**特别是String对象的使用，出现大量字符串连接时应该使用StringBuilder/StringBuffer代替**。由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。......实现用notepad++打开该文章，按下ctrl+h打开替换，在查找模式选择框，选择正则表达式，然后输入查找正则表达式：1[*]&#123;2&#125;(\d+.+?)[*]&#123;2&#125;输入替换正则表达式：1###\1###如图所示：本文链接: 正则应用：把Markdown中的加粗文本改为标题文本]]></content>
      <categories>
        <category>正则表达式</category>
        <category>实例</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用java上传图片到腾讯云对象存储并返回链接]]></title>
    <url>%2Fblog%2F5a1e201b%2F</url>
    <content type="text"><![CDATA[不需要签名的公共链接：1![](http://image-1257720033.cos.ap-shanghai.myqcloud.com/blog/%E6%B5%8B%E8%AF%95COS%E7%9A%84Java%20SDK/blue.jpg?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDQikX6SPUAcqqcAxaT8ZmjPpyrUqwuKei%26q-sign-time%3D1540294349%3B1540294649%26q-key-time%3D1540294349%3B1540294649%26q-header-list%3Dhost%26q-url-param-list%3D%26q-signature%3D1e368fb926c8858b9ed65b923a9030bb54234129)显示效果：去掉签名的链接：1![](http://image-1257720033.cos.ap-shanghai.myqcloud.com/blog/%E6%B5%8B%E8%AF%95COS%E7%9A%84Java%20SDK/blue.jpg显示效果：https的图片链接：1![](https://image-1257720033.cos.ap-shanghai.myqcloud.com/blog/%E6%B5%8B%E8%AF%95COS%E7%9A%84Java%20SDK/blue.jpg)显示效果：使用https的其他图片最后的显示效果：软件上传效果：本文链接: 使用java上传图片到腾讯云对象存储并返回链接]]></content>
      <categories>
        <category>我的软件</category>
        <category>腾讯云对象存储COS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[把可执行jar打包成exe文件]]></title>
    <url>%2Fblog%2Fd7d49994%2F</url>
    <content type="text"><![CDATA[摘要eclipse中导出可执行jarexe4j下载安装破解使用exe4j把可执行jar打包为exe前言上次的程序我通过使用,我通过javaw -jar xxx.jar来启动一个程序，在任务管理器中显示如下：如果有一个javaw进行还好，但是我写的java工具程序可能比较多。进程名都是javaw的话不好分辨。在Windows下可以把可执行jar包打包成exe文件，这样就有自己的进程名，图标。便于我在任务管理器中管理(不需要时杀掉该进程)。使用eclipse把java项目打包为可执行jar包在项目上右键选择Export:然后展开Java项，选择Runable JAR File:然后选择主类，jar包的输出位置，依赖包的打包方式。最后点击Finish即可。下载安装破解exe4j下载exe4j破解版下载路径:https://www.jb51.net/softs/541579.html解压压缩包下载后，解压压缩包：安装点击安装程序exe4j_windows-x64_5_0_1.exe进行安装。破解安装成功后启动exe4j,点击Change License按钮，然后运行压缩包中的Keymaker.exe生成秘钥。粘贴秘钥到exe4j，点击OK即可。打包jar为exeProject type选择JAR in EXE mode,然后点击next.Application info然后输入exe文件的简称，exe文件输出位置。然后nextExecutable infoExecutable type:中选择第一项GUI application,表示GUI程序，第二个选项表示控制台程序。Executable name:中输入软件的名称(OCR)Icon file:中选择图标的位置,图标需要实现下载好，图标不是必须的，没有也没关系。然后展开Advanced options选择第一项RedirectionRedirection然后勾选Redirect stderr,显示错误输出目录，然后点next,Service options 和Version info默认即可，所以点击next,next即可。32-bit or 64-bit然后选择Generate 64-bit executable,生成64位的exe程序。然后next,nextJava invocation到了第5个配置项Java invocation这里要把刚才生成的可执行jar包添加进来。以及所有的依赖包，点击绿色的加号，添加可执行Jar包导入所有的依赖包然后在Main class:选择主类:JRE选择最小支持的版本，最大的版本可以默认不写。然后展开Advanced options,选择Search sequence。点击绿色的加号然后，选择找到本地的jre：然后把它移动到最顶端：然后next,然后默认，next：后面一直next即可。运行生成的exe打开输出目录双击运行exe文件即可运行参考：https://blog.csdn.net/qq_29232943/article/details/52861800本文链接: 把可执行jar打包成exe文件]]></content>
      <categories>
        <category>我的软件</category>
        <category>截图文字识别</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何修改java程序的进程名]]></title>
    <url>%2Fblog%2F217f0f86%2F</url>
    <content type="text"><![CDATA[需求我通过javaw -jar xxx.jar来启动一个程序,这个程序在任务管理器里面叫javaw,而我要运行多个程序,名字都叫javaw,我不能分辨名字,请问有什么办法改一下默认的名字吗?谢谢了解决方案：把javaw.exe重名名为xxx.exe将jar包打成exe,直接改名即可实现楼主要的效果。我的实现过程：把可执行jar打包成exe文件参考相关论坛:https://bbs.csdn.net/topics/320018756https://bbs.csdn.net/topics/370063237https://bbs.csdn.net/topics/90400835本文链接: 如何修改java程序的进程名]]></content>
      <categories>
        <category>我的软件</category>
        <category>截图文字识别</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Maven实战 许晓斌著 第3章 eclipse中Maven中的使用]]></title>
    <url>%2Fblog%2Fa27ed7d9%2F</url>
    <content type="text"><![CDATA[导入 Maven项目创建 Maven项目运行mvn命令导入 Maven项目选择菜单项File,然后选择 Import,我们会看到一个 Import对话框。在该对话框中选择 General目录下的 Maven Projects,然后单击Next按钮,就会出现 Import Projects对话框。在该对话框中单击 Browse按钮选择 Hello world的根目录(即包含pom.xml文件的那个目录),这时对话框中的 Projects:部分就会显示该目录包含的 Maven项目。如下图：单击 Finish按钮之后，eclipse中就会将该项目导入到当前的 workspace中,导入完成之后，就可以在 Package Explorer视图中看到如下图所示的项目结构。我们看到主代码目录src/main/java和测试代码目录src/test/java成了 Eclipse中的资源目录,包和类的结构也十分清晰。当然 pom.xml永远在项目的根目录下,而从这个视图中甚至还能看到项目的依赖junit-3.8.1.jar,其实际的位置指向了 Maven本地仓库(~/.m2/repository)。后续章节会介绍如何自定义本地仓库位置)。创建 Maven项目创建一个 Maven项目也十分简单,选择菜单项File→New→ Other,在弹出的对话框中选择 Maven下的 Maven Project,然后单击Next按钮,在弹出的 New Maven Project对话框中,使用默认的选项(不要选择 Create a simple project选项,那样我们就能使用 Maven Archetype),单击Next按钮,此时eclipse会提示我们选择一个 Archetype。这里选择 maven-archetype-quickstart,再单击Next按钮。由于 eclipse实际上是在使用 maven-archetype-plugin插件创建项目,因此这个步骤与上一节使用 archetype建项目骨架类似,输人 grouped、artifactId、 version、 package(暂时不考虑 Properties),如下图所示：单击 Finish按钮, Maven项目就创建完成了。运行mvn命令我们需要在命令行输入如 mvn clean install之类的命令来执行 maven构建,eclipse中也有对应的功能。在 Maven项目或者 pom.xml上右击,再在弹出的快捷菜单中选择 Run as,就能看到常见的 Maven命令,如下图所示：选择想要执行的 Maven命令就能执行相应的构建,同时也能在 Eclipse的 console中看到构建输出。这里常见的一个问题是,默认选项中没有我们想要执行的 Maven命令怎么办?比如,默认带有 mvn test,但我们想执行 myn clean test,很简单,选择 Maven build以自定义Maven运行命令,在弹出对话框的Goals一项中输入我们想要执行的命令,如 clean test,设置一下Name,单击Run即可。并且,下一次我们选择 Maven build时，上次的配置直接就能在历史记录中找到。具体的做法是：在Maven build上按按右键即可展开命令列表。本文链接: Maven实战 许晓斌著 第3章 eclipse中Maven中的使用]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Maven实战 许晓斌著</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Maven实战 许晓斌著 第3章 Maven使用入门]]></title>
    <url>%2Fblog%2Ff65e41ed%2F</url>
    <content type="text"><![CDATA[摘要编写POM编写主代码编写测试代码打包和运行打包在其他项目中使用该jar中的类打包为可执行jar使用 Archetype生成项目骨架eclipse中Maven插件的简单使用小结到目前为止,已经大概了解并安装好了 Maven,现在,我们开始创建一个最简单的Hello World项目。如果你是初次接触 Maven,建议按照本文的内容一步步地编写代码并执行,其中可能你会碰到一些概念暂时难以理解,不用着急,记下这些疑难点,相信后续的文章会帮你逐一解答。编写POM就像Make的 Makefile、Ant的 build.xml一样, Maven项目的核心是 pom.xml。POM(Project Object Model,项目对象模型)定义了项目的基本信息,用于描述项目如何构建,声明项目依赖,等等。现在先为 Hello World项目编写一个最简单的 pom. xml1234567891011&lt;?xml version="1.0"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.lan&lt;/groupId&gt; &lt;artifactId&gt;helloworld&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;Maven Hello World Project&lt;/name&gt;&lt;/project&gt;代码的第一行&lt;?xml version=&quot;1.0&quot;?&gt;是XML头,指定了该xml文档的版本和编码方式。紧接着是 project元素, project是所有 pom.xml的根元素,它还声明了一些POM相关的命名空间及xsd元素,虽然这些属性不是必须的,但使用这些属性能够让第三方工具(如IDE中的XML编辑器)帮助我们快速编辑POM。根元素下的第一个子元素 modelVersion指定了当前POM模型的版本,对于 Maven2及Maven3来说,它只能是4.0.0。groupId定义了项目属于哪个组,这个组往往和项目所在的组织或公司存在关联，一般命名方式为你个组织名反写+项目名。譬如在google.code.com上建立了一个名为myapp的项目,那么 groupId就应该是com.google.code.mapp,如果你的公司是 my.com,有一个项目为 myapp,那么 groupId就应该是 com.my.com.myapp。artifactId定义了当前 Maven项目在组中唯一的Id,我们为这个 HelloWorld项目定义artifectId为hello-world你可能会为不同的子项目(模块)分配不同的artifectId，如my-app-util,myapp-domain,myapp-web等。version指定了 Hello World项目当前的版本—0.0.1-SNAPSHOT。 SNAPSHOT意为快照,说明该项目还处于开发中,是不稳定的版本。随着项目的发展, version会不断更新,如升级为1.0.0、1.1- SNAPSHOT、1.1、2.0等。6.5节会详细介绍 SNAPSHOT,第13章会介绍如何使用 Maven管理项目版本的升级发布。最后一个name元素声明了一个对于用户更为友好的项目名称,虽然这不是必须的,但还是推荐为每个POM声明name,以方便信息交流。没有任何实际的Java代码,我们就能够定义一个 Maven项目的POM,这体现了 Maven的一大优点,它能让项目对象模型最大程度地与实际代码相独立,我们可以称之为解耦,或者正交性。这在很大程度上避免了Java代码和POM代码的相互影响。比如当项目需要升级版本时,只需要修改POM,而不需要更改Java代码;而在POM稳定之后,日常的Java代码开发工作基本不涉及POM的修改。编写主代码项目主代码和测试代码不同,项目的主代码会被打包到最终的构件中(如jar),而测试代码只在运行测试时用到,不会被打包。默认情况下, Maven假设项目主代码位于src/main/java目录,我们遵循 Maven的约定,在项目目录HelloWorld下创建该src/main/java目录,然后在该目录下创建包目录com/lan/helloworld/，在包目录com/lan/helloworld/下创建文件HelloWorld.java,主代码内容如下：123456789101112package com.lan.helloworld;public class HelloWorld&#123; public String sayHello() &#123; return "Hello World!"; &#125; public static void main(String[] args) &#123; System.out.println(new HelloWorld().sayHello()); &#125;&#125;这是一个简单的Java类,它有一个 sayHello()方法,返回一个String。同时这个类还带有一个main方法,创建一个 HelloWorld实例,调用它的sayHello()方法,并将结果输出到控制台。关于该Java代码有两点需要注意。首先,在绝大多数情况下,应该把项目主代码放到src/main/java/目录下(遵循 Maven的约定),而无须额外的配置, Maven会自动搜寻该目录找到项目主代码。其次,该Java类的包名是helloworld,这与之前在POM中定义的 &lt;groupId&gt;com.lan&lt;/groupId&gt;和&lt;artifactId&gt;helloworld&lt;/artifactId&gt;相吻合。一般来说,项目中Java类的包都应该基于项目的groupId和 artifactId.这样更加清晰,更加符合逻辑,也方便搜索构件或者Java类。代码编写完毕后,使用Maven进行编译,打开cmd,在项目根目录下运行命令 mvn clean compile会得到如下输出:123456789101112131415161718192021222324D:\学习9\Mave实战\MavenProject\HelloWorld&gt;mvn clean compile[INFO] Scanning for projects...[INFO][INFO] -------------------------&lt; hello:hello-model &gt;--------------------------[INFO] Building hello-model 0.0.1-SNAPSHOT[INFO] --------------------------------[ jar ]---------------------------------[INFO][INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ hello-model ---[INFO] Deleting D:\学习9\Mave实战\MavenProject\HelloWorld\target[INFO][INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello-model ---[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] skip non existing resourceDirectory D:\学习9\Mave实战\MavenProject\HelloWorld\src\main\resources[INFO][INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ hello-model ---[INFO] Changes detected - recompiling the module![WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent![INFO] Compiling 1 source file to D:\学习9\Mave实战\MavenProject\HelloWorld\target\classes[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 1.638 s[INFO] Finished at: 2018-10-09T22:21:19+08:00[INFO] ------------------------------------------------------------------------clean告诉 Maven清理(删除)掉输出目录 target/, compile告诉 Maven编译项目主代码,从输出中看到 Maven首先执行了maven-clean-plugin:2.5:clean任务,删除 target/目录。默认情况下, Maven构建的所有输出都在 target/目录中;接着执行 maven-resources-plugin:2.6:resources任务(未定义项目资源,暂且略过);最后执行 maven-compiler-plugin:3.1:compile任务,将项目主代码编译至 target/classes目录(编译好的类为com\lan\helloworld\HelloWorld.class)。上文提到的 maven-clean-plugin:2.5:clean、 maven-resources-plugin:2.6:resources和 maven-compiler-plugin:3.1:compile对应了一些 Maven插及插件目标,比如 maven-clean-plugin:2.5:clean是maven-clean-plugin:2.5插件的 clean目标,maven-compiler-plugin:3.1:compile是maven-compiler-plugin:3.1插件的 compile目标。后文会详细讲述 Maven插件及其编写方法。至此, Maven在没有任何额外的配置的情况下就执行了项目的清理和编译任务。接下来,编写一些单元测试代码并让 Maven执行自动化测试。编写测试代码为了使项目结构保持清晰,主代码与测试代码应该分别位于独立的目录中。Maven项目中默认的主代码目录是src/main/java,对应地, Maven项目中默认的测试代码目录是src/test/java。因此,在编写测试用例之前,应当先创建该src/test/java目录。在Java世界中,JUnit是事实上的单元测试标准。要使用 JUnit,首先需要为Hello world项目添加一个 JUnit依赖,修改项目根目录下的POM.xml,如下所示:123456789101112131415161718&lt;?xml version="1.0"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.lan&lt;/groupId&gt; &lt;artifactId&gt;helloworld&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;Maven Hello World Project&lt;/name&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifectId&gt;junit&lt;/artifectId&gt; &lt;version&gt;4.7&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;代码中添加了dependencies元素,该元素下可以包含多个dependency元素以声明项目的依赖。这里添加了一个依赖:groupId是 junit,artifactId是 junit,version是4.7。前面提到groupId,artifactId和 version是任何一个Maven项目最基本的坐标, JUnit也不例外,有了这段声明, Maven就能够自动下载 Junit-4.7.jar。也许你会问, Maven从哪里下载这个jar呢?在 Maven之前,我们可以去JUnit的官方网站下载分发包,使用Maven,它会自动访间中央仓库(http://repol.maven.org/maven2/),下载需要的文件。读者也可以自己访问该仓库,打开路径junit/juni4.7/,就能看到junit-4.7.pom和junit-4.7.jar。第6章会详细介绍 Maven仓库及中央仓库。上述POM代码中还有一个值为test的scope元素, scope为依赖范围,若依赖范围为test则表示该依赖只对测试有效。换句话说,测试代码中的 import JUnit代码是没有问题的,是如果在主代码中用 import JUnit代码,就会造成编译错误。如果不声明依赖范围,那么默认值就是compile,表示该依赖对主代码和测试代码都有效。配置了测试依赖,接着就可以编写测试类。回顾一下前面的 HelloWorld类,现在要测试该类的sayHello()方法,检查其返回值是否为“Hellomaven”。在src/test/java目录下,创建包目录com.lan.helloworld(对应：&lt;groupId&gt;com.lan&lt;/groupId&gt;&lt;artifactId&gt;helloworld&lt;/artifactId&gt;)，并在包目录下，创建文件HelloWorldTest.java,其内容如下所示所示:12345678910111213package com.lan.helloworld;import org.junit.*;import org.junit.Assert.*;public class HelloWorldTest &#123; @Test public void testHello() &#123; HelloWorld helloworld=new HelloWorld();//准备测试类及数据(这里是创建实例) String result=helloworld.sayHello();//执行要测试的行为(这里是运行方法) Assert.assertEquals("Hello World!",new HelloWorld().sayHello());//检查结果(这里是对比返回值) &#125;&#125;一个典型的单元测试包含三个步骤:①准备测试类及数据;②执行要测试的行为③检查结果。上述样例首先初始化了一个要测试的 HelloWorld实例,接着执行该实例的sayHello()方法并保存结果到 result变量中,最后使用 JUnit框架的 Assert类检查结果是否为我们期望的“Hello World!”。在 JUnit3中,约定所有需要执行测试的方法都以test开头,这里使用了JUnit4,但仍然遵循这一约定。在JUnit4中,需要执行的测试方法都应该以@Test进行标注。测试用例编写完毕之后就可以在cmd中调用 Maven执行测试。运行mvn clean test:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647D:\学习9\Mave实战\MavenProject\HelloWorld&gt;mvn clean test[INFO] Scanning for projects...[INFO][INFO] -------------------------&lt; com.lan:helloworld &gt;-------------------------[INFO] Building Maven Hello World Project 0.0.1-SNAPSHOT[INFO] --------------------------------[ jar ]---------------------------------[INFO][INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ helloworld ---[INFO] Deleting D:\学习9\Mave实战\MavenProject\HelloWorld\target[INFO][INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ helloworld ---[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] skip non existing resourceDirectory D:\学习9\Mave实战\MavenProject\HelloWorld\src\main\resources[INFO][INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ helloworld ---[INFO] Changes detected - recompiling the module![WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent![INFO] Compiling 1 source file to D:\学习9\Mave实战\MavenProject\HelloWorld\target\classes[INFO][INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ helloworld ---[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] skip non existing resourceDirectory D:\学习9\Mave实战\MavenProject\HelloWorld\src\test\resources[INFO][INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ helloworld ---[INFO] Changes detected - recompiling the module![WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent![INFO] Compiling 1 source file to D:\学习9\Mave实战\MavenProject\HelloWorld\target\test-classes[INFO][INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ helloworld ---[INFO] Surefire report directory: D:\学习9\Mave实战\MavenProject\HelloWorld\target\surefire-reports------------------------------------------------------- T E S T S-------------------------------------------------------Running com.lan.helloworld.HelloWorldTestTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 secResults :Tests run: 1, Failures: 0, Errors: 0, Skipped: 0[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 3.986 s[INFO] Finished at: 2018-10-09T23:03:44+08:00[INFO] ------------------------------------------------------------------------从命令输出中可以看到，命令行输入的是mvn clean test,但 Maven实际执行的可不止clean和test这两个任务，任务的执行顺序为：maven-clean-plugin:2.5:cleanmaven-resources-plugin:2.6:resourcesmaven-compiler-plugin:3.1:compilemaven-resources-plugin:2.6:testResourcesmaven-compiler-plugin:3.1:testCompile最后才会执行到任务：maven-surefire-plugin:2.12.4:test暂时需要了解的是,在 Maven执行测试(test)之前,它会先自动执行项目主资源处理(resources)、主代码编译(compile)、测试资源处理(testResources)、测试代码编译(testCompile)等工作,这是 Maven生命周期的一个特性。本书后续章节会详细解释 Maven的生命周期。还可以看到compiler: tesCompile任务执行成功了,测试代码通过编译之后在 target/test-classes下生成了二进制文件。紧接着 surefire:test任务运行测试, surefire是 Maven中负责执行测试的插件,这里它运行测试用例 HelloWorldTest,并且输出测试报告,显示一共运行了多少测试,失败了多少,出错了多少,跳过了多少(Tests run: 1, Failures: 0, Errors: 0, Skipped: 0)。显然,我们的测试通过了。打包和运行打包将项目进行编译、测试之后,下一个重要步骤就是打包( package)。 HelloWorld的POM中没有指定打包类型,使用默认打包类型jar。简单地执行命令 mvn clean package进行打包,可以看到如下输出:12345678910111213141516171819202122......[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ helloworld ---......[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ helloworld ---......[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ helloworld ---......[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ helloworld ---......[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ helloworld ---......[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ helloworld ---......[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ helloworld ---[INFO] Building jar: D:\ѧϰ9\Maveʵս\MavenProject\HelloWorld\target\helloworld-0.0.1-SNAPSHOT.jar[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 2.778 s[INFO] Finished at: 2018-10-09T23:32:58+08:00[INFO] ------------------------------------------------------------------------类似地, Maven会在打包之前执行编译、测试等操作。这里看到maven-jar-plugin:2.4:jar(以后简写为jar:jar)任务负责打包,实际上就是jar插件的jar目标将项目主代码打包成一个名为helloworld-0.0.1-SNAPSHOT.jar的文件。该文件也位于 target/输出目录中,它是根据 artifact-version jar规则进行命名的,如有需要,还可以使用 finalName来自定义该文件的名称,这里暂且不展开,后面会详细解释。在其他项目中使用该jar中的类至此,我们得到了项目的输出,如果有需要的话,就可以复制这个jar文件到其他项目的 Classpath中从而使用 Hello world类。但是,如何才能让其他的 Maven项目直接引用我们刚打包的这个jar呢?还需要一个安装的步骤,执行 mvn clean install:123456789101112131415161718192021222324......[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ helloworld ---......[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ helloworld ---......[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ helloworld ---......[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ helloworld ---......[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ helloworld ---...... [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ helloworld ---......[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ helloworld ---......[INFO] --- maven-install-plugin:2.4:install (default-install) @ helloworld ---[INFO] Installing D:\学习9\Mave实战\MavenProject\HelloWorld\target\helloworld-0.0.1-SNAPSHOT.jar to C:\Users\lan\.m2\repository\com\lan\helloworld\0.0.1-SNAPSHOT\helloworld-0.0.1-SNAPSHOT.jar[INFO] Installing D:\学习9\Mave实战\MavenProject\HelloWorld\pom.xml to C:\Users\lan\.m2\repository\com\lan\helloworld\0.0.1-SNAPSHOT\helloworld-0.0.1-SNAPSHOT.pom[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 3.465 s[INFO] Finished at: 2018-10-09T23:39:58+08:00[INFO] ------------------------------------------------------------------------同样的先执行编译,测试,打包任务,最后执行安装任务 instal: install.。从输出可以看到该任务将项目输出的jar安装到了Maven的本地仓库(C:\Users\lan.m2\repository)中,可以打开相应的文件夹看到 Helloworld项目的pom和jar。之前讲述 JUnit的POM及jar的下载的时候,我们说只有构件被下载到本地仓库后,才能由所有 Maven项目使用,这里是同样的道理,只有将HelloWorld的构件安装到本地仓库之后其他 Maven项目才能使用它。我们已经体验了 Maven最主要的命令:mvn clean compile、 mvn clean test、 mvn clean package、 mvn clean install。在执行test之前是会先执行compile的,执 package之前是会先执行test的,而类似地, 执行install之前会执行 package。我们可以在任何一个 Maven项目中执行这些命令。打包为可执行jar到目前为止,还没有运行 Hello world项目,不要忘了 Hello World类可是有一个main方法的。默认打包生成的jar是不能够直接运行的,因为带有main方法的类信息不会添加到manifest中(打开jar文件中的 META-INF/ MANIFEST. MF文件,将无法看到Main- Class行)。为了生成可执行的jar文件,需要借助maven- shade- plugin插件,配置该插件如下:123456789101112131415161718192021222324252627&lt;build&gt;&lt;plugins&gt; &lt;plugin&gt; &lt;!-- 插件坐标 --&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt; &lt;version&gt;1.2.1&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;shade&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;transformers&gt; &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt; &lt;!-- 项目中的类路径:全限定名(包名+类名) --&gt; &lt;mainClass&gt;com.lan.helloworld.HelloWorld&lt;/mainClass&gt; &lt;/transformer&gt; &lt;/transformers&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;plugin元素在POM中的相对位置应该在&lt;project&gt;&lt;build&gt;&lt;plugins&gt;下面。我们配置了mainClass为com.lan.helloworld.HelloWorld,项目在打包时会将该信息放到MANIFEST中。现在执行mvn clean install,待构建完成之后打开 target/目录,可以看到helloworld-0.0.1-SNAPSHOT.jar和original-helloworld-0.0.1-SNAPSHOT.jar两个jar包。前者是带有Main-Class信息的可运行jar包。后者是原始的jar,打开helloworld-0.0.1-SNAPSHOT.jar的META-INF/MANIFEST.MF:123456Manifest-Version: 1.0Archiver-Version: Plexus ArchiverBuilt-By: lanCreated-By: Apache Maven 3.5.4Build-Jdk: 1.8.0_91Main-Class: com.lan.helloworld.HelloWorld可以看到它包含这样一行信息:Main-Class: com.lan.helloworld.HelloWorld这行信息指定了可执行jar包的主类。现在,在项目根目录中执行该jar文件,运行结果如下：12D:\学习9\Mave实战\MavenProject\HelloWorld\target&gt;helloworld-0.0.1-SNAPSHOT.jarHello World!控制台输出为Hello World!,这正是我们所期望的。到这里，本文介绍了HelloWorld项目,侧重点是 Maven而非Java代码本身,介绍了POM,Maven项目结构以及如何编译、测试、打包等。使用 Archetype生成项目骨架Hello world项目中有一些 Maven的约定:在项目的根目录中放置 pom.xml ,在src/main/java目录中放置项目的主代码,在src/test/java中放置项目的测试代码。之所以一步步地展示这些步骤,是为了能让可能是 Maven初学者的你得到最实际的感受。我们称这些基本的目录结构和 pom.xml文件内容称为项目的骨架,当第一次创建项目骨架的时候,你还会饶有兴趣地去体会这些默认约定背后的思想,第二次,第三次,你也许还会满意自己的熟练程度,但第四、第五次做同样的事情,你可能就会恼火了。为此 Maven提供了Archetype以帮助我们快速勾勒出项目骨架。还是以Hello World为例,我们使用 maven archetype来创建该项目的骨架,离开当前的Maven项目目录。我这里用的是Maven3,简单地运行mvn archetype:generate,然后根据提示输入groupId,artifectId,version,package即可快递创建Maven项目骨架。我这里遇到一个问题，输入上述mvn archetype:generate命令后，cmd窗口一直阻塞。解决方案：使用下面的命令:1mvn archetype:generate -DarchetypeCatalog=internal紧接着会看到一段长长的输出：123456789101112131415161718192021222324D:\学习9\Mave实战\MavenProject&gt;mvn archetype:generate -DarchetypeCatalog=internal.........[INFO] &gt;&gt;&gt; maven-archetype-plugin:3.0.1:generate (default-cli) &gt; generate-sources @ standalone-pom &gt;&gt;&gt;[INFO][INFO] &lt;&lt;&lt; maven-archetype-plugin:3.0.1:generate (default-cli) &lt; generate-sources @ standalone-pom &lt;&lt;&lt;.........[INFO] --- maven-archetype-plugin:3.0.1:generate (default-cli) @ standalone-pom ---[INFO] Generating project in Interactive mode[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)Choose archetype:1: internal -&gt; org.apache.maven.archetypes:maven-archetype-archetype (An archetype which contains a sample archetype.)2: internal -&gt; org.apache.maven.archetypes:maven-archetype-j2ee-simple (An archetype which contains a simplifed sample J2EE application.)3: internal -&gt; org.apache.maven.archetypes:maven-archetype-plugin (An archetype which contains a sample Maven plugin.)4: internal -&gt; org.apache.maven.archetypes:maven-archetype-plugin-site (An archetype which contains a sample Maven plugin site. This archetype can be layered upon an existing Maven plugin project.)5: internal -&gt; org.apache.maven.archetypes:maven-archetype-portlet (An archetype which contains a sample JSR-268 Portlet.)6: internal -&gt; org.apache.maven.archetypes:maven-archetype-profiles ()7: internal -&gt; org.apache.maven.archetypes:maven-archetype-quickstart (An archetype which contains a sample Maven project.)8: internal -&gt; org.apache.maven.archetypes:maven-archetype-site (An archetype which contains a sample Maven site which demonstrates some of the supported document types like APT, XDoc, and FML and demonstrates how to i18n your site. This archetype can be layered upon an existing Maven project.)9: internal -&gt; org.apache.maven.archetypes:maven-archetype-site-simple (An archetype which contains a sample Maven site.)10: internal -&gt; org.apache.maven.archetypes:maven-archetype-webapp (An archetype which contains a sample Maven Webapp project.)Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:有很多可用的 Archetype供选择,包括著名的 Appfuse项目的 Archetype、JPA项目的 Archetype等。每一个 Archetype前面都会对应有一个编号,同时命令行会提示一个默认的编号,默认其对应的 Archetype为 maven-archetype-quickstart,直接回车以选择该 Archetype,紧接着 Maven会提示输入要创建项目的 grouped、 artifact、 version以及包名 package。如下输入并确认:123456789101112131415161718192021222324Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:Define value for property &apos;groupId&apos;: com.lan.archetypeTestDefine value for property &apos;artifactId&apos;: archetypeTest-testDefine value for property &apos;version&apos; 1.0-SNAPSHOT: : 1.0.0-SNAPSHOTDefine value for property &apos;package&apos; com.lan.archetypeTest: : testConfirm properties configuration:groupId: com.lan.archetypeTestartifactId: archetypeTest-testversion: 1.0.0-SNAPSHOTpackage: test Y: : y[INFO] ----------------------------------------------------------------------------[INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-quickstart:1.1[INFO] ----------------------------------------------------------------------------[INFO] Parameter: basedir, Value: D:\学习9\Mave实战\MavenProject[INFO] Parameter: package, Value: test[INFO] Parameter: groupId, Value: com.lan.archetypeTest[INFO] Parameter: artifactId, Value: archetypeTest-test[INFO] Parameter: packageName, Value: test[INFO] Parameter: version, Value: 1.0.0-SNAPSHOT[INFO] project created from Old (1.x) Archetype in dir: D:\学习9\Mave实战\MavenProject\archetypeTest-test......[INFO] BUILD SUCCESS......Archetype插件将根据我们提供的信息创建项目骨架。在当前目录(MavenProject)下, Archetype插件会创个名为 archetypeTest-test(我们定义的 artifactId)的子目录,从中可以看到项目的基本结构:基本的 pom.xmI已经被创建,里面包含了必要的信息以及一个junit依赖;12345678910111213141516171819202122232425&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.lan.archetypeTest&lt;/groupId&gt; &lt;artifactId&gt;archetypeTest-test&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;archetypeTest-test&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;主代码目录src/main/java已经被创建,在该目录下还有一个Java类test.App.java,注意这里使用到了刚才定义的包名([INFO] Parameter: packageName, Value: test),而这个类也仅仅只有一个简单的输出 Hello World!的main方法;12345678910111213package test;/** * Hello world! * */public class App &#123; public static void main( String[] args ) &#123; System.out.println( "Hello World!" ); &#125;&#125;测试代码目录sre/test/java也被创建好了,并且包含了一个测试用例test.AppTest.java1234567891011121314151617181920212223242526272829303132333435package test;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;/** * Unit test for simple App. */public class AppTest extends TestCase&#123; /** * Create the test case * * @param testName name of the test case */ public AppTest( String testName ) &#123; super( testName ); &#125; /** * @return the suite of tests being tested */ public static Test suite() &#123; return new TestSuite( AppTest.class ); &#125; /** * Rigourous Test :-) */ public void testApp() &#123; assertTrue( true ); &#125;&#125;Archetype可以帮助我们迅速地构建起项目的骨架,在前面的例子中,我们完全可以在Archetype生成的骨架的基础上开发 Hello world项目以节省大量时间。此外,这里仅仅是看到了一个最简单的 Archetype,如果有很多项目拥有类似的自定义项目结构以及配置文件,则完全可以一劳永逸地开发自己的 Archetype,然后在这些项目中使用自定义的 Archetype来快速生成项目骨架。本书后面的章节会详细阐述如何开发 Maven Archetype。eclipse中maven的使用限于篇幅，跳转到eclipse中maven的使用小结本章以尽可能简单且详细的方式叙述了一个 Hello World项目,重点解释了POM的基本内容、 Maven项目的基本结构以及构建项目基本的 Maven命令。在此基础上,还介绍了如何使用 Archetype快速创建项目骨架。最后讲述的是如何在 Eclipse创建及构建 Maven项目。本文链接: Maven实战 许晓斌著 第3章 Maven使用入门]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Maven实战 许晓斌著</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Maven实战 许晓斌著 第2章 Maven的安装和配置]]></title>
    <url>%2Fblog%2Fa475368f%2F</url>
    <content type="text"><![CDATA[本章内容在 Windows上安装 Maven在基于UNⅨ的系统上安装 Maven安装目录分析设置HTP代理安装m2eclipse安装 NetBeans Maven插件Maven安装最佳实践小结第1章介绍了 Maven是什么,以及为什么要使用 Maven,我们将从本章开始实际接触Maven。本章首先将介绍如何在主流的操作系统下安装 Maven,并详细解释 Maven的安装文件;其次还会介绍如何在主流的IDE中集成 Maven,以及 Maven安装的最佳实践。在 Windows上安装 Maven检查JDK安装在安装 Maven之前,首先要确认你已经正确安装了JDK。 Maven可以运行在JDK1.4及以上的版本上。打开 Windows的命令行,运行如下的命令来检查Java安装:1234567C:\Users\lan&gt;echo %Java_Home%D:\dev\java\jdk1.8.0_91C:\Users\lan&gt;java -versionjava version &quot;1.8.0_91&quot;Java(TM) SE Runtime Environment (build 1.8.0_91-b14)Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)上述命令首先检查环境变量JAVA_HOME是否指向了正确的JDK目录,接着尝试运行java命令。如果 Windows无法执行java命令,或者无法找到JAVA_HOME环境变量,就需要检査Java是否安装了,或者环境变量是否设置正确。本地安装下载压缩包参考:https://www.jianshu.com/p/41d07cf95482去Maven官网下载界面,下载想要的版本解压到你想要的目录就行了。解压我这里解压到D:/dev目录下，解压的位置请随意。配置环境变量最后设置一下环境变量，将Maven安装配置到操作系统环境中，主要就是配置M2_HOME 和PATH两项新建环境变量名M2_HOME，对应的变量值设置为你解压的路径，我这里是D:\dev\apache-maven-3.5.4path环境变量中添加值：%M2_HOME%\bin值得注意的是Path环境变量。当我们在cmd中输入命令时, Windows首先会在当前目录中寻找可执行文件或脚本,如果没有找到, Windows会接着遍历环境变量Path中定义的路径。由于将%M2_HOME%\bin添加到了Path中,而这里%M2_HOME%实际上是引用了前面定义的另一个变量,其值是 Maven的安装目录。因此, Windows会在执行命令时搜索目录D:\dev\apache-maven-3.5.4,而mvn执行脚本的位置就是这里。验证是否配置成功了解环境变量的作用之后,现在打开一个新的cmd窗口(这里强调新的窗口是因为新的环境变量配置需要新的cmd窗口才能生效),运行如下命令检查 Maven的安装情况:打开cmd，输入echo %M2_HOME%和mvn -v命令，如果显示下面的信息就说明配置成功了。12345678C:\Users\lan&gt;echo %M2_HOME%D:\dev\apache-maven-3.5.4C:\Users\lan&gt;mvn -vApache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)Maven home: D:\dev\apache-maven-3.5.4\bin\..Java version: 1.8.0_91, vendor: Oracle Corporation, runtime: D:\dev\java\jdk1.8.0_91\jreDefault locale: zh_CN, platform encoding: GBKOS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;第一条命令echo%M2_HOM%用来检查环境变量M2_HOME是否指向了正确的 Maven安装目录;而mvn -v执行了第一条 Maven命令,以检查 Windows是否能够找到正确的mvn执行脚本。升级 MavenMaven更新比较频繁,因此用户往往会需要更新 Maven安装以获得更多、更酷的新特性.并避免一些旧的bug。在 Windows上更新 Maven非常简便,只需要下载新的 Maven安装文件,解压至本地目录,然后更新M2_HOME环境变量即可。如果需要使用某一个旧版本的 Maven,也只需要编辑M2_HOME环境变量指向旧版本的安装目录。在基于∪NX的系统上安装 Maven我现在在Windows系统上使用，这个暂时不需要了解。安装目录分析前面讲到设置M2_HOME环境变量指向 Maven的安装目录,本书之后所有使用M2_HOME的地方都指代了该安装目录。下面看一下该目录的结构和内容:bin/boot/conf/lib/LICENSENOTICEREADME.txtbin/目录该目录包含了mvn运行的脚本,这些脚本用来配置Java命令,准备好 classpath和相关的Java系统属性,然后执行Java命令。其中mvn是基于UNX平台的shell脚本,mvn.cmd是基于 Windows平台的bat脚本。在命令行输入任何一条mvn命令时,实际上就是在调用这些脚本。该目录还包含了mvnDebug和 mvnDebug.cmd两个文件,同样,前者是UNIX平台的shell脚本,后者是 Windows平台的bat脚本。那么mvn和mvnDebug有什么区别和关系呢?打开文件我们就可以看到,两者基本是一样的,只是 mvnDebug多了一条 MAVEN_ DEBUG_OPTS配置,其作用就是在运行 Maven时开启debug,以便调试 Maven本身。此外,该目录还包含m2.conf文件,这是 classworlds的配置文件,后面会介绍 classworlds。boot/目录该目录只包含一个文件,以 maven3.5.4为例,该文件为 plexus-classworlds-2.5.2.jar。plexus-classworlds是一个类加载器框架,相对于默认的java类加载器,它提供了更丰富的语法以方便配置, Maven使用该框架加载自己的类库。更多关于classworlds的信息请参考http://classworlds.codehaus.org/。对于一般的 Maven用户来说,不必关心该文件。conf/目录该目录包含了一个非常重要的文件settings.xml。直接修改该文件,就能在机器上全局地定制 Maven的行为。一般情况下,我们更偏向于复制该文件至~/.m2/目录下(~表示用户目录),然后修改该文件,在用户范围定制 Maven的行为。后面将会多次提到 settings.xml,并逐步分析其中的各个元素。lib/目录该目录包含了所有 Maven运行时需要的Java类库, Maven本身是分模块开发的,因此用户能看到诸如 maven-core-3.0.jar、 maven-model-3.0.jar之类的文件。此外这里还包含一些 Maven用到的第三方依赖,如 common-cli-1.2.juar、 google-collection-1.0.jar等。对于 Maven2来说,该目录只包含一个如 maven2.2.1-uber.jar的文件原本各为独立JAR文件的 Maven模块和第三方类库都被拆解后重新合并到了这个JAR文件中。可以说,lib目录就是真正的 Maven。关于该文件,还有一点值得一提的是,用户可以在这个目录中找到 Maven内置的超级POM,这一点在8.5节详细解释。其他LICENSE文件 记录了 Maven使用的软件许可证 Apache License Version2.0;NOTICE文件 记录了 Maven包含的第三方软件;README.txt文件 则包含了 Maven的简要介绍,包括安装需求及如何安装的简要指令等。~/. m2在讲述该小节之前,我们先运行一条简单的命令: mvn help:system。该命令会打印出所有的Java系统属性和环境变量,这些信息对我们日常的编程工作很有帮助。这里暂不解释help:system涉及的语法,运行这条命令的目的是让 Maven执行一个真正的任务。我们可以从命令行输出看到 Maven会下载 maven-help- plugin,包括pom文件和jar文件。这些文件都被下载到了 Maven本地仓库中。在用户目录下可以发现,.m2文件夹。默认情况下,该文件夹下放置了 Maven本地仓库.m2/repository。所有的 Maven构件都被存储到该仓库中,以方便重用。可以到~/.m2/repository/org/apache/maven/plugin/ maven- help-plugin/目录下找到刚才下载的maven-help-plugin的pom文件和jar文件。 Maven根据一套规则来确定任何一个构件在仓库中的位置,这一点在第6章将会详细阐述。由于Maven仓库是通过简单文件系统透明地展示给Maven用户的,有些时候可以绕过 Maven直接查看或修改仓库文件,在遇到疑难问题时,这往往十分有用。默认情况下,~/.m2/目录下除了 repository仓库之外就没有其他目录和文件了,不过大多数 Maven用户需要复制M2_HOME/conf/settings.xml文件到~/.m/settings.xml。这是一条最佳实践,我们将在2.7小节详细解释。设置HTTP代理有时候你所在的公司基于安全因素考虑,要求你使用通过安全认证的代理访问因特网。这种情况下,就需要为 Maven配置HTTP代理,才能让它正常访问外部仓库,以下载所需要的资源。我暂时不需要了解，后续需要再来看安装m2eclipse我这里的eclipse版本是4.5版本的，已经集成了Maven插件不需要再安装。点击eclipse的菜单栏help-&gt;about eclipse可以看到你的版本：确认是否安装了maven插件：点击菜单Windows–&gt;Preferences。列表上有Maven项，则你的eclipse支持Maven。这是因为 Eclipse默认是运行在JRE上的,而m2eclipse的一些功能要求使用JDK。解决方法是配置 Eclipse安装目录的eclipse.ini文件,添加vm配置指向JDK。例如:原来的eclipse.ini文件1234567891011121314151617181920-startupplugins/org.eclipse.equinox.launcher_1.3.100.v20150511-1540.jar--launcher.libraryplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.300.v20150602-1417-productorg.eclipse.epp.package.jee.product--launcher.defaultActionopenFile--launcher.XXMaxPermSize256M-showsplashorg.eclipse.platform--launcher.XXMaxPermSize256mopenFile--launcher.appendVmargs-vmargs-Dosgi.requiredJavaVersion=1.7-Xms256m-Xmx1024m在12--launcher.XXMaxPermSize256m256m下面添加一个配置项,如下：1234--launcher.XXMaxPermSize256m-vmD:\dev\java\jdk1.8.0_91\bin\javaw.exe修改后的eclipse.ini完整如下：1234567891011121314151617181920212223-startupplugins/org.eclipse.equinox.launcher_1.3.100.v20150511-1540.jar--launcher.libraryplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.300.v20150602-1417-productorg.eclipse.epp.package.jee.product--launcher.defaultActionopenFile--launcher.XXMaxPermSize256M-showsplashorg.eclipse.platform--launcher.XXMaxPermSize256m-vmD:\dev\java\jdk1.8.0_91\bin\javaw.exe--launcher.defaultActionopenFile--launcher.appendVmargs-vmargs-Dosgi.requiredJavaVersion=1.7-Xms256m-Xmx1024m然后重启eclipse即可本文链接: Maven实战 许晓斌著 第2章 Maven的安装和配置]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Maven实战 许晓斌著</category>
        <category>第2章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Maven实战 许晓斌著 第1章Maven简介]]></title>
    <url>%2Fblog%2Ffee3067c%2F</url>
    <content type="text"><![CDATA[本章内容何为 Maven为什么需要 MavenMaven与极限编程被误解的 Maven小结何为 MavenMaven这个词可以翻译为“知识的积累”,也可以翻译为“专家”或“内行”。本书将介绍 Maven这一跨平台的项目管理工具。作为 Apache组织中的一个颇为成功的开源项目,Maven主要服务于基于Java平台的项目构建、依赖管理和项目信息管理。无论是小型的开源类库项目,还是大型的企业级应用;无论是传统的瀑布式开发,还是流行的敏捷模式,Maven都能大显身手。何为构建工作中,除了编写源代码,我们每天有相当一部分时间花在了编译、运行单元测试、生成文档、打包和部署等烦琐且不起眼的工作上,这就是构建。如果我们现在还手工这样做,那成本也太高了,于是有人用软件的方法让这一系列工作完全自动化,使得软件的构建可以像全自动流水线一样,只需要一条简单的命令,所有烦琐的步骤都能够自动完成,很快就能得到最终结果。Maven是优秀的构建工具前面介绍了Maven的用途之一是服务于构建,它是一个异常强大的构建工具,能够帮我们自动化构建过程,从清理、编译、测试到生成报告,再到打包和部署。我们不需要也不应该一遍又一遍地输入命令,一次又一次地点击鼠标,我们要做的是使用 Maven配置好项目,然后输入简单的命令(如 mvn clean install), Maven会帮我们处理那些烦琐的任务。Maven是跨平台的,这意味着无论是在 Windows上,还是在 Linux或者Mac上,都可使用同样的命令。我们一直在不停地寻找避免重复的方法。设计的重复、编码的重复、文档的重复,当然还有构建的重复。 Maven最大化地消除了构建的重复,抽象了构建生命周期,并且为绝大部分的构建任务提供了已实现的插件,我们不再需要定义过程,甚至不需要再去实现这些过程中的一些任务。最简单的例子是测试,我们没必要告诉 Maven去测试,更不需要告诉 Maven如何运行测试,只需要遵循 Maven的约定编写好测试用例,当我们运行构建的时候,这些测试便会自动运行。想象一下, Maven抽象了一个完整的构建生命周期模型,这个模型吸取了大量其他的构建脚本和构建工具的优点,总结了大量项目的实际需求。如果遵循这个模型,可以避免很多不必要的错误,可以直接使用大量成熟的 Maven插件来完成我们的任务(很多时候我们可能都不知道自己在使用 Maven插件)。此外,如果有非常特殊的需求,我们也可以轻松实现自己的插件。Maven还有一个优点,它能帮助我们标准化构建过程。在 Maven之前,十个项目可能有十种构建方式;有了 Maven之后,所有项目的构建命令都是简单一致的,这极大地避免了不必要的学习成本,而且有利于促进项目团队的标准化。Maven不仅仅是构建工具Java不仅是一门编程语言,还是一个平台,通过 JRuby和 Jython,我们可以在Java平台上编写和运行Ruby和 Python程序。我们也应该认识到, Maven不仅是构建工具,还是一个依赖管理工具和项目信息管理工具。它提供了中央仓库,能帮我们自动下载构件。在这个开源的年代里,几乎任何Java应用都会借用一些第三方的开源类库,这些类库都可通过依赖的方式引人到项目中来。随着依赖的增多,版本不一致、版本冲突、依赖臃肿等问题都会接踵而来。手工解决这些问题是十分枯燥的,幸运的是 Maven提供了一个优秀的解决方案,它通过一个坐标系统准确地定位每一个构件( artifact),也就是通过一组坐标 Maven能够找到任何一个Java类库(如jar文件)。 Maven给这个类库世界引入了经纬,让它们变得有秩序,于是我们可以借助它来有序地管理依赖,轻松地解决那些繁杂的依赖问题。Maven还能帮助我们管理原本分散在项目中各个角落的项目信息,包括项目描述、开发者列表、版本控制系统地址、许可证、缺陷管理系统地址等。这些微小的变化看起来很琐碎,并不起眼,但却在不知不觉中为我们节省了大量寻找信息的时间。除了直接的项目信息,通过 Maven自动生成的站点,以及一些已有的插件,我们还能够轻松获得项目文档测试报告、静态分析报告、源码版本日志报告等非常具有价值的项目信息。Maven还为全世界的Java开发者提供了一个免费的中央仓库,在其中几乎可以找到任何的流行开源类库。通过一些 Maven的衍生工具(如 Nexus),我们还能对其进行快速地搜索。只要定位了坐标, Maven就能够帮我们自动下载,省去了手工劳动。使用 Maven还能享受一个额外的好处,即 Maven对于项目目录结构、测试用例命名方式等内容都有既定的规则,只要遵循了这些成熟的规则,用户在项目间切换的时候就免去了额外的学习成本,可以说是约定优于配置( Convention Over Configuration)为什么需要 MavenMaven不是Java领域唯一的构建管理的解决方案。本节将通过一些简单的例子解释Maven的必要性,并介绍其他构建解决方案,如IDE、Make和Ant,并将它们与 Maven进行比较。组装PC和品牌PC使用脚本建立高度自定义的构建系统就像买组装PC,耗时费力,结果也不一定很好。当然,你可以享受从无到有的乐趣,但恐怕实际项目中无法给你那么多时间。使用 Maven就像购买品牌PC,省时省力,并能得到成熟的构建系统,还能得到来自于 Maven社区的大量支持。唯一与购买品牌PC不同的是, Maven是开源的,你无须为此付费。如果有兴趣,你还能去了Maven是如何工作的,而我们无法知道那些PC巨头的商业秘密。IDE不是万能的当然,我们无法否认优秀的IDE能大大提高开发效率。当前主流的IDE如 Eclipse和NetBeans等都提供了强大的文本编辑、调试甚至重构功能。虽然使用简单的文本编辑器和命令行也能完成绝大部分开发工作,但很少有人愿意那样做。然而,IDE是有其天生缺陷的:IDE依赖大量的手工操作。编译、测试、代码生成等工作都是相互独立的,很难一键完成所有工作。手工劳动往往意味着低效,意味着容易出错。很难在项目中统一所有的IDE配置,每个人都有自己的喜好。也正是由于这个原因，一个在机器A上可以成功运行的任务,到了机器B的IDE中可能就会失败。我们应该合理利用IDE,而不是过多地依赖它。对于构建这样的任务,在IDE中一次次地点击鼠标是愚蠢的行为。 Maven是这方面的专家,而且主流IDE都集成了 Maven,我们可以在IDE中方便地运行 Maven执行构建。MakeMake也许是最早的构建工具,它由 Stuart Feldman于1977年在Bell实验室创建。 Stuart Feldman也因此于2003年获得了ACM国际计算机组织颁发的软件系统奖。目前Make有很多衍生实现,包括最流行的 GNU Make和 BSD Make,还有 Windows平台的 Microsoft nmake等。Make由一个名为 Makefile的脚本文件驱动,该文件使用Make自己定义的语法格式。其基本组成部分为一系列规则( Rules),而每一条规则又包括目标( Target)、依赖( Prerequsite)和命令( Command)。 Makefile的基本结构如下：123Target... : Prerequsite...Command......Make通过一系列目标和依赖将整个构建过程串联起来,同时利用本地命令完成每个目标的实际行为。Make的强大之处在于它可以利用所有系统的本地命令,尤其是UNIX/Linux系统,丰富的功能、强大的命令能够帮助Make快速高效地完成任务。但是,Make将自己和操作系统绑定在一起了。也就是说,使用Make,就不能实现(至少很难)跨平台的构建,这对于Java来说是非常不友好的。此外, Makefile的语法也成问题,很多人抱怨Make构建失败的原因往往是一个难以发现的空格或Tab使用错误。AntAnt不是指蚂蚁,而是意指“另一个整洁的工具”( Another neat tool),它最早用来构建著名的 Tomcat,其作者 James Duncan Davidson创作它的动机就是因为受不了 Makefile的语法格式。我们可以将Ant看成是一个Java版本的Make,也正因为使用了Java,Ant是跨平台的。此外,Ant使用XML定义构建脚本,相对于 Makefile来说,这也更加友好。与Make类似,Ant有一个构建脚本 build.xml,如下所示：123456789101112131415&lt;?xml version="1.0"?&gt;&lt;project name="Hello" default="compile"&gt; &lt;target name="compile" description="compile the Java source code to class files"&gt; &lt;makdir dir="classes"/&gt; &lt;javac srcdir="." destdir="classes"/&gt; &lt;target&gt; &lt;target name="jar" depends="compile" description="create a Jar file"&gt; &lt;jar destfile="hello.jar"&gt; &lt;fileset dir="classes" includes="**/*.class"/&gt; &lt;manifest&gt; &lt;attribute name="Main-Class" value="HelloProgram"/&gt; &lt;/manifest&gt; &lt;/jar&gt; &lt;target&gt;&lt;project&gt;build.xml的基本结构也是目标( target)、依赖( depends),以及实现目标的任务。比如在上面的脚本中,jar目标用来创建应用程序jar文件,该目标依赖于 compile目标(&lt;target name=&quot;jar&quot; depends=&quot;compile&quot; description=”create a Jar file”&gt;),后者执行的任务是创建一个名为 classes的文件夹,编译当前目录的java文件至 classes目录。compile目标完成后,jar目标再执行自己的任务。Ant有大量内置的用Java实现的任务,这保证了其跨平台的特质,同时,Ant也有特殊的任务exec来执行本地命令。和Make一样,Ant也都是过程式的,开发者要显式地指定每一个目标,以及完成该目标所需要执行的任务。针对每一个项目,开发者都需要重新编写这一过程,这里其实隐含着很大的重复。Maven是声明式的,项目构建过程和过程各个阶段所需的工作都由插件实现,并且大部分插件都是现成的,开发者只需要声明项目的基本元素, Maven就执行内置的、完整的构建过程。这在很大程度上消除了重复。Ant是没有依赖管理的,所以很长一段时间Ant用户都不得不手工管理依赖,这是一个令人头疼的问题。幸运的是,Ant用户现在可以借助lvy管理依赖。而对于 Maven用户来说,依赖管理是理所当然的, Maven不仅内置了依赖管理,更有一个可能拥有全世界最多Java开源软件包的中央仓库, Maven用户无须进行任何配置就可以直接使用。不重复发明轮子作者举了个有趣的故事，这里略。Maven与极限编程极限编程(XP)是近些年在软件行业红得发紫的敏捷开发方法,它强调拥抱变化。该软件开发方法的创始人 Kent Beck提出了XP所追求的价值、实施原则和推荐实践。下面看Maven如何适应XP的。极限编程(XP)是近些年在软件行业红得发紫的敏捷开发方法,它强调拥抱变化。该软件开发方法的创始人 Kent Beck提出了XP所追求的价值、实施原则和推荐实践。下面看Maven如何适应XP的。首先看一下 Maven如何帮助XP团队实现一些核心价值：简单。 Maven暴露了一组一致、简洁的操作接口,能帮助团队成员从原来的高度自定义的、复杂的构建系统中解脱出来,使用 Maven现有的成熟的、稳定的组件也能简化构建系统的复杂度。交流与反馈。与版本控制系统结合后,所有人都能执行最新的构建并快速得到反馈。此外,自动生成的项目报告也能帮助成员了解项目的状态,促进团队的交流。此外, Maven更能无缝地支持或者融人到一些主要的XP实践中:测试驱动开发(TDD)。TDD强调测试先行,所有产品都应该由测试用例覆盖。而测试是 Maven生命周期的最重要的组成部分之一,并且 Maven有现成的成熟插件支持业界流行的测试框架,如 JUnit和 TestNG。十分钟构建。十分钟构建强调我们能够随时快速地从源码构建出最终的产品。这正是 Maven所擅长的,只需要一些配置,之后用一条简单的命令就能让 Maven帮你清理、编译、测试、打包、部署,然后得到最终的产品。持续集成(CI)。CI强调项目以很短的周期(如15分钟)集成最新的代码。实际上,CI的前提是源码管理系统和构建系统。目前业界流行的CI服务器如 Hudson和CruiseControl都能很好地和 Maven进行集成。也就是说,使用 Maven后,持续集成会变得更加方便。富有信息的工作区。这条实践强调开发者能够快速方便地了解到项目的最新状态。当然, Maven并不会帮你把测试覆盖率报告贴到墙上,也不会在你的工作台上放个鸭子告诉你构建失败了。不过使用 Maven发布的项目报告站点,并配置你需要的项目报告,如测试覆盖率报告,都能帮你把信息推送到开发者眼前。上述这些实践并非只在XP中适用。事实上,除了其他敏捷开发方法如 SCRUM之外，几乎任何软件开发方法都能借鉴这些实践。也就是说, Maven几乎能够很好地支持任何软件开发方法。例如,在传统的瀑布模型开发中,项目依次要经历需求开发、分析、设计、编码、测试和集成发布阶段。从设计和编码阶段开始,就可以使用 Maven来建立项目的构建系统。在设计阶段,也完全可以针对设计开发测试用例,然后再编写代码来满足这些测试用例。然而,有了自动化构建系统,我们可以节省很多手动的测试时间。此外,尽早地使用构建系统集成团队的代码,对项目也是百利而无一害。最后, Maven还能帮助我们快速地发布项目。被误解的 MavenC++之父 Bjarne Stroustrup说过一句话:“只有两类计算机语言,一类语言天天被人骂,还有一类没人用。”当然这话也不全对,大红大紫的Ruby不仅有人用,而且骂的人也少。用户最多的Java得到的骂声就不绝于耳了。 Maven的用户也不少,它的邮件列表目前在Apache项目中排名第4(http://ww.nabble.com/Apache-f90.html)。让我们看看 Maven受到了哪些质疑,笔者将对这些质疑逐一解释。“Maven对于IDE(如 Eclipse和IDEA)的支持较差,bug多,而且不稳定。”相对于 JUnit和Ant来说, Maven比较年轻,IDE集成等衍生产品还不够全面和成熟但是,我们一定要知道,使用 Maven最高效的方式永远是命令行,IDE在自动化构建方面有天生的缺陷。此外, Eclipse的 Maven插件—m2 eclipse是一个比较优秀和成熟的工具,Neteans也在积极地为更好地集成 Maven而努力,自 Intelli J IDEA开源后,也有望看到其对Maven更好的集成。“Maven采用了一个糟糕的插件系统来执行构建,新的、破损的插件会让你的构建莫其妙地失败。”自 Maven2.0.9开始,所有核心的插件都设定了稳定版本,这意味着日常使用 Maven时几乎不会受到不稳定插件的影响。此外, Maven社区也提倡为你使用的任何插件设定稳定的版本。如果我们有好的实践不采纳,遇到了问题就抱怨,未免不够公允。从 Maven3开始,如果你使用插件时未设定版本,会看到警告信息。“ Maven过于复杂,它就是构建系统的EJB2。”不要指望Maven十分简单,这几乎是不可能的。 Maven是用来管理项目的,清理、编译、测试、打包、发布,以及一些自定义的过程本身就是一件复杂的事情。目前在Java社区还有比 Maven更强大、更简单的构建工具吗?答案是否定的。我们可以尝试去帮助 Maven让它变得更简单,而不是抛弃它,然后自己实现一套更加复杂的构建系统。“ Maven的仓库十分混乱,当无法从仓库中得到需要的类库时,我需要手工下载复制到本地仓库中。”Maven的中央仓库确实不完美,你也许会发现某个jar包出现在两个不同的路径下。这不是 Maven的错,这是开源项目本身改变了自身的坐标。如果没有中央仓库,你将不得不去开源项目首页寻找下载链接,这不是更费事吗?现在有很多的 Maven仓库搜索服务。无法从中央仓库找到你需要的类库?由于许可证等因素,这是完全有可能的,这时你需要做的是建立个组织内部的仓库服务器,你会发现这会给你带来许多意想不到的好处。“缺乏文档是理解和使用 Maven的一个主要障碍!”这是事实。 Maven官方站点的文档十分凌乱,各种插件的文档更是需要费力寻找。Sonatte编写的《 Maven权威指南》很好地改善了这一状况,但由于该书的某些部分与国内的现状有些脱离,且翻译速度无法跟上原版的更新速度,于是笔者编写本书,目的也是帮助大家理解和使用 Maven小结本章只是从概念上简单地介绍了一下 Maven,通过本章我们应该能大致了解Maem是什么,以及它有什么用途,我们还将 Maven与其他流行的构建工具(如Make和Ant)做了一些比较和分析、如果你没用过 Maven,但有Make或者Ant的使用经验,相信通过比较你能更清楚地了解各种工具的优劣,并且会对 Maven有一个理性的认识。将 Maven和极限编程结合起来分析是为了让大家从另-个角度了解 Maven,毕竟软件开发离不开对于软件过程的理解本文链接: Maven实战 许晓斌著 第1章Maven简介]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Maven实战 许晓斌著</category>
        <category>第1章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Maven实战 许晓斌著 前言]]></title>
    <url>%2Fblog%2F6bc2392d%2F</url>
    <content type="text"><![CDATA[本书的主要内容本书代码下载本书的主要内容第1章对 Maven做了简要介绍,通过一些程序员熟悉的例子介绍了 Maven是什么,为什么需要 Maven。建议所有读者都阅读以获得一个大局的印象。第2-3章是对 Maven的一个入门介绍,这些内容对初学者很有帮助,如果你已经比轼熟悉 Maven,可以跳过。第4章介绍了本书使用的背景案例,后面的很多章节都会基于该案例展开,因此建议读者至少简单浏览一遍。第5~8章深人阐述了 Maven的核心概念,包括坐标、依赖、仓库、生命周期、插件、继承和多模块聚合,等等,每个知识点都有实际的案例相佐,建议读者仔细阅读。第9章介绍使用 Nexus建立私服,如果你要在实际工作中使用 Maven,这是必不可少的。第10-16章介绍了一些相对高级且离散的知识点,包括测试、持续集成与 Hudson、Web项目与自动化部署、自动化版本管理、智能适应环境差异的灵活构建、站点生成,以及 Maven的 Eclipse插件 myeclipse,等等。读者可以根据自己实际需要和兴趣选择性地阅读。第17-18章介绍了如何编写 Archetype和 Maven插件。一般的 Maven用户在实际工作中往往不需要接触这些知识,如果你需要编写插件扩展 Maven,或者需要编写 Archetype维护自己的项目骨架以方便团队开发,那么可以仔细阅读这两章的内容。本书代码下载http://www.juvenxu.com/mvn-in-action/Maven读音：maven英 [ˈmeɪvn] 美 [ˈmevən]n.&lt;美口&gt;专家，内行实例Then He created a Eclipse project using Maven.接着他使用Maven创建了一个Eclipse项目。本文链接: Maven实战 许晓斌著 前言]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Maven实战 许晓斌著</category>
        <category>前言</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java生成Markdown代码块格式]]></title>
    <url>%2Fblog%2Fe078718f%2F</url>
    <content type="text"><![CDATA[Java处理代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package markdowntools;import clipboard.util.SysClipboardUtil;public class MDCodeBlock&#123; public static void main(String[] args) &#123; switch (args.length) &#123; case 0 : //没有命令行参数 noArg(); break; case 1 : //有一个命令参数 oneArg(args); break; &#125; &#125; private static void oneArg(String[] args) &#123; switch (args[0]) &#123; //java case "j" : SysClipboardUtil.setSysClipboardText( "```java\n" + SysClipboardUtil.getSysClipboardText() + "\n```"); break; //javascript case "js" : SysClipboardUtil.setSysClipboardText( "```javascript\n" + SysClipboardUtil.getSysClipboardText() + "\n```"); break; //使用命令行参数：如html,css,xml,php等 default : SysClipboardUtil.setSysClipboardText( "```"+args[0]+"\n" + SysClipboardUtil.getSysClipboardText() + "\n```"); break; &#125; &#125; private static void noArg() &#123; SysClipboardUtil.setSysClipboardText( "```\n" + SysClipboardUtil.getSysClipboardText() + "\n```"); &#125;&#125;eclipse中把上面的代码导出为可执行Jar包MDCodeBlock.jar,（我的导出路径为:D:\dev\java\my\runable\MDCodeBlock.jar）bat文件内容在导出的目录下，创建MDCodeBlock.bat文件,内容：123@echo offstart javaw -jar D:\dev\java\my\runable\MDCodeBlock.jar %1exit%1表示第一个命令行参数.D:\dev\java\my\runable\MDCodeBlock.jar是导出的Jar包路径start javaw -jar命令表示以后台进程运行该java程序本文链接: Java生成Markdown代码块格式]]></content>
      <categories>
        <category>我的软件</category>
        <category>Markdown工具</category>
        <category>代码块工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[截图文字识别软件升级]]></title>
    <url>%2Fblog%2Fd2e9fa85%2F</url>
    <content type="text"><![CDATA[需求加入保存保存快捷键ctrl+s修改代码，支持多次保存实现加入保存快捷键在ScreenShotWindow.java中加入快捷键变量声明：第1步：12// 定义保存快捷键public static final int SaveImage_HOT_KEY = 4;第2步：注册快捷键：123//添加保存快捷键JIntellitype.getInstance().registerHotKey(SaveImage_HOT_KEY, JIntellitype.MOD_CONTROL, (int) 'S');第3步：编写事件监听逻辑：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960// 第3步：添加热键监听器JIntellitype JIntellitype.getInstance().addHotKeyListener(new HotkeyListener() &#123; @Override public void onHotKey(int markCode) &#123; switch (markCode) &#123; // 按下alt+w快捷键表示再次截屏 case SCREENSHOT_HOT_KEY : // showMessage();// ScreenShotOCR.visiable(); //如果当前窗口可见的话 //再次截屏时,隐藏工具窗口 if(tools!=null) &#123; tools.setVisible(false); &#125; //重新截屏 try &#123; createScreenCapture(); &#125; catch (AWTException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; //显示窗口 ScreenShotOCR.visiable();// //让窗口置顶// 这个应该在开始的时候就设置// ScreenShotOCR.ssw.setAlwaysOnTop(true);// tools.setAlwaysOnTop(true); break; // alt+q快捷键表示退出程序 case EXIT_KEY_MARK : System.exit(0); break; case EXIT_SCREENSHOT_HOT_KEY: //让窗口不显示 ScreenShotWindow.this.setVisible(false);//不显示窗口 tools.setLocation(0, 0); break; case SaveImage_HOT_KEY: //让窗口不显示 ScreenShotWindow.this.setVisible(false);//不显示窗口 tools.setLocation(0, 0); try &#123; saveImage(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; break; &#125; &#125; &#125;);关键代码：12345678910111213case SaveImage_HOT_KEY: //让窗口不显示 ScreenShotWindow.this.setVisible(false);//不显示窗口 tools.setLocation(0, 0); try &#123; saveImage();//按下ctrl+s时调用保存图片函数 &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;break;这样就注册了保存快捷键了。接下来修改保存函数。支持多次保存保存后不退出12345678910111213141516171819202122232425262728293031323334353637// 保存图像到文件public void saveImage() throws IOException&#123; JFileChooser jfc = new JFileChooser(); jfc.setDialogTitle("保存"); // 文件过滤器，用户过滤可选择文件 FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG", "png"); jfc.setFileFilter(filter); // 初始化一个默认文件（此文件会生成到桌面上） SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss"); String fileName = sdf.format(new Date()); File filePath = FileSystemView.getFileSystemView().getHomeDirectory(); File defaultFile = new File( filePath + File.separator + fileName + ".png"); jfc.setSelectedFile(defaultFile); int flag = jfc.showSaveDialog(this); if (flag == JFileChooser.APPROVE_OPTION) &#123; File file = jfc.getSelectedFile(); String path = file.getPath(); // 检查文件后缀，放置用户忘记输入后缀或者输入不正确的后缀 if (!(path.endsWith(".png") || path.endsWith(".PNG"))) &#123; path += ".png"; &#125; // 写入文件 ImageIO.write(saveImage, "png", new File(path)); //不退出 //System.exit(0); &#125;&#125;原先的代码中截图后就退出了，关键代码：System.exit(0);把这一段话注释掉即可。出现问题无法使用ctrl+s快捷键，因为JIntellitype注册的是全局快捷键，在其他软件中按下ctrl+s进行保存文档的时候，系统会误认为是调用了保存图片。这样是不对的。这里解决方法是吧保存图片快捷键改成ctrl+alt+s。局部快捷键怎么设置为还不知道。先别管他，能用就行了，我先去学点其他东西。本文链接: 截图文字识别软件升级]]></content>
      <categories>
        <category>我的软件</category>
        <category>截图文字识别</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通 第1章 Java Web成功案例]]></title>
    <url>%2Fblog%2F5f77ba72%2F</url>
    <content type="text"><![CDATA[Java语言具有很多的优点,例如面向对象、跨越平台、安全性高等,很多的大型企业级的应用都采用 Java Web进行开发。目前, Java Web开发的项目已经有很多成功案例,它们被应用于实际生活中的各行各业,例如清华大学的本科招生网、金网在线网等。还有一些涉及安全级别非常高或需要多平台运行的,其银行类的项目应用较多,例如中国工商银行网站、中国光大银行网站、中国农业银行网站、中国建设银行网站、交通银行网站和中国邮政储蓄银行网站等,这些网站都应用了 Java Web技术。上述的这些案例,只是一部分代表,应用 Java Web开发的项目还有很多,其成功案例数不胜数本文链接: Java Web从入门到精通 第1章 Java Web成功案例]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第1章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[快速使用NotePad++打开文件]]></title>
    <url>%2Fblog%2F951a2add%2F</url>
    <content type="text"><![CDATA[在写文章的时候，我喜欢使用MarkdownPad2来写。不过MarkdownPad2好像不支持正则表达式替换。NotePad++支持正则表达式替换，每次频繁切换到桌面去打开NotePad++，使用正则表达式的功能，然后再切换回MarkdownPad2,显然很浪费时间,要是有人知道，有支持正则表达式的markdown编辑器，请告诉我。我这里的做法是，使用运行窗口来快速打开notePad++,文件的地址通过快捷方式传给NotePad++。步骤如下：首先，把NotePad++的路径配置到Path环境变量中。然后在markdownPad2中，复制markdown文档的路径。然后按下Win+r快捷键打开运行窗口，输入命令:1notepad++ D:\Blog\bolg5\source\_posts\读书笔记\Java Web从入门到精通\第一章\Web应用技术.md这样就可以，使用notepad++快速打开这篇文章了。当然其他软件也类似打开文件也类似。打开之后我就可以愉快地使用notepad++的正则表达式替换功能了。最后说一下，除了Notepad++，支持正则表达式的编辑器也很多，如eidtplus,VSCode等等。但是这些编辑器都不是专门用来写MarkDown的，主要是这些编辑器没有写markdown的快捷方式。本文链接: 快速使用NotePad++打开文件]]></content>
      <categories>
        <category>其他</category>
        <category>Windows相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CSS 3的新特征]]></title>
    <url>%2Fblog%2F3e61fe50%2F</url>
    <content type="text"><![CDATA[1、模块与模块化结构2、一个简单的CSS 3实例从2010年开始,HTML5和CSS3就一直是互联网技术中最受关注的两个话题。CSS3是CSS技术的一个升级版本,是由 Adobe Systems、 Apple、 Google、HP、IBM、 Microsoft、 Mozilla、 Opera、Sun、Microsystems等许多Web界的巨头联合组成的一个名为 CSS Working Group的组织共同协商策划的。虽然目前很多细节还在讨论中,但还是不断地向前发展着。模块与模块化结构在CSS 3中，并没有采用总体结构，而是采用了分工协作的模块化结构。采用这种模块化结构，是为了避免产生浏览器对于某个模块支持不完全的情况。如果把整体分成几个模块，各浏览器可以选择支持哪个模块，不支持哪个模块。例如，普通电脑中的浏览器和手机上用的浏览器应该针对不同的模块进行支持。如果采用模块分工协作的话。不同设备上所用的浏览器都可以选用不同模块进行支持，方便了程序的开发。CSS3中的常用模块如下表所示。序号列名列名1basic box model定义各种与盒子相关的样式2Line定义各种与直线相关的样式3Lists定义各种与列表相关的样式4Text定义各种与文字相关的样式5Color定义各种与颜色相关的样式6Font定义各种与字体相关的样式7Background and border定义各种与背景和边框相关的样式8Paged Media定义各种页眉、页脚、页数等页面元素数据的样式9Writing Modes定义页面中文本数据的布局方式一个简单的CSS 3实例对CSS 3中模块的概念有了一定的理解之后，本节通过实例为大家介绍CSS 3与CSS 2在页面设计中的区别。在CSS 2中如果要对页面中文字添加彩色边框，可以通过DIV层来进行控制，下面为大家介绍一个CSS 3应用实例。实例在CSS2中使用DIV层对页面中的文字添加彩色边框：123456789101112131415161718192021222324252627282930&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;使用CSS2对页面中的文字添加彩色边框&lt;/title&gt; &lt;style&gt; #boarder &#123; margin: 3px; width: 180px; padding-left: 14px; border-width: 5px; border-color: blue; border-style: solid; height: 120px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="boarder"&gt; 文字一 &lt;br&gt; 文字二 &lt;br&gt; 文字三 &lt;br&gt; 文字四 &lt;br&gt; 文字五 &lt;br&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;在 Firefox浏览器中运行该实例,结果如下图所示：实例在CSS3中使用 border-radius属性对页面中的文字添加边框:123456789101112131415161718192021222324252627&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;style&gt; #boarder &#123; border: solid 5px blue; border-radius: 20px; -moz-border-radius: 20px; padding: 20px; width: 180px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="boarder"&gt; 文字一 &lt;br&gt; 文字二 &lt;br&gt; 文字三 &lt;br&gt; 文字四 &lt;br&gt; 文字五 &lt;br&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;说明在使用 border-radius属性时,如果使用 Firefox浏览器,需要将样式代码书写成“- moz-border-radius”;如果使用 Safari浏览器,需要将样式代码书写成“ webkit-border-radius“;如果使用 Opera浏览器,需要将样式代码书写成\” border-radius;如果使用 Chrome浏览器,需要将样式代码书写成“ border-radius”或“ webkit-border-radius”的形式在 Firefor浏览器中运行该实例,结果如下图所示。在上面的两个实例中,都是对页面中的文字添加了边框,但是如果在这两个实例中多添加几行文字,即可发现运行结果的变化,使用CSS2的版本中文字将溢出边框：而CSS3中边框的文字不会溢出:在CSS3中新增的各种各样的属性,可以摆脱CSS2中存在的很多束缚,从而使整个网站的界面设计进入一个新的台阶。本文链接: CSS 3的新特征]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第2章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CSS样式表]]></title>
    <url>%2Fblog%2F6780a5e1%2F</url>
    <content type="text"><![CDATA[摘要1、CSS规则2、选择器3、在页面中包含CSSCSS是W3C协会为弥补HTML在显示属性设定上的不足而制定的一套扩展样式标准,它的全称是 Cascading Style Sheet. CSS标准中重新定义了HTML中原来的文字显示样式,增加了一些新概念,如类、层等,可以对文字重叠、定位等。在CSS还没有引入到页面设计之前,传统的HTML语言要实现页面美化在设计上是十分麻烦的,例如要设计页面中文字的样式,如果使用传统的HTML语句来设计页面就不得不在每个需要设计的文字上都定义样式。CSS的出现改变了这一传统模式。CSS规则在CSS样式表中包括3部分内容：选择符、属性和属性值。语法格式为：1选择符&#123;属性:属性值;&#125;选择符：又称选择器，是CSS中很重要的概念，所有HTML语言中的标记都是通过不同的CSS选择器进行控制的。属性：主要包括字体属性、文本属性、背景属性、布局属性、边界属性、列表项目属性、表格属性等内容。其中一些属性只有部分浏览器支持，因此使CSS属性的使用变得更加的复杂。属性值：为某属性的有效值。属性与属性值之间以“:”号(英文冒号)分隔。当有多个属性时，使用“;”(英文分号)分隔。图2.17为大家标注了CSS语法中的选择器、属性与属性值。12345&lt;style&gt; h2 &#123; font-family: 宋体; &#125;&lt;/style&gt;CSS选择器CSS选择器常用的是标记选择器、类选择器、包含选择器、ID选择器等。使用选择器即可对不同的HTML标签进行控制，来实现各种效果。标记选择器大家知道HTML页面是由很多标记组成，例如图片标记&lt;img&gt;、超链接标记&lt;a&gt;、表格标记&lt;table&gt;等。而CSS标记选择器就是声明页面中哪些标记采用哪些CSS样式。例如a选择器，就是用于声明页面中所有&lt;a&gt;标记的样式风格。123456&lt;style&gt; a&#123; font-size: 9px; color:#F93; &#125;&lt;/style&gt;2.类别选择器使用标记选择器非常快捷,但是会有一定的局限性,如果声明标记选择器,那么页面中所有该标记内容会有相应的变化。假如页面中有3个标记,如果想要每个h2&gt;的显示效果都不一样,使用标记选择器就无法实现了,这时就需要引入类别选择器。类别选择器的名称由用户自己定义,并以“.”号开头,定义的属性与属性值也要遵循CSS规范。要应用类别选择器的HTML标记，只需要使用class属性来声明即可。实例使用类别选择器控制页面中字体的样式1234567891011121314151617181920212223242526272829303132333435363738394041&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;!--以下为定义的CSS样式--&gt; &lt;style&gt; /* 定义类名为one的类别选择器*/ .one &#123; /* 定义字体 */ font-family: 宋体; /* 定义字体大小 */ font-size: 24px; /* 定义字体颜色 */ color:red; &#125; .two &#123; font-family: 宋体; font-size: 16px; color:green; &#125; .three &#123; font-family: 宋体; font-size: 12px; color: blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!--定义样式后页面会自动加载样式--&gt; &lt;h2 class="one"&gt; 应用了类选择器one &lt;/h2&gt; &lt;h2 class="two"&gt;应用了类选择器two&lt;/h2&gt; &lt;h2 class="three"&gt;应用了类选择器three &lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;在上面的代码中,页面中的第一个&lt;h2&gt;标记应用了one选择器,第二个&lt;h2&gt;标记应用了two选项器,第3个&lt;h2&gt;标记应用了 three选择器。运行结果如下图所示。说明在HTML标记中,不仅可以应用一种类别选择器,也可以应用多种类别选择器,这样可使HIML标记同时加载多个类别选择器的样式。在多种类别选择器之间用空格进行分割即可,例如&lt;h2 class=&quot;size color&quot;&gt;。size这个类选择器设置该标签的字体，color这个类选择器设置该标签的颜色。3.id选择器id选择器是通过HTML页面中的id属性来选择增添样式,与类别选择器基本相同。但需要注意的是,由于HTML页面中不能包含两个相同的id标记,因此定义的id选择器也就只能被使用一次命。命名id选择器要以“#”号开始,后加HTML标记中的id属性值。实例: 使用id选择器控制页面中字体的样式。123456789101112131415161718192021222324252627282930313233343536373839&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;!--以下为定义的CSS样式--&gt; &lt;style&gt; /* 定义id选择器 */ #first &#123; font-size: 48px; color: red; &#125; #second &#123; font-size: 36px; color: green; &#125; #three &#123; font-size: 18px; color: blue; &#125; /* 定义类选择器，让文本居中 */ .center &#123; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 一个标签只能有一个id属性值 --&gt; &lt;p id="first"&gt;first&lt;/p&gt; &lt;p id="second"&gt;second&lt;/p&gt; &lt;!-- 一个标签可以有多个class属性值 --&gt; &lt;p id="three" class="center red"&gt;three&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;显示效果：在页面中包含CSS在对CSS有了一定的了解后,下面介绍如何实现在页面中包含CSS样式的几种方式,其中包括行内样式、内嵌式和链接式。行内样式行内样式是比较直接的一种样式,直接定义在HTML标记之内,通过标签中的 style属性来实现。这种方式比较容易令初学者接受,但是灵活性不强。实例通过行内定义样式的形式,实现控制页面文字的颜色和大小12345678910111213141516171819202122232425262728293031323334&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt;&lt;/head&gt;&lt;body&gt; &lt;table width="200" border="1" align="center"&gt; &lt;!--在页面中定义表格--&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="color:yellow; font-size:36px;"&gt;行内样式一&lt;/p&gt; &lt;/td&gt; &lt;!--在页面文字中定义CSS样式--&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="color:red; font-size:24px;"&gt;行内样式二&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="color:green; font-size:18px;"&gt;行内样式三&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;p style="color:blue; font-size:14px;"&gt;行内样式四&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;显示效果：2.内嵌式内嵌式样式表就是在页面中使用&lt;style&gt;&lt;/style&gt;标记将CSS样式包含在页面中。内嵌式样式表的形式没有行内标记表现的直接,但是能够使页面更加规整。与行内样式相比,内嵌式样式表更加便于维护。但是每个网站都不可能由一个页面构成,而每个页面中相同的HTML标记又都要求有相同的样式,此时使用内嵌式样式表就显得比较笨重,而使用链接式样式表即可轻松解决这一问题。3.链接式链接外部CSS样式表是最常用的一种引用样式表的方式,将CSS样式定义在一个单独的文件中,然后在HTML页面中通过&lt;link&gt;标记引用,是一种最为有效的使用CSS样式的方式。&lt;link&gt;标记的语法结构如下:1&lt;link rel="stylesheet" href="path" type="text/css"&gt;参数说明:rel: 定义外部文档和调用文档间的关系。href: CSS文档的绝对或相对路径。type: 指的是外部文件的MIME类型。实例123456789h1,h2,h3&#123; /*定义CSS样式 */ color:red; font-family:"Trebuchet MS", Arial, Helvetica, sans-serif; &#125;p&#123; color:blue; /*定义颜色*/ font-weight:200; font-size:16px; /*设置字体大小*/&#125;(2)在页面中通过&lt;link&gt;标记将CSS样式表引入到页面中,此时CSS样式表定义的内容将自动加载到页面中。代码如下:1234567891011121314151617&lt;html&gt;&lt;head&gt; &lt;title&gt;通过链接形式引入CSS样式&lt;/title&gt; &lt;meta charset="UTF-8"&gt; &lt;!--页面引入CSS样式表--&gt; &lt;link rel="stylesheet" href="css.css" type="text/css" /&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;标题&lt;/h2&gt; &lt;!--在页面中添加文字--&gt; &lt;p&gt;段落&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;显示效果如下图所示：本文链接: CSS样式表]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第2章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HTML5新增内容]]></title>
    <url>%2Fblog%2F994450b9%2F</url>
    <content type="text"><![CDATA[摘要1、新增元素2、新增的input元素类型自从2010年HTML5正式推出以来，就以一种惊人的速度被迅速的推广，世界各知名浏览器厂商也对HTML5有很好的支持。例如微软就对下一代IE9做了标准上的改进，使其能够支持HTML5。而且HTML5还有一个特点是在老版本的浏览器上也可以正常运行。本节将为大家介绍与HTML4相比HTML5新增的元素与属性。注意HTML5的出现代表着Web开进入了一个新的时代,但是并不表示现在用HTML4开发的网站要重新创建。因为HTML5内部功能并不是革命性的,而是发展性的。这正是HTML5兼容性的体验。HTML5新增内容在HTML5中,新增了以下元素。&lt;section元素&gt;&lt;section&gt;元素表示页面中的一个区域。比如章节、页眉、页脚或页面中的其他部分。可以与h1、h2、h3、h4等元素结合起来使用，标示文档结构。12345&lt;section&gt; &lt;h2&gt;section标记的使用&lt;/h2&gt; &lt;p&gt;完成百分比：100%&lt;/p&gt; &lt;input type="button" value="请单击"/&gt;&lt;/section&gt;显示效果:section标记的使用完成百分比：100%上面这段代码相当于在HTML4中使用&lt;div&gt;标记在页面中定义一个区域。&lt;acticle&gt;元素&lt;acticle&gt;元素表示页面中的一块与上下文不相关的独立内容,例如博客中的一篇文章、一段用户评论等。除了内容部分,一个&lt;acticle&gt;元素通常有自己的标题、脚注等内容。123456789&lt;acticle&gt; &lt;header&gt; &lt;h1&gt;标题&lt;/h1&gt; &lt;/header&gt; &lt;p&gt;内容内容内容内容&lt;/p&gt; &lt;footer&gt; &lt;p&gt;脚注&lt;/p&gt; &lt;/footer&gt;&lt;/acticle&gt;显示效果：标题内容内容内容内容脚注&lt;header&gt;元素&lt;header&gt;元素表示页面中一个内容区域中或整个页面的标题&lt;footer&gt;元素&lt;footer&gt;元素表示整个页面或页面中一个内容区域块的脚注。例如日期、作者信息等。&lt;aside&gt;元素&lt;aside&gt;元素用来表示当前页面或文章的附属信息部分。可以包含与当前页面或主要内容相关的引用、侧边栏、广告、导航条等信息。实例应用&lt;aside&gt;元素定义页面侧栏。1234567891011121314151617181920212223242526&lt;html&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;head&gt; &lt;title&gt;测试aside标签&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;aside&gt; &lt;nav&gt; &lt;h2&gt;侧栏&lt;/h2&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;侧边栏1&lt;/a&gt; 2011-9-27 &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;侧边栏2&lt;/a&gt; 2011-9-27 &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;侧边栏2&lt;/a&gt; 2011-9-27 &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/aside&gt;&lt;/body&gt;&lt;/html&gt;显示效果：我看不出来有什么效果。新增input元素类型HTML5中新增了很多input元素类型，这些新增元素的添加可以使程序员更加方便的创建页面。HTML5新增的input元素类型如下：email：将input元素的类型设置为email，表示文本框必须输入E-mail地址。url：url表示必须输入URL地址。number：表示必须输入数值的文本框。range：表示必须输入一定范围内数字值的文本输入框。实例：1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;HTML5新增Input表单&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt; &lt;form action="a.jsp" method="GET" target="_blank"&gt; &lt;table&gt; &lt;tr&gt; &lt;td align="right"&gt;邮箱:&lt;/td&gt; &lt;td align="left"&gt; &lt;input type="email" name="email"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="right"&gt;URL:&lt;/td&gt; &lt;td align="left"&gt; &lt;input type="url" name="url"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="right"&gt;整数:&lt;/td&gt; &lt;td align="left"&gt; &lt;input type="number" name="number"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="right"&gt;随机数&lt;/td&gt; &lt;td align="left"&gt; &lt;input type="range" name="range"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;input type="submit" name="submit1" id="submit1"/&gt; &lt;/form&gt; &lt;/center&gt;&lt;/body&gt;&lt;/html&gt;在输入信息的时候，浏览器会检查输入的信息，如果输入的信息不对会提示错误。如下图所示：输入正取的格式：提交结果：1file:///C:/Users/lan/Desktop/a.jsp?email=123@123.com&amp;url=file:///C:/Users/lan/Desktop/HTML5%E6%96%B0%E5%A2%9Einput%E8%A1%A8%E5%8D%95.html&amp;number=3&amp;range=54&amp;submit1=提交查询本文链接: HTML5新增内容]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第2章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正则实例：markdown文档中给HTML标记加反引号]]></title>
    <url>%2Fblog%2Fde8eb4f9%2F</url>
    <content type="text"><![CDATA[摘要本文介绍在NotePad++中使用正则表达式,对HTML标签加反引号,进而对Markdown文档中的HTML标签进行”转义”。写到HTML这章的时候，在Markdown中添加了好多html标记，这样会引起文章渲染乱码。所以需要都让对一些HTML标记进行”转义”。我这里的做法是，使用反引号把HTML标记包裹起来。如下所示:1`&lt;h1&gt;`这样渲染的时候就以代码的方式渲染，而不是渲染为HTML标记。我写文章用的是MarkdownPad2,因为MarkdownPad2的快捷键很好用。不过MarkdownPad2好像只支持正则表达查找，不能替换，更不支持正则表达式替换。后来发现NotePad++支持正则表达式替换。所以，就用NotePad++来完成正则表达式替换功能。匹配HTML标签的正则表达式:(&lt;/?[a-zA_Z]*&gt;)。在这个HTML标签两边加上反引号”转义”：1`\1`这里使用括号捕获这个HTML标签。然后使用反向引用\1即可引用到这个刚匹配的文本，用反引号包裹起来，替换掉原来的文本即可实现我的要求。具体设置如下图所示:https://image-1257720033.cos.ap-shanghai.myqcloud.com/blog/Java%20Web%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/2/Notepad%2B%2B%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2.png最后，说一下，NotePad++打开替换的快捷键是:ctrl+H。当然，这个正则表达式并不严谨，但是对我来说已经够用了。本文链接: 正则实例：markdown文档中给HTML标记加反引号]]></content>
      <categories>
        <category>正则表达式</category>
        <category>实例</category>
        <category>匹配HTML标签</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HTML标记语言]]></title>
    <url>%2Fblog%2Fb3e1ff37%2F</url>
    <content type="text"><![CDATA[摘要1、创建第一个HTML文件2、HTML文档结构3、HTML常用标记4、表格标记5、超链接与图片标记HTML是一种在互联网上常见的网页制作标注性语言,并不能算作一种程序设计语言.通常说的编程语言是指的那些实现代码逻辑和处理计算的语言，。而HTML只是对于数据的标记，而不能用于对数据进行处理。所以不是编程语言！HTML是通过浏览器的翻译,将网页中的内容呈现给用户。对于网站设计人员来说,只使用HTML是不够的,需要在页面中引入CSS样式。HTML与CSS的关糸是“内容”与“形式的关条,由HTML来确定网页的内容,CSS来实现页面的表现形式。HTML与CSS的完美搭配使页面更加美观、大方,且容易维护。在浏览器的地址栏中输入一个网址,就会展示出相应的网页内容。在网页中包含有很多内容,如文字、图片、动画,以及声音和视频等。网页的最终目的是为访问者提供有价值的信息。提到网页设计不得不提到HTML标记语言,HTML全称 Hypertext Markup Language,译为超文本标记语言HTML用于描述超文本中内容的显示方式。使用HTML可以实现在网页中定义一个标题、文本或者表格等。本节将详细介绍HTML标记语言。创建第一个HTML文件编写HTML文件可以通过两种方式，一种是手工编写HTML代码，另一种是借助一些开发软件，比如Adobe公司的Dreamweaver或者微软公司的Expression Web这样的网页制作软件。在Windows操作系统中，最简单的文本编辑软件就是记事本。HTML文档结构HTML文档由4个主要标记组成，这4个标记主要有&lt;html&gt;、&lt;head&gt;、&lt;title&gt;、&lt;body&gt;。他们构成了HTML页面最基本的元素。&lt;html&gt;标记&lt;html&gt;标记是HTML文件的开头。所有HTML文件都是以&lt;html&gt;标记开头，以&lt;/html&gt;标记结束。HTML页面的所有标记都要放置在&lt;html&gt;与&lt;/html&gt;标记中,&lt;html&gt;标记并没有实质性的功能,但却是HTML文件不可缺少的内容。说明HTML标记是不区分大小写的。&lt;head&gt;标记&lt;head&gt;标记是HTML文件的头标记，作用是放置HTML文件的信息。。如定义CSS样式代码可放置在&lt;head&gt;与&lt;/head&gt;标记中。&lt;title&gt;标记&lt;title&gt;标记为标题标记。可将网页的标题定义在&lt;title&gt;与&lt;/title&gt;标记之中。&lt;body&gt;标记&lt;body&gt;是HTML页面的主体标记。页面中的所有内容都定义在&lt;body&gt;标记中。&lt;body&gt;标记也是成对使用的。标记本身也具有控制页面的一些特性,例如控制页面的背景图片和颜色等。HTML常用标记HTML中提供了很多标记，可以用来设计页面中的文字、图片，定义超链接等。这些标记的使用可以使页面更加的生动，下面为大家介绍HTML中的常用标记。换行标记要让网页中的文字实现换行，在HTML文件中输入换行符（“Enter键”）是没有用的，如果要让页面中的文字实现换行，就必须用一个标记告诉浏览器在哪里要实现换行操作。在HTML语言中，换行标记为“&lt;br&gt;”。前面为大家介绍的HTML标记不同,换行标记是一个单独标记,不是成对出现的。段落标记HTML中的段落标记也是一个很重要的标记，段落标记以&lt;p&gt;标记开头，以&lt;/p&gt;标记结束。段落标记在段前和段后各添加一个空行，而定义在段落标记中的内容，不受该标记的影响。标题标记要在HTML页面中创建不同级别的标题，可以使用HTML语言中的标题标记。在HTML标记中，设定了6个标题标记，分别为&lt;h1&gt;至&lt;h6&gt;，其中&lt;h1&gt;代表1级标题，&lt;h2&gt;代表2级标题，&lt;h6&gt;代表6级标题等。数字越小，表示级别越高，文字的字体也就越大。居中标记HTML页面中的内容有一定的布局方式，默认的布局方式是从左到右依次排序。如果要想让页面中的内容在页面的居中位置显示，可以使用HTML中的&lt;center&gt;标记。&lt;center&gt;居中标记以&lt;center&gt;标记开头，以&lt;/center&gt;标记结尾。标记之中的内容为居中显示。文字列表标记HTML语言中提供了文字列表标记，文字列表标记可以将文字以列表的形式依次排列。通过这种形式可以更加的方便网页的访问者。HTML中的列表标记主要有无序的列表和有序的列表两种。无序列表无序列表顾名思义，无序列表就是列表结构中的列表项没有先后顺序的列表形式。大部分网页应用中的列表均采用无序列表，无序列表在每个列表项的前面添加一个圆点符号。通过标签&lt;ul&gt;&lt;/ul&gt;可以创建一组无序列表,其中每一个列表项以&lt;li&gt;列表&lt;/li&gt;表示。下面的实例为大家演示了无序列表的应用。1234567&lt;ul&gt; &lt;li&gt;列表项一&lt;/li&gt; &lt;li&gt;列表项二&lt;/li&gt; &lt;li&gt;列表项三&lt;/li&gt; &lt;li&gt;列表项四&lt;/li&gt; &lt;li&gt;列表项五&lt;/li&gt;&lt;/ul&gt;显示效果:列表项一列表项二列表项三列表项四列表项五有序列表有序列表和无序列表的区别是，使用有序列表标记可以将列表项进行排号。有序列表的标记为&lt;ol&gt;，每一个列表项前使用&lt;li&gt;。有序列表中项目项是有一定的顺序的。下面是有序列表的例子1234567&lt;ol&gt; &lt;li&gt;列表项一&lt;/li&gt; &lt;li&gt;列表项二&lt;/li&gt; &lt;li&gt;列表项三&lt;/li&gt; &lt;li&gt;列表项四&lt;/li&gt; &lt;li&gt;列表项五&lt;/li&gt;&lt;/ol&gt;显示效果：列表项一列表项二列表项三列表项四列表项五表格标记表格是网页中十分重要的组成元素。表格用来存储数据。表格包含标题、表头、行和单元格。在HTML语言中,表格标记使用符号表示。定义表格仅使用&lt;table&gt;是不够的,还需要定义表格中的行、列、标题等内容。在HIML页面中定义表格,需要学会以下几个标记。表格标记&lt;table&gt;&lt;table&gt;...&lt;/table&gt;标记表示整个表格。&lt;table&gt;标记中有很多属性,例如 width属性用来设置表格的宽度, border属性用来设置表格的边框, align属性用来设置表格的对齐方式, bgcolor属性用来设置表格的背景色等。标题标记&lt;caption&gt;标题标记以&lt;caption&gt;开头,以&lt;/caption&gt;结束,标题标记也有一些属性,例如 align,valign等。表头标记&lt;th&gt;表头标记以&lt;th&gt;开头,以&lt;/th&gt;结束,也可以通过 align、 background、 colspan(列跨度,用于合并单元格)、 valign等属性来设置表头。表格行标记&lt;tr&gt;表格行标记以&lt;tr&gt;开头,以&lt;/tr&gt;结束,一组&lt;tr&gt;标记表示表格中的一行。&lt;tr&gt;标记要嵌套在&lt;table&gt;标记中使用,该标记也具有 align、 background等属性。单元格标记&lt;td&gt;单元格标记&lt;td&gt;又称为列标记,一个&lt;tr&gt;标记中可以嵌套若干个&lt;td&gt;标记。该标记也具有 align、background、 valign等属性123456789101112131415161718192021222324252627282930&lt;table width=&quot;318&quot; height=&quot;167&quot; border=&quot;1&quot; align=&quot;center&quot;&gt; &lt;!--表格标题--&gt; &lt;caption&gt;学生考试成绩单&lt;/caption&gt; &lt;!--行标记--&gt; &lt;tr&gt; &lt;!--单元格标记--&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;姓名&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;语文&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;数学&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;英语&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;张三&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;89&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;92&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;87&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;李四&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;93&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;86&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;80&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;王五&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;85&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;86&lt;/td&gt; &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;90&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;显示效果：学生考试成绩单姓名语文数学英语张三899287李四938680王五858690说明表格不仅可以用于显示数据,在实际开发中,还常常用来设计页面。在页面中创建一个表格,并设置没有边框,之后通过该表格将页面划分为几个区域,之后分别对几个区域进行设计,这是一种非常方便的设计页面的方式。HTML表单标记对于经常上网的人来说,对网站中的登录等页面肯定不会感到陌生,在登录页面中,网站会提供给用户用户名文本框与密码文本框,以供访客输入信息。这里的用户名文本框与密码文本框就属于HTML中的表单元素。表单在HTML页面中起着非常重要的作用,是用户与网页交互信息的重要手段。1.&lt;form&gt;…&lt;/form&gt;表单标记表单标记以&lt;form&gt;标记开头,以&lt;form&gt;标记结尾。在表单标记中可以定义处理表单数据程序的URL地址等信息。&lt;form&gt;标记的基本语法如下1&lt;form action =&quot;url&quot; method=&quot;get&quot;|&quot;post&quot; name=&quot;name&quot; onSubmit=&quot;&quot; target =&quot;&quot;&lt;/form&gt;&lt;form&gt;标记的各属性说明如下:action属性: 该属性用来指定处理表单数据程序的URL地址。method属性: 该属性用来指定数据传送到服务器的方式。它有两种属性值,分别为get与 post。get属性值表示将输入的数据追加在action指定的地址后面,并传送到服务器。当属性值为post时,会将输入的数据按照HTTP协议中的post传输方式传送到服务器。name属性: 该属性指定表单的名称,其值程序员可以自定义。target属性：该属性指定输入数据结果显示在哪个窗口中,其属性值可以设置为_blank,_self、_parent和_top。其中, _blank表示在新窗口中打开目标文件;_sel表示在同一个窗口中打开,该项一般不用设置(默认是在同窗口); _parent表示在上一级窗口中打开,一般使用框架页时经常使用;_top表示在浏览器的整个窗口中打开,忽略任何框架。下面的例子为创建表单,设置表单名称为form,当用户提交表单时,提交至 action.html页面进行处理。代码如下：1&lt;form id=&quot;form1&quot; name=&quot;form&quot; method=&quot;post&quot; action=&quot;action.html&quot; target=&quot;_blank&quot;&gt;&lt;/form&gt;2.&lt;input&gt;表单输入标记表单输入标记是使用最频繁的表单标记,通过这个标记可以向页面中添加单行文本输入框、多行文本输入框、按钮等。&lt;input&gt;标记的语法格式如下1&lt;input type=&quot;image&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; width=&quot;digit&quot; height=&quot;digit&quot; maxlength=&quot;digit&quot; readonly=&quot;&quot; size=&quot;digit&quot; src=&quot;uni&quot; usemap=&quot;uri&quot; alt=&quot;&quot; name=&quot;checkbox&quot; value=&quot;checkbox&quot;&gt;&lt;input&gt;标记的属性如表2.1所示。序号属性描述1type用于指定添加的是哪种类型的输入字段,共有10个可选值,如表2.2所示2disabled用于指定输入字段不可用,即字段变成灰色。其属性值可以为空值,也可以指定为 disabled3checked用于指定输入字段是否处于被选中状态,用于type属性值为 radio和 checkbox的情况下。其属性值可以为空值,也可以指定为 checked4width用于指定输入字段的宽度,用于type属性值为 image的情况下5height用于指定输入字段的高度,用于type属性值为 image的情况下6maxlength用于指定输入字段可输入文字的个数,用于type属性值为text和 password的情况下,默认没有字数限制7readonly用于指定输入字段是否为只读。其属性值可以为空值,也可以指定为 readonly8size用于指定输入字段的宽度,当type属性为text和 password时,以文字个数为单位,当type属性为其他值时,以像素为单位9src用于指定图片的来源,只有当tpe属性为 image时有效10usemap为图片设置热点地图,只有当type属性为 image时有效。属性值为URI,URI格式为“#+&lt;map&gt;标记的name属性值”。例如,&lt;map&gt;标记的name属性值为Map,该URI为#Map11alt用于指定当图片无法显示时显示的文字,只有当type属性为 image时有效12name用于指定输入字段的名称13value用于指定输入字段默认的数据值,当type属性为 checkbox和 radio时,不可省略此属性;为其他值时,可以省略。当type属性为 button,reset和submit时,指定的是按钮上的显示文字;当type属性为 checkbox和 radio时,指定的是数据项选定时的值type属性是&lt;input&gt;标记中非常重要的内容,决定了输入数据的类型。该属性值的可选项如表2.2所示。type属性的属性值描述text文本框password密码域file文件域radio单选按钮checkbox复选框submit提交按钮reset重置按钮button普通按钮hidden隐藏域image图像域【例2-8】在该文件中首先应用&lt;form&gt;标记添加一个表单,将表单的 action属性设置为 registerdeal.jsp, method属性设置为post,然后应用&lt;input&gt;标记添加获取用户名和E-mail的文本框、获取密码和确认密码的密码域、选择性别的单选按钮、选择爱好的复选框、提交按钮、重置按钮。代码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;&amp;lt;input&amp;gt;标记的典型应用&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action="" method="post" name="myform"&gt; &lt;!--使用表格进行布局，宽度设置为0--&gt; &lt;!--第一部分,这个表格中只有一行一列，用图片填充--&gt; &lt;table width="694" border="0" align="center" cellpadding="0" cellspacing="0"&gt; &lt;tr&gt; &lt;td&gt; &lt;img src="images/01.gif" width="694" height="168"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;!--第二部分--&gt; &lt;table width="694" border="0" align="center" cellpadding="0" cellspacing="0"&gt; &lt;!--第一行--&gt; &lt;tr&gt; &lt;!--第1第一个单元格，用图片填充作为左背景--&gt; &lt;td width="103" height="231" valign="top"&gt; &lt;img src="images/02.gif" width="35"&gt; &lt;/td&gt; &lt;!--第一行第2个单元格--&gt; &lt;td width="547" valign="top"&gt; &lt;!--用表格填充,内容表格--&gt; &lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt; &lt;!--第一行--&gt; &lt;tr&gt; &lt;!--单元格1,文本提示符--&gt; &lt;td width="17%" height="29" align="center"&gt;用 户 名：&lt;/td&gt; &lt;!--单元格2,文本输入框，表示用户名,用户名最长字符为20个，占据两个单元格--&gt; &lt;td colspan="2"&gt; &lt;input name="username" type="text" id="UserName4" maxlength="20"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;!--第2行,设置密码框--&gt; &lt;tr&gt; &lt;td height="28" align="center"&gt;密&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;码：&lt;/td&gt; &lt;td height="28" colspan="2"&gt; &lt;input name="pwd1" type="password" id="PWD14" size="20" maxlength="20"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;!--第2行，设置密码确认框--&gt; &lt;tr&gt; &lt;td height="28" align="center"&gt;确认密码：&lt;/td&gt; &lt;td height="28" colspan="2"&gt; &lt;input name="pwd2" type="password" id="PWD25" size="20" maxlength="20"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;!--第3行，设置性别单选项--&gt; &lt;tr&gt; &lt;td height="28" align="center"&gt;性&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;别：&lt;/td&gt; &lt;!--第1个单选项，默认选择男生，单选项，name属性要一样--&gt; &lt;td colspan="2"&gt; &lt;input name="sex" type="radio" class="noborder" value="男" checked&gt; 男&amp;nbsp; &lt;input name="sex" type="radio" class="noborder" value="女"&gt; 女 &lt;/td&gt; &lt;/tr&gt; &lt;!--第4行，设置爱好项多选框--&gt; &lt;tr&gt; &lt;td height="28" align="center"&gt;爱&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;好：&lt;/td&gt; &lt;!--复选项的name属性和id属性要一致--&gt; &lt;td colspan="2" class="word_grey"&gt; &lt;input name="like" type="checkbox" id="like" value="体育"&gt; 体育 &lt;input name="like" type="checkbox" id="like" value="旅游"&gt; 旅游 &lt;input name="like" type="checkbox" id="like" value="听音乐"&gt; 听音乐 &lt;input name="like" type="checkbox" id="like" value="看书"&gt; 看书 &lt;/td&gt; &lt;/tr&gt; &lt;!--第5行设置E-mail文本框--&gt; &lt;tr&gt; &lt;td height="28" align="center" style="padding-left:10px"&gt;E-mail：&lt;/td&gt; &lt;!--占据两个单元格--&gt; &lt;td colspan="2" class="word_grey"&gt; &lt;input name="email" type="text" id="PWD224" size="50"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;!--第6行，设置提交按钮，重置按钮--&gt; &lt;tr&gt; &lt;td height="34"&gt;&amp;nbsp;&lt;/td&gt; &lt;td width="30%" class="word_grey"&gt; &lt;input name="Submit" type="submit" class="btn_grey" value="确定保存"&gt; &lt;input name="Reset" type="reset" class="btn_grey" id="Reset" value="重新填写"&gt; &lt;/td&gt; &lt;!--设置保存图片按钮--&gt; &lt;td width="53%" class="word_grey"&gt; &lt;input type="image" name="imageField" src="images/btn_bg.jpg"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/td&gt; &lt;!--设置右侧背景图片--&gt; &lt;td width="44" valign="top"&gt; &lt;img src="images/04.gif" width="44"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;在页面中添加表单元素后,即形成了网页的雏形。页面运行结果如下图所示。3.&lt;select&gt;…&lt;/select&gt;下拉列表框标记&lt;select&gt;标记可以在页面中创建下拉列表框,此时的下拉列表框是一个空的列表,要使用&lt;option&gt;标记向列表中添加内容。&lt;select&gt;标记的语法格式如下:1&lt;select name="name" size="digit" multiple="multiple" disabled="disabled"&gt;&lt;select&gt;标记的属性如下表所示：序号描述1name用于指定列表框的名称2size用于指定列表框中显示的选项数量,超出该数量的选项可以通过拖动滚动条查看3disabled用于指定当前列表框不可使用(变成灰色)4multiple用于让多行列表框支持多选这里的多选可以，按下ctrl然后点击选项即可实现多选。如果不设置多选的话，只能选一个，按下ctrl和shitf键是没有用的。【例2-9】在页面中应用&lt;select&gt;标记和&lt;option&gt;标记添加下拉列表框和多行下拉列表框。代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;html&gt;&lt;Head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;下拉列表实例&lt;/title&gt;&lt;/Head&gt;&lt;body&gt; &lt;form action="b.html" method="GET"&gt; &lt;table border="0"&gt; &lt;tr&gt; &lt;td align="right"&gt;下拉列表框1:&lt;/td&gt; &lt;td align="right"&gt; &lt;!--默认显示一个选项，剩下的以滚动条查看--&gt; &lt;select name="select1" id="select1"&gt; &lt;!--两个名字的水果: 芒果 香蕉 苹果 荔枝 石榴 橄榄 榴莲 --&gt; &lt;option&gt;芒果&lt;/option&gt; &lt;option&gt;香蕉&lt;/option&gt; &lt;option&gt;苹果&lt;/option&gt; &lt;option&gt;荔枝&lt;/option&gt; &lt;option&gt;石榴&lt;/option&gt; &lt;option&gt;橄榄&lt;/option&gt; &lt;option&gt;榴莲&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;td&gt;下拉列表框2(全部不可选):&lt;/td&gt; &lt;td&gt; &lt;select name="select2" id="select2" size="3" disabled="disabled"&gt; &lt;!--两个名字的水果: 桂圆 枇杷 西瓜 甘蔗 香瓜 菠萝 橘子 --&gt; &lt;!--当前的列表项不可用--&gt; &lt;option disabled="disabled"&gt;桂圆&lt;/option&gt; &lt;option&gt;枇杷&lt;/option&gt; &lt;option&gt;西瓜&lt;/option&gt; &lt;option&gt;甘蔗&lt;/option&gt; &lt;option&gt;香瓜&lt;/option&gt; &lt;option&gt;菠萝&lt;/option&gt; &lt;option&gt;橘子&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;td&gt;下拉列表框3(支持多选):&lt;/td&gt; &lt;td&gt; &lt;select name="select3" id="select3" size="3" multiple="multiple"&gt; &lt;!--两个名字的水果: 樱桃 油桃 树莓 草莓 蓝莓 葡萄 椰子 --&gt; &lt;!--当前的列表项不可用--&gt; &lt;option disabled="disabled"&gt;樱桃&lt;/option&gt; &lt;option&gt;油桃&lt;/option&gt; &lt;option&gt;树莓&lt;/option&gt; &lt;option&gt;草莓&lt;/option&gt; &lt;option&gt;蓝莓&lt;/option&gt; &lt;option&gt;葡萄&lt;/option&gt; &lt;option&gt;椰子&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;input type="submit" value="提交"&gt;&lt;/input&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;显示效果如下图所示：可以看到,第一个下拉列表框没有设置size属性，只显示一个选项，剩下的以滚动条显示。而第三个设置size属性为5,则显示5个选项，第二个下拉列表项设置disabled属性，该下拉列表的所有选项都不可选。第三个下列列表框设置了multiple属性，这样可以选择多个选型(按下shitf/ctrl)。现在点击提交按钮，跳转的URL如下所示：1file:///C:/Users/lan/Desktop/b.html?select1=香蕉&amp;select3=油桃&amp;select3=树莓可以看到三个多选下拉列表中我们成功的选了两个选项&amp;select3=油桃&amp;select3=树莓。4.&lt;textarea&gt;多行文本标记&lt;textarea&gt;为多行文本标记,与单行文本相比,多行文本可以输入更多的内容。通常情况下,&lt;textarea&gt;标记出现在&lt;form&gt;标记的标记内容中。&lt;textarea&gt;标记的语法格式如下:1&lt;textarea name=&quot;name&quot; id=&quot;id&quot; cols=&quot;列数&quot; rows=&quot;行数&quot; disabled=&quot;disabled&quot; readonly=&quot;readonly&quot; wrap=&quot;value&quot;&gt;&lt;/textarea&gt;&lt;textarea&gt;标记的属性如下表所示。序号&lt;textarea&gt;标记的属性描述1name用于指定多行文本框的名称,当表单提交后,在服务器端获取表单数据时应用2id和其他id属性一样3cols用于指定多行文本框显示的列数(宽度)4rows用于指定多行文本框显示的行数(高度)5disabled用于指定当前多行文本框不可使用(变成灰色)6readonly用于指定当前多行文本框为只读**7wrrap用于设置多行文本中的文字是否自动换行,可选值如下表所示序号wrap属性的可选值描述1hard默认值,表示自动换行,如果文字超过cols属性所指的列数就自动换行,并且提交到服务器时换行符同时被提交2soft表示自动换行,如果文字超过cols属性所指的列数就自动换行,但提交到服务器时换行符不被提交3off表示不自动换行,如果想让文字换行,只能按下 Enter键强制换行【例2.10】在页面中创建表单对象,并在表单中添加一个多行文本框,文本框的名称为 content,6行30列,文字换行方式为hard。关键代码如下:123&lt;form name="form1" method="post" action=""&gt; &lt;textarea name="content" cols="30" rows="5" wrap="hard"&gt;&lt;/textarea&gt;&lt;/form&gt;显示效果：在页面中的多行文本框中可输入任意内容。2.1.6超链接与图片标记HTML语言的标记有很多,限于篇幅,只能介绍一些常用标记。除了上面介绍的常用标记外,还有两个标记不得不向大家介绍,即超链接标记与图片标记。1.超链接标记超链接标记是页面中非常重要的元素,在网站中实现从一个页面跳转到另一个页面,这个功能就是通过超链接标记来完成的。超链接标记的语法非常简单。其语法格式如下:1&lt;a href=""&gt;&lt;/a&gt;属性href用来设定链接到哪个页面中。2.图片标记大家在浏览网站时通常会看到各式各样的漂亮图片,在页面中添加的图片是通过&lt;img&gt;标记来实现的。&lt;img&gt;标记的语法格式如下:1&lt;img src="uri" width="value" height="value" border="value" alt="提示文本"&gt;&lt;img&gt;标记的属性如下表2.6所示。|序号|&lt;img&gt;标记的属性|描述||-|-|-||1|src|用于指定图片的来源||2|width|用于指定图片的宽度||3|height|用于指定图片的高度||4|border|用于指定图片外边框的宽度，默认值为0||5|alt|用于指定图片无法显示时显示的文字|下面给出具体实例,为读者演示超链接和图片标记的使用。12345678910111213141516171819202122232425262728293031&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;超链接和图片标签&lt;/title&gt; &lt;style&gt; /* 定义图片和超链接外边框 */ a,img&#123; border-style: outset; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table border=&quot;0&quot; align=&quot;center&quot; valign=&quot;center&quot;&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt; &lt;img src=&quot;BlogImage/avatar.jpg&quot; alt=&quot;我的博客头像&quot; width=&quot;50%&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;&lt;a href=&quot;https://www.lansheng.net.cn&quot; target=&quot;_blank&quot;&gt;跳转到我的博客首页&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt;显示效果如下：关键代码：&lt;img src=&quot;BlogImage/avatar.jpg&quot; alt=&quot;我的博客头像&quot; width=&quot;50%&quot;&gt;中图片的路径src=&quot;BlogImage/avatar.jpg&quot;表示图片在(当前html文档的路径)当前路径下的BlogImage目录下的avatar.jpg这个图片。这里图片使用相对了路径。使用相对路径好处是，可以把图片目录BlogImage和html文件一同发布,即使改变网站的地址也不会影响到网站的结构。本文链接: HTML标记语言]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第2章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通 第1章 Web应用技术]]></title>
    <url>%2Fblog%2F3e19e91d%2F</url>
    <content type="text"><![CDATA[摘要1、客户端应用的技术2、服务器应用的技术在开发Web应用程序时,通常需要应用客户端和服务器两方面的技术。其中,客户端应用的技术主要用于展现信息内容,而服务器端应用的技术,则主要用于进行业务逻辑的处理和与数据库的交互等。下面进行详细介绍。客户端应用的技术在进行Web应用开发时,离不开客户端技术的支持。目前,比较常用的客户端技术包括HTML语言、CSS、 Flash和客户端脚本技术。下面进行详细介绍。1、HTML语言2、CSS3、客户端脚本技术HTML语言HTML语言是客户端技术的基础,主要用于显示网页信息,由浏览器解释执行,它不需要编译。HTML语言简单易用,它在文件中加入标签,使其可以显示各种各样的字体、图形及闪烁效果,还增加了结构和标记,如头元素、文字、列表、表格、表单、框架、图像和多媒体等,并且提供了与 Internet中其他文档的超链接。例如,在一个HTML页中,应用图像标记插入一个图片,可以使用下面的HTML代码:12345678910&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;测试在HTML中插入图片&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt;&lt;img src=&quot;avatar.jpg&quot;/&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;该HTML页运行后的效果如图1.6所示。图1.6运行效果说明HTML语言不区分大小写,这一点与Java不同,例如HTML标&lt;body&gt;`也可以写为`。CSSCSS就是一种叫做样式表( Style Sheet)的技术,也有人称之为层叠样式表( Cascading Style Sheet)。在制作网页时采用CSS样式,可以有效地对页面的布局、字体、颜色、背景和其他效果实现更加精确的控制。只要对相应的代码做一些简单的修改,就可以改变整个页面的风格。CSS大大提高了开发者对信息展现格式的控制能力,特别是在目前比较流行的CSC+DⅣ布局的网站中,CSS的作用更是举足轻重。技巧在网页中使用CSS样式不仅可以美化页面,而且可以优化网页速度,因为CSS样式表文件只是简单的文本格式,不需要安装额外的第三方插件。另外,由于CSS提供了很多滤镜效果,从而避免使用大量的图片,这样将大大缩小文件的体积,提高下载速度。客户端脚本技术客户端脚本技术是指嵌入到web页面中的程序代码,这些程序代码是一种解释性的语言,浏览器可以对客户端脚本进行解释。通过脚本语言可以实现以编程的方式对页面元素进行控制,从而增加页面的灵活性。常用的客户端脚本语言有 JavaScript和VBSCript。目前,应用最为广泛的客户端脚本语言是JavaScript脚本,它是Ajax的重要组成部分。在本书的第3章将对 JavaScript脚本语言进行详细介绍服务器端应用的技术在开发动态网站时，离不开服务器端技术，目前，比较常用的服务器端技术主要有CGI，ASP、PHP、ASP.NET和JSP。CGI1、CGI是最早用来创建动态网页的一种技术，它可以使浏览器与服务器之间产生互动关系。CGI是最早用来创建动态网页的一种技术,它可以使浏览器与服务器之间产生互动关系。CGI的全称是 Common Gateway Interface,即通用网关接口。它允许使用不同的语言来编写适合的CGI程序。该程序被放在Web服务器上运行。当客户端发出请求给服务器时,服务器根据用户请求建立一个新的进程来执行指定的CGI程序,并将执行结果以网页的形式传输到客户端的浏览器上显示。CGI可以说是当前应用程序的基础技术,但这种技术编制方式比较困难而且效率低下,因为每次页面被请求时,都要求服务器重新将CGI程序编译成可执行的代码。在CGI中使用最为常见的语言为C,C++、Java和Perl( Practical Extraction and Report Language,文件分析报告语言)。ASPASP( Active Server Page)是一种使用很广泛的开发动态网站的技术。它通过在页面代码中嵌VBSCript或 JavaScript脚本语言,来生成动态的内容,在服务器端必须安装适当的解释器后,才可以通过调用此解释器来执行脚本程序,然后将执行结果与静态内容部分结合并传送到客户端浏览器上。对于一些复杂的操作,ASP可以调用存在于后台的COM组件来完成,所以说COM组件无限地扩充了ASP的能力,正因如此依赖本地的COM组件,使得它主要用于 Windows NT平台中,所以 Windows本身存在的问题都会映射到它的身上。当然该技术也存在很多优点,简单易学,并且ASP是与微软的IIS捆绑在一起,在安装 Windows操作系统的同时安装上ⅡS即可运行ASP应用程序。PHPPHP来自于 Personal Home Page一词,但现在的PHP已经不再表示名词的缩写,而是一种开发动态网页技术的名称。PHP语法类似于C,并且混合了Perl、C++和Java的一些特性。它是一种开源的web服务器脚本语言,与ASP一样可以在页面中加入脚本代码来生成动态内容。对于一些复杂的操作可以封装到函数或类中。在PHP中提供了许多已经定义好的函数,例如提供的标准的数据库接口,使得数据库连接方便,扩展性强。PHP可以被多个平台支持,但被广泛应用于 UNIX/Linux平台。由于PHP本身的代码对外开放,并且经过许多软件工程师的检测,因此到目前为止该技术具有公认的安全性能。ASP.NETASP.NET是一种建立动态Web应用程序的技术。它是.NET框架的一部分,可以使用任何.NET兼容的语言来编写 ASP.NET应用程序。使用 Visual Basic .NET、C#、J#、 ASP.NET页面( Web Forms)进行编译,可以提供比脚本语言更出色的性能表现。 Web Forms允许在网页基础上建立强大的窗体。当建立页面时,可以使用 ASP.NET服务端控件来建立常用的UI元素,并对它们编程来完成一般的任务。这些控件允许开发者使用内建可重用的组件和自定义组件来快速建立 Web Forms,使代码简单化。JSPJava Server Page简称JSP。JSP是以Java为基础开发的,所以它沿用Java强大的API功能。JSP页面中的HTML代码用来显示静态内容部分,嵌入到页面中的Java代码与JSP标记用来生成动态的内容部分。JSP允许程序员编写自己的标签库来完成应用程序的特定要求。JSP可以被预编译,提高了程序的运行速度。另外,JSP开发的应用程序经过一次编译后,便可随时随地运行。所以在绝大部分系统平台中,代码无须做修改即可在支持JSP的任何服务器中运行。本文链接: Java Web从入门到精通 第1章 Web应用技术]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第1章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通 第1章 Web应用程序的工作原理]]></title>
    <url>%2Fblog%2Fce9c17a7%2F</url>
    <content type="text"><![CDATA[Web应用程序大体上可以分为两种，即静态网站和动态网站。早期的Web应用主要是静态页面的浏览，即静态网站。这些网站使用HTML语言来编写，放在Web服务器上，用户使用浏览器通过HTTP协议请求服务器上的Web页面，服务器上的Web服务器将接收到的用户请求处理后，再发送给客户端浏览器，显示给用户。整个过程如下图所示。随着网络的发展，很多线下业务开始向网上发展，基于Internet的Web应用也变得越来越复杂，用户所访问的资源已不能只是局限于服务器上保存的静态网页，更多的内容需要根据用户的请求动态生成页面信息，即动态网站。下面给出动态网站的工作流程图。说明对于初学者,经常会错误地认为带有动画放果的网页就是动态网页,其实不然,动态网页是指具有交互性、内容可以自动更新,并且内容会根据访问的时间和访问者而改变。这里所说的交互性是指网页可以根据用户的要求动态改变或响应。由此可见,静态网站类似于最早研制的手机,这种手机只能使用出厂时设置的功能和铃声,用户自己并不能对其铃声进行添加和删除等:而动态网站则类似于现在研制的手机,用户在使用这些手机时,不再是只能使用机器中默认的铃声,而是可以根据自己的喜好任意设置。本文链接: Java Web从入门到精通 第1章 Web应用程序的工作原理]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第1章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java Web从入门到精通 第1章 程序开发体系结构]]></title>
    <url>%2Fblog%2F6b646665%2F</url>
    <content type="text"><![CDATA[随着网络技术的不断发展,单机的软件程序已难以满足网络计算的需要。为此,各种各样的网络程序开发体系结构应运而生。其中,运用最多的网络应用程序开发体系结构可以分为两种,一种是基于浏览器服务器的B/S结构,另一种是基于客户端/服务器的C/S结构。下面进行详细介绍。C/S体系结构介绍C/S是Client/Server的缩写，即客户端/服务器结构。在这种结构中，服务器通常采用高性能的PC机或工作站，并采用大型数据库系统（如Oracle或SQL Server），客户端则需要安装专用的客户端软件，如下图所示。这种结构可以充分利用两端硬件环境的优势，将任务合理分配到客户端和服务，从而降低了系统的通讯开销。在2000年以前，C/S结构占据网络程序开发领域的主流。典型例子QQ就是基于C/S架构的，你本地的QQ程序只是一个客户端，而主程序运行在腾讯的服务器。B/S体系结构介绍B/S是Brower/Server的缩写，即浏览器/服务器结构。在这种结构中，客户端不需要开发任何用户界面，而统一采用如IE和火狐等浏览器，通过Web浏览器向Web服务器发送请求，由Web服务器进行处理，并将处理结果逐级传回客户端，如下图所示。这种结构利用不断成熟和普及的浏览器技术实现原来需要复杂专用软件才能实现的强大功能，从而节约了开发成本，是一种全新的软件体系结构。这种体系结构已经成为当今应用软件的首选体系结构。典型例子网站是典型的B/S结构,通常所说的B/S架构则值得是基于网页的系统。说明:B/S由美国微软公司研发,C/S由美国 Borland公司最早研发。两种体系结构的比较C/S结构和B/S结构是当今世界网络程序开发体系结构的两大主流。目前，这两种结构都有自己的市场份额和客户群。但是，这两种体系结构又各有各的优点和缺点。1.开发和维护成本方面C/S结构的开发和维护成本都比B/S高。采用C/S结构时,对于不同客户端要开发不同的程序,而且软件的安装、调试和升级均需要在所有的客户机上进行。例如,如果一个企业共有10个客户站点使用一套C/S结构的软件,则这10个客户站点都需要安装客户端程序。当这套软件进行了哪怕很微小的改动后,系统维护员都必须将客户端原有的软件卸载,再安装新的版本并进行配置,最可怕的是客户端的维护工作必须不折不扣地进行10次。若某个客户端忘记进行这样的更新,则该客户端将会因软件版本不一致而无法工作。而B/S结构的软件,则不必在客户端进行安装及维护。如果将前面企业的C/S结构的软件换成B/S结构的,这样在软件升级后,系统维护员只需要将服务器的软件升级到最新版本,对于其他客户端,只要重新登录系统即可使用最新版本的软件。2.客户端负载C/S结构的客户端不仅负责与用户的交互,收集用户信息,而且还需要完成通过网络向服务器请求对数据库、电子表格或文档等信息的处理工作。由此可见,应用程序的功能越复杂,客户端程序也就越庞大,这也给软件的维护工作带来了很大的困难。而B/S结构的客户端把事务处理逻辑部分交给了服务器,由服务器进行处理,客户端只需要进行显示,这样,将使应用程序服务器的运行数据负荷较重,一旦发生服务器“崩溃”等问题,后果不堪设想。因此,许多单位都备有数据库存储服务器,以防万一。3.安全性C/S结构适用于专人使用的系统,可以通过严格的管理派发软件,达到保证系统安全的目的,这样的软件相对来说安全性比较高。而对于B/S结构的软件,由于使用的人数较多,且不固定,相对来说安全性就会低些。总体来说,B/S相对于C/S来说具有更多的优势,现今大量的应用程序开始转移到应用B/S结构,许多软件公司也争相开发B/S版的软件,也就是Web应用程序。随着Internet的发展,基于HTTP协议和HTML标准的Web应用呈几何数量级的增长,而这些Web应用又是由各种Web技术所开发。两种结构优缺点总结C/S1.优点(1)安全性:需要其特定的客户端,所以面向对象比较确定,将所进行的信息安全处于一个可控的范围(2)效率:客户端的服务器直接相连,省却了中间环节,数据的传输比较快(3)个性化:有特定的客户端,所以可以在较大程度上满足客户的个性化要求(4)稳定性:结构比较稳定,有较强的事务处理能力,可以实现较复杂的业务逻辑2.缺点(1)特定的客户端:对PC机有一定的要求,如:操作系统(2)中间环节:因为省却了中间环节,所以当客户端达到一定的量时,同时访问服务器,造成服务器的相应变慢,效率变低。B/S1.优点(1)范围:零安装,拥有一个浏览器,即可访问,面向的范围更广。(2)维护性:维护简单,更新页面,即可实现面向所有用户的更新。(3)共享性:通过浏览器访问,共享性强。2.缺点(1)安全性:面向的范围广,安全性比较低(2)个性化:因为面型的范围广,所以它是一种公共审美,无法满足个性化的需求参考文章:https://blog.csdn.net/Sunny5319/article/details/78771239本文链接: Java Web从入门到精通 第1章 程序开发体系结构]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
        <category>第1章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JAVA学习之GUI组件中Toolkit的使用]]></title>
    <url>%2Fblog%2F514963fc%2F</url>
    <content type="text"><![CDATA[在使用GUI中的组件进行窗体的设计时，当需要将窗体始终显示在屏幕的某一位置时，例如屏幕的中央。由于不同的电脑屏幕分辨率是不同的，所以在进行处理时会有一定的难度，还有就是当我们需要修改窗体的图标时，这些都要用到Tookit工具包。首先，为了解决窗体的显示问题，进行如下设置：12345Toolkit toolkit = getToolkit();// 获得窗体工具包Dimension screenSize = toolkit.getScreenSize();// 获取屏幕大小int width = (int) (screenSize.width * 0.8);// 计算窗体新宽度int height = (int) (screenSize.height * 0.8);// 计算窗体新宽度setSize(width, height);// 设置窗体大小本文链接: JAVA学习之GUI组件中Toolkit的使用]]></content>
      <categories>
        <category>Java</category>
        <category>java_GUI</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo Valine评论系统设置头像--使用Gravatars头像]]></title>
    <url>%2Fblog%2Fc4f9ab98%2F</url>
    <content type="text"><![CDATA[到https://en.gravatar.com/用你的邮箱注册一个账号，然后为你的邮箱账号上传一个图像即可。然后在填写评论系统的邮箱的时候，Valine会加载到你邮箱对应的Gravatars头像。这样头像就显示出来了。本文链接: Hexo Valine评论系统设置头像–使用Gravatars头像]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>给博客添加功能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next主题 添加Valine评论系统]]></title>
    <url>%2Fblog%2F8eadc39%2F</url>
    <content type="text"><![CDATA[Next主题已经集成了Valine评论系统了，我们只需要注册一个leanCloud账号，然后改一下主题配置文件即可使用。不得不说这个主题是真的强大。参考文档:https://blog.csdn.net/blue_zy/article/details/79071414官方文档:https://valine.js.org/quickstart.html为此介绍一下这个评论系统的内容:昵称:就是昵称邮箱:先到https://en.gravatar.com/用你的邮箱注册一个账号，然后为你的邮箱账号设置一个头像。这样Valine就能加载到你的邮箱对应的头像。不然的你评论的头像就是默认的头像。网址:设置网址的时候，可以看到昵称下面有下划线(表示这是一个超链接)，点击昵称可以跳转到该网址，一般填入自己博客的的地址。头像设置参见评论系统的具体介绍如下图所示:本文链接: Hexo Next主题 添加Valine评论系统]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>给博客添加功能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next主题 添加搜索功能]]></title>
    <url>%2Fblog%2F85f813d6%2F</url>
    <content type="text"><![CDATA[Next主题已经集成了站内搜索功能了。安装插件，然后改一下配置文件即可使用。安装插件安装下面两个插件:1npm install hexo-generator-searchdb --save1npm install hexo-generator-search --save修改配置文件修改站点配置文件在站点配置文件中，添加下面的配置信息:12345search: path: search.xml field: post format: html limit: 10000修改Next主题配置文件找到local_search配置项，把enable改为true即可。12local_search: enable: true本文链接: Hexo Next主题 添加搜索功能]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>给博客添加功能</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Swing入门1]]></title>
    <url>%2Fblog%2F475d5fec%2F</url>
    <content type="text"><![CDATA[摘要本文介绍:实例187 从上次关闭位置启动窗体源码:https://pan.baidu.com/s/1kT1u8EN?fid=429117221217238实例187 从上次关闭位置启动窗体实际开发中,有很多软件都有一个通用的功能:从上次关闭位置启动窗体,本实例将使用Java语言的Preferences首选项类,把软件关闭时的坐标写到注册表(Windows系统)中,下次启动的时候读取注册表获取位置，然后设置窗体显示的位置。从而实现从上次关闭位置启动窗体的功能,实例的运行效果如图14.1所示。图14.1代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122package com.mingrisoft;import java.awt.BorderLayout;import java.awt.EventQueue;import java.awt.Point;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.border.EmptyBorder;import java.awt.event.ComponentAdapter;import java.awt.event.ComponentEvent;import java.util.prefs.Preferences;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import javax.swing.JLabel;import javax.swing.SwingConstants;public class StartFormByLClosePosition extends JFrame&#123; /** * */ private static final long serialVersionUID = 9068743130943151359L; private JPanel contentPane; private JLabel label; /** * Launch the application. */ public static void main(String[] args) &#123; EventQueue.invokeLater(new Runnable() &#123; public void run() &#123; try &#123; StartFormByLClosePosition frame = new StartFormByLClosePosition(); frame.setVisible(true); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125; /** * Create the frame. */ public StartFormByLClosePosition() &#123; addComponentListener(new ComponentAdapter() &#123; @Override public void componentMoved(ComponentEvent e) &#123; // 窗体移动事件处理方法， do_this_componentMoved(e); &#125; &#125;); setTitle( "\u4ECE\u4E0A\u6B21\u5173\u95ED\u4F4D\u7F6E\u542F\u52A8\u7A97\u4F53"); addWindowListener(new WindowAdapter() &#123; @Override public void windowOpened(WindowEvent e) &#123; do_this_windowOpened(e); &#125; @Override public void windowClosing(WindowEvent e) &#123; do_this_windowClosing(e); &#125; &#125;); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 346, 237); contentPane = new JPanel(); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); contentPane.setLayout(new BorderLayout(0, 0)); setContentPane(contentPane); label = new JLabel("");// 原来的标签中不放字符串 label.setHorizontalAlignment(SwingConstants.CENTER); contentPane.add(label, BorderLayout.CENTER); &#125; /* * 窗体打开的事件处理方法,该方法在窗体打开时被调用,方法中首先获取首选项对象中的坐标信息,然后利用该坐标重新为窗体定位。关键代码如下: * */ protected void do_this_windowOpened(WindowEvent e) &#123; Preferences root = Preferences.userRoot();// 获取用户首选项 int x = root.getInt("locationX", 100);// 提取窗体X坐标 int y = root.getInt("locationY", 100);// 提取窗体Y坐标 setLocation(x, y);// 恢复窗体坐标 &#125; /* * 窗体关闭的事件处理方法,在进行关闭窗体的过程中,该方法会读取当前窗体的坐标信息并保存到`首选项对象中`。关键代码如下: */ protected void do_this_windowClosing(WindowEvent e) &#123; //Windows系统下对应: 注册表项: HKEY_CURRENT_USER\SOFTWARE\Javasoft\Prefs\ Preferences root = Preferences.userRoot();// 获取用户首选项 Point location = getLocation();// 获取窗体位置 //直接在用户首选项上设置"键值对" root.putInt("locationX", location.x);// 保存窗体X坐标 root.putInt("locationY", location.y);// 保存窗体Y坐标 &#125; /* * 窗体移动的事件处理方法,在该方法中控制标签控件来显示当前窗体的位置。只要窗体移动就会立刻更新标签控件的信息。 */ protected void do_this_componentMoved(ComponentEvent e) &#123; Point location = getLocation();// 获取窗体坐标 int x = location.x; int y = location.y; // 把窗体当前坐标显示在标签控件中 label.setText("窗体当前坐标：X = " + x + " Y = " + y); &#125;&#125;技术要点本实例在实现时,主要是 Preference首选项类的应用,该类的实例对象可以保存程序的各种参数与设置。实例188 始终在桌面最顶层显示窗体实例说明Windows桌面上允许多个窗体同时显示,但是只有一个窗体能够得到焦点,当一个窗体得到焦点后在其上面的窗体会被得到焦点的窗体遮挡,得到焦点的窗体会显示在最上层,这样被覆盖的窗体就不能完全地显示给用户,也有某些窗体中具有实时性和比较重要的信息需要随时置顶的特殊情况。本实例将实现此功能,运行本实例后,主窗体会始终显示在桌面的最上面。实例的运行效果如图14-2所示。指点迷津:在图14.2中,画图程序与其弹出的保存窗口都位于本程序窗口之下,而且画图程序拥有系统与鼠标焦点123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566package com.mingrisoft;import java.awt.BorderLayout;import java.awt.EventQueue;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.SwingConstants;import javax.swing.UIManager;public class AlwaysActiveWindows extends JFrame&#123; /** * */ private static final long serialVersionUID = 2637188442724889987L; private JPanel contentPane; /** * Launch the application. */ public static void main(String[] args) &#123; try &#123; UIManager.setLookAndFeel( "com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"); &#125; catch (Throwable e) &#123; e.printStackTrace(); &#125; EventQueue.invokeLater(new Runnable() &#123; public void run() &#123; try &#123; AlwaysActiveWindows frame = new AlwaysActiveWindows(); frame.setVisible(true); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125; /** * Create the frame. */ public AlwaysActiveWindows() &#123; setTitle("始终在桌面最顶层显示的窗体");// 设置窗体标题 setAlwaysOnTop(true);// 设置窗体显示在最顶端。本实例的核心代码 setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 319, 206);// 设置窗体位置 contentPane = new JPanel();// 创建内容面板 contentPane.setLayout(new BorderLayout(0, 0));//设置网格布局0行0列 setContentPane(contentPane);// 设置内容面板到窗体中 JLabel label = new JLabel("我就在上面不下去了，咋滴。"); //设置标签内容沿 X 轴的对齐方式。 label.setHorizontalAlignment(SwingConstants.CENTER);//设置居中对齐 contentPane.add(label, BorderLayout.CENTER);// 添加标签控件 &#125;&#125;关键代码:1setAlwaysOnTop(true);// 设置窗体显示在最顶端。本实例的核心代码技术要点在其他开发语言中实现窗体始终显示在最顶层比较复杂,但在Java中实现非常简单,只要调用窗体的 setAlwaysOnTop()方法即可。setAlwaysOnTop()方法可以设置窗体是否置顶显示,也就是说是否使窗体始终显示在其他窗体之上。其语法格式如下:1public final void setAlwaysOnTop(boolean alwaysOnTop) throws SecurityException设置alwaysOnTop参数为true，则窗体保持置顶显示。实例189 设置窗体大小实例说明用户打开软件后,首先看到的就是软件窗体的大小,那么如何设置窗体的大小就成了摆在开发者面前的一个首要问题。本实例将告诉读者,如何使用Java语言实现限制窗体大小的功能。实例源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.mingrisoft;import java.awt.BorderLayout;import java.awt.EventQueue;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;public class ControlFormSize extends JFrame&#123; /** * */ private static final long serialVersionUID = -2085588912441845548L; private JPanel contentPane; /** * Launch the application. */ public static void main(String[] args) &#123; EventQueue.invokeLater(new Runnable() &#123; public void run() &#123; try &#123; ControlFormSize frame = new ControlFormSize(); frame.setVisible(true); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125; /** * Create the frame. */ public ControlFormSize() &#123; setTitle("设置窗体大小");// 设置窗体标题 setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// 默认关闭方式 setSize(400, 300);// 设置窗体大小 contentPane = new JPanel();// 创建内容面板 contentPane.setLayout(new BorderLayout(0, 0)); setContentPane(contentPane);// 设置内容面板 JLabel label = new JLabel("宽度：400，高度：300");// 创建标签控件 contentPane.add(label, BorderLayout.CENTER);// 添加标签控件到窗体 &#125;&#125;技术要点本实例在实现设置窗体大小的功能时,主要用到了窗体的 setSize()方法。设置窗体大小的方法有以下两种重载格式。(1) Dimension参数第一个重载方法以 Dimension类的实例对象作为参数,其语法格式如下1pulic void setSize(Dimension size)参数说明size:封装单个控件中宽度与高度的对象(2)int参数第二个重载方法以int类型常量作为参数,其语法格式如下:1public void setSize(int width, int height)参数说明width:窗体的宽度(以像素为单位)height:窗体的高度(以像素为单位)Dimension对象用于封装单个控件的宽度与高度,创建其对象的语法格式如下：1public Dimension(int width, int height)参数说明width:控件的宽度(以像素为单位)。height:控件的高度(以像素为单位)。实例190 根据桌面大小调整窗体大小实例说明窗体与桌面的大小比例是软件运行时用户经常会注意到的一个问题,如在1024×768的桌面上,如果放置一个很大(如1280×104)或者很小(如10×10)的正方形窗体,会显得非常不协调。正是基于以上这种情况,所以大部分软件的窗体都是根据桌面的大小进行自动调整的,本实例就实现这样的功能。实例源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.mingrisoft;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.EventQueue;import java.awt.Toolkit;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.border.EmptyBorder;public class SetFormSizeByDeskSize extends JFrame &#123; /** * */ private static final long serialVersionUID = 8256394807443698879L; private JPanel contentPane; /** * Launch the application. */ public static void main(String[] args) &#123; EventQueue.invokeLater(new Runnable() &#123; public void run() &#123; try &#123; SetFormSizeByDeskSize frame = new SetFormSizeByDeskSize(); frame.setVisible(true); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125; /** * Create the frame. */ public SetFormSizeByDeskSize() &#123; addWindowListener(new WindowAdapter() &#123; @Override public void windowOpened(WindowEvent e) &#123; do_this_windowOpened(e); &#125; &#125;); setTitle("\u6839\u636E\u684C\u9762\u5927\u5C0F\u8C03\u6574\u7A97\u4F53\u5927\u5C0F"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); contentPane.setLayout(new BorderLayout(0, 0)); setContentPane(contentPane); &#125; protected void do_this_windowOpened(WindowEvent e) &#123; Toolkit toolkit = getToolkit();// 获得窗体工具包 Dimension screenSize = toolkit.getScreenSize();// 获取屏幕大小 int width = (int) (screenSize.width * 0.8);// 计算窗体新宽度 int height = (int) (screenSize.height * 0.8);// 计算窗体新宽度 setSize(width, height);// 设置窗体大小 &#125;&#125;关键代码:12345Toolkit toolkit = getToolkit();// 获得窗体工具包Dimension screenSize = toolkit.getScreenSize();// 获取屏幕大小int width = (int) (screenSize.width * 0.8);// 计算窗体新宽度int height = (int) (screenSize.height * 0.8);// 计算窗体新宽度setSize(width, height);// 设置窗体大小技术要点本实例实现的重点是如何获取桌面的大小,而获取桌面大小时,主要用到窗体的工具包Toolkit类。下面对本实例中用到的关键技术进行详细介绍。(1)获取窗体工具包每个窗体类都提供了 getToolkit()方法来获取窗体的工具包对象。在窗体内部已经封装了这个工具包,随时可以获取。该方法的声明如下:1public Toolkit getToolkit()(2)获取桌面屏幕大小窗体的工具包提供了 getScreenSize()方法来获取当前屏幕的大小,该方法的声明如下:1public abstract Dimension getScreenSize() throws HeadlessException;实例191 自定义最大化、最小化和关闭按钮实例说明用户在制作应用程序时,为了使用户界面更加美观,一般都自己设计窗体的外观,以及窗体的最大化、最小化和关闭按钮。本实例实现设计窗体的外观,及最大化、最小化和关闭按钮,再通过鼠标来实现窗体移动效果。**本文链接: Swing入门1]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java经典编程300例</category>
        <category>Swng入门</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java-Preferences用法-入门]]></title>
    <url>%2Fblog%2F4db92b83%2F</url>
    <content type="text"><![CDATA[摘要:我们经常需要将我们的程序中的配置(如窗口位置，本次打开过的文件，用户的选项设置)等数据保存下来，当再次运行的时候程序会自动加载这些配置信息，初始化程序。例如:很多软件的菜单里都有“Setting”或“Preferences”这样的选项用来设定或修改软件的配置,如下图所示。保存程序配置的方式保存配置文件有多种方式，比如使用xml文件、properties文件等，采用这些保存方式的一个问题就是如果程序是以jar,war 包等方式发布的那么这些配置文件就不能放在包中，因为包中的文件是不能在运行时改动的，只能放在磁盘的文件中，但是放在磁盘的文件中又很容易出现因为操作系统的差异、权限等问题造成程序的问题。另一种方式是使用java.util.prefs.Preferences类(首选项类)来保存程序配置。方案1使用配置文件的方式，通常的做法是通过使用Properties类来实现，它提供以下方法:1234void load(InputStream inStream)void store(OutputStream out, String header)String getProperty(String key, String defaultValue)String getProperty(String key)来操作配置文件。方案2从JDK 1.4开始，Java在java.util下加入了一个专门处理用户和系统配置信息的java.util.prefs包，其中，java.util.prefs.Preferences类用来读写程序配置信息。Preferences提供一个与平台无关的中心知识库来存储配置信息，在Windows系统中，它存储在注册表中，Linux中它存在于用户目录下的一个隐藏文件中，但不管Windows还是Linux，都是使用相同的接口，程序员无需深究它的底层是如何实现的。不仅如此，你还可以把首选项导出为XML文件或从XML文件导入。Preferences的中心知识库是树状结构，内部的配置信息以key-value的结构进行存储。每个用户都有一棵用户树，存放与本用户有关的配置,不用用户数下可以有同名的子树，因此可以避免同名文件冲突。当然，还有一个系统树，用来存放全体用户的公共信息。使用步骤首先要获取首选项对象，Preferences是一个抽象类，提供了一系列静态方法和抽象方法来获取首选项对象。获取首选项对象为了区分不同的应用程序的首选项，在建立Preferences时要指定一个节点路径。得到系统配置节点public static Preferences systemNodeForPackage(Class&lt;?&gt; c)从系统首选项树返回首选项节点。//根据指定的Class对象得到一个Preferences对象，Windows中,这个对象的注册表是从“HKEY_LOCAL_MACHINE\”开始的Preferences myPrefs2 = Preferences.systemNodeForPackage(this);// 这种方法是在“HKEY_LOCAL_MACHINE\”下按当前类的路径建立一个注册表项系统的根首选项节点public static Preferences systemRoot()返回系统的根首选项节点得到以注册表路径HKEY_LOCAL_MACHINE\SOFTWARE\Javasoft\Prefs 为根结点的Preferences对象Preferences myPrefs4 = Preferences.systemRoot().node(&quot;com.jungleford.demo&quot;);// 这种方法是在“HKEY_LOCAL_MACHINE\SOFTWARE\Javasoft\Prefs\”下按“com\jungleford\demo”的路径建立一个注册表项得到用户配置节点public static Preferences userNodeForPackage(Class&lt;?&gt; c)从调用用户首选项树返回首选项节点//根据指定的Class对象得到一个Preferences对象，这个对象的注册表路径是从“HKEY_CURRENT_USER\”开始的例如Preferences myPrefs1 = Preferences.userNodeForPackage(this);// 这种方法是在“HKEY_CURRENT_USER\”下按当前类的路径建立一个注册表项得到用户根首选项节点public static Preferences userRoot()返回调用用户的根首选项节点。//得到以注册表路径HKEY_CURRENT_USER\SOFTWARE\Javasoft\Prefs为根结点的Preferences对象Preferences myPrefs3 = Preferences.userRoot().node(&quot;com.jungleford.demo&quot;);// 这种方法是在“HKEY_CURRENT_USER\SOFTWARE\Javasoft\Prefs\”下按“com\jungleford\demo”的路径建立一个注册表项设置首选项读取首选项的值putXXX() //设置一个属性的值，这里XXX可以为基本数值型类型，如int、long等，但首字母大写，表示参数为相应的类型，也可以不写而直接用put，参数则为字符串获取到首选项对象后，就可以往首选项中添加键值对了。这通过putXXX()方法来实现,具体方法如下表所示。方法描述abstract void put(String key, String value)将指定值与此首选项节点中的指定键相关联。abstract void putBoolean(String key, boolean value)将表示指定 boolean 值的字符串与此首选项节点中的指定键相关联。abstract void putByteArray(String key, byte[] value)将表示指定字节数组的字符串与此首选项节点中的指定键相关联。abstract void putDouble(String key, double value)将表示指定 double 值的字符串与此首选项节点中的指定键相关联。abstract void putFloat(String key, float value)将表示指定 float 值的字符串与此首选项节点中的指定键相关联。abstract void putInt(String key, int value)将表示指定 int 值的字符串与此首选项节点中的指定键相关联。abstract void putLong(String key, long value)将表示指定 long 值的字符串与此首选项节点中的指定键相关联。123myPrefs1.putInt("key1", 10);//添加Int类型的值myPrefs1.putDouble("key2", -7.15);//添加浮点数类型的值myPrefs1.put("key3", "value3");//添加字符串类型的值读取首选项通过getXXX(String key,xxx xxxvalue)方法,得到一个键对应的值。详细的方法如下表所示。方法描述abstract String get(String key, String def)返回与此首选项节点中指定键相关联的值。abstract boolean getBoolean(String key, boolean def)返回与此首选项节点中指定的键相关联的、由字符串表示的 boolean 值。abstract byte[] getByteArray(String key, byte[] def)返回与此首选项节点中指定键相关联的、由字符串表示的字节数组。abstract double getDouble(String key, double def)返回与此首选项节点中指定的键相关联的、由字符串表示的 double 值。abstract float getFloat(String key, float def)返回与此首选项节点中指定的键相关联的、由字符串表示的 float 值。abstract int getInt(String key, int def)返回与此首选项节点中与指定键相关联的、由字符串表示的 int 值。abstract long getLong(String key, long def)返回与此首选项节点中指定的键相关联的、由字符串表示的 long 值。getXXX(String key,xxx def)方法的第一个参数是键的名字key,如果首选项中有这个键key，就返回这个键对应的值。如果没有这个键key,就把第二个参数def返回。下面是getInt()方法的说明:public abstract int getInt(String key,int def)返回与此首选项节点中与指定键相关联的、由字符串表示的 int 值。参数：key - 要作为 int 返回其关联值的键。def - 此首选项节点不具有与 key 相关联的值或者无法将该关联值解释为 int 或者内部存储不可访问时要返回的值。返回：与此首选项节点的 key 相关联的字符串所表示的 int 值；如果该关联值不存在或无法被解释为 int，则返回 def。首选项和XML文件的相互转换exportNode() //将全部首选项导出为一个XML文件exportSubtree() //将部分首选项导出为一个XML文件importPreferences() //从XML文件导入首选项Windows首选项实例(写注册表)写注册表实例:12345678910111213141516171819package my.preference.test;import java.util.prefs.Preferences;public class Test2&#123; public static void main(String[] args) &#123; //到 `HKEY_CURRENT_USER\SOFTWARE\Javasoft\Prefs\`下的创建(如果不存在)new_preferences这个注册表项。 Preferences myPrefs1 = Preferences.userRoot().node("new_preferences"); myPrefs1.putInt("key1", 100);//添加Int类型的值 myPrefs1.putDouble("key2", -1.234);//添加浮点数类型的值 myPrefs1.put("key3", "value3");//添加字符串类型的值 String key3=null; //查询注册表项 key3=myPrefs1.get("key3", "如果没有，就返回第二个参数"); System.out.println("注册表查询结果:key3--&gt;"+key3); &#125;&#125;运行结果:1注册表查询结果:key3--&gt;value3运行完毕后，打开注册表,可以看到我们新建的注册表项，如下图所示。把首选项导出为XML文件12FileOutputStream out = new FileOutputStream("prefs.xml");myPrefs1.exportNode(out);上面我们已经在注册表中写入了一些键值对。现在我我们来把这些键值对导出为XML文件:12345678910111213141516171819202122232425262728package my.preference.test;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.util.prefs.BackingStoreException;import java.util.prefs.Preferences;public class Test3&#123; public static void main(String[] args) &#123; // 得到HKEY_CURRENT_USER\SOFTWARE\Javasoft\Prefs\下的new_preferences这个注册表项。 Preferences myPrefs1 = Preferences.userRoot().node("new_preferences"); try (FileOutputStream out = new FileOutputStream("prefs.xml");) &#123; myPrefs1.exportNode(out);//导出到xml文件 &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (BackingStoreException e) &#123; e.printStackTrace(); &#125; &#125;&#125;生成的XML文件内容如下:1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE preferences SYSTEM &quot;http://java.sun.com/dtd/preferences.dtd&quot;&gt;&lt;preferences EXTERNAL_XML_VERSION=&quot;1.0&quot;&gt; &lt;root type=&quot;user&quot;&gt; &lt;map/&gt; &lt;node name=&quot;new_preferences&quot;&gt; &lt;map&gt; &lt;entry key=&quot;key1&quot; value=&quot;100&quot;/&gt; &lt;entry key=&quot;key2&quot; value=&quot;-1.234&quot;/&gt; &lt;entry key=&quot;key3&quot; value=&quot;value3&quot;/&gt; &lt;/map&gt; &lt;/node&gt; &lt;/root&gt;&lt;/preferences&gt;实例2:程序从上次关闭位置启动窗体具体实例参见参考博客参考1:https://www.cnblogs.com/qlong8807/p/3424834.html参考2:http://lugerman.blog.163.com/blog/static/264645720079144346158/参考3:https://www.cnblogs.com/pzy4447/p/4710539.html参考4:https://www.cnblogs.com/littlehb/p/3511689.html参考5:https://blog.csdn.net/cilen/article/details/7762593参考6:https://blog.csdn.net/fish1112/article/details/6536681本文链接: Java-Preferences用法-入门]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java经典编程300例</category>
        <category>输入_输出</category>
        <category>参考</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[输入输出实例1]]></title>
    <url>%2Fblog%2Fe34f172%2F</url>
    <content type="text"><![CDATA[在 Windows系统中,通过文件的扩展名来区别不同类型的文件。本实例将根据用户输入的扩展名,列出指定文件夹内该类型文件的文件名、文件大小和修改时间。实例的运行效果如图121所示。com.mingrisoft本文链接: 输入输出实例1]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java经典编程300例</category>
        <category>输入_输出</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Cookie]]></title>
    <url>%2Fblog%2F8d4cbf50%2F</url>
    <content type="text"><![CDATA[很多网站使用一些小文本串在连接之间存储持久的客户端状态,这些小文本串称为cookie。cookie在请求和响应的HTTP首部,从服务器传递到客户端,再从客户端传回服务器。服务器使用 cookie来指示会话ID、购物车内容、登录凭据、用户首选项等。例如,一个在线书店设置的 cookie可能值为ISBN=0802099912&amp;price=$34,95,指定我在购物车里放入的一本书。不过, cookie值更有可能是一个无意义的字符串,如ATVPDKIKXODER,标识某种数据库中的一个特定记录,实际信息存储在那个数据库中。 cookie值通常并不包含数据,只是指示服务器上的数据。cookies只能是非空白符的ASCII文本,不能包含逗号或分号。要在浏览器中设置一个cookie,服务器会在HTTP首部中包含一个set-Cookie首部行。例如,下面的HTTP首部将cookie “cart”的值设置为“ATVPDKIKXODER”:123HTTP/1.1 200 OKContent-type: text/htmlSet-Cookie: cart=ATVPDKIKXODER如果浏览器再向同一个服务器做出第二个请求,它会在HTTP请求首部行中的Cookie行发回这个 cookie,如下所示:1234Get /index.html HTTP/1.1Host: www.example.orgCookie: cart=ATVPDKIKXODERAccept: text/html只要服务器不重用cookie,这会使它在多个(否则无状态的)HTTP连接上跟踪各个用户和会话。服务器可以设置不止一个 cookie。例如,我向 Amazon发出的一个请求在我的浏览器上设置了5个 cookie:12345Set-Cookie: skin=hoskinSet-Cookie: ubid-main=176-5578236-9590213Set-Cookie: session-token=Zg6afPNqbaMv2WmYFOv57ZCU106KtrSet-Cookie: session-id-time=20827872011Set-Cookie: session-id=187-4969589-3049309除了简单的name= value对, cookie可以有多个属性来控制它们的作用域,包括过期日期、路径、域、端口、版本和安全选项。例如,默认情况下, cookie来自哪个服务器就应用于哪个服务器。如果一个 cookie由www.foo.example.com设置,浏览器就只把这个cookie发回给www.foo.example.com。不过网站也可以指示一个 cookie应用于整个子域,而不只是最初的服务器。例如,下面这个请求为整个foo.example.com域设置一个用户cookie:1Set-cookie: user=elharo;Domain=.foo.example.com浏览器不只是把这个cookie回送到www.foo.example.com,还会发送给lothar.foo.example.com、eliza.foo.example.com、enoch.foo.example.com和foo.example.com域中的任何其他主机。不过,服务器只能为它直接所属的域设置 cookie。www.foo.example.com就不能为www.oreilly.com、example.com或.com设置cookie,而不论它如何设置域。提示:一些网站把一个域的一个图像或其他内容嵌入在另一个域的一个页面中,从而绕过限制。所嵌入内容设置的 cookie(而不是由页面本身设置)称为第三方 cookie。很多用会阻塞所有第三方 cookie,出于保密的原因,一些web浏览器也开始默认阻塞这些第三方cookie。Cookie的作用域还受路径限制,所以会返回到服务器上的某些目录,而不是全部。默认作用域是最初的URL和所有子目录。例如,如果为URL http://www.cafeconleche.org/XOM设置一个 cookie,那么这个 cookie还可以应用于http://www.cafeconleche.org/XOM/apidocs/,但不能应用于http://www.cafeconleche.org/slides/或http://www.cafeconleche.org/。不过,可以使用 cookie中的Path属性改变默认作用域。例如,下面的响应为浏览器发送了一个名为“user”、值为“ elharo”的 cookie,它只应用于服务器的/restricted子树,而不能应用于网站的其他部分:1Set-Cookie: user=elharo; Path=/restricted请求相同服务器上子树/restricted中的一个文档时,客户端会回显这个 cookie。不过,它不会在网站的其他目录中使用这个 cookie。本文链接: Cookie]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第6章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[第六章其他部分还么看完]]></title>
    <url>%2Fblog%2Fd216da09%2F</url>
    <content type="text"><![CDATA[本文链接: 第六章其他部分还么看完]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第6章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[请求主体]]></title>
    <url>%2Fblog%2F868d0199%2F</url>
    <content type="text"><![CDATA[GET方法获取URL所标识的资源的一个表示。用GET从服务器获取的资源的具体位置由路径和查询字符串的不同部分指定。不同的路径和查询字符串如何映射到不同的资源要由服务器来确定。URL类并不关心这些。只要它知道URL,就能从那里下载。POST和PUT要更为复杂。在这些情况下,客户端除了要提供路径和查询字符串,还要提供资源的表示。资源表示在请求主体中发送,放在首部后面。也就是说,它会按顺序发送以下4项:一个起始行,包括方法、路径和查询字符串,以及HTTP版本。一个HTTP首部一个空行(两个连续的回车换行对)主体例如,下面这个POST请求向服务器发送表单数据:1234567POST /cgi-bin/register.pl Http 1.0Date: Sun, 27 Apr 2013 12:32:36Host: www.cafeaulait.orgContent-type: application/x-www-form-urlencodedContent-length: 54username=Elliotte+Harold&amp;email=elharo%40ibiblio.org在这个例子中,主体包含一个 application/x-www-form-urlencode数据,但并不只有这种可能。一般来讲,主体可以包含任意的字节。不过,HTTP首部要包括两个字段来指定主体的性质:一个 Content-length字段,指定主体中有多少字节(前面的例子中为54字节)。一个 Content-type字段,指定类型的MIME媒体类型(前面的例子中内容类型为application/x-www-form-urlencoded)前例中使用的 application/x-www-form-urlencode MIME类型很常见,因为Web浏览器对大多数提交表单就采用这种编码方式。因此很多服务器端程序都使用这个MIME类型与浏览器对话。不过,这绝不是主体能发送的唯一类型。例如,向一个照片共享网站上传图片的相机可以发送 image/jpeg。文本编辑器可以发送 text/html。最后都是作为字节传送。例如,下面是一个上传Atom文档的PUT请求:123456789101112131415PUT /blog/software-development/the-power-of-pomodoros/ HTTP/1.1Host: elharo.comUser-Agent: AtomMaker/1.0Authorization: Basic ZGFmZnk6c2VjzXJIdA==Content-Type: application/atom+xml; type=entryContent-Length: 322&lt;?xml version=\&quot;1.0&quot;?&gt;&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt; &lt;title&gt;The Power of Pomodoros&lt;/title&gt; &lt;id&gt;urn:uuid:101a41a6-722b-4dgb-8afb-ccfbo1d77499&lt;/id&gt; &lt;updated&gt;2013-02-22T19:40:522&lt;/updated&gt; &lt;author&gt;&lt;name&gt;Elliotte Harold&lt;/name&gt;&lt;/author&gt; &lt;content&gt;I hadn&apos;t paid much attention to Pomodoro ...&lt;/content&gt;&lt;/entry&gt;本文链接: 请求主体]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第6章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HTTP方法]]></title>
    <url>%2Fblog%2Faf23364e%2F</url>
    <content type="text"><![CDATA[与HTTP服务器的通信遵循一种请求-响应模式:先是一个无状态的请求,后面是一个无状态的响应。每个HTTP请求包括两个或三个部分:起始行,包含HTTP方法和要执行这个方法的资源的路径。一个包含名-值字段的首部,可以提供元信息,如认证凭据和请求中首选使用的格式。一个请求主体,包含资源的一个表示(只针对POST和PUT)。主要有4个HTTP方法(也可以说是4个动词),来标识可以完成的操作:GETPOSTPUTDELETE如果觉得这太少了,特别是你可能已经习惯了设计程序时数不胜数的面向对象方法,相比之下,这确实太少了,要知道这是因为HTTP把重点主要放在名词上,即由URI标识的资源。这4个方法提供的统一接口基本上已经足以满足所有实用用途。GET方法这4个方法并不是任意的。它们有特定的语义,应用程序必须遵循这些语义。GET方法可以获取一个资源的表示。GET没有副作用,如果失败,完全可以重复执行GET,而不用担心有任何问题。另外,GET的输出通常会缓存,不过这可以用正确的首部来控制,稍后就会介绍。在一个有适当体系结构的系统中,可以对GET请求加书签,也可以预取GET请求,这是没有问题的。例如,不允许通过一个链接删除文件,因为在用户请求之前,浏览器可能会GET页面上的所有链接。与之对应,如果没有明确的用户动作,好的浏览器或web蜘蛛程序( spider)不会POST链接。PUT方法PUT方法将资源的一个表示上传到已知URL的服务器。这个方法并非没有副作用,不过它有幂等性( idempotent)。也就是说,可以重复这个方法而不用担心它是否失败。如果连续两次把同一个文档放在同一个服务器的同一个位置,与只放一次相比,服务器的状态是一样的。DELETE方法DELETE方法从一个指定URL删除一个资源。同样的,这个方法也并非没有副作用,但它也是幂等的。如果你不确定一个删除请求是否成功(例如,有可能在你发送这个请求之后但在接收到响应之前, socket突然断开),在这种情况下,完全可以再次发送这个请求。将同一个资源删除两次不是错误。POST方法POST方法是最通用的方法。它也将资源的一个表示上传到已知URL的服务器,**但是没有指定服务器如何处理这个新提供的资源。例如,服务器不一定把资源放在目标URL上,而是有可能把它移至另一个不同的URL。或者服务器可能使用这个数据来更新一个或多个完全不同的资源的状态。POST要用于不能重复的不安全的操作**,如完成一个交易。由于GET请求在URL中包括了所有必要的信息,所以可以对GET请求加书签,或者进行链接和搜索等。POST、PUT和 DELETE请求则不能。这是有意这样设计的。GET用于非提交的动作,如浏览一个静态Web页面。而其他方法,尤其是POST,则用于提交某个东西的动作。例如,在购物车里增加一个商品应当发送一个GET,因为这个动作没有提交,用户还可以放弃这个购物车。不过,下订单就应当发送一个POST,因为这个动作完成了一个提交。正是因为这个原因,当你要返回一个使用POST的页面时,浏览器会询问你是否确定这样做(见图6-1)。重新提交数据可能会重复买两本同样的书,你的信用卡会支付两次。在实际中,如今POST在Web上被大量滥用。不完成提交的所有安全操作应当使用GET而不是POST。只有真正提交的操作才应当使用POST。读者:我还是不明白什么叫真正提交的操作。之所以有时会错误地选择POST而不是GET,一个原因是表单可能需要大量输入。在这方面有一个老掉牙的误解,以为浏览器只能处理几百个字节的查询字符串。尽管在20世纪90年代中期确实是这样,但如今所有主流浏览器都能很好地应对至少2000个字符的URL。如果有更多的表单数据需要提交,可能确实要支持POST。不过,对于非浏览器客户端,安全操作还是倾向于使用GET方法。实际上,这种情况没有你想象得那么常见。只有当你向服务器上传数据来创建一个新资源时有可能超过这个限制(在这种情况下,POST或PUT往往是合适的选择),否则,如果只是在服务器上定位一个现有的资源,一般都不会超过这个限制。除了这4个主要的HTTP方法,特殊场合下还会用到另外几个HTTP方法。其中最常用的方法是HEAD,这个方法就相当于GET,只不过它只返回资源的首部,而不返回具体数据。这个方法常用于检查文件的修改日期,查看本地缓存中存储的文件副本是否仍然有效。Java支持的另外两个HTTP方法是OPTIONS和TRACE。OPTIONS允许客户端询问服务器可以如何处理一个指定的资源, TRACE会回显客户端请求来进行调试,特别是代理服务器工作不正常时。不同的服务器还可能识别其他非标准的方法,包括COPY和MOVE,不过Java不支持这些方法。上一章介绍的URL类使用GET与HTTP服务器通信。URLConnection类(第7章将介绍)可以使用所有这4种方法。本文链接: HTTP方法]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第6章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Keep-Alive]]></title>
    <url>%2Fblog%2F4badba9c%2F</url>
    <content type="text"><![CDATA[HTTP 1.0会为每个请求打开一个新连接。实际上,一个典型Web会话中打开和关闭所有连接所花费的时间远远大于实际传输数据的时间,特别是有很多小文档的会话。对于使用SSL或TLS的加密 HTTPS连接,这个问题尤其严重,因为建立一个安全 socket的握手过程比建立常规的 socket需要做更多工作。在HTTP 1.1和以后版本中,服务器不必在发送响应后就关闭连接。可以保持连接打开,在同一个 socket上等待来自客户端的新请求。可以在一个TCP连接上连续发送多个请求和响应。不过,服务器响应之后,客户端请求的锁步模式还是一样的。客户可以在HTTP请求首部中包括一个Connection字段,指定值为Keep-Alive,指示它希望重用一个 socket:1Connection: Keep-AliveURL类透明地支持 Http Keep-alive,除非显式地关闭这个特性。也就是说,在服务器关闭连接之前,如果再次连接到同一个服务器,就会重用 socket。可以利用多个系统属性来控制Java如何使用 HTTP Keep-alive:设置http.keepAlive为”true”或”false”,启用/禁用HTTPKeep-Alive(默认是启用的)。设置http.maxConnections为你希望同时保持打开的socket数。默认为5。设置http.keepAlive.remainingData为true,使Java在丢弃连接之后完成清理(Java6或以后版本)。默认为 false。设置sun.net.http.errorstream.enableBuffering为true,尝试缓冲400和500级响应的相对小的错误流,从而能释放连接,以备稍后重用。默认为 false。设置sun.net.http.errorstream.bufferSize为缓冲错误流使用的字节数。默认为4096字节。设置Set sun.net.http.errorstream.timeout为读错误流超时前的毫秒数。默认为300毫秒。这些默认值是有合理的,不过,你可能确实希望把sun.net.http.errorstream.enableBuffering设置为true,除非你希望从失败的请求读取错误流。提示:HTTP 2.0主要基于Google发明的SPDY协议,通过首部压缩、管线传输请求和响应,以及异步连接多路复用,进一步优化了HTTP传输。不过,这些优化通常在传输层完成,具体细节对应用程序员是屏蔽的,所以你编写的代码仍然主要遵循前面的1-4步。Java还不支持HTTP 2.0,不过增加这个功能时,只要你通过URL和URLConnection类访问HTTP服务器,你的程序不需要做任何修改就能利用这个功能。本文链接: Keep-Alive]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第6章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[第六章前言]]></title>
    <url>%2Fblog%2F1c294%2F</url>
    <content type="text"><![CDATA[第6章HTTP超文本传输协议(HypertextTransferProtocol,HTTP)是一个标准,定义了web客户端如何与服务器对话,以及数据如何从服务器传回客户端。尽管通常认为HTTP是一种传输HTML文件及文件中内嵌图片的方法,但实际上HTTP是一个数据格式。它可以用来传输TIFF图片、 Microsoft word文档、 Windows的.exe文件,或者任何其他可以用字节表示的东西。要编写使用HTTP的程序,你需要比一般的Web页面设计人员更深入地了解HTTP。这一章将深入后台,向你展示在浏览器的地址栏输入http://www.google.com并按Enter键时到底发生了什么。HTTP协议HTTP是web浏览器和web服务器之间通信的标准协议。HTTP指定客户端与服务器如何建立连接、客户端如何从服务器请求数据,服务器如何响应请求,以及最后如何关闭连接。HTTP连接使用TCP/IP来传输数据。对于从客户端到服务器的每一个请求,都有4个步骤:1.默认情况下,客户端在端口80打开与服务器的一个TCP连接,URL中还可以指定其他端口。2.客户端向服务器发送消息,请求指定路径上的资源。这个请求包括一个首部,可选地(取决于请求的性质)还可以有一个空行,后面是这个请求的数据。3.服务器向客户端发送响应。响应以响应码开头,后面是包含元数据的首部、一个空行以及所请求的文档或错误消息。4.服务器关闭连接。HTTP 1.0和HTTP 1.1的区别这是基本HTTP 1.0过程。在HTTP 1.1及以后版本中,可以通过一个TCP连接连续发送多个请求和响应。也就是说,在第1步和第4步之间,第2步和第3步可以反复多次。另外,在HTTP 1.1中,请求和响应可以分为多个块发送。这样有更好的扩展性。每个请求和响应都有同样的基本形式:一个首部行、一个包含元数据的HTTP首部，一个空行,然后是一个消息体。一般的客户端请求如下所示:12345678Get /index. html Http/1.1User-Agent: Mozilla/5.0(Macintosh; Intel Mac oS X 10.8; rv: 20.0)Gecko/20100101 Firefox/20.0Host: en.wikipedia.orgConnection: keep-aliveAccept-Language: en-US,en; q=0.5Accept-Encoding: gzip, deflateAccept: text/html, application/xhtml+xml, application/xml; q=0.9, */*;9=0.8像这样的GET请求不包含消息体,所以请求以一个空行结束。第一行称为请求行( request line):1Get /index. html Http/1.1包括一个方法、资源的路径以及HTTP的版本。方法指定了所请求的操作。GET方法请求服务器返回资源的一个表示。/index.hml是从服务器请求的资源的路径。HTTP/1.1是客户理解的协议的版本。尽管所需要的就是GET行,但客户端请求通常还会在首部中包括其他信息。各行采用如:1Keyword: value关键字不区分大小写。值有时区分大小写,有时也不区分。关键字和值都只能是ASCII。如果一个值太长,可以在下一行最前面增加一个空格或制表符,接续上一行。首部中的行以一个回车换行对结束。这个例子中的第一个关键字是User-Agent：1User-Agent: Mozilla/5.0(Macintosh; Intel Mac oS X 10.8; rv: 20.0)这会让服务器知道使用的是什么浏览器,并允许服务器发送为特定浏览器类型而优化的文件。下面一行指出请求来自Lynx浏览器的2.4版本:1User-Agent: Lynx/2.4 libwww/2.1.4除了最老的第一代浏览器,还可以包括一个Host域来指定服务器的名,允许Web服务器区分来自相同IP地址的不同名的主机:1Host: www.cafeaulait.org这个例子中最后一个关键字是 Accept：1Accept: text/html, application/xhtml+xml, application/xml; q=0.9, */*;9=0.8它告诉服务器客户端可以处理哪些数据类型(但服务器常常忽略这一点)。例如,下面一行指出客户端可以处理4种MIME媒体类型,分别对应HTML文档、纯文本及JPEG和GIF图片:1Accept: text/html, text/plain, image/gif, image/jpegMIME类型分为两级:类型(type)和子类型( subtype)。类型非常概括地展示包含的是何种数据:图片、文本,还是影片。子类型标识数据的特定类型:GIF图像、JPEG图像、TIFF图像。例如,HTML的内容类型是text/html,那么类型是text,子类型是htmL。JPEG图像的内容类型是 image/jpeg,类型是 image,子类型是jpeg。已经定义了8个顶级类型:text/*表示人可读的文字。Image/*表示图片。model/*表示3D模型,如VRML文件。audio/*表示声音。video/*表示移动的图片,可能包括声音。application/*表示二进制数据。message/*表示协议特定的信封,如emai消息和HTTP响应。multipart/*表示多个文档和资源的容器。每个类型分别有很多不同的子类型。可以在http://www.iana.org/assignments/media-types/访问已注册的MIME类型最新列表。另外,可以自由定义非标准的定制类型和子类型,只要它们以x-开头。例如, Flash文件通常会指定为 application/ x-shockwave-fash类型。最后,请求以一个空行结束,也就是说,包括两个回车/换行对`\r\n\r\n`。一旦服务器看到这个空行,它就开始通过同一个连接向客户端发送它的响应。这个响应以一个状态行开始,后面是一个首部,这个首部采用请求首部同样的“名:值”语法描述响应,然后是一个空行,最后是所请求的资源。一个典型的成功响应如下所示:123456789101112HTTP/1.1 200 OKDate: Sun, 21 Apr 2013 15:12:46 GMTServer: ApacheConnection: closeContent-Type: text/html; charset=ISO-8859-1Content-length: 115&lt;html&gt; &lt;head&gt; &lt;title&gt;A Sample HTML file&lt;/title&gt; &lt;/head&gt; &lt;body&gt;The rest of the document goes here&lt;/body&gt;&lt;/html&gt;第一行：1HTTP/1.1 200 OK指示了服务器使用的协议(HTTP/1.1),后面是一个响应码,200 OK是最常用的响应码,表示这个请求是成功的。其他首部行：12345Date: Sun, 21 Apr 2013 15:12:46 GMTServer: ApacheConnection: closeContent-Type: text/html; charset=ISO-8859-1Content-length: 115分别指出做出请求的日期(采用服务器的时间帧)、服务器软件( Apache)、承诺服务器结束发送时会关闭连接、MIME媒体类型,以及所传输文档的长度(不考虑这个首部),在这里就是107字节。表6-1列出了你最有可能遇到的标准及试验响应码,这里不包括 WebDAV使用的几个响应码。表6-1:HTTP1.1响应码https://www.cnblogs.com/isykw/p/6115469.html略，后续再补上。不论哪个版本,响应码100到199总表示一个提供信息的响应,200到299总指示成功,300到399表示重定向,400到499总是指示一个客户端错误,而500到599总表示一个服务器错误。本文链接: 第六章前言]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第6章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[第五章还没完，但是又太多看不懂的东西。]]></title>
    <url>%2Fblog%2Fdd861dac%2F</url>
    <content type="text"><![CDATA[第五章还没完，但是我感觉说了太多我不懂的东西，实例又太少了。本文链接: 第五章还没完，但是又太多看不懂的东西。]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[通过GET与服务器端程序通信]]></title>
    <url>%2Fblog%2Ff2b0eaf0%2F</url>
    <content type="text"><![CDATA[URL类使得 Java applet和应用程序与服务器端程序(如CGI、 servlet、PHP页面和其他使用GET方法的程序)的通信非常容易(使用POST方法的服务器端程序需要使用URLConnection类,第7章将讨论有关内容)。你只需要知道程序希望接收怎样的名-值组合,然后用查询字符串构造URL,这个查询字符串提供所需的名和值。所有名和值都必须经过x-www-form-url-encoded编码,例如用 URLEncoder.encode()方法编码,如本章前面所述。有很多种方法可以确定与特定程序对话的查询字符串的具体语法。如果你自己编写了服务器端程序,那么你已经知道它希望接收的名-值对。如果在你自己的服务器上安装了一个第三方程序,这个程序的文档会告诉你它希望接收什么。如果你在与一个外部网络API(已提供文档)对话,如 eBay Shopping API,这个服务通常会提供相当详细的文档,告诉你为了实现各种用途需要发送什么数据。许多程序用于处理表单输入。如果是这种情况,要弄清程序希望得到什么输入会非常简单。表单使用的方法应当是FORM元素的 METHOD属性值。这个值要么是GET,要么是POST。如果是GET,就可以使用这里介绍的过程;如果是POST,则要使用第7章描述的过程。URL中查询字符串前面的部分由FORM元素的ACTION属性值给定。需要说明,这可能是一个相对URL,这里需要确定相应的绝对URL。最后,名-值对就是 INPUT元素的NAME属性。名-值对的值就是用户在表单中输入的内容。例如,考虑下面这个HTML表单,这个表单在我的 Cafe con Leche网站中作为本地搜索引擎。你会看到它使用了GET方法。处理表单的程序通过URL http://www.google.com/search进行访问。它有四个单独的名-值对,其中三个有默认值本文链接: 通过GET与服务器端程序通信]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[代理]]></title>
    <url>%2Fblog%2Fdde91df3%2F</url>
    <content type="text"><![CDATA[许多系统通过代理服务器( proxy server)访问web,有时还会访问 Internet其他非HTTP部分。代理服务器接收到从本地客户端到远程服务器的请求。代理服务器向远程服务器发出请求,再将结果转发回本地客户端。有时这样做是出于安全原因,如防止远程主机了解关于本地网络配置的秘密细节。另外一些情况下,这样做是为了通过过滤出站请求,限制可以浏览的网站。例如,一所初级中学可能希望禁止访问http://www.playboy.com。还有一些情况则纯粹是出于性能的考虑,这样允许多个用户从本地缓存中获取同样的一些经常访问的文档,而不是重复从远程主机下载。基于URL类的Java程序可以使用大多数常见的代理服务器和协议。事实上,正是出于这个原因,你要选择使用URL类,而不是在原始socket之上处理你自己的HTTP或其他客户。系统属性对于基本操作,所要做的就是设置一些系统属性,指示本地代理服务器的地址。如果使用纯粹的HTTP代理,则将http.proxyHost设置为代理服务器的域名或IP地址,将http.proxyPort设置为代理服务器的端口(默认为80)。还有一些其他方法,包括在Java代码中调用System.setProperty(),或在启动程序时使用-D选项。下面的例子将代理服务器设置为192.168.254.254,端口为9000:1java -Dhttp.proxyHost=192.168.254.254 -Dhttp.proxyPort=9000如果代理需要一个用户名和口令,则需要安装一个 Authenticator,稍后将在“访问口令保护的网站”中介绍有关内容。如果希望一台主机不被代理,而是要直接连接,则要把http.nonProxyhosts系统属性设置为其主机名或IP地址。如果多个主机都不需要代理,可以用竖线分隔这些主机名。例如,下面的代码段会禁止代理java.oreilly.com和xml.oreilly.com:123456//设置代理主机System.setProperty("http.proxyHost","192.168.254.254");//设置代理端口System.setProperty("http.proxyPort","9000");//设置多个主机不需要代理System.setProperty("http.nonproxyHosts","java.oreilly.com|xml.oreilly.com");还可以使用星号作为通配符,表示某个特定的域或子域内的所有主机都不应当代理。例如,要禁止代理oreilly.com域内的所有主机:1java -Dhttp.proxyHost=192.168.254.254 -Dhttp.nonproxyHosts=*.oreilly.com如果使用FTP代理服务器,可以采用同样的方式设置 ftp.proxyHost、ftp.proxyPort和ftp.nonProxyHosts属性。Java不支持任何其他应用层协议,但是如果对所有TCP连接都使用传输层 SOCKS代理,可以用 socks.ProxyHost和 socksProxyPort系统属性来确定。Java对于 SOCKS没有提供禁止代理选项。这是一个“全有或全无”的选择。Proxy类Proxy类允许从Java程序中对代理服务器进行更细粒度的控制。确切地讲,它允许你为不同的远程主机选择不同的代理服务器。代理本身用 java.net.Proxy类的实例来表示。仍然只有三种代理:HTTP、SOCKS和直接连接(即根本没有代理),分别用Proxy.Type枚举中的三个常量来表示:Proxy.Type.DIRECTProxy.Type.HTTPProxy.Type.SOCKS除了类型之外,关于代理的其他重要信息包括它的地址和端口,用 SocketAddress对象表示。例如,下面的代码段创建了一个Proxy对象,表示proxy.example.com的端口80上的一个HTTP代理服务器:12SocketAddress address=new InetSocketAddress("proxy.example.com",80);Proxy proxy = new Proxy(proxy.Type.HTTP, address);虽然只有三种代理对象,但是对于不同主机上的不同代理服务器,可以有相同类型的多个不同代理。ProxySelector类每个运行中的虛拟机都有一个java.net.ProxySelector对象,用来确定不同连接的代理服务器。默认的 ProxySelector只检查各种系统属性和URL的协议,来决定如何连接到不同的主机。不过,你可以安装自己的 ProxySelector子类来代替默认的选择器,用它根据协议、主机、路径、日期时间和其他标准来选择不同的代理。这个类的关键是 select()抽象方法:1public abstract List&lt;Proxy&gt; select(URI uri)Java为这个方法传入一个URI对象(而不是URL对象),这表示需要连接的主机。举例来说,对于用URL类生成的连接,这个对象通常形式为http://www.example.com/或ftp://fp.example.com/pub/iles。对于用 Socket类生成的纯TCP连接,URI形式为 socket://host:port。例如,socket://www.example.com:80。然后ProxySelector为这种类型的对象选择正确的代理,并返回到一个 List&lt;Proxy中。这个类中必须实现的第二个抽象方法是 connectFailed():1public void connectFailed(URI uri,SocketAddress address,IOException ex)这是一个回调方法,用于警告程序这个代理服务器实际上没有建立连接。示例5-9展示了一个ProxySelector,它尝试使用位于proxy.example.com的代理服务器完成所有HTTP连接,除非这个代理服务器之前未能成功解析与一个特定URL的连接。如果是这样,它会建议使用直接连接。示例5-9: ProxySelector会记住可以连接的URL12345678910111213141516171819202122232425import java.io.*;import java.net.*;import java.util.*;public class LocalProxySelector extends ProxySelector &#123; private List&lt;URI&gt; failed = new ArrayList&lt;URI&gt;(); public List&lt;Proxy&gt; select(URI uri) &#123; List&lt;Proxy&gt; result = new ArrayList&lt;Proxy&gt;(); if (failed.contains(uri) || !"http".equalsIgnoreCase(uri.getScheme())) &#123; result.add(Proxy.NO_PROXY); &#125; else &#123; SocketAddress proxyAddress = new InetSocketAddress( "proxy.example.com", 8000); Proxy proxy = new Proxy(Proxy.Type.HTTP, proxyAddress); result.add(proxy); &#125; return result; &#125; public void connectFailed(URI uri, SocketAddress address, IOException ex) &#123; failed.add(uri); &#125;&#125;如前所述,每个虚拟机都只有一个ProxySelector。要改变这个 ProxySelector,需要把新的选择器传递给静态方法 ProxySelector.setDefault(),如下:12ProxySelector selector= new LocalProxySelector();ProxySelector.setDefault(selector);此后,虛拟机打开的所有连接都将向这个 ProxySelector询问将要使用的正确代理。一般不应在共享环境中运行的代码中使用这个方法。例如,不要在 servlet中改变ProxySelector,因为这会改变在同一个容器中运行的所有 servlet的 ProxySelector。本文链接: 代理]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[URLDecoder]]></title>
    <url>%2Fblog%2F22d4526d%2F</url>
    <content type="text"><![CDATA[对应的 URLDecoder类有一个静态方法 decode(),它会对用 x-www-form-url-encoded格式编码的字符串进行解码。也就是说,将所有加号转换为空格,所有百分号转义字符转换为对应的字符:1public static String decode(String s, String encoding) throws UnsupportedEncodingException如果不确定使用哪种编码方式,那就选择UTF-8。它可能比所有其他方式都正确。如果字符串包含一个百分号,但其后没有两个十六进制数字,或者字符串解码为无效的序列,就要抛出一个 IllegalArgumentException异常。由于这个方法对非转义字符不做处理,所以可以传入整个URL,而不需要首先将它分解为各个部分。例如:1234Stringinput="https://www.google.com/"+ "search?h1=en&amp;as_=Java&amp;as_epq=I%2F0";String output= URLDecoder.decode(input,"UTF-8");System.out.println(output);本文链接: URLDecoder]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[URLEncoder]]></title>
    <url>%2Fblog%2Fee64a91a%2F</url>
    <content type="text"><![CDATA[要对字符串完成URL编码,需要将这个字符串和字符集名传入 URLEncoder.encode()方法。例如:1String encoded= URLEncoder.encode ("Thi*string*has*asterisks","UTF-8");URLEncoder.encode()返回输入字符串的一个副本,不过有一些调整。所有非字母数字字符会转换为%序列(除空格、下划线、连字符、点号和星号字符以外)。它还会对所有非ASCI字符编码。空格转换为加号。这个方法有点过于积极,它还会把波浪线、单引号、感叹号和圆括号转换为百分号转义字符,即使它们并不一定需要转换。不过,URL规范不禁止这种转换,所以Web浏览器会合理地处理这些过度编码的URL。尽管这个方法允许指定字符集,但是最好只选择UTF-8。与你选择的其他任何编码方式相比,UTF-8与IRI规范、URI类、现代Web浏览器和其他软件更兼容。示例5-7是一个使用 URLEncoder.encode()显示各种编码字符串的程序。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package Chapter5;import java.io.*;import java.net.*;public class EncoderTest&#123; public static void main(String[] args) &#123; try &#123; // 对字符串完成URL编码 System.out.println( URLEncoder.encode("This string has spaces", "UTF-8")); //星号不用百分号转义 System.out.println( URLEncoder.encode("This*string*has*asterisks", "UTF-8")); //百分号用转义为"%25" System.out.println(URLEncoder .encode("This%string%has%percent%signs", "UTF-8")); //加号转义为"%2B" System.out.println( URLEncoder.encode("This+string+has+pluses", "UTF-8")); //斜杠转义为"%2F" System.out.println( URLEncoder.encode("This/string/has/slashes", "UTF-8")); //反斜杠转义为"%22" System.out.println(URLEncoder .encode("This\"string\"has\"quote\"marks", "UTF-8")); //冒号转义为"3A" System.out.println( URLEncoder.encode("This:string:has:colons", "UTF-8")); //"~"转义为"%7E" System.out.println( URLEncoder.encode("This~string~has~tildes", "UTF-8")); //开括号"("转义为"%28",闭括号")"转义为"%29" System.out.println( URLEncoder.encode("This(string)has(parentheses)", "UTF-8")); //点号不转义 System.out.println( URLEncoder.encode("This.string.has.periods", "UTF-8")); //等号转义为:%3D System.out.println( URLEncoder.encode("This=string=has=equals=signs", "UTF-8")); //单位与"&amp;"转义为"%26" System.out.println( URLEncoder.encode("This&amp;string&amp;has&amp;ampersands", "UTF-8")); //"é"转义为"%C3%A9" System.out.println(URLEncoder .encode("Thiséstringéhasénon-ASCII characters", "UTF-8")); &#125; catch (UnsupportedEncodingException ex) &#123; throw new RuntimeException("Broken VM does not support UTF-8"); &#125; &#125;&#125;下面是这个程序的输出(注意由于源代码中存在非ASCII字符,这个代码需要以非ASCII的方式保存,选择的编码方式应当作为参数传递给编译器)。12345678910111213This+string+has+spacesThis*string*has*asterisksThis%25string%25has%25percent%25signsThis%2Bstring%2Bhas%2BplusesThis%2Fstring%2Fhas%2FslashesThis%22string%22has%22quote%22marksThis%3Astring%3Ahas%3AcolonsThis%7Estring%7Ehas%7EtildesThis%28string%29has%28parentheses%29This.string.has.periodsThis%3Dstring%3Dhas%3Dequals%3DsignsThis%26string%26has%26ampersandsThis%C3%A9string%C3%A9has%C3%A9non-ASCII+characters特别注意这个方法对斜线(/)、与号(&amp;)、等号(=)和冒号(:)进行了编码。它不去判断这些字符在URL中如何使用。因此,你必须逐部分地对URL进行编码,而不是在个方法调用中对整个URL编码。这是很重要的一点,因为 URLEncoder最常见的用法是准备查询字符串,从而与使用GET方法的服务器端程序通信。例如,假设你希望对下面这个 Google搜索的URL进行编码:1https://www.googlecom/search?h1=en&amp;as_q=Java&amp;as_epq=I/O以下代码段将对它进行编码:12String query= URLEncoder.encode(&quot;https://www.google.com/search?h1=en&amp;as_q=Java&amp;as_epq=I/O&quot;,&quot;utf-8&quot;);System.out.println(query);但遗憾的是,输出为:1https%3A%2F%2Fwww.google.com%2Fsearch%3Fh1%3Den%26as_q%3DJava%26as_epq%3DI%2FO问题就在于, URLEncoder.encode()会盲目地进行编码。它对URL或查询字符串中使用的特殊字符(比如/和=)和需要编码的字符不加区分。因此,需要一次编码URL的一部分,如下所示:123456789101112131415161718192021222324try&#123; String query = URLEncoder.encode( "https://www.google.com/search?h1=en&amp;as_q=Java&amp;as_epq=I/O", "utf-8"); System.out.println(query); String url = "https://www.google.com/search?"; url += URLEncoder.encode("h1", "UTF-8"); url += "="; url += URLEncoder.encode("en", "UTF-8"); url += "&amp;"; url += URLEncoder.encode("as_q", "UTF-8"); url += "="; url += URLEncoder.encode("Java", "UTF-8"); url += "&amp;"; url += URLEncoder.encode("as_epq", "UTF-8"); url += "="; url += URLEncoder.encode("I/O", "UTF-8"); System.out.println(url);&#125; catch (UnsupportedEncodingException e)&#123; // TODO Auto-generated catch block e.printStackTrace();&#125;这一次会得到我们真正想要的输出:1https://www.google.com/search?h1=en&amp;as_q=Java&amp;as_epq=I%2FO在这里,你也可以跳过一些常量字符串,如“Java”,不对它们进行编码,因为从观察可以知道,这些字符串中不包含需要编码的字符。不过,一般来讲,这些值将是变量,而不是常量。为了安全还是需要对每一部分进行编码。示例5-8是一个 QueryString类,它使用 URLEncoder对一个Java对象中连续的名-值对编码,这个对象将用来向服务器端程序发送数据。为了增加名-值对,需要调用add()方法,它接受两个字符串作为参数,并进行编码。 getQuery()方法返回编码后名值对的累积列表。示例5-8: QueryString类123456789101112131415161718192021222324252627282930313233343536373839import java.io.UnsupportedEncodingException;import java.net.URLEncoder;public class QueryString &#123; private StringBuilder query = new StringBuilder(); public QueryString() &#123; &#125; //自动添加名值对的分割符"&amp;" public synchronized void add(String name, String value) &#123; query.append('&amp;'); encode(name, value); &#125; private synchronized void encode(String name, String value) &#123; try &#123; //对名字编码 query.append(URLEncoder.encode(name, "UTF-8")); //添加等号，名值对连接符 query.append('='); //对值编码 query.append(URLEncoder.encode(value, "UTF-8")); &#125; catch (UnsupportedEncodingException ex) &#123; throw new RuntimeException("Broken VM does not support UTF-8"); &#125; &#125; public synchronized String getQuery() &#123; return query.toString(); &#125; @Override public String toString() &#123; return getQuery(); &#125;&#125;使用这个类,现在可以对前面的例子进行编码:123456789public static void main(String[] args)&#123; QueryString qs= new QueryString(); qs.add("h1","en"); qs.add("as_q","Java"); qs.add ("as_epq","I/O"); String url="http://www.google.com/search?"+qs; System.out.println(url);&#125;运行结果：1http://www.google.com/search?&amp;h1=en&amp;as_q=Java&amp;as_epq=I%2FO本文链接: URLEncoder]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[URI类]]></title>
    <url>%2Fblog%2F448e8023%2F</url>
    <content type="text"><![CDATA[URI是对URL的抽象,不仅包括统一资源定位符( Uniform resource locators,URL)还包括统一资源名(Uniform Resource Names,URN)。实际使用的URI大多是URL,但大多数规范和标准(如XML)都是用URI定义的。在Java中,URI用 java.net.URI类表示。这个类与 java.net.URL类的区别表现在3个重要的方面：URI类完全有关于资源的标识和URI的解析。它没有提供方法来获取URI所标识资源的表示。相比URL类,URI类与相关的规范更一致。URI对象可以表示相对URI。URL类在存储URI之前会将其绝对化。简而言之,URL对象是对应网络获取的应用层协议的一个表示,而URI对象纯粹用于解析和处理字符串。URI类没有网络获取功能。尽管URL类有一些字符串解析方法,如getFile()和 getRef(),但其中很多方法都有问题,与相关规范所要求的行为不完全一致。正常情况下,假如你想下载一个URL的内容,应当使用URL类,如果想使用URL来完成标识而不是获取(例如表示一个XML命名空间),就应当使用URI类。二者都需要时,可以通过 toURL()方法将URI转换为URL,还可以使用 toURI()方法将URL转换为URI。构造一个URIURI从字符串构造。可以把整个URI通过一个字符串传入构造函数,也可以分部分传入:方法描述URI(String str)通过解析给定的字符串构造一个 URI。URI(String scheme, String ssp, String fragment)根据给定的组成部分构造 URI。URI(String scheme, String host, String path, String fragment)根据给定的组成部分构造分层 URI。URI(String scheme, String authority, String path, String query, String fragment)根据给定的组成部分构造分层 URI。URI(String scheme, String userInfo, String host, int port, String path, String query, String fragment)根据给定的组成部分构造一个分层 URI。与URL类不同,URI类不依赖于底层协议处理器。只要是URI语法上正确,Java就不需要为了创建URI对象而理解其协议。因此,不同于URL类,URI类可以用于新的试验性的URI模式。第一个构造函数根据任何满足条件的字符串创建一个新的URI对象。例如:123URI voice= new URI("tel:1-800-9988-9938");URI web=new URI("http://www.xml.com/pub/a/2003/09/17/stax.html#tid=_hbc");URI book=new URI("urn: isbn: 1-565-92870-9");如果字符串参数不遵循URI语法。例如,如果URI以冒号开头,这个构造函数将抛出一个 URISyntaxException异常。这是一个受查异常,所以需要捕获这个异常,或者在调用构造函数的方法中声明可能抛出该异常。不过,有一条语法规则不会检查。与URI规范不同的是,URI中使用的字符不限于ASCII它可以包括其他 Unicode字符,如é。在语法上URI没有多少限制,具体来讲,一旦不再需要对非ASCII字符编码,并且允许相对URI,那就没有什么限制了。几乎所有字符串都可以解释为URI。第二个构造函数需要一个模式特定部分,主要用于非层次URI。模式( scheme)是URI的协议,如http、urn、tel等。它必须由ASCI字母、数字及三个标点字符(+、-和.)组成。模式必须以字母开头。如果为这个参数传入null,则省略模式,这样会创建一个相对URI。例如:12URI absolute=new URI("http","//www.ibiblio.org",null);URI relative= new URI(null,"/javafaq/index. shtml","today");模式特定部分取决于URI模式的语法。对于http URI是一种情况,对于mailto URI则是另一种情况,对于 tel URI情况又有所不同。因为URI类会用百分号转义字符来对无效字符编码,实际上这部分不会有任何语法错误。最后,第三个参数包含一个片段标识符(如果有的话)。再次说明,片段标识符中禁止的字符会自动转义。为这个参数传入null时,会忽略片段标识符。第三个构造函数用于层次URI,如http和ftp URL。主机和路径(用/分隔)共同构成这个URI的模式特定部分。例如:1URI today=new URI("http","www.ibiblio.org","/javafaq/index.html","today");这会生成URI http://www.ibiblio.org/javafaq/index.html#today。如果这个构造函数无法根据提供的各个部分构成一个有效的层次URI。例如,如果有一个模式,所以URI必须是绝对URI,但路径并不是以/开头,那么它将抛出一个URISyntaxException异常。第四个构造函数与前一个基本相同,只是添加了一个查询字符串部分。例如:1URI today=new URI("http","www.ibiblio.org","/javafaq/index.html",referrer=cnet&amp;date=2014-02-23","today");与以往一样,任何不可转义的语法错误都会导致抛出 URISyntaxException异常,所有参数都可以传入null从而忽略这一部分。第5个构造函数是前面两个构造函数调用的主层次URI构造函数。这个方法将授权机构分解为用户信息、主机和端口部分,每个部分分别有自己的语法规则。例如:1URI styles=new URI("ftp","anonymous:elharo@ibiblio.org","ftp.oreilly.com",21,"/pub/stylesheet",null,null);不过,生成的URI仍然必须遵循URI的所有通用规则,再次说明,任何参数都可以传入null,从而在结果中忽略这一部分。如果你确信你的URI是有效的,不违反任何规则,那么可以使用静态工厂方法URI.create()。与构造函数不同,它不抛出 URISyntaxException异常。例如,下面的调用将使用电子邮件地址作为口令为匿名FTP访问创建一个URI:1URI styles=URI.create("ftp://anonymous:elharo%40ibiblio.orge@ftp.oreilly.com:21/pub/stylesheet”);如果这个URI证明是不正确的,这个方法会抛出一个 IllegalArgumentException异常。这是一个运行时异常,所以不需要显式声明或捕获这个异常。URI的各部分URI引用包括最多三个部分:模式,模式特定部分和片段标识符。一般格式为:模式:模式特定部分:片段如果省略模式,这个URI引用则是相对的。如果省略片段标识符,这个URI引用就是一个纯URI。URI类提供了一些获取方法,可以返回各个URI对象的这三个部分getRawFoo()方法返回URI各部分的编码形式,相应的getFoo()方法首先对所有用百分号转义的字符进行解码,然后返回解码后的部分:12345public String getScheme()public String getSchemeSpecificPart()public String getRawSchemeSpecificPart()public String getFragment()public String getRawFragment()提示:之所以没有 getRawScheme()方法,这是因为URI规范要求:所有模式名都要由对URI合法的ASCI字符组成,模式名中不允许百分号转义。如果某个URI对象中没有相应的部分,这些方法就返回null例如,没有模式的相对URI或没有片段标识符的 Http URI。有模式的URI是绝对(absolute)URI。没有模式的URI是相对( relative)URI。如果URI是绝对的, isAbsolute()方法返回true,如果是相对URI则返回 false。1public boolean isAbsolute()模式特定部分的细节根据模式类型的不同会有所差别。例如,在 tel URI中,模式特定部分的语法类似于电话号码。不过,在许多有用的URI中(包括很常见的file和http URI),模式特定部分都有一个特定的分层格式,划分为授权机构、路径和查询字符串。授权机构进一步分为用户信息、主机和端口。如果URI是一个层次URI时,isOpaque()返回 false,如果不是分层的URI,也就是说,如果是不透明( opaque)的,isOpaque()则返回true:1public boolean isopaque()如果URI不透明,只能得到模式、模式特定部分和片段标识符。不过,如果URI是层次URI,那么对于层次URI的所有不同部分都有相应的获取方法:1234567public String getAuthority()public String getFragment()public String getHost()public String getPath()public String getPort()public String getQuery()public String getUserInfo()这些方法都返回解码后的部分。换句话说,百分号转义会改为它们实际表示的字符,如%3C会改为&lt;。如果希望得到URI原始的编码部分,还有五个对应的 getRawFoo()方法:12345public String getRawAuthority()public String getRaw Fragment()public String getRawPath()public String getRawQuery()public String getRawUserInfo()记住,URI类与URI规范不同,非ASCI字符如é和ü绝不会先完成百分号转义,这样就仍会出现在 getRawFoo()方法返回的字符串中,除非最初用于构造URI对象的字符串已经编码。提示:之所以没有 getRawPort()和 getRawHost()方法,这是因为可以保证这些部分总是由ASCII字符组成的。当特定URI不包含某个信息时,例如URI http://www.example.com没有用户信息、路径、端口和查询字符串,相应的方法会返回null。getPort()是个例外。由于它声明为返回一个int,所以它无法返回null。实际上,它会返回-1表示省略了端口。出于各种技术原因,Java并不总是在开始就检测授权机构部分中的语法错误,但这没有多少实际影响。不做这个检测的直接后果是,一般无法返回授权机构的各个部分:端口、主机和用户信息。在这种情况下,可以调用 parseServerAuthority()强制重新解析授权机构:1public URI parseServerAuthority() throws URISyntaxException原来的URI没有改变(URI对象是不可变的),但返回的URI对应用户信息、主机和端口有单独的授权机构部分。如果无法解析授权机构,就会抛出一个 URISyntaxException异常。示例5-6:URI的各部分123456789101112131415161718192021222324252627282930313233343536373839404142import java.net.*;public class URISplitter &#123; public static void main(String args[]) &#123; for (int i = 0; i &lt; args.length; i++) &#123; try &#123; URI u = new URI(args[i]); System.out.println("The URI is " + u); if (u.isOpaque()) &#123; System.out.println("This is an opaque URI."); System.out.println("The scheme is " + u.getScheme()); System.out.println("The scheme specific part is " + u.getSchemeSpecificPart()); System.out.println("The fragment ID is " + u.getFragment()); &#125; else &#123; System.out.println("This is a hierarchical URI."); System.out.println("The scheme is " + u.getScheme()); try &#123; u = u.parseServerAuthority(); System.out.println("The host is " + u.getHost()); System.out.println("The user info is " + u.getUserInfo()); System.out.println("The port is " + u.getPort()); &#125; catch (URISyntaxException ex) &#123;// Must be a registry based authority System.out.println("The authority is " + u.getAuthority()); &#125; System.out.println("The path is " + u.getPath()); System.out.println("The query string is " + u.getQuery()); System.out.println("The fragment ID is " + u.getFragment()); &#125; &#125; catch (URISyntaxException ex) &#123; System.err.println(args[i] + " does not seem to be a URI."); &#125; System.out.println(); &#125; &#125;&#125;下面是对本节中3个URI例子运行这个程序的结果:123java URISplitter tel:+1-800-9988-9938 \http://www.xml.com/pub/a/2003/09/17/stax.html#id=_hbc \urn:isbn:1-565-92870-9运行结果:123456789101112131415161718192021The URI is tel:+1-800-9988-9938This is an opaque URI.The scheme is telThe scheme specific part is +1-800-9988-9938The fragment ID is nullThe URI is http://www.xml.com/pub/a/2003/09/17/stax.html#id=_hbcThis is a hierarchical URI.The scheme is httpThe host is www.xml.comThe user info is nullThe port is -1The path is /pub/a/2003/09/17/stax.htmlThe query string is nullThe fragment ID is id=_hbcThe URI is urn:isbn:1-565-92870-9This is an opaque URI.The scheme is urnThe scheme specific part is isbn:1-565-92870-9The fragment ID is null解析相对URI123public URI resolve(URI uri)public URI resolve(String uri)public URI relativize(URI uri)resolve()方法将uri参数与这个URI进行比较,并用它构造一个新的URI对象,这个对象包装了一个绝对URI。例如,考虑下面3行代码:123URI absolute =new URI("http://www.example.com/");URI relative =new URI("images/logo.png");URI resolved =absolute.resolve(relative);执行之后,resolved包含绝对URI http://www.example.com/images/logo.png。如果调用URI本身不包含绝对URI,那么 resolve()方法将尽可能地解析URI,并返回个新的相对URI对象作为结果。例如,考虑下面的语句:12URI top= new URI("javafaq/books/");URI resolved =top.resolve("jnp3/examples/07/index.html");执行之后,现在 resolved包含相对 URI javafag/books/jnp3/examples/07/index.html,没有模式和授权机构。还可以反向完成以上过程,即从绝对URI变成相对URI。relativize()方法根据相对于调用URI的uri参数创建一个新的URI对象。参数没有改变。例如：123URI absolute=newURI("http://www.example.com/images/logo.png");URI top=newURI("http://www.example.com/");URI relative= top.relativize(absolute);URI对象 relative现在包含相对 URI images/logo.png。相等性和比较如你所期望的,可以测试URI的相等性。这不是直接的字符串比较。相等的URI必须都是层次的或不透明的。比较模式和授权机构时不考虑大小写。也就是说http和HTTP是相同的模式,www.example.com与www.EXAMPLE.com是相同的授权机构。URI的其余部分要区分大小写(除了用于转义无效字符的十六进制数字外)。转义字符在比较前不解码,http://www.example.com/A和http://www.example.com/%41是不相等的URI。hashCode()方法与相等性是一致的。相等的URI有相同的散列码,不相等的URI不太可能有相同的散列码。URI实现了 Comparable,因此URI可以排序。基于各个部分的字符串比较,按以下列顺序进行排序:如果模式不同就比较模式,不考虑大小写。否则,如果模式相同,一般认为层次URI小于有相同模式的不透明URI。如果两个URI都是不透明URI,则根据模式特定部分对它们排序。如果模式和不透明的模式特有部分都相等,就根据片段比较URI。如果两个URI都是层次URI,则根据它们的授权机构部分排序,授权机构本身依次根据用户信息、主机和端口排序。主机比较不区分大小写如果模式和授权机构都相等,就使用路径来区分。如果路径也相等,就比较查询字符串。如果查询字符串相等,就比较片段。除了与URI自身比较外,URI不能与其他任何类型比较。将URI与任何其他对象比较都会导致ClassCastException异常。字符串表示有两个方法可以将URI对象转换为字符串: toString()和 toASCIIString()。12public String toString()public String toASCIIString()toString()方法返回URI的未编码( unencoded)的字符串形式(也就是说,类似è和\的字符不用百分号转义)。因此,调用这个方法的结果不能保证是一个语法正确的URI,尽管实际上它是一个语法正确的IRI。这种形式有时对于向人们显示很有用(注:就是方便阅读),不过通常并不用于获取数据。toASCIIString()方法返回URI的编码( encoded)的字符串形式。类似è和\的字符总是会完成百分号转义,无论最初是否已转义。大多数时候都应当使用这种URI字符串形式尽管 toString()返回的形式对人而言更容易阅读,但有可能会复制粘贴到不希望接收到无效UR的地方(而 toString()返回的有可能是无效的URI)。toAsCIIString()总是返回语法正确的URI。x-www-form-urlencodedWeb设计人员面对的挑战之一是要处理不同操作系统之间的区别。这些不同会导致URL的问题。例如,有些操作系统允许文件中有空格,而有些不允许。大多数操作系统不反对文件名中出现#号,但在URL中#号表示文件名的结束,后面是片段标识符。其他特殊字符、非字母数字字符等在URL中或另一个操作系统上有特殊的意义,这也会产生类似的问题。另外,发明web时 Unicode还没有完全普及,所以并不是所有系统都能处理“è”和“本”之类的字符。为了解决这些问题,URL中使用的字符必须来自ASCII的个固定的子集,确切地讲,包括：大写字母A-Z。小写字母a-z。数字0-9。标点符号字符-_.!~*&#39;,字符:/&amp;?@#;$+=和%也可以使用,但只用于特定的用途。如果这些字符出现在路径或查询字符串中,它们以及所有其他字符都应当编码。编码方式非常简单。除了ASCII数字、字母和前面指定的标点符号以外,所有其他字符都要转换为字节,每个字节要写为百分号后面加两个十六进制数字。空格是一种特殊情况,因为它太普遍了。除了编码为%20,空格可以编码为加号(+)。加号本身编码为%2B。/#=&amp;和?字符用在名字中时应当编码,但作为URL各部分之间的分隔符时不用编码。URL类不自动编码或解码。可以使用无效的ASCII字符和非ASCII字符以及(或)百分号转义字符来构造URL对象。由 getPath()和 toExternalForm()等方法输出时,这样的字符和转义字符不会自动编码或解码。要由你负责确保在用来构造URL对象的字符串中对所有这些字符正确地编码。幸运的是,Java提供了 URLEncoder和 URLDecoder类,可以对这种格式的字符串编解码。本文链接: URI类]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[相等性和比较]]></title>
    <url>%2Fblog%2F20afcbfd%2F</url>
    <content type="text"><![CDATA[URL类包含通常的 equals()和 hashCode()方法。这些方法的行为与你预想的一样。当且仅当两个URL都指向相同主机、端口和路径上的相同资源,而且有相同的片段标识符和查询字符串,才认为这两个URL是相等的。不过,这里有一个惊喜。实际上 equals()方法会尝试用DNS解析主机,来判断两个主机是否相同,如可以判断http://www.ibiblio.org和http://ibiblio.org/是一样的。警告:这说明,URL上的 equals()可能是一个阻塞的I/O操作!出于这个原因,应当避免将URL存储在依赖 equals()的数据结构中,如java.util.HashMap。更好的选择是 java.net.URI,可以在必要时将URI与URL来回转换。另一方面,equals()还不够深入,不会具体比较两个URL标识的资源。例如,http://www.oreilly.com/不等于http://www.oreilly.com/index.html;另外http://www.oreilly.com:80也不等于http://www.oreilly.com。示例5-5为http://www.ibiblio.org/和http://ibiblio.org/创建URL对象,并用equals()方法指出它们是否相等。示例5-5:http://www.ibiblio.org和http://ibiblio.org相等吗?1234567891011121314151617181920import java.net.*;public class URLEquality &#123; public static void main (String[] args) &#123; try &#123; URL www = new URL ("http://www.ibiblio.org/"); URL ibiblio = new URL("http://ibiblio.org/"); if (ibiblio.equals(www)) &#123; System.out.println(ibiblio + " is the same as " + www); &#125; else &#123; System.out.println(ibiblio + " is not the same as " + www); &#125; &#125; catch (MalformedURLException ex) &#123; System.err.println(ex); &#125; &#125;&#125;运行这个程序时,会发现:1http://ibiblio.org/ is the same as http://www.ibiblio.org/URL没有实现 Comparable。URL类还有一个 sameFile()方法,可以检查两个URL是否指向相同的资源:1public boolean same File(URL other)这个比较与 equals()基本上相同。这里也包括DNS查询,不过sameFile()不考虑片段标识符。比较http://www.oreilly.com/index.html#p1和http://www.oreilly.com/index.html#q2时, sameFile()返回true,而 equals()会返回 false。下面的代码段使用 sameFile()比较两个URL:12345678URL u1=new URL("http://www.ncsa.uiuc.edu/HTMLPrimer.html#GS");URL u2= new URL("http://www.ncsa.uiuc.edu/HTMLPrimer.html#HD");if(u1.sameFile(u2))&#123; System.out.prinln(u1+" is the same file as \n"+u2);&#125;else&#123; System.out.prinln(u1+" is not the same file as \n"+u2);&#125;输出如下:12http://www.ncsa.uiuc.edu/HTMLPrimer.html#GS is the same file ashttp://www.ncsa.uiuc.edu/HTMLPrimer.html#HD比较URL有3个方法可以将一个URL实例转换为另外一种形式,分别是 toString()、toExternalForm()和 toURI()。与所有好的类一样, java.net.URL有一个toString()方法。toString()生成的 String总是绝对URL,如http://www.cafeaulait.org/javatutorial.html。显式调用toString()并不常见。显示(打印)语句会隐式调用 toString()。除了显示(打印)语句以外,使用toExternalForm()更合适:public String toExternal();toExternalForm()方法将一个URL对象转换为一个字符串,可以在HTML链接或Web浏览器的打开URL对话框中使用。toExternalForm()方法返回表示这个URL的一个人可读的 String。它等同于 tostring()方法。事实上, toString()所做的就是返回 toExternalform()。最后, toURI()方法将URL对象转换为对应的URI对象:1public URI toURI() throws URISyntaxException稍后将讨论URI类。在这里,你要了解的要点是URI类提供了比URL类更精确、更符合规范的行为。对于像绝对化和编码等操作,在选择时应当首选URI类。如果需要把URL存储在一个散列表或其他数据结构中,也应当首选URI类,因为它的equals()方法不会阻塞。URL类应当主要用于从服务器下载内容。本文链接: 相等性和比较]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[分解URL]]></title>
    <url>%2Fblog%2F7ee2319%2F</url>
    <content type="text"><![CDATA[URL由以下5部分组成:模式,也称为协议。授权机构。路径。片段标识符,也称为段或ref查询字符串。例如,在URL http://www.ibiblio.org/javafaq/books/jnp/index.html?isbn=1565922069#toc中,模式是http,授权机构是www.ibiblio.org,路径是javafaq/books/jnp/index.html,片段标识符是toc,查询字符串是isbn=1565922069。不过,并非所有URL都有所有这些部分。例如,URL http://www.fags.org/rfcs/rfc3986.html只有模式、授权机构和路径,而没有片段标识符和查询字符串。授权机构可以进一步划分为用户信息、主机和端口。例如,在URL http://admin@www.blackstar.com:8080/中,授权机构是`admin@www.blackstar.com:8080`,包含用户信息admin、主机www.blackstar.com和端口8080。9个公共方法提供了URL这些部分的只读访问: getFile(),getHost()、getPort()、 getProtocol()、 getRef()、 getQuery()、 getPath()、 getUserInfo()和getAuthority()。public String getProtocol()getProtocol()方法返回一个String,其中包含URL的模式(如”http”,”https”或”file”)。例如,下面的代码段会打印https:12URL u=new URL("https://xkcd.com/727/");System.out.prinln(u.getProtocol());public String getHost()getHost()方法返回一个 String,其中包含URL的主机名。例如,下面的代码段会打印xkcd.com12URL u=new URL("https://xkcd.com/727/");System.out.println(u.getHost());public int getPort()getport()方法将URL中指定的端口号作为一个int返回。如果URL中没有指定端口getPort()返回-1,表示这个URL没有显式指定端口,将使用该协议的默认端口。例如,如果URL是http://www.userfriendly.org/,getPort()会返回-1;如果URL是http://ewwuserfriendly.org:80/, getport()会返回80。下面的代码将显示端口号为-1,因为URL中没有指定端口:12URL u=new URL("http://www.ncsa.illinois.edu/AboutUs/");System.out.println("The port part of"+u+"is"+u.getPort());public int getDefaultPort()genFile()方法返回一个 String,其中包含URL的路径部分;要记住,Java不会把URL分解为单独的路径和文件部分。从主机名后的第一个斜线(/)一直到开始片段标识符的号之前的字符,都被认为是文件部分。例如:12URL page= this.getDocumentBase();System.out.println("This page's path is"+page.getFile());如果URL没有文件部分,Java会把文件设置为空串。public String getPath()getPath()方法几乎是 genFile()的同义词。也就是说,它会返回一个 String,其中包含URL的路径和文件部分。但是与 getFile()不同,它返回的 String中不包括查询字符串,只有路径。警告:注意,并不像你想象的那样, getPath()方法不只是返回目录路径, genTile()也不只是返回文件名。 getPath()和 getFile()都返回完整的路径和文件名。唯一的区别是 genFile()还返回查询字符串,而 getPath()不返回这一部分。public String getRef()getRef()方法返回URL的片段标识符部分。如果URL没有片段标识符,则这个方法返回null在下面的代码中, getRef()返回字符串 xtocidl902914:12URL u= new URL("http://www.ibiblio.org/javafaq/javafaq.html#xtocid1902914");System.out.println("The fragment ID of "+u+" is "+ u.getRef()));public String getQuery()getQuery()方法返回URL的查询字符串。如果URL没有查询字符串,则这个方法返回null。在下面的代码中, getQuery()返回字符串 category= Piano:12URL u= new URL("http://www.ibiblio.org/nywc/compositions.phtml?category=piano")System.out.println("The query string of "+u+" is "+ u.getQuery ();public String getUserInfo()有些URL包括用户名,有时甚至会有口令信息。这些信息位于模式之后,而且在主机之前,用一个@符号将用户信息与主机分开。例如,在URL http://elharo@java.oreilly.com/中,用户信息是elharo。有些URL还在用户信息中包括口令。例如,在URL ftp://mp3:secret@ftp.example.com/c%3a/stuff/mp3/中,用户信息是mp3:secret。不过,大多数情况下,在URL中包括口令存在安全风险。如果URL没有任何用户信息getUserInfo()就返回null。mailto URL的行为可能与你想象的不一样。在类似 mailto:elharo@ibiblio.org的URL中,”elharo@ibiblio.org“是路径,而不是用户信息和主机。这是因为,这个URL指定了消息的远程接收者,而不是发送消息的用户名和主机。public String getAuthority()在URL的模式和路径之间,你会发现授权机构。URI的这一部分指示了解析资源的授权机构。在大多数情况下,授权机构包括用户信息、主机和端口例如,在 URL ftp://mp3:mp3@138.247.121.61:21000/c%3a/中,授权机构是mp3:mp3@138.247.121.61:21000,其中，用户信息是mp3:mp3,主机是138.247.121.61,端口是21000不过,并不是所有URL都有这几部分。例如,在URL http://conferences.oreilly.com/java/speakers/中,授权机构只有主机名conferences.oreilly.com.getAuthority()方法会以URL中的形式返回授权机构,可能有用户信息和端口,也可能没有。示例5-4使用这些方法把命令行中输入的URL解析为各个组成部分。示例5-4:URL的组成部分12345678910111213141516171819202122232425262728293031323334353637383940import java.net.*;public class URLSplitter &#123; public static void main(String args[]) &#123; for (int i = 0; i &lt; args.length; i++) &#123; try &#123; URL u = new URL(args[i]); System.out.println("The URL is " + u); //模式(协议) System.out.println("The scheme is " + u.getProtocol()); //用户信息 System.out.println("The user info is " + u.getUserInfo()); //主机 String host = u.getHost(); if (host != null) &#123; int atSign = host.indexOf('@'); if (atSign != -1) host = host.substring(atSign+1); System.out.println("The host is " + host); &#125; else &#123; System.out.println("The host is null."); &#125; //端口号 System.out.println("The port is " + u.getPort()); //路径 System.out.println("The path is " + u.getPath()); //片段(锚点) System.out.println("The ref is " + u.getRef()); //查询信息 System.out.println("The query string is " + u.getQuery()); &#125; catch (MalformedURLException ex) &#123; System.err.println(args[i] + " is not a URL I understand."); &#125; System.out.println(); &#125; &#125;&#125;ftp://mp3:mp3@138.247.121.61:21000/c%3a/http://www.oreilly.comhttp://www.ibiblio.org/nywc/compositions.phtml?category=Pianohttp://admin@www.blackstar.com8080/1234567891011121314151617181920212223242526272829303132333435363738394041&gt;java URLSplitter \&gt;ftp://mp3:mp3@138.247.121.61:21000/c%3a/ \&gt;http://www.oreilly.com \&gt;http://www.ibiblio.org/nywc/compositions.phtml?category=Piano \&gt;http://admin@www.blackstar.com8080/ \The URL is ftp://mp3:mp3@138.247.121.61:21000/c%3a/The scheme is ftpThe user info is mp3:mp3The host is 138.247.121.61The port is 21000The path is /c%3a/The ref is nullThe query string is nullThe URL is http://www.oreilly.comThe scheme is httpThe user info is nullThe host is www.oreilly.comThe port is -1The path is The ref is nullThe query string is nullThe URL is http://www.ibiblio.org/nywc/compositions.phtml?category=PianoThe scheme is httpThe user info is nullThe host is www.ibiblio.orgThe port is -1The path is /nywc/compositions.phtmlThe ref is nullThe query string is category=PianoThe URL is http://admin@www.blackstar.com8080/The scheme is httpThe user info is adminThe host is www.blackstar.com8080The port is -1The path is /The ref is nullThe query string is null本文链接: 分解URL]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[相对URL]]></title>
    <url>%2Fblog%2F903a0cbc%2F</url>
    <content type="text"><![CDATA[摘要:相对URLURL类相对URLURL可以告诉Web浏览器一个文档的大量信息:用于获取此文档的协议,文档所在的主机,以及文档在该主机上的路径。大多数信息可能与该文档中引用的其他URL相同。因此,并不要求完整地指定每一个URL,URL可以继承其父文档(即这个URL所在的文档)的协议、主机名和路径。如果继承了父文档的部分信息,这些不完整的URL称为相对URL( relative URL)。相反,完整指定的URL称为绝对URL( absolute URL)。在相对URL中,可以认为缺少的各个部分都与所在文档的URL中对应的部分相同。例如,假设在浏览http://www.ibiblio.org/javafag/javatutorial.html时单击这个超链接:&lt;a href=&quot;javafaq.html&quot;&gt;浏览器从http://ww.ibiblio.org/javafag/javatutorial.html末尾截去javatutorial.html,得到http://ww.ibiblio.org/javafag/然后将javafaq.html附加到http://www.ibiblio.org/javafaq/末尾,得到http://www.ibiblio.org/javafaq/javafaq.html。最后加载这个文档。如果相对链接以“/”开头,那么它相对于文档根目录,而不是相对于当前文件。因此如果浏览hp:/ ww. ibiblio. orgljavafaqljavatutorial.hm时单击下面的链接:&lt;a href=&quot;/projects/ipv6/&quot;&gt;浏览器会从http://ww.ibiblio.org/javafag/javatutorial.html末尾去掉/javafag/javatutorial.html,得到http://ww.ibiblio.org然后将/projects/ipv6/附加到http://ww.ibiblio.org末尾,得到http://ww.ibiblio.org/projects/ipv6/。最后加载这个文档。相对URL有很多优点。首先可以减少录入,不过这一点并不太重要。更重要的是,相对URL允许用多种协议来提供一个文档树:例如,HTTP和FTP。HTTP可能用于直接浏览,FTP可以用于镜像网站。最重要的一点是,相对URL允许将整个文档树从一个网站移动或复制到另一个网站,而不会破坏所有的内部链接。URL类java.net.URL类是对统一资源定位符(如http://www.lolcats.com/或ftp://ftp.redhat,com/pub/)的抽象。它扩展了java.lang.Object,是一个final类,不能对其派生子类。它不依赖于继承来配置不同类型URL的实例,而使用了策略( strategy)设计模式。协议处理器就是策略,URL类构成上下文,通过它来选择不同的策略。虽然把URL存储为字符串会很简单,但将URL作为对象考虑会很有帮助,这个URL对象的字段包括模式(也就是协议)、主机名、端口、路径、查询字符串和片段标识符(也称为ref),每个字段可以单独设置。实际上,java.net.URL类正是这样组织的,虽然不同版本Java之间在细节上稍有差别。URL是不可变的。构造一个URL对象后,其字段不再改变。这有一个副作用:可以保证它们是“线程安全”的。创建新的URL与第4章的 InetAddress对象不同,你可以构造 java.net.URL的实例。不同构造函数所需的信息有所不同:方法描述URL(String spec)根据 String 表示形式创建 URL 对象。URL(String protocol, String host, int port, String file)根据指定 protocol、host、port 号和 file 创建 URL 对象。URL(String protocol, String host, int port, String file, URLStreamHandler handler)根据指定的 protocol、host、port 号、file 和 handler 创建 URL 对象。URL(String protocol, String host, String file)根据指定的 protocol 名称、host 名称和 file 名称创建 URL。URL(URL context, String spec)通过在指定的上下文中对给定的 spec 进行解析创建 URL。URL(URL context, String spec, URLStreamHandler handler)通过在指定的上下文中用指定的处理程序对给定的 spec 进行解析来创建 URL。使用哪个构造函数取决于你有哪些信息以及信息的形式。如果试图为一个不支持的协议创建URL对象,或者如果URL的语法不正确,所有这些构造函数都会抛出一个MalformedURLException异常。支持哪些协议取决于具体实现。所有虚拟机都支持的协议只有http和file,而且后者名声很不好。如今Java还支持https、jar和ftp。一些虚拟机还支持 mailto和 gopher,以及一些定制协议如doc、 netdoc、 systemresouce和Java在内部使用的 verbatim。提示:如果某个VM不支持你需要的协议,可以为该模式安装一个协议处理器( protocolhandler),使URL类支持这个协议。在实际中,这种方法带来的麻烦远甚于它带来的好处。最好使用一个库,提供专门支持该协议的一个定制API。除了验证能否识别URL模式外,Java不会对它构造的URL完成任何正确性检查。程序员要负责确保所创建的URL是合法的。例如,Java不会检查 Http URL中的主机名中是否包含空格,或者查询字符串是否是x-www-form-URL-encoded。它不检查 mailto URL是否真正包含一个电子邮件地址。你完全可以为不存在的主机创建URL,或者可以为尽管存在但不允许连接的主机创建URL。从字符串构造URL最简单的URL构造函数只接受一个字符串形式的绝对URL作为唯一的参数:1public URL(String url) throws MalformedURLException与所有构造函数一样,这个函数只能在new操作符后调用,另外同样类似于所有其他URL构造函数,它可能会抛出MalformedURLException异常。下面的代码根据一个 String构造一个URL对象,并捕获可能抛出的异常:1234567try&#123; URL u=new URL("http://www.audubon.org/");&#125;catch(MalformedURLException ex)&#123; System.err.println(ex);&#125;示例5-1是一个很简单的程序,用来确定一个虛拟机支持哪些协议。它尝试为所有15种协议分别构造一个URL对象,这包括8种标准协议,不同 Java API的3种定制协议和Java在内部使用的4种协议(无相关文档)。如果构造函数成功,则说明这个协议得到支持。否则,抛出一个MalformedURLException异常,由此可知虚拟机不支持这个协议。示例5-1:虚拟机支持哪些协议?123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.net.*;public class ProtocolTester &#123; public static void main(String[] args) &#123;// hypertext transfer protocol testProtocol("http://www.adc.org");//超文本传输协议// secure http 安全http协议 testProtocol("https://www.amazon.com/exec/obidos/order2/");// file transfer protocol 文件传输协议 testProtocol("ftp://ibiblio.org/pub/languages/java/javafaq/");// Simple Mail Transfer Protocol 简单邮件协议 testProtocol("mailto:elharo@ibiblio.org");// telnet testProtocol("telnet://dibner.poly.edu/");// local file access testProtocol("file:///etc/passwd");// gopher testProtocol("gopher://gopher.anc.org.za/");// Lightweight Directory Access Protocol 轻量组目录访问协议 testProtocol( "ldap://ldap.itd.umich.edu/o=University%20of%20Michigan,c=US?postalAddress");// JAR testProtocol( "jar:http://cafeaulait.org/books/javaio/ioexamples/javaio.jar!" + "/com/macfaq/io/StreamCopier.class");// NFS,Network File System 网络文件系统 testProtocol("nfs://utopia.poly.edu/usr/tmp/");// a custom protocol for JDBC JDCB的定制协议 testProtocol("jdbc:mysql://luna.ibiblio.org:3306/NEWS"); //远程方法调用的定制协议// rmi, a custom protocol for remote method invocation testProtocol("rmi://ibiblio.org/RenderEngine");// custom protocols for HotJava HotJava的定制协议 testProtocol("doc:/UsersGuide/release.html"); testProtocol("netdoc:/UsersGuide/release.html"); testProtocol("systemresource://www.adc.org/+/index.html"); testProtocol("verbatim:http://www.adc.org/"); &#125; private static void testProtocol(String url) &#123; try &#123; URL u = new URL(url); System.out.println(u.getProtocol() + " is supported"); &#125; catch (MalformedURLException ex) &#123; String protocol = url.substring(0, url.indexOf(':'));//获取协议名称 System.out.println(protocol + " is not supported"); &#125; &#125;&#125;程序的结果取决于运行这个程序的虚拟机。以下是 Mac Os X上Java7的结果:12345678910111213141516http is supportedhttps is supportedftp is supportedmailto is supported telnet is not supportedfile is supportedgopher is not supportedldap is not supportedjar is supportednfs is not supportedjdbc is not supportedrmi is not supporteddoc is not supportednetdoc is supportedsystemresource is not supportedverbatim is not supported这里显示不支持RMI和JDBC,这实际上不太正确。事实上,JDK的确支持这些协议。不过,这两个协议分别通过 java.rmi和java.sql包来支持,而无法跟其他支持协议一样可以通过URL来访问(但是我实在不明白,如果Sun不想通过Java处理URL的复杂机制来与RM和JDBC交互,为什么还要为RM和JDBC参数包裹上URL的外衣)。其他Java7虚拟机会显示类似的结果。并非来自 Oracle代码基的虚拟机所支持的协议可能有些不同。例如Android的DalvikVM只支持http,https,file,ftp和jar协议。由组成部分构造URL还可以通过指定协议、主机名和文件来构建一个URL:1public URL(String protocol, String hostname, String file)throws MalformedURLException这个构造函数将端口设置为-1,所以会使用该协议的默认端口。file参数应当以斜线开头,包括路径、文件名和可选的片段标识符。有可能会忘记最前面的斜线,这是一个很常见的错误,而且这个错误不容易发现。与所有URL构造函数一样,它可能会抛出MalformedURLException异常。例如:1234567try&#123; URL u=new URL("http","www.eff.org","/blueribbon.html#intro");&#125;catch(MalformedURLException ex)&#123; throw new RuntimeException("should't happen; all VMs recognize http");&#125;这会创建一个URL对象,指向http://www.eff.org/blueribbon.html#intro,并使用HTTP的默认端口(端口80)。文件规范包括指定锚的一个引用。如果虚拟机不支持HTTP,这个代码会捕获可能抛出的异常。不过,这在实际中不会发生。在很少见的一些情况下,默认端口不正确时,下一个构造函数允许用一个int显式指定端口。其他参数都是一样的。例如,下面的代码段会创建一个指向http://fourier.dur.ac.uk:8000/~dma3mjh/jsci的URL对象,这里显式地指定了端口8000：12345678try&#123; URL u=new URL("http","fourier.dur.ac.uk",8000,"/~dma3mjhh/jsci/");&#125;catch(MalformedURLException ex)&#123; throw new RuntimeException("should't happen; all VMs recognize http");&#125;构造相对URL这个构造函数根据相对URL和基础URL构建一个绝对URL:1public URL(URL base, String relative) throws MalformedURLException例如,你可能正在解析HTML文档http://www.ibiblio.org/javafaq/index.html,并遇到一个名为 mailinglists.html的文件链接,但没有进一步的限定信息。这时,可以用包含该链接的文档的URL来提供缺少的信息。这个构造函数会计算出新的URL为http://www.ibiblio.org/javafaq/mailinglists.html。例如:123456789try&#123; URL u1=new URL("http://www.ibiblio.org/javafaq/index.html"); URL u2=new URL(u1,"mailinglists.html");&#125;catch(MalformedURLException ex)&#123; System.err.println(ex);&#125;将文件名从u1的路径中去除,追加新文件名 mailinglists.html得到u2。如果希望循环处理位于同一个目录下的一组文件,这个构造函数特别有用。可以为第一个文件创建一个URL,然后使用这个初始URL,通过替代文件名来创建其他文件的URL对象。其他URL对象来源除了这里讨论的构造函数,Java类库中的其他一些方法也返回URL对象。在 applet中,getDocumentBase()会返回包含这个 applet的页面的URL, getCodeBase()会返回 applet.class件的URL。java.io.File类有一个 toURL()方法,它返回与指定文件匹配的fie URL。这个方法所返回URL的具体格式与平台相关。例如,在 Windows上,它可能返回类似file:/D:/JAVA/JNP4/05/ToURLTest.javal的URL。在 Linux和其他UNX上,可能会看到file:/home/elharo/books/JNP4/05/ToURLTest.java。实际上, file URL非常依赖于平台和程序。 Java file URL通常不能与用于web浏览器和其他程序使用的URL互换,甚至不能与不同平台上运行的Java程序互换。类加载器不仅用于加载类,也能加载资源,如图片和音频文件。静态方法ClassLoader.getSystemResource(String name)返回一个URL,通过它可以读取一个资源。ClassLoader.getSystemResources(string name)方法返回一个 Enumeration,其中包含一个URL列表,通过这些URL可以读取指定的资源。最后,实例方法getResource(String name)会在所引用类加载器使用的路径中搜索指定资源的URL。这些方法返回的URL可能是 file URL、 Http URL或其他模式。资源的完全路径是用包限定的Java名,这里要用斜线而不是点,例如/com/macfaq/sounds/swale.au或com/macauimages/headshot.jpg。Java虚拟机会尝试在类路径中査找所请求的资源,很可能在一个JAR归档文件中。类库中还有其他一些方法可以返回URL对象,但大多数是简单的获取方法,只返回一个你可能已经知道的URL,因为一开始就是用它来构造这个对象,例如java.swing.JEditorPane的 getPage()方法和 java.net.URLConnection的 getURL()方法。从URL获取数据仅仅有URL并不太让人兴奋。大家关心的是URL所指向的文档中包含的数据。URL类有几个方法可以从URL获取数据:12345public InputStream openStream() throws IOExceptionpublic URLConnection openConnection() throws IOExceptionpublic URLConnection openConnection(Proxy proxy) throws IOExceptionpublic Object getContent() throws IOExceptionpublic Object getContent(Class[] classes) throws IOException这些方法中,最基本也是最常用的是 openStream(),它会返回一个 InputStream,可以从这个流读取数据。如果需要更多地控制下载过程,应当调用 openConnection(),这会提供一个可以配置的 URLConnection,再由它得到一个 InputStream。我们将在第7章讨论这个方法。最后,可以用 getContent()向URL请求其内容,这会提供一个更完整的对象,如 String或 Image。同样的,它也会给出一个 InputStream。1public final InputStream open Stream() throws IOExceptionopenStream()方法连接到URL所引用的资源,在客户端和服务器之间完成必要的握手,返回一个 InputStream,可以由此读取数据。从这个InputStream获得的数据是URL引用的原始内容(即未经解释的内容): 如果读取 ASCII文本文件则为ASCII;如果读取HTML文件则为原始HTML,如果读取图像文件则为二进制图片数据等。它不包括任何HTTP首部或者与协议有关的任何其他信息。可以像读取任何其他Inputstream样读取这个 Inputstream。例如:1234567891011121314try&#123; URL u=new URL("http://www.lolcats.com"); InputStream in=u.openStream(); int c; while((c=in.read())!=-1) &#123; System.out.write(c); &#125;&#125;catch(IOException ex)&#123; System.err.println(ex);&#125;这段代码捕获IOException异常,它还会捕获URL构造函数可能抛出的MalformedURLException异常,因为 MalformedURLException是 IOExceptionl的子类。与大多数网络流一样,要想可靠地关闭流,需要下点工夫。在Java6及之前版本中,我们使用了释放模式:在try块外声明流变量,并将它设置为null,然后在 finally块中,如果流变量非nul,则将它关闭。例如:12345678910111213141516171819202122232425InputStream in=null;try&#123; URL u=new URL("http://www.lolcats.com"); in =u.openStream(); int c; while((c=in.read())!=-1) &#123; System.out.write(c); &#125;&#125;catch(IOEception ex)&#123; System.err.prinln(ex);&#125;finally&#123; try &#123; if(in!=null) &#123; in.close(); &#125; &#125;catch(IOException ex)&#123; //忽略 &#125;&#125;Java7更为简洁,可以使用一个嵌套的try-with- resources语句语句:12345678910111213try&#123; URL u=new URL("http://www.lolcats.com"); //try-with- resources语句 try(InputStream in=u.openStream();) &#123; int c; while((c=in.read())!=-1) System.out.write(c); &#125;catch(IOException ex) &#123; System.err.println(ex); &#125;&#125;示例5-2从命令行读取一个URL,从这个URL打开一个 Inputstream,将得到的 Inputstream串链到使用默认编码方式的 InputStreamReader,然后使用InputStreamReader的read()方法从文件读取连续的字符,将各个字符显示在 System.out上。也就是说,如果URL引用一个HTML文件,它会显示位于这个URL的原始数据:程序的输出将是原始HTML。示例5-2:下载一个Web页面1234567891011121314151617181920212223242526272829303132333435363738394041import java.io.*;import java.net.*;public class SourceViewer &#123; public static void main (String[] args) &#123; if (args.length &gt; 0) &#123; InputStream in = null; try &#123;// Open the URL for reading URL u = new URL(args[0]); in = u.openStream();//取得InputStream// buffer the input to increase performance in = new BufferedInputStream(in);//使用缓冲的输入流// chain the InputStream to a Reader Reader r = new InputStreamReader(in);//包装读取流 int c; while ((c = r.read()) != -1) &#123; System.out.print((char) c); &#125; &#125; catch (MalformedURLException ex) &#123; System.err.println(args[0] + " is not a parseable URL"); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; finally &#123; if (in != null) &#123; try &#123; in.close(); &#125; catch (IOException e) &#123;// ignore &#125; &#125; &#125; &#125; &#125;&#125;下面是Sourceviewer下载https://www.oreilly.com时输出的前几行:1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;O&apos;Reilly Media - Technology and Business Training&lt;/title&gt; &lt;meta name=&quot;description&quot; content=&quot;Gain technology and business knowledge and hone your skills with learning resources created and curated by O&apos;Reilly&apos;s experts: live online training, video, books, conferences, our platform has content from 200+ of the world鈥檚 best publishers.&quot; /&gt; &lt;meta name=&quot;date&quot; content=&quot;2018-09-18&quot; /&gt; &lt;meta name=&quot;search_date&quot; content=&quot;2018-06-28&quot; /&gt; &lt;meta name=&quot;search-title&quot; content=&quot;O&apos;Reilly Media - Technology and Business Training&quot; /&gt; &lt;meta name=&quot;pagename&quot; content=&quot;O&apos;Reilly Media - Technology and Business Training&quot; /&gt;......这个Web页面中还有很多行;如果想查看,可以在你的Web浏览器中自行查看。这个程序最不可靠的部分是,它轻率地假定URL指向文本,而这不一定正确。它很可能指向GIF或JPEG图像、MP3声音文件或者其他内容。即使确实解析为文本,文档编码方式也可能与客户端系统的默认编码方式不同。远程主机和本地客户端可能采用不同的默认字符集。一般来讲,如果页面使用了与ASCII完全不同的字符集,HTML会在首部包括一个META标记,指示所使用的字符集。例如,下面的META标记指示了中文的Big-5编码方式:1&lt;meta http-equiv="Content-Type" content="text/html; charset=big5"&gt;XML文档则可能有一个XML声明:1&lt;?xml version="1.0" encoding="Big5"?&gt;实际上,除了解析文件,查找类似这样的首部,并没有一种简单的方法可以得到这个信息,而且即使采用这种方法,也存在局限性。许多用拉丁字母手工编码的HTML文件没有这样的META标记。由于 Windows、Mac和大多数UNIX对128到255的字符解释都稍有不同,所以除了创建这些文档的平台外,在其他平台上将无法正确地解释这些文档中的扩展字符。更添乱的是,实际文档前面的HTTP首部可能还有自己的编码信息,这可能与文档本身声明的编码完全不同。不能使用URL类读取这个首部,但可以利用 openConnection()方法返回的 URLConnection对象来读取。编码方式的检测和声明是Web体系结构中比较棘手的问题之一。1public URLConnection openConnection() throws IOEXceptionopenConnection()方法为指定的URL打开一个socket,并返回一个 URLConnection对象。URLConnection表示一个网络资源的打开的连接。如果调用失败,则 openConnection()会抛出一个 IOEXception异常。例如:12345678910111213141516try&#123; URL u=new URL("https://news.ycombinator.com/"); try &#123; URLConnection uc=u.openConnection(); InputStream in=uc.getInputStream(); //从连接读取... &#125;catch(IOException ex) &#123; System.err.prinln(ex); &#125;catch(MalformedURLException ex) &#123; System.err.prinln(ex); &#125;&#125;如果希望与服务器直接通信,应当使用这个方法。通过 URLConnection,你可以访问服务器发送的所有数据:除了原始的文档本身外(如HTML、纯文本、二进制图像数据),还可以访问这个协议指定的所有元数据。例如,如果模式是HTTP或HttPS,URLConnection允许你访问HTTP首部以及原始HTML。除了从URL读取,URLConnection还允许你向URL写入数据,例如,向一个 mailto URL发送电子邮件,或者提交表单数据。 URLConnection是第7章将介绍的主要内容。这个方法有一个重载版本,可以指定通过哪个代理服务器传递连接:1public URLConnection openConnection(Proxy proxy) throws IOException这会覆盖用平常socksProxyhost,socksProxyPort,http.proxyHost,http.proxyPort,http.nonProxyhosts和类似系统属性设置的任何代理服务器。如果协议处理器不支持代理,这个参数将被忽略,如果可能将直接建立连接。1public final Object getcontent() throws IOExceptiongetContent()方法是下载URL引用数据的第三种方法。 getContent()方法获取由URL引用的数据,尝试由它建立某种类型的对象。如果URL指示某种文本(如ASCI或HTML文件),返回的对象通常是某种 Inputstream。如果URL指示一个图像(如GIF或JPEG文件), getContent()通常返回一个java.awt. ImageProducer。这两个不同的类有一个共同点,它们本身并不是数据对象,而是一种途径,程序可以利用它们构造数据对象:1234URL u=new URL("http://mesola.obspm.fr/");Object o=u.getContent();//将Object强制转换为适当的类型。//处理这个Object...getContent()的做法是,在从服务器获取的数据首部中查找 Content-type字段。如果服务器没有使用MIME首部,或者发送了一个不熟悉的 Content-type, getContent()会返回某种 Inputstream,可以通过它读取数据。如果无法获取这个对象,就会抛出一个IOException异常,如示例5-3所示。示例5-3:下载一个对象12345678910111213141516171819202122import java.io.*;import java.net.*;public class ContentGetter &#123; public static void main (String[] args) &#123; if (args.length &gt; 0) &#123;// Open the URL for reading try &#123; URL u = new URL(args[0]); Object o = u.getContent(); System.out.println("I got a " + o.getClass().getName()); &#125; catch (MalformedURLException ex) &#123; System.err.println(args[0] + " is not a parseable URL"); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; &#125; &#125;&#125;下面是尝试获得http://www.oreilly.com内容时的结果:12&gt;java ContentGetter http://www.oreilly.comI got a sun.net.www.protocol.http.HttpURLConnection$HttpInputStream具体的类可能因为Java的版本不同而有所区别(较早版本中是io.PushbackInputStream或sun.net.www.http.KeepAliveStream),不过至少应当种形式的InputStream。下面是尝试加载图像时的结果:12&gt;java ContentGetter https://avatar.csdn.net/C/B/8/1_qq_21808961.jpg?1537341372I got a sun.awt.image.URLImageSource下面是尝试用 getcontent()加载一个 Java applet时的结果:123%java Contentgetter http://www.cafeaulait.org/relativeuRltest.class&lt;/userinput&gt;I got a sun.net.www.protocol.http.HttpURLConnection$HttpInputStream&lt;/programlisting&gt;(注：我的电脑上上面跑的结果是不对的，上面的URL失效了吧，但是没必要深入的看结果，了解功能就行了。)下面是当尝试用 getContent()加载一个音频文件时的结果:12&gt;java ContentGetter https://music.163.com/song?id=421137682I got a sun.net.www.protocol.http.HttpURLConnection$HttpInputStream最后的结果最不常见,因为这就像Java核心API访问一个表示声音文件的类。它不只是用来加载声音数据的接口。这个例子显示出使用 getContent()最大的问题:很难预测将获得哪种对象。可能得到某种 Inputstream或 ImageProducer,或者可能是 AudioClip,用 instanceof操作符很容易检查。这个信息对于读取文本文件或显示一个图像应该足够了。1public final Object getContent(Class[] classes) throws IOExceptionURL的内容处理器可以提供一个资源的不同视图。 getContent()方法的这个重载版本允许你选择希望将内容作为哪个类返回。这个方法尝试以第一种可用的格式返回URL的内容。例如,如果首选将HTML文件作为一个 String返回,而第二个选择是 Reader,第三个选择是 Inputstream,可以编写以下代码：123456URL u=new URL("http://www.nmu.org");Class&lt;?&gt;[] types =new Class[3];types[0]=String.class;types[1]=Reader.class;types[2]=InputStream.class;Object obj=u.getContent(types);如果内容处理器知道如何返回资源的一个字符串表示,它就会返回一个 String。如果它不知道如何返回资源的字符串表示,则返回 Reader。倘若它也不知道如何将资源表示为一个读取器,那么它将返回 Inputstream。必须用 instanceof检查返回的对象的类型。例如:12345678910111213141516171819202122232425if(o instanceof String)&#123; System.out.prinln(o);&#125;esle if(o instanceof Reader)&#123; int c; Reader r=(Reader)o; while((c=r.read())!=-1) &#123; System.out.print((char) c); &#125; r.close();&#125;else if(o instanceof InputStream)&#123; int c; InputStream in=(InputStream) o; while((c=in.read())!=-1)System.out.write(c); in.close();&#125;else&#123; System.out.println("Error:unexpected type "+o.getClass());&#125;本文链接: 相对URL]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[第五章 URL和URI]]></title>
    <url>%2Fblog%2F487e88c6%2F</url>
    <content type="text"><![CDATA[第4章中,你学习了如何通过主机名和IP地址确定主机在 Internet的地址。这一章我们将提高力度,进一步学习如何确定资源的地址,任何给定主机上可能会有任意多个资源。HTML是一个超文本( hypertext)标记语言,因为它提供了一种方法,可以指定URL标识的其他文档的链接。URL可以唯一地标识一个资源在 Internet上的位置。URL是最常见的URI,即统一资源标识符( Uniform Resource Identifier)。URI可以由资源的网络位置来标识资源(如URL),也可以由资源的名字、编号或其他特性来标识。URI统一资源标识符( Uniform Resource Identifier,URI)是采用一种特定语法标识一个资源的字符串。所标识的资源可能是服务器上的一个文件。不过,也可能是一个邮件地址新闻消息、图书、人名、 Internet主机、 Oracle的最新股价或者任何其他内容。资源是由URI标识的内容。URI则是标识一个资源的字符串。没错,这里构成了一个环。不要花太多时间去考虑资源是什么或者不是什么,因为你根本不会看到资源。从服务器接收到的只是资源的一种字节表示。不过一个资源可能有多种不同的表示。例如,https://www.un.org/en/documents/udhr/标识了人权宣言( Universal Declaration of HumanRights),不过这个宣言还有纯文本、XML、PDF和其他格式的表示。另外,这个资源还有英语、法语、阿拉伯语和很多其他语言的表示。其中有些表示本身就是资源。例如,https://www.un.org/en/documents/udhr/特别标识了英语版本的人权宣言。提示:好的Web体系结构的重要原则之一就是要充分使用URI。如果有人想要得到某个资源的地址,或者想要指示某个资源,可以提供一个URI(实际上是URL)。如果一个资源是另个资源的一部分,或是其他资源的一个集合,或者是另一个资源在某个特定时刻的状态,它也完全可以有自己的URI。例如,在一个邮件服务中,每个用户、接收到的每个消息发送的每个消息、收件箱的每个过滤视图、每个联系人、每个过滤规则,以及用户可能查看的每一个页面都要有一个唯一的URI。尽管按层次构建的URI是一些很晦涩的字符串,不过实际中可以用人可读的子结构来设计。例如,https://mail.example.com/可能是一个特定的邮件服务器,http://mail.example.com/johndoe可能是这个服务器上John Doe的邮箱http://mail.example.com/johndoe?messageID=162977.l361 .JavaMail.nobody%40meetup.com则是这个邮箱中的一个特定的消息。URI的语法由一个模式和一个模式特定部分组成,模式和模式特定部分用一个冒号分隔,如下所示:1模式:模式特定部分模式特定部分的语法模式特定部分的语法取决于所用的模式。当前的模式包括:data链接中直接包含的Base64编码数据,参见RFC2397。file本地磁盘上的文件ftpFTP服务器。http使用超文本传输协议的国际互联网服务器mailto电子邮件地址。magnet可以通过对等网络(如 BitTorrent)下载的资源teInet与基于 Telnet的服务的连接。urn统一资源名( Uniform Resource Name,URN)。此外,Java还大量使用了一些非标准的定制模式,如rmi、jar、jndi和doc,来实现各种不同用途。URI中的模式特定部分并没有特定的语法。不过,很多都采用一种层次结构形式,如:1//authority/path?query这个URI的 authority部分指定了负责解析该URl其余部分的授权机构(authority)。例如。URI http://www.ietf.org/rfc/rfc3986.txt的模式为http,授权机构为www.ietf.org,另外路径为/rfc/rfc3986.txt(包括前面的斜线)。这表示位于www.ietf.org的服务器负责将路径/rfc/rfc3986.txt映射到一个资源。这个URI没有查询部分。URI http://www.powells.com/cgi-bin/biblio?inkey=62-1565928709-0的模式为http授权机构为www.powells.com路径为/cgi-bin/biblio,另外查询为 inkey=62-1565928709-0。URI urn:isbn:156592870模式为un,但模式特定部分没有采用层次结构的 authority/path?query形式尽管当前大多数的URI例子都使用 Internet主机作为授权机构,不过未来的模式可能不是这样。但是,如果授权机构是 Internet主机,那么还可以提供可选的用户名和端口,使授权机构更为特定。例如,URL ftp://mp3:mp3@ci43198-a.ashville.nc.home.com:33/VanHanen-Jump.mp3的授权机构是mp3:mp3@ci43198-a.ashville.nc.home.com:33/。这个授权机构有用户名mp3、口令mp3、主机ci43198-a.ashville.nc.home.com和端口33。它的模式是ftp,路径是/VanHanen-Jump.mp3(在大多数情况下,在URI中包含口令是一个很大的安全漏洞,除非像这里一样,你确实想让全世界所有人都知道口令)。路径是授权机构用来确定所标识资源的字符串。不同的授权机构可能会把相同的路径解释为指向不同的资源。例如,授权机构是www.landoverbaptist.org 时,路径/index.html可能表示某个资源,而授权机构是www.churchofsatan.com时,路径/index.html则可能表示完全不同的一个资源。路径可以是分层的,在这种情况下,各个部分之间用斜线分隔。“.”和“.”操作符用于在这个层次结构中导航。这是从UNIX操作系统的路径名语法继承而来的(web和URL都是在UNIX下发明的)。它们可以很方便地映射到存储在一个 UNIX Web服务器上的文件系统。不过,不能保证任何特定路径的所有部分都能实际对应到特定文件系统的文件或目录。例如,在URI http://www.amazon.com/exec/obidos/ISBN%3D565924851/cafeaulait002-377705-3043449中,这个层次结构的所有部分只是用来从数据库提取信息，并不存储在文件系统中。ISBN%3D565924851根据ISBN号从数据库选择某本书, cafeaulaitA指定如果由此链接完成一次交易谁将获得推荐费,而002-3777605-3043449是一个会话密钥,用来跟踪访问者在网站中所走过的路径。有些URI并不分层,至少在文件系统意义上是如此。例如, snews://secnews.netscape.com/netscape.devs-java的路径为/netscape.devs-java。虽然由 netscape和devs-java之间的“.”指示新闻组名存在层次性,但这并未编码为URI的一部分。模式部分由小写字母、数字和加号、点及连号符组成。典型URI的其他三部分(授权机构、路径和查询)分别由ASCII字母数字符号组成(即字母A-Z、a-z和数字0-9)。此外,还可以使用标点符号-,_,.,!和~。定界符(如/,?,&amp;和=)可以有其预定义的用途。所有其他字符,包括非ASCI字母数字(如和乙),应当用百分号(%)转义,其后是该字符按UTF-8编码的十六进制码,另外一些定界符实际上没有用作为定界符,那么也需要这样转义。例如在UTF-8中,a是2字节0xC3 0xA1,所以要编码为%c3%a1。汉字“木”的 Unicode码点为0x6728。在UTF-8中,这会编码为3字节E6,9C和A8。因此,它在URI中编码为%E6%9C%A8。如果你没有像这样将非ASCII字符编码为十六进制码,而是将它们(非ASCII)直接包含在URI中,那么你得到的不是一个URI,而是IRI(国际化资源标识符, Internationalized resourceIdentifier)。IRI更容易录入,也更容易读,但是很多软件和协议只接受和支持URI。除非用于特定URL中的模式特定部分,否则诸如“/”和“@”等标点符号也必须编码,要用百分号转义。例如,URI http://www.cafeaulait.org/books/javaio2/中的斜线不需要编码为%2F,因为它们是按http URI模式所指定的方式分隔这个层次结构。不过,如果个文件名包括“/”字符,例如,如果为了与这本书的书名更为一致,将最后一个目录命名为 Java I/O而不是 javaio2,那么URI就必须写为http://www.cafeaulait.org/ books/Java%20I%2FO/。对于UNIX或 Windows用户而言,实际上并没有看上去那么牵强。Mac文件名经常包括一个斜线。许多平台上的文件名通常都包含需要编码的字符,包括@,$,+,=等。当然,一般情况下URL并非由文件名得来。URLsURL是一个URI,除了标识一个资源,还会为资源提供一个特定的网络位置,客户端可以用它来获取这个资源的一个表示。与之不同,通用的URI可以告诉你一个资源是什么,但是无法告诉你它在哪里,以及如何得到这个资源。在实际世界中,这就像书名《哈里波特与死亡圣器》与这本书在图书馆的具体位置“312室第28行第7个书架”之间的区别。在Java中,这就类似于 java.net.URI类(只标识资源)与 java.net.URL类(既能标识资源,又能获取资源)之间的差别。URL中的网络位置通常包括用来访问服务器的协议(如FTP、HTTP)、服务器的主机名或IP地址,以及文件在该服务器上的路径。典型的URL类似于http://www.ibiblio.org/javafag/javatutorial.html。它指示服务器www.ibiblio.org的Javafaq目录下有一个名为javatutorial.html的文件,这个文件可以通过HTTP访问。URL的语法URL的语法为:1protocol://userInfo@host:port/path?query#fragment协议(protocol)这里的协议( protocol)是对URI中模式( scheme)的另一种叫法( URI RFC中使用“模式”。Java文档中使用“协议”)。在URL中,协议部分可以是file,ftp,http,https,magnet,telnet或其他各种字符串(但不包括urn)。主机(host)URL的主机(host)部分是提供所需资源的服务器的名字。这可以是一个主机名,如www.oreilly.com或utopia.poly.edu,也可以是服务器的IP地址,如204.148.40.9或128.238.3.21。用户信息(userInfo)用户信息( userInfo)部分是服务器的登录信息(可选)。如果有这一部分,其中包含一个用户名,极少见的情况下还会包含一个口令。端口号(port)端口(port)号也是可选的。如果服务在其默认端口运行(HTTP服务器的默认端口是80),就不需要这个部分。用户信息、主机和端口合在一起构成权威机构(authority)。路径(path)路径(path)指向指定服务器上的一个特定目录。路径通常看上去类似一个文件系统路径,如/forum/ index.php。它可能确实映射到服务器上的一个文件系统,不过也有可能并不映射到一个文件系统。如果确实映射到一个文件系统,路径则相对于服务器的文档根目录,而不一定相对于服务器上文件系统的根目录。一般来讲,向公众开放的服务器不会将其整个文件系统展示给客户端,而是只展示指定目录中的内容。这个目录称为文档根目录,所有路径和文件名都相对于这个目录。因此,在UNIX服务器上,公众可用的所有文件可能位于/var/public/html,但是对于某个从远程机器连接的人来说,这个目录就好像是文件系统的根目录一样。查询(query)字符串查询(query)字符串向服务器提供附加参数。一般只在http URL中使用,其中包含表单数据,作为输入提供给在这个服务器上运行的程序。片段( fragment)最后,片段( fragment)指向远程资源的某个特定部分。如果远程资源是HTML,那么这个片段标识符将指定该HTML文档中的一个锚( anchor)。如果远程资源是XML,那么这个片段标识符是一个 X Pointer。有些文献将URL的片段部分称为“段”( section),Java文档则莫名其妙地把片段标识符称为“Ref”。片段标识符目标在HTML文档中用id属性创建,如:&lt;h3 id=&quot;xtocid1902914&quot;&gt;Comments&lt;/h3&gt;这个标记标识文档中的某个点。为了引用这个点,URL不仅要包括文档的文件名,还要包括片段标识符,与URL的其余部分用#隔开:http://www.cafeaulait.org/javafaq.html#xtocid1902914本文链接: 第五章 URL和URI]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第5章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一些有用的程序]]></title>
    <url>%2Fblog%2F8ffd9f6b%2F</url>
    <content type="text"><![CDATA[现在你已经了解了java.net.InetAddress类的有关知识。只使用这个类中的工具就能编写一些相当有用的程序。这里将看到两个例子:一个可以检查地址是否是一个已知的垃圾邮件发送者,另一个可以通过离线处理日志文件来提升web服务器的性能。SpamCheck很多服务会监视垃圾邮件发送者(spammer),并通知客户端试图与之连接的主机是否是一个已知的垃圾邮件发送者。这些实时黑洞列表(real-time blackhole lists,RBL)需要非常快地对查询做出响应,而且要处理相当大的工作负载。可能会有数千个甚至上百万个主机反复查询,查看试图建立连接的一个IP地址是否是一个已知的垃圾邮件发送者。这个问题的性质要求响应必须很快,理想情况下,还应该可以缓存。另外,负载应当分布到多个服务器上,最好是位于世界各地的不同服务器。看起来可以使用Web服务器SOAP、UDP、定制协议或者其他某种机制来实现,不过实际上只使用DNS就能巧妙地实现这个服务。要查看一个IP地址是否是一个已知的垃圾邮件发送者,可以逆置这个地址的字节,增加黑洞服务的域,然后查找这个地址。如果找到这个地址,说明它是一个垃圾邮件发送者。如果没有找到,就说明它不是。例如,如果你想向sbl.spamhaus.org询问207.8.34.17是否是一个垃圾邮件发送者,就要查找主机名17.34.87.207 sbl.spamhaus.org(需要说明,尽管这里包含数字部分,不过这是一个主机名ASCII字符串,而不是一个点分四段IP地址)。如果DNS査询成功(更确切地讲,如果它返回地址127.0.0.2),那么这个主机就是一个已知的垃圾邮件发送者。如果查找失败,也就是说,它抛出一个UnknownHostException,说明这个地址不是一个垃圾邮件发送者。示例4-9实现了这个检查。示例4-9: SpamCheck1234567891011121314151617181920212223242526272829303132333435import java.net.*;public class SpamCheck &#123; public static final String BLACKHOLE = "sbl.spamhaus.org"; public static void main(String[] args) throws UnknownHostException &#123; for (String arg: args) &#123; if (isSpammer(arg)) &#123; System.out.println(arg + " is a known spammer."); &#125; else &#123; System.out.println(arg + " appears legitimate."); &#125; &#125; &#125; private static boolean isSpammer(String arg) &#123; try &#123; InetAddress address = InetAddress.getByName(arg); byte[] quad = address.getAddress(); String query = BLACKHOLE; for (byte octet : quad) &#123; int unsignedByte = octet &lt; 0 ? octet + 256 : octet; query = unsignedByte + "." + query; &#125; InetAddress.getByName(query); return true; &#125; catch (UnknownHostException e) &#123; return false; &#125; &#125;&#125;以下给出一些示例输出:1234&gt;java SpamCheck 207.34.56.23 125.12.32.4 130.130.130.130207.34.56.23 appears legitimate.125.12.32.4 appears legitimate.130.130.130.130 appears legitimate.如果使用这个技术,要注意掌握黑洞列表策略和地址的变化。出于很明显的原因,黑洞服务器经常成为DDOS和其他攻击的目标,所以如果黑洞服务器改变了地址,或者停止响应任何查询,你不能因此阻塞所有通信。另外还要注意,不同的黑洞列表采用的协议可能稍有差别。例如,有些黑洞列表返回的垃圾邮件IP是1270.0.l而不是127.0.0.2。处理Web服务器日志文件web服务器日志会跟踪记录访问Web网站的主机。默认情况下,日志会报告连接服务器的网站的IP地址。不过,通常可以从网站的名字而不是其IP地址获得更多信息。大多数web服务器有一个选项,可以存储主机名而不是IP地址,不过这可能会影响性能,因为每次访问时服务器都需要做一个DNS请求。如果先记录IP地址,稍后在服务器不太忙时再转换为主机名,或者甚至干脆在另外一个机器上完成转换,这样效率会更高。示例4-10给出了一个名为 Weblog的程序,它读取Web服务器日志文件,显示各行时将IP地址转换为主机名。大多数web服务器都对常见的日志文件格式进行了标准化。常见日志文件格式中的一行般如下:1205.160.186.76 unknown - [17/Jun/2013:22:53:58 -0500] &quot;Get /bgs/greenbg.gif Http 1.0&quot; 200 50这一行指示位于IP地址205.160.186.76的Web浏览器在2013年6月17日下午11:53(58秒)访问这个Web服务器上的文件/ bgs/greenbg.gif。文件已找到(响应码200),向浏览器成功地传输了50字节数据。第一个域是IP地址,或者如果启用了DNS解析,则是要建立连接的主机名。接下来是一个空格。因此,对我们来说,解析日志文件很简单,第一个空格之前的都是IP地址,其后的内容不需要改变。点分四段格式IP地址使用java.net.InetAddress的常用方法转换为主机名。示例4-10展示了这些代码。示例4-10:处理Web服务器日志文件1234567891011121314151617181920212223242526272829303132import java.io.*;import java.net.*;public class Weblog &#123; public static void main(String[] args) &#123; try (FileInputStream fin = new FileInputStream(args[0]); Reader in = new InputStreamReader(fin); BufferedReader bin = new BufferedReader(in);) &#123; for (String entry = bin.readLine();entry != null;entry = bin.readLine()) &#123;// separate out the IP address int index = entry.indexOf(' '); String ip = entry.substring(0, index);//第一个空格之前的是IP地址 String theRest = entry.substring(index);//剩下的部分// Ask DNS for the hostname and print it out try &#123; //使用IP地址创建InetAddress对象 InetAddress address = InetAddress.getByName(ip); //输出主机名，和其他记录。 System.out.println(address.getHostName() + theRest); &#125; catch (UnknownHostException ex) &#123; System.err.println(entry); &#125; &#125; &#125; catch (IOException ex) &#123; System.out.println("Exception: " + ex); &#125; &#125;&#125;要处理的文件名作为命令行上的第一个参数传递给Weblog。从这个文件打开一个FileInputstream fin,并将一个 InputstreamReader串链至fin。这个 InputstreamReader通过串链到 BufferedReader类的一个实例进行缓冲。文件在一个for循环中逐行处理。每次循环时都会把一行放入 String变量 entry。然后 entry被分解成两个子串:ip以及theRest,ip包含第一个空格之前的所有内容, therest是第一个空格之后到字符串末尾的全部内容。第一个空格的位置由 entry. indexof(“ “)确定。子串ip使用 getByName()转换为一个 InetAddress对象。然后 getHostName()查询主机名。最后,在 System.out上显示主机名以及这一行的所有其他内容( therest)。输出可以通过标准输出重定向的方式,发送到新文件中。Weblog比你预想的更高效。大多数Web浏览器会对提供的每个网页生成多个日志文件项,因为不只是页面本身有一个日志项,页面中的每个图片也分别对应有一个日志项。很多访问者访问网站时会请求多个页面。DNS查找成本很高,如果每个网站每次出现在日志文件中时都要查找,这样做并不合适。 Inetaddress类会缓存请求过的地址。如果再次请求相同的地址,它可以从缓存中获取,这比从DNS获取要快得多。尽管如此,这个程序肯定还可以更快。在我最初的测试中,每个日志项花费的时间大于1秒(具体的数字取决于网络连接的速度、本地和远程DNS服务器的速度,以及程序运时的网络拥塞状况)。这个程序耗费了大量时间等待DNS返回请求,在此期间什么也不做。显然,这正是多线程设计所要解决的问题。可以由一个主线程读取日志文件,将各个日志项传递给其他线程进行处理。这里绝对需要一个线程池。经过几天之后,即使是低吞吐量的web服务器也会生成包含数百万行的日志文件。如果试图为每一项生成一个新的线程来处理这样一个日志文件,即使是最强大的虚拟机也会很快吃不消,特别是主线程读取文件项的速度要比各个线程解析域名并结束的速度快得多。因此,很有必要重用线程。线程数目存储在一个可调整的参数 numberOfThreads中,所以可以调整这个参数来满足VM和网络栈的需要(同时发起太多DNS请求也会出现问题)。现在程序分为两个类。第一个类 LookupTask如示例4-11所示,这是一个Callable类,它会解析一个日志文件项,查找一个地址,并把这个地址替换为相应的主机名。看上去好像没有太多工作,并不需要占用太多CPU,确实如此。不过,由于这里涉及网络连接,而且多个不同的DNS服务器之间可能还有一系列网络连接构成一个层次结构,所以有大量闲置时间,可以由其他线程更好地加以利用。示例4-11: LookupTask12345678910111213141516171819202122232425import java.net.*;import java.util.concurrent.Callable;public class LookupTask implements Callable&lt;String&gt; &#123; private String line; public LookupTask(String line) &#123; this.line = line; &#125; @Override public String call() &#123; try &#123;// separate out the IP address int index = line.indexOf(' '); String address = line.substring(0, index); //空格之前的是IP地址 String theRest = line.substring(index);//剩下的部分 String hostname = InetAddress.getByName(address).getHostName();//获取主机名 return hostname + " " + theRest; &#125; catch (Exception ex) &#123; return line; &#125; &#125;&#125;第二个类PooledWeblog如示例4-12所示,其中包含main()方法,它会读取文件,并为每行创建一个 LookupTask。各个任务提交给一个executor,它可以并行和串行运行多个(不过不是全部)任务。submit()方法返回的Future连同原来的行存储在一个队列中(以防异步线程中出错)。由一个循环从这个队列中读取值,并显示这些值。这样可以保持日志文件原来的顺序。示例4-12: PooledWebLog123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.io.*;import java.util.*;import java.util.concurrent.*;// Requires Java 7 for try-with-resources and multi-catchpublic class PooledWeblog &#123; private final static int NUM_THREADS = 4; public static void main(String[] args) throws IOException &#123; ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS); Queue&lt;LogEntry&gt; results = new LinkedList&lt;LogEntry&gt;(); try (BufferedReader in = new BufferedReader( new InputStreamReader(new FileInputStream(args[0]), "UTF-8")); )&#123; for (String entry = in.readLine(); entry != null; entry = in.readLine()) &#123; LookupTask task = new LookupTask(entry); Future&lt;String&gt; future = executor.submit(task); LogEntry result = new LogEntry(entry, future); results.add(result); &#125; &#125; // Start printing the results. This blocks each time a result isn't ready. for (LogEntry result : results) &#123; try &#123; System.out.println(result.future.get()); &#125; catch (InterruptedException | ExecutionException ex) &#123; System.out.println(result.original); &#125; &#125; executor.shutdown(); &#125; private static class LogEntry &#123; String original; Future&lt;String&gt; future; LogEntry(String original, Future&lt;String&gt; future) &#123; this.original = original; this.future = future; &#125; &#125;&#125;使用这样的线程允许并行地处理同一个日志文件,从而节省大量时间。在我不太科学的测试中,多线程版本比串行版本快10到50倍。但是我们的技术编辑在另一个系统上运行同样的测试,只看到4倍的速度提升。不过无论如何,这仍是一个不小的进步。这个设计还有一个缺点。与为每一个日志文件项生成一个线程相比,尽管Callable任务队列更为高效,但是日志文件可能很庞大,所以这个程序仍会占用大量内存。为避免这点,可以把输出放在一个单独的线程中,它与输入线程共享同一个队列。由于解析输入的同时可以处理和显示之前的日志文件项,所以队列不会膨胀得过大。但是这又会带来另一个问题。你需要一个单独的信号指示输出已经完成,因为空队列已经不足以证明任务已经完成。最容易的方法是统计输入行数,确保它与输出行数一致。本文链接: 一些有用的程序]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第4章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[NetworkInterface类]]></title>
    <url>%2Fblog%2F9dcd7732%2F</url>
    <content type="text"><![CDATA[NetworkInterface类表示一个本地IP地址。这可以是一个物理接口,如额外的以太网卡(常见于防火墙和路由器),也可以是一个虚拟接口,与机器的其他IP地址绑定到同个物理硬件。 NetworkInterface类提供了一些方法可以枚举所有本地地址(而不考虑接口),并由它们创建 InetAddress对象,然后这些 InetAddress对象可用于创建 socket、服务器 socket等。工厂方法由于 NetworkInterface对象表示物理硬件和虚拟地址,所以不能任意构造。与 Inetaddress类一样,有一些静态工厂方法可以返回与某个网络接口关联的NetworkInterface对象。可以通过IP地址、名字或枚举来请求一个 NetworkInterface。12public static NetworkInterface getByName(String name) throws SocketException //搜索具有指定名称的网络接口。getByName()方法返回一个 NetworkInterface对象,表示有指定名字的网络接口。如果没有这样一个接口,就返回null。如果在査找相关网络接口时底层网络栈遇到问题,会抛出一个 SocketException异常,不过这种情况不太可能发生。名字的格式与平台有关。在典型的UNIX系统上,以太网接口名的形式为eth0、eth1等。本地回送地址的名字可能类似于“1o”。在 Windows上,名字是类似“CE31”和“ELX100”的字符串,取自这个特定网络接口的厂商名和硬件模型名。例如,下面的代码段尝试找到UNIX系统上的主以太网接口:123456789101112try&#123; NetworkInterface ni= NetworkInterface.getByName ("etho"); if (ni == null) &#123; System.err.println("No such interface: etho"); &#125;&#125;catch(SocketException ex)&#123; System.err println("Could not list sockets.");&#125;12public static NetworkInterface getByInetAddress(InetAddress addr) throws SocketException 一个便捷方法，搜索绑定了指定 Internet 协议 (IP) 地址的网络接口。getByInetAddress()方法返回一个 NetworkInterface对象,表示与指定IP地址绑定的网络接口。如果本地主机上没有网络接口与这个IP地址绑定,就返回null。如果发生错误,就抛出一个 SocketException异常。例如,下面的代码段会找到本地回送地址的网络接口:1234567891011121314151617try&#123; InetAddress local= InetAddress getByName ("127.0.0.1"); NetworkInterface ni=NetworkInterface.getByInetAddress(local); if(ni == null) &#123; System.err.println("Thats weirlocal loopback address. " ) &#125;&#125;catch(SocketException ex)&#123; System.err.printIn("Could not list network interfaces. ");&#125;catch(UnknownHostException ex)&#123; System.err.println ("That's weird. Could not lookup 127.0.0.1.");&#125;12public static Enumeration&lt;NetworkInterface&gt; getNetworkInterfaces() throws SocketException返回此机器上的所有接口getNetworkInterfaces()方法返回一个java.util.Enumeration,这会列出本地主机上的所有网络接口。示例4-8是一个简单的程序,会列出本地主机上的所有网络接口:示例4-8:列出所有网络接口的程序1234567891011121314import java.net.*;import java.util.*;public class InterfaceLister &#123; public static void main(String[] args) throws SocketException &#123; Enumeration&lt;NetworkInterface&gt; interfaces = NetworkInterface.getNetworkInterfaces(); while (interfaces.hasMoreElements()) &#123; NetworkInterface ni = interfaces.nextElement(); System.out.println(ni); &#125; &#125;&#125;下面是在IBiblio登录服务器上运行这个程序的结果:123456name:eth1(eth1) index: 3 addresses:/192.168.210.122name:eth0(eth0) index: 2 addresses/152.2.210.122;name: lo (lo) index: 1 addresses:/127.0.0.1;你会看到这台主机有两个单独的以太网卡及本地回送地址。索引为2的以太网卡(eth)的IP地址是152.2.210.122,索引为3的以太网卡的IP地址是192.168210.122。与往常一样,回送地址(lo)为127.0.0.1。获取方法有了 NetworkInterface对象,就可以查询其IP地址和名字。这几乎是这些对象所能完成的唯一操作。12public Enumeration&lt;InetAddress&gt; getInetAddresses() 一个便捷方法，返回一个具有绑定到此网络接口全部或部分 InetAddress 的 Enumeration一个网络接口可以绑定多个IP地址。现在这种情况不太常见,但确实是存在的。getInetAddresses()方法返回一个java.util.Enumeration,其中对于与这个接口绑定的每一个IP地址都包含一个 InetAddress。例如,下面的代码段列出etho接口的所有IP地址:123456NetworkInterface etho= NetworkInterrface.getByName("etho");Enumeration addresses=etho.getInetAddresses();while(addresses.hasMoreElements())&#123; System. out. println(addresses.nextElement());&#125;1public String getName();//获取此网络接口的名称。getName()方法返回某个特定 NetworkInterface对象的名,如eth0或lo。12public String getDisplayName();//获取此网络接口的显示名称。显示名称是描述网络设备的可读字符串getDisplayName()方法声称可以返回特定 NetworkInterface的一个更友好的名字,类似于“ Ethernet Card0”。不过,根据我在UNx上的测试,它总是返回与 getName()同样的结果。在 Windows上,可以看到稍微友好一些的名字,如“ Local Area Connection”或Local Area Connection2”。本文链接: NetworkInterface类]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第4章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[工厂方法]]></title>
    <url>%2Fblog%2Fa778ad08%2F</url>
    <content type="text"><![CDATA[本文链接: 工厂方法]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第4章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Inet4Address和Inet6Address]]></title>
    <url>%2Fblog%2F86b74042%2F</url>
    <content type="text"><![CDATA[Java使用了两个类Inet4Address和Inet6Address,来区分IPv4地址和IPv6地址:12public final class Inet4Address extends InetAddresspublic final class Inet6Address extends InetAddress大多数情况下,你确实不必考虑一个地址是IPv4还是IPv6地址。因为在Java程序所在的应用层,完全不需要了解低层的细节(即使确实需要知道是IPv4还是IPv6,只需检查 netAddress()返回的字节数组的大小,如果是4个字节，就是IPv4,如果是16字节，那就是IPv6,这比使用 instanceof来测试地址是哪一个子类要快得多)。Inet4Address覆盖了InetAddress的几个方法,但没有以任何公共方式改变其行为。Inet6Address也类似,但加入了超类中未出现的一个新方法, isIPv4CompatibleAddress():1public boolean isIPv4CompatibleAddress();当且仅当地址实际上是填充在IPv6“容器”中的一个IPv4地址时,这个方法返回true,这意味着只有最后的4字节(最后四个字节对应IPv4地址)不是0。也就是说,地址的形式为0:0:0:0:0:0:0:xxxx。如果是这样,可以从 getBytes()返回的数组中提取最后4字节,用这个数据创建一个Inet4Address。不过,很少需要这样做。本文链接: Inet4Address和Inet6Address]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第4章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[测试可达性]]></title>
    <url>%2Fblog%2F24e1a183%2F</url>
    <content type="text"><![CDATA[InetAddress类有两个 isReachable()方法,可以测试一个特定节点对当前主机是否可达(也就是说,能否建立一个网络连接)。连接可能由于很多原因而阻塞,包括防火墙代理服务器、行为失常的路由器和断开的线缆等,或者只是因为试图连接时远程主机没有开机。1234public boolean isReachable(int timeout) throws IOException //测试是否可以达到该地址public boolean isReachable(NetworkInterface netif,int ttl,int timeout) throws IOException //测试是否可以达到该地址。这些方法尝试使用 traceroute(更确切地讲,就是 ICMP echo请求)查看指定地址是否可达。如果主机在 timeout毫秒内响应,则方法返回true;否则返回 false。如果出现网络错误则抛出 IOException异常。第二个方法还允许指定从哪个本地网络接口建立连接,以及“生存时间”(连接被丢弃前尝试的最大网络跳数)。Object方法与其他各个类一样,java.net.InetAddress继承自java.lang.Object。因此,它可以访问Object类的所有方法。它覆盖了3个方法来提供更特殊的行为:123public boolean equals(Object o)public int hashCode()public String toString()如果一个对象本身是 InetAddress类的实例,而且与一个 InetAddress对象有相同的IP地址,只有此时才会与该 InetAddress对象相等,并不要求这两个对象有相同的主机名。因此,www.ibiblio.org的InetAddress对象等于www.cafeaulait.org的InetAddress对象,因为这两个主机名指向相同的IP地址。示例4-7为www.ibiblio.org和helios.biblia.org创建InetAddress对象,然后指出它们是否为同一台机器。示例4-7:www.ibiblioorg和helios.ibiblio.org相同吗?123456789101112131415161718192021222324import java.net.*;public class IBiblioAliases &#123; public static void main (String args[]) &#123; try &#123; //使用域名实例化InetAddress对象 InetAddress ibiblio = InetAddress.getByName("www.ibiblio.org"); InetAddress helios = InetAddress.getByName("helios.ibiblio.org"); //判断两个对象是否相等(如果IP地址相等则两个对象相等) if (ibiblio.equals(helios)) &#123; System.out.println ("www.ibiblio.org is the same as helios.ibiblio.org"); &#125; else &#123; System.out.println ("www.ibiblio.org is not the same as helios.ibiblio.org"); &#125; &#125; catch (UnknownHostException ex) &#123; System.out.println("Host lookup failed."); &#125; &#125;&#125;运行这个程序时会发现:1www.ibiblio.org is the same as helios.ibiblio.org其实我电脑上运行的结果是两个不相同。可能已经改了域名和IP地址的映射关系。不过不要紧，就大致了解equals()方法是根据IP地址来判断就行了。hashCode()方法与 equals()方法一致。 hashCode()方法返回的int只根据IP地址来计算它不考虑主机名。如果两个 InetAddress对象有相同的地址,就会有相同的散列码,即使它们的主机名有所不同。与所有好的类一样,java.net.InetAddress有一个 toString()方法,可以返回对象的简单文本表示。示例4-1到示例4-2在将InetAddress)对象传递给 System.out.println()时都隐式调用了这个方法。如你所见,由 toString()生成的字符串有如下形式:主机名/点分四段地址不是所有 InetAddress都有主机名。如果没有,在Java1.3及以前版本中就替换为点分四段式地址。在Java1.4及以后版本中,主机名设置为空字符串。本文链接: 测试可达性]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第4章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[地址类型]]></title>
    <url>%2Fblog%2F6c3ef939%2F</url>
    <content type="text"><![CDATA[有些IP地址和地址模式有特殊的含义。例如,前面提到127.0.0.1是本地回送地址。224.0.0.0到239.255.255.255范围内的IPv4地址是组播地址,可以同时发送到多个订购的主机。Java提供了10个方法来测试 InetAddress对象是否符合其中某个标准:12345678910public boolean isAnyLocalAddress();//检查 InetAddress 是否是通配符地址的实用例行程序。public boolean isLoopbackAddress();//检查 InetAddress 是否是回送地址的实用例行程序public boolean isLinkLocalAddress();//检查 InetAddress 是否是链接本地地址的实用例行程序。public boolean isSiteLocalAddress();//检查 InetAddress 是否是站点本地地址的实用例行程序。public boolean isMulticastAddress();//检查 InetAddress 是否是 IP 多播地址的实用例行程序。public boolean isMCGlobal();//检查多播地址是否具有全局域的实用例行程序。 public boolean isMCNodeLocal();//检查多播地址是否具有节点范围的实用例行程序。public boolean isMCLinkLocal();//检查多播地址是否具有链接范围的实用例行程序。public boolean isMCSiteLocal();//检查多播地址是否具有站点范围的实用例行程序。 public boolean isMCOrgLocal();//检查多播地址是否具有组织范围的实用例行程序。通配地址如果地址是通配地址( wildcard address), isAnyLocalAddress()方法返回true,否则返回 false。通配地址可以匹配本地系统中的任何地址。如果系统有多个网络接口(如一个系统有多个以太网卡,或者系统有一个以太网卡和一个802.11WiFi接口),这会很重要。在IPv4中,通配地址是0.0.0.0。在IPV6中通配地址是0:0:0:0:0:0:0:0(又写作::)。回送地址如果地址是回送地址( loopback address), isLoopbackAddress()方法返回true,否则返回 false。回送地址直接在IP层连接同一台计算机,而不使用任何物理硬件。因此,通过连接回送地址,可以绕过可能有bug或不存在的以太网、PPP和其他驱动程序进行测试,这有助于隔离问题。连接回送地址与从系统中连接同一个系统的正常IP地址有所不同。在IPv4中,回送地址是127.0.0.1。在IPv6中,这个回送地址是0:0:0:0:0:0:0:1(又写作::1)IPv6本地链接地址如果地址是一个IPv6本地链接地址, isLinkLocalAddress()方法返回true,否则返回false。IPv6本地链接地址可以用于帮助IPv6网络实现自配置,与IPv4网络上的DHCP非常相似,但没有必要使用服务器。路由器不会把发送给本地链接地址的包转发到本地子网以外。所有本地链接地址都以8字节FE80:000:0000开头。后8字节用本地地址填充,这个地址通常从以太网卡生产商分配的以太网MAC地址复制。IPv6本地网站地址如果地址是一个IPv6本地网站地址, isSiteLocalAddress()方法返回true,否则返回false。本地网站地址与本地链接地址相似,不过本地网站地址可以由路由器在网站或校园内转发,但不应转发到网站以外。本地网站地址以8字节FEC0:0000:00000开头。后8字节用本地地址填充,这个地址通常从以太网卡生产商分配的以太网MAC地址复制。组播地址如果地址是一个组播地址, isMulticastAddress()方法返回true,否则返回 false。组播会将内容广播给所有预订的计算机,而不是某一台计算机。在IPv4中,组播地址都在224.0.0.0到239.255.255.255范围内。在IPv6中,组播地址都以字节FF开头。第13章将讨论组播。全球组播地址如果地址是全球组播地址, isMCGlobal()方法返回tue,否则返回 false。全球组播地址可能在世界范围内都有订购者。所有组播地址都以FF开头。在IPv6中,全球组播地址以FF0E或FF1E开头,这取决于这个组播地址是已知的永久分配地址还是一个临时地址。在IPv4中,所有组播地址都是全球范围的,至少对这个方法而言是这样。在第13章你将看到,IPv4使用生存时间(TTL)值而不是地址来控制范围。网站范围组播地址如果地址是一个网站范围组播地址, isMCSiteLocal()方法返回true,否则返回 false。发送到网站范围地址的包只会在本地网站内传输。网站组播地址以FF05或FF15开头,这取决于这个组播地址是已知的永久分配地址还是一个临时地址。子网范围组播地址如果地址是一个子网范围组播地址, isMCLinklocal()方法返回true,否则返回 false。发送到子网组播地址的包只会在自己的子网内传输。子网组播地址以FF02或FF12开头,这取决于这个组播地址是已知的永久分配地址还是一个临时地址。本地接口组播地址如果地址是一个本地接口组播地址, isMCNodeLocal()方法返回true,否则返回 false。发送到本地接口地址的包不能发送到最初的网络接口以外,即使是相同节点上的不同网络接口也不行。这主要用于网络调试和测试。本地接口组播地址以2字节FF01或FF11开头,这取决于这个组播地址是已知的永久分配地址还是一个临时地址。提示:这个方法的名与当前的术语不太一致。IPv6协议的早期草案称这种地址为“本地节点”地址,因而方法名为“ isMCNodeLocal”。实际上,在将这个方法增加到JDK之前,IPNG工作组就已经修改了这个方法名,不过很遗憾,Sun没有及时拿到备忘录示例4-6是一个简单的程序,这里使用这10个方法来测试从命令行输入的一个地址的性质。示例4-6:测试IP地址的性质1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import java.net.*;public class IPCharacteristics &#123; public static void main(String[] args) &#123; try &#123; InetAddress address = InetAddress.getByName(args[0]); if (address.isAnyLocalAddress()) &#123; System.out.println(address + " is a wildcard address."); &#125; if (address.isLoopbackAddress()) &#123; System.out.println(address + " is loopback address."); &#125; if (address.isLinkLocalAddress()) &#123; System.out.println(address + " is a link-local address."); &#125; else if (address.isSiteLocalAddress()) &#123; System.out.println(address + " is a site-local address."); &#125; else &#123; System.out.println(address + " is a global address."); &#125; if (address.isMulticastAddress()) &#123; if (address.isMCGlobal()) &#123; System.out.println(address + " is a global multicast address."); &#125; else if (address.isMCOrgLocal()) &#123; System.out.println(address + " is an organization wide multicast address."); &#125; else if (address.isMCSiteLocal()) &#123; System.out.println(address + " is a site wide multicast address."); &#125; else if (address.isMCLinkLocal()) &#123; System.out.println(address + " is a subnet wide multicast address."); &#125; else if (address.isMCNodeLocal()) &#123; System.out.println(address + " is an interface-local multicast address."); &#125; else &#123; System.out.println(address + " is an unknown multicast address type."); &#125; &#125; else &#123; System.out.println(address + " is a unicast address."); &#125; &#125; catch (UnknownHostException ex) &#123; System.err.println("Could not resolve " + args[0]); &#125; &#125;&#125;下面是一个IPv4和IPv6地址的输出:略，回去再跑。写注释，修改程序。本文链接: 地址类型]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第4章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[InetAddress类]]></title>
    <url>%2Fblog%2Ff9eb76d8%2F</url>
    <content type="text"><![CDATA[java.net.InetAddress类是Java对IP地址(包括IPv4和IPv6)的高层表示。大多数其他网络类都要用到这个类,包括Socket,ServerSocket、URL、 DatagramSocket、DatagramPacket等。一般地讲,它包括一个主机名和一个P地址。创建新的 I InetAddress对象InetAddress类没有公共构造函数。实际上, InetAddress有一些静态工厂方法,可以连接到DNS服务器来解析主机名。最常用的是 InetAddress.getByName()。例如,可以如下查找www.oreilly.com:1InetAddress address=InetAddress.getByName("www.Oreilly.com");这个方法并不只是设置 InetAddress类中的一个私有 String字段。实际上它会建立与本地DNS服务器的一个连接,来查找名字和数字地址(如果你之前查找过这个主机,这个信息可能会在本地缓存,如果是这样,就不需要再建立网络连接)。如果DNS服务器找不到这个地址,这个方法会抛出一个 UnknownHostException异常,这是 IOEXception的一个子类。示例4-1展示了一个完整的程序,它为www.oreilly.com创建一个InetAddress对象,这里包括所有必要的导入和异常处理。123456789101112131415import java.net.*;public class OReillyByName &#123; public static void main (String[] args) &#123; try &#123; // InetAddress address = InetAddress.getByName("www.oreilly.com"); System.out.println(address); &#125; catch (UnknownHostException ex) &#123; System.out.println("Could not find www.oreilly.com"); &#125; &#125;&#125;结果如下:1www.oreilly.com/23.193.119.31还可以按IP地址反向查找。例如,如果希望得到地址208.201.239.100的主机名,可以向InetAddress.getByName()传入一个点分四段地址:12InetAddress address = InetAddress.getByName(&quot;208.201.239.100&quot;);System.out.println(address.getHostName());如果你查找的地址没有相应的主机名, getHostName()就会返回你提供的点分四段地址。之前我提到过www.oreilly.com实际上有两个地址。getHostName()返回哪一个地址是不确定的。如果出于某种原因你需要得到一个主机的所有地址,可以调用getAllByName(),它会返回一个数组:InetAddress[] addresses=InetAddress.getAllByName(“www.oreilly.com&quot;);12345678910try &#123; InetAddress[] addresses=InetAddress.getAllByName("www.oreilly.com"); for (InetAddress inetAddress : addresses) &#123; System.out.println(inetAddress); &#125;&#125; catch (UnknownHostException ex) &#123; System.out.println("Could not find www.oreilly.com");&#125;最后, getLocalHost()方法会为运行这个代码的主机返回一个 InetAddress对象:1InetAddress me=InetAddress.getLocalHost();这个方法尝试连接DNS来得到一个真正的主机名和IP地址,如“ elharo.laptop.corp.com”和“192.1.254.68”;不过如果失败,它就会返回回送地址,即主机名“localhost”和点分四段地址“127.0.0.1”。示例4-2显示了运行这个代码的机器的地址。示例4-2:查找本地机器的地址123456789101112131415import java.net.*;public class MyAddress &#123; public static void main (String[] args) &#123; try &#123; //获取本机地址 InetAddress address = InetAddress.getLocalHost(); System.out.println(address); &#125; catch (UnknownHostException ex) &#123; System.out.println("Could not find this computer's address."); &#125; &#125;&#125;输出如下(我是在titan.oit.unc.edu上运行这个程序),这个每个人的输出效果不一样。1titan.oit.unc.edu/152.46.7.122你可能会看到完全限定名如titan.oit.unc.edu,也可能会看到部分名如titan,这取决于本地DSN服务器为本地域中的主机返回什么结果。如果没有连接到 Internet,系统也没有固定IP地址或域名,可能会看到域名为 localhost,IP地址为1270.0.1。创建地址:12public static InetAddress getByAddress(byte[] addr) throws UnknownHostExceptionpublic static InetAddress getByAddress(String hostname,byte[] addr) throws UnknowHostException第一个 Inetaddress.getByAddress()工厂方法用一个IP地址(而没有主机名)创建一个 InetAddress对象。第二个 InetAddress.getByAddress()方法使用一个IP地址和个主机名创建 Inetaddress对象。例如,下面这个代码段会为107.23.216.196创建一个InetAddress：123byte[] address=&#123;107,23,(byte)216,(byte)196&#125;;InetAddress lessWrong=InetAddress.getByAddress(address);InetAddress lessWrongWithname=InetAddress.getByAddress("lesswrong.com",address);需要说明,它必须把两个大数字转换为字节。与其他工厂方法不同,这两个方法不能保证这个主机一定存在,或者主机名能正确地映射到IP地址。只有当作为 address参数传入的字节数组大小不合法时(不是4字节,也不是16字节),这两个方法才会抛出一个 UnknownHostException异常。如果域名服务器不可用,或者可能有不正确的信息,这会很有用。例如,我的主干网中所有计算机、打印机或路由器都没有注册任何DNS服务器。因为我记不住为哪些系统分配了哪些地址,所以我写了一个简单的程序,尝试依次连接所有254个可能的本地地址,来看哪些地址是活动的(这样花费的时间是把所有地址写在一张纸上所需时间的10倍)。缓存由于DNS查找的开销可能相当大(如果请求需要经过多个中间服务器,或者尝试解析个不可达的主机,这大约需要几秒的时间),所以 InetAddress类会缓存查找的结果。一旦得到一个给定主机的地址,就不会再次查找,即使你为同一个主机创建一个新的InetAddress对象,也不会再次查找地址。只要在程序运行期间IP地址没有改变,这就没有问题。负面结果(即主机未找到错误)稍有些问题。有可能刚开始尝试解析一个主机时失败,但随后再次尝试时解析会成功,这种情况并不少见。由于从远程DNS服务器发来的信息还在传输中,第一次尝试超时。然后这个地址到达本地服务器,所以下一次请求时可用。出于这个原因,Java对于不成功的DNS查询只缓存10秒。这些时间可以用系统属性 networkaddress.cache.ttl和 networkaddress.cache.negative,ttl来控制。其中第一个属性 networkaddress.cache.ttl指定了成功的DNS查找结果在Java缓存中保留的时间(秒数), networkaddress.cache.negative.ttl指定了不成功的查找结果缓存的时间(秒数)。在这些时限内,再次尝试查找相同的主机会返回相同的值。这两个属性如果设为-1则表示“永不过期“除了在 InetAddress类中的本地缓存,本地主机、本地域名服务器和 Internet上其他地方的DNS服务器也会缓存各种査询的结果。对此,Java没有提供有关的控制方法。因此,在 Internet上传播IP地址改变的信息可能要花费几个小时。在此期间,你的程序可能会遇到各种异常,包括 UnknownHostException、 NoRouteToHostException和ConnectException异常,这取决于对DNS所做的改变。按IP地址查找调用 getByName()并提供一个IP地址串作为参数时,会为所请求的IP地址创建一个InetAddress对象,而不检查DNS。这说明,可能会为实际上不存在也无法连接的主机创建 InetAddress对象。由包含IP地址的字符串来创建 InetAddress对象时,这个对象的主机名初始设置为这个IP地址字符串。只有当请求主机名时(显式地通过 getHostName()请求),才会真正完成主机名的DNS查找。从点分四段地址208.201.239.37确定www.oreilly.com时就采用了这种方式。**如果请求主机名并最终完成了一个DNS查找,但是指定IP地址的主机无法找到,那么主机名会保持为最初的点分四段字符串**。不过,**不会抛出 UnknownHostException异常**。主机名要比IP地址稳定得多。有些服务多年以来一直使用同一个主机名,但IP地址更换了很多次。如果要在使用主机名(如www.oreilly.com)或使用IP地址(如208.201.239.37)之间做出选择,一定要选择主机名。**只有当主机名不可用时才使用IP地址**。安全性问题从主机名创建一个新的 InetAddress对象被认为是一个潜在的不安全操作,因为这需要一个DNS查找。在默认安全管理器控制下的不可信applet只允许获得它的初始主机(其代码基)的IP地址,这可能是本地主机。不允许不可信代码由任何其他主机名创建 InetAddress对象。不论代码使用 InetAddress.getByName()方法，InetAddress.getAllByName()方法、 InetAddress.getLocalHost()方法,还是其他方法,都是如此。不可信代码可以由字符串形式的IP地址构造 InetAddress对象,但不会为这样的地址完成DNS查找。由于禁止与代码基(本地主机)之外的主机建立网络连接,不可信的代码不允许对第三方主机完成任意的DNS查找。任意的DNS查找会打开一个隐藏的通道,通过它,程序可以与第三方主机对话。例如,假设一个从www.bigisp.com下载的applet希望将消息“macfaq.dialup.cloud9.net is vulnerable”发送给 crackersinc.com。它只需要请求 macfaq.dialup.cloud9.net is.vuInerable.crackersinc.com的DNS信息。为了解析这个主机名,这个applet会联系本地DNS服务器。本地DNS服务器会联系位于 crackersinc.com的DNS服务器。尽管这些主机不存在,但黑客可以查看 crackersinc.com的DNS错误日志来获取这个消息。如果再结合压缩、纠错、加密,以及将电子邮件消息发送给一个第四方网站的定制DNS服务器,这个机制还可以复杂得多,但这个版本已经足以证明上述观点。由于任意DNS查找会泄漏信息,所以要禁止任意的DNS查找。不可信代码允许调用 InetAddress.getLocalHost()。不过,在这种环境下,getLocalHost()总是返回主机名 localhost/127.0.0.1。禁止applet找出真正的主机名和地址的原因在于,运行 applet的计算机可能故意隐藏在防火墙的后面。在这种情况下applet不应作为通道来获得Web服务器还没有的信息。与所有安全性检查一样,禁止DNS解析可以对可信代码放宽要求。要测试一个主机能否解析,所用的特定 SecurityManager方法是 checkConnect():1public void checkConnect(String hostname, int port)当port参数为-1时,这个方法检查能否调用DNS解析指定的 hostname。(如果port参数大于-1,这个方法检査是否允许在指定端口对指定主机建立连接)。 hostname参数可以是主机名(如www.oreilly.com),也可以是点分四段IP地址(如208.201.239.37),或者还可以是十六进制IPv6地址如FEDC:DC:0:7076:10。获取方法InetAddress包含4个获取方法,可以将主机名作为字符串返回,将IP地址返回为字符串和字节数组:1234public String getHostName()public String getCanonicalHostName()public byte[] getAddress()public String getHostAddress()没有对应的 setHostName()和 setAddress()方法,这说明 java.net之外的包无法在后台改变 InetAddress对象的字段。这使得 InetAddress不可变,因此是线程安全的。getHostName()方法返回一个 String,其中包含主机的名字,以及这个 InetAddress对象表示的IP地址。如果这台机器没有主机名或者安全管理器阻止确定主机名,就会返回点分四段格式的数字IP地址。例如:12InetAddress machine= InetAddress.getLocalHost();String localhost=machine.getHostName();getCanonicalHostName()方法也类似,不过在与DNS联系方面更积极一些。getHostName()只是在不知道主机名时才会联系DNS,而 getcanonicalHostName()知道主机名时也会联系DNS,可能会替换原来缓存的主机名。例如:12InetAddress machine= InetAddress.getLocalHost();String localhost= machine.getCanonicalHostName();如果开始只有一个占分四段IP地址而没有主机名, getCanonicalHostName()方法尤其有用。示例4-3首先使用 InetAddress.getByName(),然后对得到的对象应用getcanonicalHostName(),可以把点分四段地址208.201.239.37转换为一个主机名。示例4-3:给定地址,找出主机名123456789import java.net.*;public class ReverseTest &#123; public static void main (String[] args) throws UnknownHostException &#123; InetAddress ia = InetAddress.getByName("208.201.239.100"); System.out.println(ia.getCanonicalHostName()); &#125;&#125;getHostAddress()方法返回一个字符串,其中包含点分四段格式的IP地址。示例4-4使用这个方法按通常的格式显示本地机器的IP地址。123456789101112131415import java.net.*;public class MyAddress &#123; public static void main (String[] args) &#123; try &#123; InetAddress address = InetAddress.getLocalHost(); String dottedQuad=me.getHostAddress(); System.out.prinln("My address is "+dottedQuad) &#125; catch (UnknownHostException ex) &#123; System.out.println("I'm sorry. I don't know my own address."); &#125; &#125;&#125;结果如下:1My address is 192.168.73.1当然,具体的输出依赖于运行程序的机器。如果希望知道一台机器的IP地址(很少这样做),可以使用 getAddress()方法,它会以网络字节顺序将IP地址作为一个字节数组返回。最高字节(即地址的点分四段形式中的第一字节)是数组的第一字节,即数组的元素0。如果要考虑到IPv6地址,不要对这个数组的长度做任何假定。如果需要知道这个数组的长度,可以使用数组的length字段:12InetAddress me= InetAddress.getLocalHost();byte[] address=me.getAddress();返回的字节是无符号的,这会带来一个问题。与C不同,Java没有无符号字节这种基本数据类型。值大于127的字节会当作负数。因此,如果要对 getAddress()返回的字节做任何处理,需要将字节提升为int,并做适当的调整。下面给出一种做法:1int unsignedByte =signedByte &lt;0 ? signedByte+256 : signedByte;这里, signedByte可能为正也可能为负。条件操作符?测试 signedBy是否为负。如果为负,则为 signedBy加上256使其成为正数。否则保持不变。 signedByte会在完成加法操作之前自动提升为int,所以不存在这种回绕( wraparound)问题。之所以要查看IP地址的原始字节,一个原因是想要确定地址的类型。测试 getAddress()所返回数组的字节数可以确定处理的是IPv4还是IPv6地址,如示例4-5所示。示例4-5:确定地址是IV4还是Iv61234567891011import java.net.*;public class AddressTests &#123; public static int getVersion(InetAddress ia) &#123; byte[] address = ia.getAddress(); if (address.length == 4) return 4;//如果是4个字节的IP地址，那就是IPv4地址。 else if (address.length == 16) return 6;//如果是16个字节的IP地址，那就是IPv6地址。 else return -1; &#125;&#125;本文链接: InetAddress类]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第4章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[第4章Internet地址]]></title>
    <url>%2Fblog%2Ff384e578%2F</url>
    <content type="text"><![CDATA[前言连接到 Interne的设备称为节点(node)。计算机节点称为主机(host)。每个节点或主机都由至少一个唯一的数来标识,这称为Internet地址或IP地址。目前大多数IP地址是四字节长,这被称作IPv4地址。不过,一小部分IP地址是16字节长(而且这种地址的数量正在增加),这被称作IPv6地址`(4和6指 Internet协议的版本,不是地址中的字节数`)。IPv4和IPv6地址都是字节的有序序列,和数组一样。它们不是数,它们的顺序也不具有任何可预测或有用的意义。IPv4地址一般写为四个无符号字节,每字节范围从0到255,最高字节在前。为方便人们查看,各字节用点号分隔。例如, login.ibiblio.org的地址是152.19.134.132。这称为点分四段( dotted quad)格式(也叫点分十进制)。IPv6地址通常写为冒号分隔的8个区块,每个区块是4个十六进制数字。例如,写这本书时,www.hamiltonweather.tk的地址是2400:cb00:2048:0001:0000:0000:6ca2:c665。前导的0不需要写出。因此,www.hamiltonweather.tk的地址可以写为**2400:cb00:2048:`1`:`0`:`0`:6ca2:c665**。**两个冒号表示多个0区块,但每个地址中双冒号至多出现一次**。例如,**2001:4860:4860:`0000:0000:0000:0000`:8888**可以写为紧缩的**2001:4860:4860`::`8888**。**在IPv6和IPv4的混合网络中,`IPv6地址的最后4字节有时写为IPv4的点分四段地址`。**例如,**FEDC:BA98:70654:3210:FEDC:BA98:`7654:3210`**可以写为**FEDC:BA98:7654:3210:FEDC:BA98:`18.84.50.16`**。IP地址对于计算机来说很不错,但对人来说是个问题,人们很难记忆长的数字。在20世纪50年代,G.A.Miller发现大多数人可以记住每个数中大约7个数字,有些人可以记住多达9个,而另外一些人只能记住5个。有关的更多信息参见《 Psychological Review》卷63第81-97页上的《 The Magic Number Seven, Plus or Minus two: Some Limits on Our Capacity for Processing Information》这就是为什么电话号码被分成多个部分,每个部分包括3或4个数字,另外还有一个3个数字的区号。很明显,IP地址多达12个十进制数字已经超出了大多数人的记忆能力。我能记住大概两个IP地址,前提是我每天都用它们,而且这两个地址处于同一个子网内。为避免到处携带记满IP地址的通讯录, Internet的设计者发明了域名系统( Domain NameSystem,DNS)。DNS将人们可以记忆的主机名(如 login.ibiblio.org)与计算机可以记忆的IP地址(如152.19.134.132)关联在一起。服务器通常至少有一个主机名。客户端往往有一个主机名,但也可能没有,特别是有些客户端的IP地址会在启动时动态指定。提示:通俗地讲,人们通常使用“Internet地址”表示一个主机名(或者甚至是电子邮件地址,或者完全URL)。在关于网络编程的书中,准确区分地址和主机名非常重要。在本书中,地址总是数字IP地址,而不是人类可读的主机名。有些机器有多个名。例如,www.beand.com和xom.nu实际上是同一台Linux主机。名www.beand.com实际上指示一个web网站而不是一个特定的机器。**在过去,当这个web网站从一台机器移到另一台机器时,这个名字将重新指派给这台新机器,使它永远指向网站的当前服务器。通过这种方法,就不会因为网站迁移到一个新主机而要更新Web上的URL**。一些常见的名字如www和news通常就是提供这些服务的机器的别名。例如,new.sspeakeasy.net是我的ISP的新闻服务器的别名。由于服务器可能随着时间而改变,别名可能跟着服务转移。有时,一个名会映射到多个IP地址,这时就要由DNS服务器负责随机选择一台机器来响应各个请求。这个特性在业务流量非常大的web网站经常使用,它将负载分摊到多个系统上。例如,www.oreilly.com实际上是两台机器,一台位于208.201.239.100,一台位于208.201.239.101。每台连接到 Internet的计算机都应当能访问一个称为域名服务器( domain name server)的机器,它通常是一个运行特殊DNS软件的UNIX主机,这种软件了解不同主机名和IP地址之间的映射。大多数域名服务器只知道其本地网络上主机的地址,以及其他网站中些域名服务器的地址。如果客户端请求本地域之外一个机器的地址,本地域名服务器就会询问远程位置的域名服务器,再将答案转发给请求者。大多数情况下,可以使用主机名,而让DNS处理向IP地址的转换。只要能连接到一个域名服务器,就不需要担心在你的机器、本地域名服务器和 Internet其余部分之间传递主机名和地址的有关细节。不过,你至少要能访问一个域名服务器才能使用本章和本书其余大部分的例子。这些程序在独立计算机上无法运行。你的机器必须连接到 Internet。本文链接: 第4章Internet地址]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第4章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 线程池和Executor]]></title>
    <url>%2Fblog%2Fe9b810a3%2F</url>
    <content type="text"><![CDATA[向程序添加多个线程会极大地提升性能,尤其是I/O受限的程序,如大多数网络程序。不过,线程自身也存在开销。启动一个线程时,以及线程撤销后进行清理时,都需要虛拟机做大量工作,尤其是生成数百个线程的程序,即使对中低吞吐量的网络服务器而言,这种情况也很常见。即使线程能很快结束,这也会加重垃圾回收器或VM其他部分的负担而影响性能,就好像每分钟分配几千个任何其他类型的对象。更重要的是,在运行线程之间切换也会带来开销。如果线程自然阻塞(例如等待网络数据),那么没有什么真正的影响,但如果线程是CPU受限的,倘若能避免线程间的大量切换,整个任务可能会更快地结束。最后,也是最重要的,虽然线程有助于更高效地利用计算机有限的CPU资源,但所能提供的资源毕竟是有限的。一旦已经生成足够多的线程来使用计算机所有可用的空闲时间,那么再生成更多线程只会将MIPS和内存浪费在线程管理上。将各个任务作为一个 Sunnah1e对象提交给这个线程池,你就会得到一个 Futurexte利用java.uti1, concurrent中的 Executors类,可以非常容易地建立线程池。只需可以用来检查任务的进度。下面来看一个例子。假设你希望使用一个 java.uti1,zipGZIPOutputstream对当前目录中的每一个文件完成gzip压缩。这是一个过滤器流,会压缩它写的所有数据利用Java.util.concurrent中的Executors类,可以非常容易地建立线程池。只需要将各个任务作为一个 Runnable对象提交给这个线程池,你就会得到一个 Future对象,可以用来检查任务的进度。下面来看一个例子。假设你希望使用一个 java.util.zipGZIPOutputStream对当前目录中的每一个文件完成gzip压缩。这是一个过滤器流,会压缩它写的所有数据。一方面,这是一个有大量IO的操作,因为所有文件都必须进行读/写。另一方面,数据压缩是一个“CPU密集”度很高的操作,所以你不希望同时运行太多线程。这是使用线程池的大好机会。每个客户端线程将压缩文件,同时主程序将确定要压缩哪个文件。在这个例子中,主程序的速度很可能会远远超过压缩线程,因为它要做的所有工作就是列出目录中的文件。因此,毫无疑问,首先要填充线程池,然后启动池中压缩文件的线程。不过,为了让这个示例尽可能具有地一般性,我们将让主程序与压缩线程并行运行。示例3-13显示了 GZipRunnable类。它包含一个字段来标识要压缩的文件。run()方法会压缩这个文件并返回。示例3-13: GZipRunnable类123456789101112131415161718192021222324252627282930313233343536import java.io.*;import java.util.zip.*;public class GZipRunnable implements Runnable &#123; private final File input; public GZipRunnable(File input) &#123; this.input = input; &#125; @Override public void run() &#123;// don't compress an already compressed file if (!input.getName().endsWith(".gz")) &#123; File output = new File(input.getParent(), input.getName() + ".gz"); if (!output.exists()) &#123; // Don't overwrite an existing file try ( // with resources; requires Java 7 InputStream in = new BufferedInputStream(new FileInputStream(input)); OutputStream out = new BufferedOutputStream( new GZIPOutputStream( new FileOutputStream(output))); ) &#123; int b; //标准读写方法 while ((b = in.read()) != -1) out.write(b); out.flush(); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; &#125; &#125; &#125;&#125;注意 GZipRunnable中可以使用Java7的try- with-resources语句。输入和输出流都在try块的最前面声明,并在try块的末尾自动关闭。还要注意输入和输出的缓冲。这对于I/O有限的应用的性能非常重要,在网络程序中尤其重要。最坏情况下,缓冲对性能没有影响,但在最好情况下,会让执行速度提高一个数量级。示例3-14是主程序。它构造了线程池,线程数固定为4,并迭代处理命令行中列出的所有文件和目录。这些文件以及这些目录中的文件将用来构建一个 GZipRunnable。这个runnable提交到线程池,最终由这4个线程之一处理。示例3-14: GZipThread用户接口类123456789101112131415161718192021222324252627282930313233import java.io.*;import java.util.concurrent.*;public class GZipAllFiles &#123; public final static int THREAD_COUNT = 4; public static void main(String[] args) &#123; ExecutorService pool = Executors.newFixedThreadPool(THREAD_COUNT); for (String filename : args) &#123; File f = new File(filename); if (f.exists()) &#123; if (f.isDirectory()) &#123; File[] files = f.listFiles(); for (int i = 0; i &lt; files.length; i++) &#123; if (!files[i].isDirectory()) &#123; // don't recurse directories Runnable task = new GZipRunnable(files[i]); pool.submit(task); &#125; &#125; &#125; else &#123; Runnable task = new GZipRunnable(f); pool.submit(task); &#125; &#125; &#125; pool.shutdown(); &#125;&#125;一旦将所有文件增加到这个池,就可以调用pool.shutdown()。这有可能在还有工作要完成的情况下发生。这个方法不会中止等待的工作。它只是通知线程池再没有更多任务需要增加到它的内部队列,而且一旦完成所有等待的工作,就应当关闭。你要写的网络程序可能有大量线程,对于这些网络程序来说,很少像这样关闭,因为它有一个确定的终点:即所有文件都得到处理时。大多数网络服务器会无限继续,直到通过一个管理界面将其关闭。在这些情况下,你可能希望调用 shutdownNow(),中止当前处理中的任务,并忽略所有等待的任务。本文链接: java网络编程第4版 线程池和Executor]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java截图文字识别升级]]></title>
    <url>%2Fblog%2F77feedee%2F</url>
    <content type="text"><![CDATA[之前已经完成了程序的开发，也加入了热键，不过每次截图(ctrl+alt+w)都要手动的去点击文字识别按钮，显然有点浪费时间。需求，添加文字识别快捷键(alt+B(BaiduOCR的简称))实现，支持快捷键即可。需求让工具栏在截图窗口消失的时候，显示在屏幕左上角，避免挡住屏幕影响阅读。在构造函数中传入工具栏窗口的引用tools，然后嗲用tools.setLocation(0,0)。即可，本来我想着放在右边的，但是放右边的话不好计算坐标，索性就放右上角。添加构造函数:12345678public BaiduOCR(String path, ScreenShotWindow screenShotWindow, JButton baiduOCRButton, ToolsWindow tools)&#123; this.path = path; this.screenShotWindow = screenShotWindow; this.baiduOCRButton = baiduOCRButton; this.tools = tools;&#125;run()方法中加入：12if (tools != null) tools.setLocation(0, 0);升级2有时候误操作的时候，我必须得截图一下才能进行其他操作。我希望在误操作的时候可以退出截图。比如按下esc按键。按下alt+e让截图窗口隐藏修改好了，我现在该代码都没注意改本文链接: Java截图文字识别升级]]></content>
      <categories>
        <category>Java</category>
        <category>java_GUI</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 线程调度]]></title>
    <url>%2Fblog%2Fa6b44b1a%2F</url>
    <content type="text"><![CDATA[当多个线程同时运行时(更正确的说法是,当多个线程可以同时运行时),必须考虑线程调度问题。你需要确保所有重要的线程至少要得到一些时间来运行,更重要的线程要得到更多的时间。此外,你希望保证线程以合理的顺序执行。如果Web服务器有10个排队的请求,每个请求都需要5s进行处理,你不会希望串行地处理它们。如果这样做,第一个请求将在5秒内结東,而第二个将需要10秒,第三个需要15秒,依此类推,直到最后一个请求,它必须等待将近1分钟才能得到服务。到那时,用户很可能已经去浏览其他网页了。通过并行地运行线程,就能够在总共仅仅10秒内处理完所有10个请求。这种策略之所以可行,这是因为在为一个典型的web请求提供服务时,会有大量的空闲时间,在这段时间内线程只是在等待网络跟上CPU的速度,虚拟机的线程调度器完全可以将这段时间用于其他线程。不过,CPU受限的线程(而不是在网络程序中更常见的I受限线程)可能永远不会达到这种程度,如果CPU受限,线程往往更多地忙于处理,而不是等待更多的输入。这样的线程可能占用所有可用的CPU资源,使得所有其他线程处于“饥饿”状态。仔细考虑一下就可以避免这个问题。事实上,与同步不当或死锁相比避免“饥饿”问题要容易得多。优先级不是所有线程创建时都是均等的。每个线程都有一个优先级,指定为一个从0到10的整数。当多个线程可以运行时,虚拟机通常只运行最高优先级的线程,但这并不是一个严格的规则。在Java中,10是最高优先级,0是最低优先级。默认优先级为5,除非特意指定其他设置,否则你的线程都将具有这个默认优先级(5)。警告:这与UNIX区分进程优先级的一般方式刚好相反,UINX中,进程的优先级数越大,进程获得的CPU时间就越少。以下三个优先级(1,5和10)通常指定为三个命名常量Thread. MIN_PRIORITY(1)Thread.NORM_PRIORITY(5)Thread.MAX_PRIORITY(10)警告:并不是所有操作系统都支持这11个不同的优先级。例如, Windows只有7个优先级。在 Windows上,优先级1和2、3和4、6和7以及8和9会做同样的处理(也就是说,优先级为9的线程并不会抢占优先级为8的线程)。有时你希望给一个线程更多的时间。与用户交互的线程应当获得非常高的优先级,这样就能感觉到响应非常快。另一方面,在后台完成计算的线程应当获得低优先级。很快结束的任务应当有高优先级。将花费很长时间的任务应当有低优先级,这样就不会妨碍其他任务。线程的优先级可以使用 setPriority()方法来改变:1public final void setPriority(int newPriority)如果试图超出最大优先级,或者设置为一个非正的优先级,这些将抛出一个IllegalArgumentException异常。例如,在示例3-11中,你可能希望完成计算的线程比生成这个线程的主程序有更高的优先级。这很容易做到,只需要修改 calculateDigest()方法,将生成的各个线程的优先级设置为8:12345678public void calculateDigest()&#123; ListCallbackDigest cb= new ListCallbackDigest(filename) cb. addDigestListener(this); Thread t= new Thread(cb); t.setPriority (8); t.start:&#125;不过,一般情况下要尽量避免对线程使用太高的优先级,因为这要冒一定的风险,可能使其他低优先级线程遭受“饥饿”之苦。抢占毎个虚拟机都有一个线程调度器,确定在给定时刻运行哪个线程。主要有两种线程调度:抢占式( preemptive)和协作式( cooperative)。抢占式线程调度器确定一个线程正常地轮到其CPU时间时,会暂停这个线程,将CPU控制权交给另外的线程。协作式线程调度器在将CPU控制权交给其他线程前,会等待正在运行的线程自己暂停。与使用抢占式线程调度的虛拟机相比,使用协作式线程调度器的虚拟机更容易使线程陷入“饥饿”,因为一个高优先级的非协作线程会独占整个CPU。所有Java虚拟机都确保在不同优先级之间使用抢占式线程调度。也就是说,当一个低优先级线程正在运行,而一个高优先级线程准备运行时,虚拟机会或早或晚(可能很早)暂停这个低优先级线程,让高优先级线程运行。高优先级线程就抢占( preempt)了低优先级线程。如果多个相同优先级的线程准备运行,这种情况比较棘手。抢占式线程调度器偶尔会暂停其中一个线程,让下一个线程得到一些CPU时间。不过,协作式线程调度器不会这样。它将等待正在运行的线程明确放弃控制或者运行到最后停止(到达停止点)。倘若正在运行的线程永远也不放弃控制权,而且永远不会到达停止点,如果没有更高优先级线程抢占这个正在运行的线程,那么其他所有线程都会陷入“饥饿”状态。这很不好。重要的一点是,要确保所有线程自身定期地暂停,这样其他线程才可以有运行的机会警告:如果在一个使用抢占式线程调度的虚拟机上开发,饥饿问题可能很难发现。即使你的机上没有出现问题,这并不表示这个问题不会在客户的机器上出现(如果他们的虚拟机使用协作式线程调度)。目前大多数虚拟机都使用抢占式线程调度,但有些较早的虚拟机仍采用协作式调度,另外在一些特定用途的Java虚拟机(如面向嵌入式环境的虚拟机)中也可能会遇到协作式调度为了能让其他线程有机会运行,一个线程有10种方式可以暂停或者指示它准备暂停。这包括:可以对I/O阻塞。可以对同步对象阻塞。可以放弃。可以休眠。可以连接另一个线程。可以等待一个对象可以结束。可以被更高优先级线程抢占。可以被挂起。可以停止。要检查你编写的每一个run()方法,确保这些条件之一会以合理的频率出现。最后两种可能性(挂起，停止)已经废弃不用,因为它们可能会让对象处于不一致的状态,所以我们来看能够让线程成为虚拟机中协作的一员的其他8种方法。阻塞任何时候线程必须停下来等待它没有的资源时,就会发生阻塞。要让网络程序中的线程自动放弃CPU控制权,最常见的方式是对IO阻塞。由于CPU比网络和磁盘快得多,网络程序经常会在等待数据从网络到达或向网络发送数据时阻塞。即使只阻塞几毫秒,这点时间也足够其他线程用来完成重要的任务。线程在进入一个同步方法或代码块时也会阻塞。如果这个线程没有所同步对象的锁,而其他线程拥有这个锁,这个线程就会暂停,直到锁被释放为止。如果这个锁永远也不释放,那么这个线程会永久停止。(注:线程执行同步方法或同步块的时候，要么得到锁而执行，要么得不到锁而等待(阻塞))不论是对I/O阻塞还是对锁阻塞,线程都不会释放自己已经拥有的锁(一个或多个)。对于I/O阻塞,这不是个大问题,因为无非有两种情况:最后I/O终将不再阻塞而线程将继续执行;或者将抛出个 IOException异常,然后线程退出这个同步块或方法,并释放它的锁。不过,如果个线程由于没有得到一个锁而阻塞,将永远不会放弃它自已已经持有的锁。如果一个线程等待第二个线程拥有的锁,而第二个线程等待第一个线程拥有的锁,就会导致死锁。放弃要让线程放弃控制权,第二种方式是显式地放弃。为此线程可以通过调用Thread.yield()静态方法来做到。这将通知虚拟机,如果有另一个线程A准备运行,可以运行该线程A。有些虚拟机(特别是在实时操作系统上)会忽略这个提示。参考:https://www.cnblogs.com/java-spring/p/8309931.html注:Java线程中的Thread.yield( )方法，译为线程让步。顾名思义，就是说当一个线程使用了这个方法之后，它就会把自己CPU执行的时间让掉，让自己或者其它的线程运行，注意是让自己或者其他线程运行，并不是单纯的让给其他线程。yield()的作用是让步。它能让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！举个例子：一帮小朋友在排队上公交车，轮到Yield的时候，他突然说：我不想先上去了，咱们大家来竞赛上公交车。然后所有人就一块冲向公交车，有可能是其他人先上车了，也有可能是Yield先上车了。但是线程是有优先级的，优先级越高的人，就一定能第一个上车吗？这是不一定的，优先级高的人仅仅只是第一个上车的概率大了一点而已，最终第一个上车的，也有可能是优先级最低的人。并且所谓的优先级执行，是在大量执行次数中才能体现出来的。在放弃之前,线程应当确保它或与它关联的 Runnable对象处于一致状态,可以由其他对象使用。放弃并不会释放这个线程拥有的锁。因此,在理想情况下,在线程放弃时不应当做任何同步。一个线程放弃时,如果等待运行的其他线程都是因为需要这个线程所拥有的同步资源而阻塞,那么这些线程将不能运行。实际上,控制权将回到唯一可以运行的线程,即刚刚放弃的这个线程,这很大程度上失去了放弃的意义。在实际中让线程放弃非常简单。如果线程的run()方法只包含一个无限循环,那么只要在循环的末尾加一个 Thread, yield()调用。例如:12345678public void run()&#123; while(true) &#123; //完成线程的工作... Thread.yield(); &#125;&#125;这会使其他有相同优先级的线程有机会运行。如果每次循环迭代都要花费很多时间,你可能希望在代码的其余部分散布更多的Thread, yield()调用。在没有必要放弃的情况下,这种防范措施效果不甚明显。休眠休眠是更有力的放弃方式。放弃只是表示线程愿意暂停,让其他有相同优先级的线程有机会运行,而进入休眠的线程有所不同,不管有没有其他线程准备运行,休眠线程都会暂停。这样一来,不只是其他有相同优先级的线程得到机会,还会给较低优先级的线程一个运行的机会。不过,进入休眠的线程仍然拥有它已经获得的所有锁。因此,其他需要相同锁的线程会阻塞,即使CPU可用。所以要避免在同步方法或块内让线程休眠。通过调用以下两个重载的 Thread.sleep()静态方法之一,线程可以进入休眠。第一个方法接受要休眠的毫秒数作为参数。第二个接受毫秒数和毫微秒数。12public static void sleep(long milliseconds) throws InterruptedExceptionpublic static void sleep(long milliseconds, int nanoseconds)throws InterruptedException虽然多数现代计算机时钟至少有接近毫秒级的精确度,但精确度达到毫微秒级的极少。不能保证在任何虛拟机上都能将实际的休眠时间控制在毫微秒甚至毫秒级。如果本地硬件不支持这个精度,休眠时间将舍入为可测量的最接近的值。例如:下面的run()方法尝试每5分钟加载一个页面,如果失败,就向web管理员发emai提醒这个问题:123456789101112131415161718public void run()&#123; while(true) &#123; (if(!getpage("http://www.ibiblio.org/")) &#123; mailError("webmaster@ibiblio.org"); &#125; try &#123; Thread. sleep(30000);//300,000毫秒=5分钟 &#125; catch(InterruptedException ex) &#123; break; &#125; &#125;&#125;线程不能绝对保证一定会休眠所期望的那么长时间。有时,在请求唤醒呼叫之后过段时间线程才会真正唤醒,因为VM正在忙于做其他事情。也可能时间还没有到,但有其他线程完成了一些操作而唤醒了休眠的线程。一般情况下,这是通过调用休眠线程的interrupt()方法来实现的。1public void interrupt()有些情况下线程与 Thread对象之间的区别很重要,这里就是如此。一个线程在休眠,并不意味着其他醒着的线程不能处理这个线程相应的 Thread对象(通过它的方法和字段)。具体地,另一个线程可以调用休眠Thread对象的 interrupt()方法,这会让休眠中的线程得到一个 InterruptedException异常。在此之后,这个休眠中的线程会被唤醒并正常执行,至少在再次进入休眠之前会正常执行。在前面的例子中,使用了一个InterruptedException来结束一个线程,否则这个线程会永远运行下去。抛出InterruptedException时,就会打破无限循环,run()方法结束,相应地线程将会停止。用户选择菜单中的Exit或指示希望程序退出时,用户界面线程会调用这个线程的interrupt()方法。(是这样的吗，我表示怀疑)警告:如果一个线程对一个I/O操作(如读或写)阻塞,中断这个线程的效果很大程度上依赖于具体的平台。通常这将是一个什么都不做的操作。也就是说,线程继续阻塞。在 Solaris上,read()或 write()方法可能抛出一个 InterruptedIOException这是 IOException的一个子类。不过,其他平台上通常不会这样,而且在 Solaris上这也不适用于所有流类。如果你的程序体系结构需要可中断的I/O,就应当认真考虑使用第11章讨论的非阻塞IO,而不是流。与流不同,缓冲区和通道都明确设计为支持读写/写阻塞时中断。连接线程一个线程可能需要另一个线程的结果,这是很常见的。例如,web浏览器在一个线程中加载HTML页面,它可能要生成一个单独的线程来获取页面中嵌入的各个图片。如果IMG元素没有指定 HEIGHT和 WIDTH属性,主线程在结束页面的显示之前,可能必须等待所有图片加载完毕。Java提供了三个join()方法,允许一个线程在继续执行前等待另一个线程结束。这些方法是:123public final void join() throws InterruptedExceptionpublic final void join(long milliseconds) throws InterruptedExceptionpublic final void join(long milliseconds, int nanoseconds)throws InterruptedException第一种方法无限等待被连接( joined)的线程结束。后面两个方法会等待指定的一段时间,然后会继续执行,即使被连接的线程还没有结束。与 sleep方法一样,不能保证毫微秒级的精度。连接线程(即调用join()方法的线程)等待被连接的线程(也就是说,调用的是这个线程的join()方法)结束。例如,考虑下面这段代码。我们希望找到一个随机 double数组中的最小数、最大数和中间数。用有序数组能更快地完成。我们生成一个新线程对数组排序,然后连接到这个线程等待它的结果。只有当它结束时,才会读取所需的值。123456789101112131415161718double[] array= new double[10000];for(int i=0;i&lt;array.length; i++)&#123; array[i]= Math.random();&#125;SortThread t= new SortThread(array);t.start();try&#123; t.join();//当前线程等待排序线程t结束,当前线程停止执行，等到排序线程t结束后再执行。 System.out.println("Minimum:"+array[0]); System.out.println("Median:"+array[array.length/2]) System.out.println("Maximum:"+array[array.length-1]);&#125;catch(InterruptedException ex)&#123; &#125;前面第1行到第4行先执行,用随机数填充数组。然后第5行创建一个新的 SortThread。第6行启动这个线程对数组排序。在找到数组的最小数、中间数和最大数之前,需要等待排序线程结束。因此,第8行将当前线程连接到排序线程。至此,执行这些代码的线程会停止执行。它会等待排序线程结束执行。直到排序线程结束运行并撤销之后,第9行到第11行才会获取最小、中间和最大值。连接到(注:或者说等待)另一个线程的线程可以被中断,如果有其他线程调用正在等待线程的interrupt()方法,它就会像休眠线程一样被中断。线程将这个调用作为一个 InterruptedException异常。此后,它会从捕获这个异常的 catch块开始正常执行。在前面的例子中,如果线程被中断,它将跳过最小值、中间值和最大值的计算,因为如果排序线程在结束前被中断,这些值是不可用的。(注:我觉得这里没有因果关系，异常处理机制就是这么运作的)可以使用join()修复示例3-4。示例3-4的问题是,main()方法的速度会超过生成结果的线程(即main()方法要使用的结果)。通过在使用各个线程的结果前连接各个线程(注:说的那么绕，就是主线程等待计算线程计算完毕，因为主线程要使用计算的结果),就能容易地解决这个问题。如示例3-12所示。示例3-12:通过连接生成所需结果的线程,避免竞态条件1234567891011121314151617181920212223242526272829import javax.xml.bind.DatatypeConverter;public class JoinDigestUserInterface &#123; public static void main(String[] args) &#123; ReturnDigest[] digestThreads = new ReturnDigest[args.length]; for (int i = 0; i &lt; args.length; i++) &#123;// Calculate the digest digestThreads[i] = new ReturnDigest(args[i]); digestThreads[i].start(); &#125; for (int i = 0; i &lt; args.length; i++) &#123; try &#123; digestThreads[i].join();//主线程等待计算线程结束// Now print the result StringBuffer result = new StringBuffer(args[i]); result.append(": "); byte[] digest = digestThreads[i].getDigest(); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); &#125; catch (InterruptedException ex) &#123; System.err.println("Thread Interrupted before completion"); &#125; &#125; &#125;&#125;由于示例3-12以启动线程同样的顺序连接这些线程,这样修复也有一个副作用,它会按构造线程所用的参数的顺序显示输出,而不是按线程结束的顺序。这种修改不会让程序变慢,但有时如果你希望线程一旦结束就获得结果,而不是等待其他无关线程先结束,这可能会是个问题。提示:如今,连接线程可能没有Java5之前那么重要。具体来讲,很多原来需要join()的设计现在用 Executor和 Future可以更容易地实现。等待一个对象线程可以等待(wait)一个它锁定的对象。在等待时,它会释放这个对象的锁并暂停,直到它得到其他线程的通知。另一个线程以某种方式修改这个对象,通知等待对象的线程,然后继续执行。这与连接线程不同,并不要求等待线程和通知线程在另一个线程继续前必须结束。等待会暂停执行,直到一个对象或资源达到某种状态。连接也会暂停执行,不过是直到一个线程结束(注:等待与连接的区别)。在暂停线程的方法中,等待一个对象的做法并不太出名。这是因为它不涉及 Thread类的任何方法。实际上,要等待某个特定的对象,希望暂停的线程首先必须使用synchronized获得这个对象的锁,然后调用这个对象的三个重载wait()方法之一:123public final void wait() throws InterruptedExceptionpublic final void wait(long milliseconds) throws InterruptedExceptionpublic final void wait(long milliseconds, int nanoseconds)throws InterruptedException这些方法不在 Thread类中,而是在java.lang.Object类中。因此,可以在任何类的任何对象上调用这些方法。调用其中一个方法时,调用它的线程会释放所等待的对象的锁(但不会释放它拥有的其他对象的锁),并进入休眠。线程会保持休眠,直到发生以下3种情况之一:时间到期线程被中断对象得到通知超时时间( timeout)与sleep()和join()方法中的超时时间相同,即线程经过指定的段时间后(在本地硬件时钟的精度范围内)会唤醒。当时间到期时,线程会从紧挨着 wait()调用之后的语句继续执行。不过,如果线程不能立即重新获得所等待的对象的锁,它可能仍要阻塞一段时间。中断( Interruption)与 sleep()和join()的工作方式相同:其他线程调用这个线程的interrupt()方法。这将导致一个 InterruptedException异常,并在捕获这个异常的catch块内继续执行。不过,在抛出异常前线程要重新获得所等待对象的锁,所以调用interrupt()方法后,该线程可能仍要阻塞一段时间。第三种可能的方法是通知( notification),这是一个新方法。在其他线程在这个线程所等待的对象上调用 notify()或 notifyll()方法时,就会发生通知。这两个方法都在java.lang.Object类中:public final void notify()public final void notifyAll()这两个方法都必须在线程所等待的对象上调用,而不是在 Thread本身调用。在通知一个对象之前,线程必须首先使用同步方法或块获得这个对象的锁。notify()基本上随机地从等待这个对象的线程列表中选择一个线程,并将它唤醒。notifyAll()方法会唤醒等待指定对象的每一个线程。一旦等待线程得到通知,它就试图重新获得所等待对象的锁。如果成功,就会从紧接着wait()调用之后的语句继续执行。如果失败,它就会对这个对象阻塞,直到可以得到锁,然后继续执行紧接着wait()调用之后的语句。例如,假设一个线程(JarThread)正在从网络连接中读取一个JAR归档文件。这个归档文件中第一项是清单文件。另一个线程可能对这个清单文件的内容感兴趣,即使归档文件的其余部分尚不可用。对清单文件感兴趣的线程(另一个线程)会创建一个定制的ManifestFile对象,将这个ManifestFile对象的引用传递给将要读取JAR归档文件的线程(JarThread),并等待这个读取JAR归档文件的线程。读取归档文件的线程(JarThread)首先用流中的项填写ManifestFile,然后通知ManifestFile,再继续读取JAR归档文件的其余部分。当阅读器线程通知ManifestFile时,另一个线程会被唤醒,它将按其计划处理现在已经完全准备就绪的ManifestFile对象。第一个线程的工作方式如下:123456789101112131415161718//另一个线程(最对清单文件感兴趣的线程)ManifestFile m= new ManifestFile();//创建定制的ManifestFile对象JarThread t= new JarThread (m, in);//传递引用给JarThread线程//获取清单文件的锁synchronized(m)&#123; //获取清单文件的锁后 t.start(); //启动JarThread线程，Jar线程将读取清单文件到ManifestFile对象中 try &#123; m.wait();//放弃当前的锁,等待。等待别人唤醒 //处理JarThread线程处理好的清单文件... &#125; catch(InterruptedException ex) &#123; //处理异常... &#125;&#125;JarThread类工作如下:123456789101112131415161718192021//清单文件的引用Manifestfile theManifest;Inputstream in;public JarThread( Manifest m, Inputstream in)&#123; theManifest=m; this.in=in;&#125;@Overridepublic void run()&#123; //获取清单文件的锁 synchronized(theManifest) &#123; //获取到锁后 //从流in读入清单文件... //读入清单文件完毕后,唤醒在清单文件对象theManifest(也就是对象m)上等待的线程 theManifest.notify() //读取流的其余部分... &#125;&#125;当多个线程希望等待同一个对象时,等待(wait())和通知(notifiy())会更为常用。例如,一个线程可能在读取一个Web服务器日志文件,文件中每一行包含要处理的一项。读取时每一行放在个 java.util.List中。多个线程在添加项时会等待这个List来处理这些项。每次添加一项时,会使用 notifyll()方法通知等待线程。如果有多个线程在等待这个对象,首选notifyll(),因为没有办法选择要通知哪个线程。当等待一个对象的所有线程得到通知时,这些线程都会被唤醒,并试图获得这个对象的锁。不过,只有一个线程能立即成功。得到锁的这个线程将继续执行。其余线程会阻塞,直到第一个线程释放这个锁。如果多个线程等待同一个对象,那么轮到最后一个线程获得这个对象的锁并继续执行时,可能已经过去了相当长的时间。在这段时间内,这个线程等待的对象完全有可能再次置于不可接受的状态。因此,一般要将wait()调用放在检查当前对象状态的循环中。不要假定因为线程得到了通知,对象(锁)现在就处于正确的状态。要保证对象进入正确的状态(解锁状态)之后,再也不会进入不正确(锁定状态?)的状态,如果无法保证这一点,就要显式地进行检查。例如,下面显示了等待日志文件项的客户端线程:123456789101112131415161718192021222324//处理列表private List&lt;string&gt; entries;public void processEntry()&#123; // synchronized(entries) //必须对等待的对象同步 &#123; while(entries.isEmpty()) &#123; //在当前列表上等待 entries.wait(); //停止等待,因为 entries.size()变为非0, //但是我们不知道它仍然是非0, //所以再次通过循环检查它现在的状态 &#125; catch(InterruptedException ex) &#123; //如果被中断，则检查最后一项已经处理过，所以返回 return; &#125; String entry=entries.remove(entries.size()-1); /处理这一项 &#125;&#125;下面给出的代码会读取日志文件,并将项添加到列表中:1234567891011121314151617181920212223public void readLogFile()&#123; while(true) &#123; String entry=log.getNextEntry(); if(entry==null) &#123; //没有更多项要添加到列表, //所以中断所有仍在等待的线程。 //否则它们将永远等待下去 for (Thread thread:threads) &#123; thread. interrupt(); break; &#125; &#125; synchronized(entries) &#123; entries.add(0,entry); entries.notifyAll();唤醒所以在entries(锁)上等待的线程() &#125; &#125;&#125;注解:我这里看的有点懵逼啊,不是很懂上面代码要干嘛。算了我先往下看。结束线程要以合理的方式放弃CPU控制权,最后一种方法是结束( finishing)。当run()方法返回时,线程将撤销,其他线程可以接管CPU。在网络应用程序中,包装一个阻塞操作的线程往往会这样做,例如从服务器下载一个文件,这样应用程序的其他部分就不会被阻塞。另一方面,如果run()方法太简单,总是很快就结束,而不会阻塞,那就存在一个很实际的问题:到底有没有必要生成一个线程。虚拟机在建立和撤销线程时会有很大的开销。如果线程会在极短的时间内结束,那么使用一次简单的方法调用而不是单独的线程可能会结束得更快。本文链接: java网络编程第4版 线程调度]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我的截图百度文字识别工具]]></title>
    <url>%2Fblog%2F3640dbe%2F</url>
    <content type="text"><![CDATA[经过一番编码，终于达到我的效果了。先记录一下代码吧。程序入口类:ScreenShotOCR123456789101112131415161718192021222324252627282930313233343536373839404142package release.ocr.baidu;import java.awt.AWTException;import java.awt.EventQueue;public class ScreenShotOCR&#123; static ScreenShotWindow ssw; public static void main(String[] args) &#123; startScreenShotWindow(); &#125; // 回调函数，使得当前窗口不可见。 public static void notVisible() &#123; ssw.setVisible(false); &#125; public static void visiable() &#123; ssw.setVisible(true); &#125; public static void startScreenShotWindow() &#123; EventQueue.invokeLater(new Runnable() &#123; @Override public void run() &#123; try &#123; ssw = new ScreenShotWindow(); ssw.setVisible(true); &#125; catch (AWTException e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125; &#125;其实上面的main中的代码不用独立提取出来作为一个函数。矩形截图窗口ScreenShotWindowpackage release.ocr.baidu;import java.awt.AWTException;import java.awt.Color;import java.awt.Dimension;import java.awt.Graphics;import java.awt.Image;import java.awt.Rectangle;import java.awt.Robot;import java.awt.Toolkit;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.MouseMotionAdapter;import java.awt.image.BufferedImage;import java.awt.image.RescaleOp;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import javax.imageio.ImageIO;import javax.swing.JButton;import javax.swing.JFileChooser;import javax.swing.JWindow;import javax.swing.filechooser.FileNameExtensionFilter;import javax.swing.filechooser.FileSystemView;import com.melloware.jintellitype.HotkeyListener;import com.melloware.jintellitype.JIntellitype;/** 截图矩形窗口*/public class ScreenShotWindow extends JWindow&#123; private int orgx, orgy, endx, endy; private BufferedImage image = null; private BufferedImage tempImage = null; private BufferedImage saveImage = null; private ToolsWindow tools = null; // 热键相关设置 private static final long serialVersionUID = 1L; // 定义热键标识，用于在设置多个热键时，在事件处理中区分用户按下的热键 public static final int FUNC_KEY_MARK = 1; public static final int EXIT_KEY_MARK = 0; // 构造函数 public ScreenShotWindow() throws AWTException &#123; createScreenCapture(); // 设置鼠标监听事件 this.addMouseListener(new MouseAdapter() &#123; // 鼠标按下 @Override public void mousePressed(MouseEvent e) &#123; // 鼠标按下时，表明截屏开始，记录结束点坐标，并隐藏操作窗口 orgx = e.getX(); orgy = e.getY(); if (tools != null) &#123; // 截图的时候隐藏窗口 tools.setVisible(false); &#125; &#125; // 鼠标松开 @Override public void mouseReleased(MouseEvent e) &#123; // 鼠标松开时，说明截屏结束，显示操作窗口 if (tools == null) &#123; tools = new ToolsWindow(ScreenShotWindow.this, e.getX(), e.getY()); &#125; else &#123; tools.setVisible(false); tools.setLocation(e.getX(), e.getY()); &#125; tools.setVisible(true); tools.toFront(); &#125; &#125;); // 鼠标移动和拖动监听事件处理函数 this.addMouseMotionListener(new MouseMotionAdapter() &#123; @Override public void mouseDragged(MouseEvent e) &#123; // 鼠标拖动时，记录坐标并重绘窗口 endx = e.getX(); endy = e.getY(); // 临时图像，用于缓冲屏幕区域放置屏幕闪烁 Image tempImage2 = createImage(ScreenShotWindow.this.getWidth(), ScreenShotWindow.this.getHeight()); Graphics g = tempImage2.getGraphics(); g.drawImage(tempImage, 0, 0, null); int x = Math.min(orgx, endx); int y = Math.min(orgy, endy); int width = Math.abs(endx - orgx) + 1; int height = Math.abs(endy - orgy) + 1; // 加上1防止width或height0 //设置截屏矩形边框的颜色 g.setColor(Color.RED); g.drawRect(x - 1, y - 1, width + 1, height + 1); // 减1加1都了防止图片矩形框覆盖掉 saveImage = image.getSubimage(x, y, width, height); g.drawImage(saveImage, x, y, null); ScreenShotWindow.this.getGraphics().drawImage(tempImage2, 0, 0, ScreenShotWindow.this); &#125; &#125;); // 第2步：注册热键，第一个参数表示该热键的标识，第二个参数表示组合键，如果没有则为0，第三个参数为定义的主要热键 JIntellitype.getInstance().registerHotKey(FUNC_KEY_MARK, JIntellitype.MOD_ALT, (int) 'W'); JIntellitype.getInstance().registerHotKey(EXIT_KEY_MARK, JIntellitype.MOD_ALT, (int) 'Q'); // 第3步：添加热键监听器JIntellitype JIntellitype.getInstance().addHotKeyListener(new HotkeyListener() &#123; @Override public void onHotKey(int markCode) &#123; switch (markCode) &#123; // 按下alt+w快捷键表示再次截屏 case FUNC_KEY_MARK : // showMessage();// ScreenShotOCR.visiable(); //再次截屏时,隐藏工具窗口 if(tools!=null) &#123; tools.setVisible(false); &#125; //重新截屏 try &#123; createScreenCapture(); &#125; catch (AWTException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; //显示窗口 ScreenShotOCR.visiable(); break; // alt+q快捷键表示退出程序 case EXIT_KEY_MARK : System.exit(0); break; &#125; &#125; &#125;); &#125;// 构造函数结束 /** * 截取当前整个屏幕，并设置到图片字段image中 * @throws AWTException */ public void createScreenCapture() throws AWTException &#123; // 获取屏幕尺寸 Dimension d = Toolkit.getDefaultToolkit().getScreenSize(); // 设置窗口显示大小 this.setBounds(0, 0, d.width, d.height); // 截取整个屏幕 Robot robot = new Robot(); image = robot .createScreenCapture(new Rectangle(0, 0, d.width, d.height)); &#125; // 其他函数 @Override public void paint(Graphics g) &#123; RescaleOp ro = new RescaleOp(0.8f, 0, null); tempImage = ro.filter(image, null); g.drawImage(tempImage, 0, 0, this); &#125; // 保存图像到文件 public void saveImage() throws IOException &#123; JFileChooser jfc = new JFileChooser(); jfc.setDialogTitle("保存"); // 文件过滤器，用户过滤可选择文件 FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG", "png"); jfc.setFileFilter(filter); // 初始化一个默认文件（此文件会生成到桌面上） SimpleDateFormat sdf = new SimpleDateFormat("yyyymmddHHmmss"); String fileName = sdf.format(new Date()); File filePath = FileSystemView.getFileSystemView().getHomeDirectory(); File defaultFile = new File( filePath + File.separator + fileName + ".png"); jfc.setSelectedFile(defaultFile); int flag = jfc.showSaveDialog(this); if (flag == JFileChooser.APPROVE_OPTION) &#123; File file = jfc.getSelectedFile(); String path = file.getPath(); // 检查文件后缀，放置用户忘记输入后缀或者输入不正确的后缀 if (!(path.endsWith(".png") || path.endsWith(".PNG"))) &#123; path += ".png"; &#125; // 写入文件 ImageIO.write(saveImage, "png", new File(path)); System.exit(0); &#125; &#125; // 调用百度识图,传入按钮的引用 public void baiduOCR(JButton baiduOCRButton) throws IOException &#123; // 写入文件 ImageIO.write(saveImage, "png", new File("1.png")); //传入图片,当前窗口的引用，文字识别按钮的引用(改变颜色) Thread baiduOCR = new Thread( new BaiduOCR("1.png", this, baiduOCRButton)); baiduOCR.start(); &#125; public static void Exit() &#123; System.exit(0); &#125;&#125;上面注册了快捷键(热键)，按下alt+w会重新截取屏幕，按下alt+q会退出程序。操作栏ToolsWindow这个操作窗口会在截图结束的时候显示12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788package release.ocr.baidu;import java.awt.BorderLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.IOException;import javax.swing.JButton;import javax.swing.JToolBar;import javax.swing.JWindow;/* * 操作窗口 */public class ToolsWindow extends JWindow&#123; private ScreenShotWindow parent; public ToolsWindow(ScreenShotWindow parent, int x, int y) &#123; this.parent = parent; this.init(); this.setLocation(x, y); this.pack(); this.setVisible(true); &#125; private void init() &#123; this.setLayout(new BorderLayout()); JToolBar toolBar = new JToolBar("Java 截图"); // 保存按钮 JButton saveButton = new JButton("保存"); saveButton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; try &#123; // 保存截图 parent.saveImage(); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125; &#125;); toolBar.add(saveButton); // 百度识图按钮 JButton baiduOCRButton = new JButton("文字识别"); baiduOCRButton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; try &#123; // 保存截图 parent.baiduOCR(baiduOCRButton); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125; &#125;); toolBar.add(baiduOCRButton); // 关闭按钮 JButton closeButton = new JButton("退出"); closeButton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; System.exit(0); &#125; &#125;); toolBar.add(closeButton); this.add(toolBar, BorderLayout.NORTH); &#125;&#125;百度文字识别类:BaiduOCRAPP_IDAPI_KEYSECRET_KEY这三个要到百度文字网页去获取，注册，然后创建文字识别应用。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586package release.ocr.baidu;import java.awt.Color;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import javax.swing.JButton;import org.json.JSONObject;import com.baidu.aip.ocr.AipOcr;import clipboard.util.SysClipboardUtil;import net.sf.json.JSONArray;public class BaiduOCR implements Runnable&#123; // 设置APPID/AK/SK public static final String APP_ID = "你的APP_ID"; public static final String API_KEY = "你的API_KEY"; public static final String SECRET_KEY = "你的SECRET_KEY"; //窗体引用 ScreenShotWindow screenShotWindow; //设置按钮颜色 JButton baiduOCRButton; //文件路径 String path; public BaiduOCR(String path,ScreenShotWindow screenShotWindow,JButton baiduOCRButton) &#123; this.path=path; this.screenShotWindow=screenShotWindow; this.baiduOCRButton=baiduOCRButton; &#125; @Override public void run() &#123; //设置按钮颜色，表示开始处理 baiduOCRButton.setBackground(Color.pink); //让窗体不可见 ScreenShotOCR.notVisible(); //调用百度文字识别接口 baiduOCR(path); //再次调用,改变窗体的显示。让用户知道处理结束了。// ScreenShotOCR.visiable(); //回调函数，执行完毕后关闭程序// ScreenShotWindow.Exit(); //改变按钮颜色，表示处理结束 baiduOCRButton.setBackground(Color.WHITE); &#125; /** * 调用百度文字识别 */ public static void baiduOCR(String path) &#123; // 初始化一个AipOcr AipOcr client = new AipOcr(APP_ID, API_KEY, SECRET_KEY); // 可选：设置网络连接参数 client.setConnectionTimeoutInMillis(2000); client.setSocketTimeoutInMillis(60000); // 调用接口 JSONObject res = client.basicGeneral(path, new HashMap&lt;String, String&gt;()); String text = res.toString(2); HashMap&lt;String, Object&gt; resMap = (HashMap&lt;String, Object&gt;) res.toMap(); // 第二种： Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; it = resMap.entrySet().iterator(); // 缓冲，用来存储识别结果 StringBuilder sbBuilder = new StringBuilder(); Map.Entry&lt;String, Object&gt; entry; while (it.hasNext()) &#123; entry = it.next(); if (entry.getKey().equals("words_result")) &#123; // 获取词组 JSONArray jsonArray = JSONArray.fromObject(entry.getValue()); System.out.println(jsonArray.toString()); for (Object object : jsonArray) &#123; sbBuilder.append(object.toString()); &#125; &#125; &#125; String words = sbBuilder.toString(); words = words.replaceAll("(?:(?:\\\"\\&#125;)?\\&#123;\\\"words\\\":\\\"|\\\"\\&#125;)", ""); SysClipboardUtil.setSysClipboardText(words); &#125;&#125;本文链接: 我的截图百度文字识别工具]]></content>
      <categories>
        <category>我的软件</category>
        <category>百度文字识别</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 死锁]]></title>
    <url>%2Fblog%2F83a775f%2F</url>
    <content type="text"><![CDATA[同步会导致另一个可能的问题:死锁( deadlock)。如果两个线程需要独占访问同样的资源集,而每个线程分别有这些资源的不同子集的锁,就会发生死锁。如果两个线程都不愿意放弃已经拥有的资源,就会进入无限停止状态。在一般意义上讲,这不完全是挂起,因为从操作系统角度看,程序仍然是活动的,行为也是正常的,但对于用户而言。这与挂起没有什么区别。再来看图书馆的例子,在下面这种情况下会发生死锁:Jack和Jill都要撰写关于托马斯·杰斐逊的学期论文,他们都需要两本书《 Thomas Jefferson and Sally Hemings: An AmericanControversy)和《Sally Hemings and Thomas Jefferson: History, Memory and CivicCulture》。如果Jill经借到了第一本,而Jack借到了第二本,倘若他们都不愿意放弃已经借到的书,那么都将无法完成论文。最终截止日期到了,他们都得到一个F。这就是死锁问题。(注:这真是一个有趣的问题)更糟糕的是,死锁可能是偶发性的bug,很难检测。死锁通常取决于不可预知的时间问题。大多数情况下,Jack或Jill会首先到达图书馆,把两本书都借到。这种情况下,先拿到书的人撰写好论文,再归还这两本书,然后另一个人拿到书并撰写论文。只有在极少情况下他们会同时到达,每人拿到其中一本书。100次里有99次,或者1000次里有999次,程序都能完全正常地运行。只有在极少情况下会毫无征兆地挂起。当然,如果一个多线程服务器每分钟处理成百上千个请求,即使每百万个请求才发生一次问题,也会迅速地让服务器挂起。要防止死锁,最重要的技术是避免不必要的同步。如果有其他方法可以确保线程安全,比如让对象不可变或保存对象的一个局部副本,就最好使用那种方法(而不是同步)。同步应当是确保线程安全的最后一道防线。如果确实需要同步,要保持同步块尽可能小,而且尽量不要一次同步多个对象。但这可能很困难,因为你的代码会调用Java类库的很多方法,这些方法可能会在你不知情的情况下同步一些对象。因此,实际同步的对象可能比你预想的要多得多。本文链接: java网络编程第4版 死锁]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java设置全局热键——第三方包jintellitype实现]]></title>
    <url>%2Fblog%2Ff91e74b%2F</url>
    <content type="text"><![CDATA[Java原生API并不支持为应用程序设置全局热键。要实现全局热键，需要用JNI方式实现，这就涉及到编写C/C++代码，这对于大多数不熟悉C/C++的javaer来说，有点困难。不过幸好，国外有人已经实现了，发布成第三方java包，借此，我们可以很方便的设置全局热键而不用编写任何C/C++代码。jintellitype由两部分组成，一部分是java写的jintellityp的jar文件，另一部分是C/C++写的已编译好的dll文件，有两个dll文件，分别是32位和64位系统的。在我使用jintellitype的过程中，把jintellitype的jar文件Build进项目后，不知道dll文件放哪，我试着运行，根据错误提示，原来需要把dll文件放到项目com.melloware.jintellitype包下。建议同时把两个dll文件都加进去，这样，你的程序就可以同时兼容32位和64位系统，而你不需要任何额外的处理。使用jintellitype的步骤所以，使用jintellitype的步骤为：下载jintellitype，解压压缩包。JIntellitype官方下载：http://melloware.com在官网首页中找到JIntellitype，然后点进去(需要科学上网)。在Downloads页面中下载最新的版本(https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jintellitype/jintellitype-1.3.9-dist.zip)。下载后解压就行了。下载地址2：http://mvnrepository.com/artifact/com.melloware/jintellitype/1.3.9。这个网站可以下载到jar包，好像没能下载到JIntellitype.dll和JIntellitype64.dll,还是使用上面的方法吧。在你的Java项目中新建一个包(package)：com.melloware.jintellitype把解压到的两个dll文件(JIntellitype.dll和JIntellitype64.dll)放到你的Java项目中的com.melloware.jintellitype中Eclipse中的Buildpath中引入jintellitype.jar完成上面的步骤后就可以使用热键来控制程序了。实例：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JOptionPane;import com.melloware.jintellitype.HotkeyListener;import com.melloware.jintellitype.JIntellitype;/** * 利用JIntellitype实现全局热键设置 * * @author Jeby Sun * */public class GlobleHotKeyDemo extends JFrame&#123; private static final long serialVersionUID = 1L; // 定义热键标识，用于在设置多个热键时，在事件处理中区分用户按下的热键 public static final int FUNC_KEY_MARK = 1; public static final int EXIT_KEY_MARK = 0; JButton msgBtn; JButton exitBtn; public GlobleHotKeyDemo() &#123; this.setTitle("全局热键设置"); this.setBounds(100, 100, 600, 400); this.setLayout(null); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); msgBtn = new JButton("弹出框（Alt+S）"); // 设置按钮边距 msgBtn.setMargin(new Insets(0, 0, 0, 0)); msgBtn.setFocusable(false); msgBtn.setBounds(20, 20, 120, 30); msgBtn.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; showMessage(); &#125; &#125;); this.add(msgBtn); exitBtn = new JButton("退出（Alt+Q）"); exitBtn.setMargin(new Insets(0, 0, 0, 0)); exitBtn.setFocusable(false); exitBtn.setBounds(160, 20, 120, 30); exitBtn.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; System.exit(0); &#125; &#125;); this.add(exitBtn); // 第一步：注册热键，第一个参数表示该热键的标识，第二个参数表示组合键，如果没有则为0，第三个参数为定义的主要热键 JIntellitype.getInstance().registerHotKey(FUNC_KEY_MARK, JIntellitype.MOD_ALT, (int) 'S'); JIntellitype.getInstance().registerHotKey(EXIT_KEY_MARK, JIntellitype.MOD_ALT, (int) 'Q'); // 第二步：添加热键监听器 JIntellitype.getInstance().addHotKeyListener(new HotkeyListener() &#123; @Override public void onHotKey(int markCode) &#123; switch (markCode) &#123; case FUNC_KEY_MARK : showMessage(); break; case EXIT_KEY_MARK : System.exit(0); break; &#125; &#125; &#125;); this.setVisible(true); &#125; public void showMessage() &#123; JOptionPane.showMessageDialog(null, "就算把窗口最小化，按快捷键Alt+S也可以弹出提示框哦！", "弹出框标题", JOptionPane.INFORMATION_MESSAGE); &#125; public static void main(String[] args) &#123; new GlobleHotKeyDemo(); &#125;&#125;其实，jintellitype的使用非常简单，就3个步骤：第一步：添加jar包和dll文件；第二步：注册热键；第三步：添加热键监听器，实现接口的方法；参考：https://www.cnblogs.com/jebysun/p/3969363.html本文链接: Java设置全局热键——第三方包jintellitype实现]]></content>
      <categories>
        <category>Java</category>
        <category>java_GUI</category>
        <category>全局热键</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 同步的替代方式]]></title>
    <url>%2Fblog%2F8076ac29%2F</url>
    <content type="text"><![CDATA[对于由线程调度引起的不一致的行为,同步并不总是这个问题最好的解决方案。还有很多技术可以完全避免使用同步。第一个方法是,在可能的情况下,要使用局部变量而不是字段。局部变量不存在同步问题。每次进入一个方法时,虚拟机将为这个方法创建一组全新的局部变量。这些变量在方法外部是不可见的,而且方法退出时将被撤销。因此,一个局部变量不可能由两个不同的线程共享。每个线程都有自己单独的一组局部变量。基本类型的方法参数也可以在单独的线程中安全地修改,因为Java按值而不是按引用来传递参数。以此推断,像Math,sqrt()等纯函数只取0个或多个基本类型参数,完成一些计算,并返回一个值,而不与任何类的字段交互,这些函数自然就是线程安全的。这些方法通常声明为静态方法或者应当声明为静态方法。对象类型的方法参数有些麻烦,因为按值传递的实际参数是对象的引用。例如,假设将个数组的引用传入sort()方法。当这个方法对数组排序时,没有办法阻止同样拥有这个数组引用的其他线程修改数组中的值。String参数是安全的,因为它们是不可变( immutable)的(也就是说,一旦创建了一个String对象,它就不能被任何线程修改)。不可变对象永远也不会改变状态。其字段的值只在构造函数运行时设置一次,其后就不会再改变。 StringBuffer参数是不安全的,因为它们并不是不可变的,在创建后还可以修改。构造函数一般不需要担心线程安全问题。在构造函数返回前,没有线程有这个对象的引用,所以不可能有两个线程都有这个对象的引用(最有可能的问题是构造函数依赖于另一个线程中的另一个对象,这个对象可能在构造函数运行时改变,但这种情况并不常见。另外,如果构造函数以某种方式把它正在创建的对象的引用传递给一个不同的线程,也有可能出现问题,但这种情况也不常见)。你可以在自己的类中利用不可变性。要使一个类做到线程安全,这往往是最简单的方法,通常会比确定哪些方法或代码段要进行同步容易得多。要使一个对象不可变,只要将其所有字段声明为 private(私有)和 final(最终),而且不要编写任何可能改变它们的方法。核心Java库中的很多类都是不可变的(如 java.lang.String、java.lang.Integer、java.lang.Double等)。这使得这些类在某些方面用处不大,但的确能让它们有更强的线程安全性。第三种技术是将非线程安全的类用作为线程安全的类的一个私有字段。只要包含类只以线程安全的方式访问这个非安全类,而且只要永远不让这个私有字段的引用泄漏到另一个对象中,那么这个类就是安全的。这个技术的一个例子就是Web服务器可能使用非同步的 LogFile类,但是为每个单独的线程提供它自己单独的日志,这样各个线程之间就不会有共享的资源。有些情况下,你可以使用 java.util.concurrent.atomic包中特意设计为保证线程安全但可变的类。具体来讲,可以不使用int而使用 AtomicInteger。不使用long而使用 AtomicLong。不使用 boolean而使用 AtomicBoolean。不使用int[]而使用AtomicIntegerArray。不使用引用变量,而是把对象存储在一个 AtomicReference中,不过需要说明,这不会让对象本身也是线程安全的,只是该引用变量的获取和设置是线程安全的。如果可以利用现代CPU上快速的机器级线程安全指令,这些类可能比其相应基本类型的同步访问快得多。对于映射和列表等集合,可以使用java.util.Collections的方法把它们包装在一个线程安全的版本中。例如,如果有一个集合foo,可以用 Collections.synchronizedSet(foo)得到这个集合的一个线程安全视图。如果有一个列表foo,可以使用Collections.synchronizedList(foo)来得到它的线程安全视图。对于映射,需要调用Collections.synchronizedMap(foo)等。为了能正常工作,在此之后必须只使用Collections.synchronizedSet/List/Map返回的视图。如果偶尔访问了原来的底层数据结构,那么不论是原来的数据结构还是同步视图都无法做到线程安全。不管怎样,要认识到这只是单个的原子方法调用。如果需要作为一个原子连续地完成两个操作,中间不能有中断,就需要同步。因此,举例来说,即使一个列表通过Collections.synchronizedList()同步,如果希望迭代处理这个列表,仍然需要对它同步,因为这可能涉及很多连续的原子操作。尽管每个方法调用确实是原子的,可以保证安全,但是如果没有明确的同步,这个操作序列并不一定安全。本文链接: java网络编程第4版 同步的替代方式]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 同步方法]]></title>
    <url>%2Fblog%2Fea28a41c%2F</url>
    <content type="text"><![CDATA[由于对对象本身同步整个方法体是很常见的,所以Java为此提供了一个快捷方式。可以通过向方法声明添加 synchronized修饰符,对当前对象(this引用)同步整个方法。例如：12345678public synchronized void writeEntry(String message) throws IOException&#123; Date d=new Date(); out.write(d.toString()); out.write('\t'); out.write(message); out.write("\r\n");&#125;对于同步问题,仅仅向所有方法添加 synchronized修饰符并不是一劳永逸的解决方案。首先,它使得很多VM的性能严重下降(不过在这方面更多最新的VM已经大为改进),可能会使代码速度降低三分之一或者更多。其次,它大大增加了死锁的可能性。第三,也是最重要的,并不总是对象本身需要防止同时修改或访问,如果只是对该方法所属类的实例进行同步,可能并不能保护真正需要保护的对象。例如,在这个例子中,我们真正要避兔的是两个线程同时写入out。如果其他类有与 LogFile完全无关的out的引用,这些写入就会失败。不过在这个例子中,同步LogFile对象就足够了,因为out是一个私有实例变量。由于不会提供这个对象的引用,除非通过 LogFile类,否则其他对象没有办法调用这个对象。因此,在这里同步 LogFile对象与同步out有同样的效果。本文链接: java网络编程第4版 同步方法]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 同步块]]></title>
    <url>%2Fblog%2F3c8d711%2F</url>
    <content type="text"><![CDATA[为了指示这5行代码应当一起执行,要把它们包围在一个synchronized块中,它会对System.out对象同步,如下所示:123456synchronized(System.out)&#123; System.out.print(input+": "); System.out.print(DatatypeConverter.printHexBinary(digest)); System.out.println();&#125;一旦线程开始打印这些值,所有其他线程在打印它们的值之前就必须停止,需要等待这个线程结束。同步要求在同一个对象上同步的所有代码要串行地运行,而不能并行运行。例如,如果另一个不同的类和不同进程中的代码恰好也对System.out同步,那么它也不能与这个代码块并行运行。不过,对不同对象同步的代码或者根本不同步的代码仍可以与这个代码并行运行。即使它使用了 System. out也可以这么做。Java没有提供任何方法来阻止其他线程使用共享资源。它只能防止对同一个对象同步的其他线程使用这个共享资源。提示:事实上, Printstream类在内部要求大多数方法都对 Printstream对象同步(如这个例子中的 System.out)。换句话说,调用System.out.println()的其他各个线程都会对System.out同步,而且必须等待这个代码结束。从这个方面来看, Printstream很独特。大多数其他Outputstream子类都不会自行同步。只要有多个线程共享资源,都必须考虑同步。这些线程可能是相同 Thread子类的实例,或者使用了相同的 Runnable类,也可能是完全不同的类的实例。关键在于这些线程所共享的资源,而不是这些线程是哪个类。只有当两个线程都拥有相同对象的引用时,同步才成为问题。在前面的例子中,问题就在于多个线程都访问同一个 Printstream对象System.out。在这种情况下,导致冲突的是一个静态类变量。不过,实例对象也会有问题。例如,假设你的Web服务器保存了一个日志文件。这个日志文件可能用示例3-11中的类来表示。这个类本身不使用多线程。不过,如果web服务器使用多线程处理入站连接,那么每个线程都需要访问相同的日志文件,因而会访问相同的 LogFile对象。示例3-11: LogFile123456789101112131415161718192021222324import java.io.*;import java.util.*;public class LogFile &#123; private Writer out; public LogFile(File f) throws IOException &#123; FileWriter fw = new FileWriter(f); this.out = new BufferedWriter(fw); &#125; public void writeEntry(String message) throws IOException &#123; Date d = new Date(); out.write(d.toString()); out.write('\t'); out.write(message); out.write("\r\n"); &#125; public void close() throws IOException &#123; out.flush(); out.close(); &#125;&#125;在这个类中, writeEntry()方法获得当前日期和时间,然后使用四个单独的out.write()调用写入底层文件。如果两个或多个线程都有同一个 LogFile对象的引用,而且一个线程在写数据的过程中被另一个线程打断,这就会出现问题。一个线程可能写入了日期和个tab(制表符),然后下一个线程可能写入三个完整的记录。然后,第一个线程再写入消息、回车和换行。解决这个问题的方法还是同步。不过,在这个例子中,要对哪个对象同步呢?对此有两个很好的选择。第一种选择是对 Writer对象out同步。例如:1234567891011public void writeEntry(String message) throws IOException&#123; synchroized(out) &#123; Date d=new Date(); out.write(d.toString()); out.write('\t'); out.write(message); out.writer("\r\n"); &#125;&#125;这样就能正常工作了,这是因为所有使用这个 LogFile对象的线程也会使用属于这个LogFile的同一个out对象。out是私有的,这并没有关系。虽然它会由其他线程和对象使用,但只会在 LogFile类中引用。此外,虽然在这里是对out对象同步,但需要保护不被中断的是writeEntry()方法。 Writer类都有自己的内部同步,这会防止一个线程中断另一个线程中的 write()方法(对于输入和输出流则并非如此,只有 Printstream有所例外。写一个输出流时有可能被另一个线程中断)。每个 Writer都有一个lock字段,指示书写器要对所写的哪个对象同步。第二种可能性是对 LogFile对象本身同步。这很简单,只要用到this关键词。例如:1234567891011public void writeEntry(String message) throws IOException&#123; synchronized(this) &#123; Date d=new Date(); out.write(d.toString()); out.write('\t'); out.write(message); out.write("\r\n"); &#125;&#125;本文链接: java网络编程第4版 同步块]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 同步]]></title>
    <url>%2Fblog%2F83389788%2F</url>
    <content type="text"><![CDATA[我的书架上堆满了书,包括很多一样的书,过时的书,以及10年里我从没看过、可能将来也不会再看的书。这些年来,为了购置这些书,花了我上万美元,甚至更多。不过,离我的公寓两个街区就有一个中心布鲁克林公共图书馆,那里的书架上也堆满了书。100多年来,这个图书馆为其收藏花费了上百万美元。但区别在于它的书由布鲁克林的居民所共享,因此这些书有很高的利用率。所收藏的大多数书一年会使用很多次。虽然公共图书馆在买书和存书方面比我花的钱多很多,但图书馆阅读每页书的成本却比我的个人书架要低很多。这正是共享资源的优点。当然,共享资源也有缺点。如果我需要图书馆的一本书,我必须走到图书馆,还要在书架上寻找我需要的书。我必须排队办手续拿到这本书,或者我只能在图书馆看这本书而不能带回家。有时候,别人已经借走了这本书,我就必须填写预约单,申请这本书归还时能为我保留。另外我不能在书边上写笔记,不能对段落做标记,也不能撕下几页粘在我的公告牌上(唔,也许我可以这样做,但是如果这样做了,就会大大地降低这本书对于将来其他借阅者的用处:如果图书馆抓到了我,我可能会失去借阅资格)。从图书馆借书而不是自己买一本,在时间和方便性上会有很大的损失,但能够节约钱和存储空间。线程就像是图书馆的借阅者,它从一个中心资源池中借阅。线程通过共享内存、文件句柄、 socket和其他资源使得程序更高效。只要两个线程不同时使用相同的资源,多线程的程序就比多进程程序高效得多,在多进程程序中,每个进程都要为各个资源维护自己的副本。多线程程序的缺点是,如果两个线程同时访问同一个资源,其中一个就必须等待另一个结東。如果其中一个没有等待,资源就可能被破坏。让我们看一个特定的例子。考虑示例3-1和示例3-2中的run()方法。如前所述,这个方法把结果建立为一个String,然后使用一个 System.out.println()调用将这个 String在控制台打印出来。输出如下四个线程并行地运行,生成了这个输出。每个线程向控制台写入一行。写入这些行的顺序是不可预见的,因为线程的调度不可预知,但每一行会作为一个整体写入。不过,假如使用这个run()方法的另一个版本,不是将中间结果存储在 String变量 result中,而是当这些中间结果可用时就直接显示在控制台上:不同文件的摘要都混在了一起!无法区分哪个数字属于哪个摘要。很明显,这是个很大的问题。出现这种混乱的原因在于, System.out由4个不同的线程共享。如果一个线程通过多个System.out.print()语句向控制台写输出,有可能它还没有完成所有写入,就有另一个线程插进来,开始写它的输出。哪个线程会抢先于其他线程,这个具体顺序无法确定每次运行这个程序时,你都可能会看到稍有不同的输出。需要有一种办法能够指定一个共享资源只能由一个线程独占访问来执行一个特定的语句序列。在这个例子中,共享资源是 System.out,需要独占访问的语句是:123System.out.print(input+": ");System.out.print(DatatypeConverter.printHexBinary(digest));System.out.println();本文链接: java网络编程第4版 同步]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 Future,Callable和Executor]]></title>
    <url>%2Fblog%2F8f04ec78%2F</url>
    <content type="text"><![CDATA[Java5引入了多线程编程的一个新方法,通过隐藏细节可以更容易地处理回调。不再是直接创建一个线程,你要创建一个 Executorservice,它会根据需要为你创建线程。可以向 ExecutorService提交Ca11able任务,对于每个Ca11ab1e任务,会分别得到一个Future。之后可以向 Future请求得到任务的结果。如果结果已经准备就绪,就会立即得到这个结果。如果还没有准备好,轮询线程会阻塞,直到结果准备就绪。这种做法的好处是,你可以创建很多不同的线程,然后按你需要的顺序得到你需要的答案。例如,假设你要找出一个很大的数字数组中的最大值。如果采用最原始的方法实现,需要的时间为O(n),其中n是数组中的元素个数。不过,如果可以将这个工作分解到多个线程,每个线程分别在一个单独的内核上运行,这样就会快得多。为了便于说明,下面假设需要两个线程。Callable接口定义了一个call()方法,它可以返回任意的类型。示例3-9是一个Callable,它会采用最明显的方式查找数组的一个分段中的最大值。示例3-9: FindMaxTask123456789101112131415161718192021222324import java.util.concurrent.Callable;class FindMaxTask implements Callable&lt;Integer&gt; &#123; private int[] data; private int start; private int end; FindMaxTask(int[] data, int start, int end) &#123; this.data = data; this.start = start; this.end = end; &#125; public Integer call() &#123; //记录最大值 int max = Integer.MIN_VALUE; for (int i = start; i &lt; end; i++) &#123; //记录下最大的值 if (data[i] &gt; max) max = data[i]; &#125; return max; &#125;&#125;尽管可以直接调用call()方法,但这并不是它的本来目的。实际上,你要把Callable对象提交给一个 Executor,它会为每个Callable对象创建一个线程( Executor还可以使用其他策略,例如,它可以使用一个线程按顺序调用这些 callable,不过对于这个问题来说,每个 callable分别对应一个线程是一个很好的策略)。如示例3-10所示。示例3-10: MultithreadedMaxFinder123456789101112131415161718192021import java.util.concurrent.*;public class MultithreadedMaxFinder &#123; public static int max(int[] data) throws InterruptedException, ExecutionException &#123; if (data.length == 1) &#123; return data[0]; &#125; else if (data.length == 0) &#123; throw new IllegalArgumentException(); &#125;// split the job into 2 pieces FindMaxTask task1 = new FindMaxTask(data, 0, data.length/2); FindMaxTask task2 = new FindMaxTask(data, data.length/2, data.length);// spawn 2 threads ExecutorService service = Executors.newFixedThreadPool(2); Future&lt;Integer&gt; future1 = service.submit(task1); Future&lt;Integer&gt; future2 = service.submit(task2); return Math.max(future1.get(), future2.get()); &#125;&#125;这里会同时搜索这两个子数组,所以对于合适的硬件和规模很大的输入,这个程序运行的速度几乎可以达到原来的两倍。不仅如此,与先找出数组前一半的最大值再找出数组后一半的最大值的做法相比,这个代码几乎同样简单和直接,而不用担心线程或异步性。不过,这里有一个重要的区别。在示例3-10的最后一个语句中,调用 future1.get()时,这个方法会阻塞,等待第一个 FindMaxTask完成。只有当第一个 FindMaxTask完成时,才会调用 future2.get()。也有可能第二个线程已经结束,在这种情况下,结果值会直接返回,但是如果第二个线程还没有结束,同样的,也会等待这个线程完成。一旦两个线程都结束,将比较它们的结果,并返回最大值。(思想就是，用了两个线程来实现，第一个线程)Future是一种非常方便的做法,可以启动多个线程来处理一个问题的不同部分,然后等待它们全部都结束之后再继续。 executor和 executor服务允许你用不同的策略将任务分配给不同的线程。这个例子只使用了两个线程,不过完全可以使用更多的线程,并重用这些线程来完成多个任务。只要你能把任务分解到适当独立的部分, Executor就可以隐藏异步性的很多细节。本文链接: java网络编程第4版 Future,Callable和Executor]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[通过JIntellitype给Java程序注册系统热键]]></title>
    <url>%2Fblog%2F9d991fe9%2F</url>
    <content type="text"><![CDATA[参考:https://blog.csdn.net/iteye_11213/article/details/81886200JIntellitype提供了简单的调用方法去注册系统热键。操作简单，示例明确，下载后阅读一下readme.txt文档，就可以使用了。使用时首先要定义一个实现了HotkeyListener接口的类，实现其onHotKey(int)方法，这个方法接收一个数字，作为标志然后就可以使用JIntellitype.getInstance().registerHotKey(int,int,int)方法注册需要的热键了，其中第一个参数将是触发时传递个onHotKey方法的参数，所以两者要保持统一，第二个参数为ctrl、alt、shift等的组合结果，第三个一般为组合键的字母。示例代码：1234567891011121314151617181920212223242526package com.iflysse.swing;import com.melloware.jintellitype.HotkeyListener;import com.melloware.jintellitype.JIntellitype;/*** @author ZYWANG*/public class HotkeyTest &#123; public static void main(String[] args) throws InterruptedException &#123; //注册一个ctrl+alt+a的热键 JIntellitype.getInstance().registerHotKey(100, JIntellitype.MOD_CONTROL+JIntellitype.MOD_ALT, (int)'T'); //添加热键监听器 JIntellitype.getInstance().addHotKeyListener(new HotkeyListener() &#123; @Override public void onHotKey(int arg0) &#123; System.out.println(arg0);//打印参数 //JIntellitype.getInstance().unregisterHotKey(arg0);//用于移除热键注册的方法 System.exit(0); &#125; &#125;); Thread.sleep(10000000); &#125;&#125;JIntellitype下载地址：http://melloware.com/download/ （打开页面，找到JIntellitype）下载地址：https://code.google.com/archive/p/jintellitype/downloads,注意需要科学上网。附件中提供了一个jintellitype-1.3.4-dist版本备用本文链接: 通过JIntellitype给Java程序注册系统热键]]></content>
      <categories>
        <category>Java</category>
        <category>java_GUI</category>
        <category>全局热键</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 回调]]></title>
    <url>%2Fblog%2F2907fd66%2F</url>
    <content type="text"><![CDATA[事实上,还有一种更简单有效的方法来解决这个问题。有了这个方法,我们完全可以淘汰前面的做法,不必通过无限循环来重复地轮询每个 ReturnDigest对象来查看是否结東。这个方法的技巧在于,不是在主程序中重复地询问每个 ReturnDigest线程是否结束(就像一个五岁小孩在长途汽车旅行中反复地问“我们到了吗?”这真的很烦人),而是让线程告诉主程序它何时结束。这是通过调用主类(即启动这个线程的类)中的一个方法来做到的。这被称为回调( callback),因为线程在完成时反过来调用其创建者。这样一来,主程序就可以在等待线程结束期间休息,而不会占用运行线程的时间。当线程的run()方法接近结束时,要做的最后一件事情就是基于结果调用主程序中的一个已知方法。不是由主程序询问每个线程来寻求答案,而是由每个线程告知主程序答案。例如,示例3-5展示了一个与前面示例很相似的CallbackDigest类。不过,在run()方法的末尾,对于最初启动这个线程的类,它要将 digest传递给这个类的CallbackDigestUserInterface, receiveDigest()静态方法。示例3-5: CallbackDigest12345678910111213141516171819202122232425262728import java.io.*;import java.security.*;public class CallbackDigest implements Runnable &#123; private String filename; public CallbackDigest(String filename) &#123; this.filename = filename; &#125; @Override public void run() &#123; try &#123; FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; // read entire file din.close(); byte[] digest = sha.digest(); CallbackDigestUserInterface.receiveDigest(digest, filename); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; catch (NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125;&#125;示例3-6中所示的CallbackDigestUserInterface类提供了main()方法。不过,与这个程序的其他变体中的main()方法不同,这个方法只是为命令行中指定的文件启动线程。它不会具体读取、显示或对计算结果完成其他的操作。这些功能由一个单独的方法receiveDigest()来处理。receiveDigest()不在main()方法中调用,沿着main()方法的控制流所能到达的任何方法也不会调用这个 receiveDigest()方法。实际上,它由每个线程单独调用。也就是说, receiveDigest()在摘要线程中运行,而不是在执行主线程中运行。示例3-6: CallbackDigestUserInterface123456789101112131415161718192021import javax.xml.bind.*; // for DatatypeConverter; requires Java 6 or JAXB 1.0public class CallbackDigestUserInterface &#123; public static void receiveDigest(byte[] digest, String name) &#123; StringBuilder result = new StringBuilder(name); result.append(": "); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); &#125; public static void main(String[] args) &#123; for (String filename : args) &#123;// Calculate the digest CallbackDigest cb = new CallbackDigest(filename); Thread t = new Thread(cb); t.start(); &#125; &#125;&#125;示例3-5和示例3-6使用静态方法完成回调,这样CallpackDigest只需要知道CallbackDigestUserInterface中要调用的方法名。不过,回调实例方法也不会太难(而且回调实例方法更为常见)。这种情况下,进行回调的类必须有其回调对象的一个引用。通常情况下,这个引用通过线程构造函数的参数来提供。当run()方法接近结束时,要做的最后一件事情就是调用回调对象的实例方法来传递结果。例如,示例3-7展示了一个与前面很类似的CallbackDigest类。不过,这一次它有一个额外的字段,这是个名为callback的 InstanceCallbackDigestUserInterface对象。在run()方法的末尾,digest被传递给 callback的 receiveDigest()方法。 InstanceCallbackDigestUserInterface对象本身在构造函数中设置。示例3-7: InstanceCallbackDigest123456789101112131415161718192021222324252627282930313233import java.io.*;import java.security.*;public class InstanceCallbackDigest implements Runnable &#123; private String filename; //用于回调的引用 private InstanceCallbackDigestUserInterface callback; //从构造函数中传入主线程的引用，这样当前线程就可以使用该引用调用主线程的实例方法(实例回调) public InstanceCallbackDigest(String filename,InstanceCallbackDigestUserInterface callback) &#123; this.filename = filename; this.callback = callback; &#125; @Override public void run() &#123; try &#123; //其他处理方法，不用管它干什么的，了解思想就行了 FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; // read entire file din.close(); byte[] digest = sha.digest(); //通过传入的引用，回到主线程的方法。 callback.receiveDigest(digest); &#125; catch (IOException | NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125;&#125;示例3-8中的 InstanceCallbackDigestUserInterface类有main()方法和 receiveDigest()方法,用于处理传入的摘要。示例3-8只是显示摘要,但功能更强的类还可以完成其他操作,如将摘要存储在一个字段中,用它启动另一个线程,或者对它完成进一步的计算。示例3-8: InstanceCallbackDigestUserInterface12345678910111213141516171819202122232425262728293031323334353637383940414243444546import javax.xml.bind.*; // for DatatypeConverter; requires Java 6 or JAXB 1.0public class InstanceCallbackDigestUserInterface &#123; private String filename; private byte[] digest; public InstanceCallbackDigestUserInterface(String filename) &#123; this.filename = filename; &#125; public void calculateDigest() &#123; //创建，从线程，传入当前主类的实例(this) InstanceCallbackDigest cb = new InstanceCallbackDigest(filename, this); //启动从线程 Thread t = new Thread(cb); t.start(); &#125; //提供给从线程回调的方法。 void receiveDigest(byte[] digest) &#123; this.digest = digest; System.out.println(this); &#125; @Override public String toString() &#123; String result = filename + ": "; if (digest != null) &#123; result += DatatypeConverter.printHexBinary(digest); &#125; else &#123; result += "digest not available"; &#125; return result; &#125; public static void main(String[] args) &#123; for (String filename : args) &#123;// Calculate the digest InstanceCallbackDigestUserInterface d = new InstanceCallbackDigestUserInterface(filename); d.calculateDigest(); &#125; &#125;&#125;使用实例方法代替静态方法进行回调要复杂一些,但有很多优点。首先,主类(这个例子中主类是 InstanceCallbackDigestUserInterface)的各个实例只映射至一个文件,可以自然地跟踪记录这个文件的信息,而不需要额外的数据结构。此外,这个实例在必要时可以很容易地重新计算某个特定文件的摘要。实际上,经证明这种机制有更大的灵活性。但是也有一个警告。注意这里新增了启动线程的 calculateDigest()方法。从逻辑上考虑,你可能认为这属于构造函数。不过,在构造函数中启动线程很危险,特别是线程将回调原来的对象时。这里有一个竞态条件,可能会在构造函数结束而且对象完全初始化之前允许新线程进行回调。在这里不太可能,因为启动新线程是构造函数做的最后件事。不过,至少理论上是有可能的。因此,万无一失的做法是避免在构造函数中启动线程。相比于轮询机制,回调机制的第一个优点是不会浪费那么多CPU周期。但更重要的优点是回调更灵活,可以处理涉及更多线程、对象和类的更复杂的情况。例如,如果有多个对象对线程的计算结果感兴趣,那么线程可以保存一个要回调的对象列表。特定的对象可以通过调用 Thread或 Runnable类的一个方法把自己添加到这个列表中来完成注册,表示自己对计算结果很感兴趣。如果有多个类的实例对结果感兴趣,可以定义一个新的interface(接口),所有这些类都要实现这个新接口。这个 interface(接口)将声明回调方法。如果你对此有种似曾相识的感觉,可能是因为你以前见过这种机制。这正是在 SwingAWT和 Java bean中处理事件的方法。AWT在程序之外的一个单独的线程中运行。组件和bean通过回调在特定接口(如 ActionListener和 PropertyChangeListener)中声明的方法来通知事件的发生。监听者对象使用 Component类中的方法(如 addActionListener()和 addPropertyChangeListener()来完成注册,表示对特定组件触发的事件感兴趣。在组件内部,已注册的监听者存储在由 java.awt.AWTEventMulticaster构成的一个链表中。这种机制有一个更一般的名字:观察者(Observer)设计模式。本文链接: java网络编程第4版 回调]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java图形界面编程]]></title>
    <url>%2Fblog%2F795fc6f9%2F</url>
    <content type="text"><![CDATA[参考：https://wenku.baidu.com/view/b0b3ae2aa5e9856a5612609f.html图形用户界面( Graphical User Interface)简称GUI,提供了一种更加直观、友好的与用户进行交互的方式。利用Java语言进行图形用户界面操作主要由java.awt和 java.swing两个包来完成。其中,AWT包是图形用户界面处理的基本工具包, Swing包在AWT包的基础上进行了升级、扩展,具有更加强大的图形界面开发功能。本章在了解AWT包功能的基础上,重点讲解 Swing的功能。AWT简介Java1.0的出现带来了抽象窗口工具箱(AWT)。设计目标是希望构建一个通用的GUI,使得利用它编写的程序能够运行在所有的平台上,以实现Sun公司提出的口号“一次编写,随处运行”。 Java AWT中包含了许多类来支持GUI设计。AWT由Java的 Java.awt包提供,该包中有许多用来设计GU的组件类,如按钮、菜单、列表、文本框等组件类;同时还包含窗口、面板等容器类。AWT的具体层次结构如图16.1所示。Java提供了一系列AWT软件包,其中主要的包及包的描述如图16.2所示。java.awt包:是AWT的核心包，包含用于创建用户界面和绘制图形图像的所有类java.awt包：AWT的核心包,包含用于创建用户界面和绘制图形图像的所有类java.awt.color包：提供定义颜色及其空间java.awt.datatransfer包：提供在应用程序之间和在应用程序内部传输数据的接口和类java.awt.event包:提供处理由AWT组件所激发的各类事件的接口和类java.awt.font包:提供各种字体,包括类及接口java.awt.image包:用于图像处理,提供创建和修改图像的各种类java.awt.print包:2D图像的API包,为通用的打印API提供类和接口java.awt包提供了基本的Java程序的GUI设计工具。主要包括组件、容器和布局管理器三个概念,其具体描述如下所示。GUI设计工具组件组件Component)：图形用户界面的最基本组成部分是组件,组件是一个可以以图形化的方式显示在屏幕上并能与用户进行交互的对象,例如个按钮,一个标签等容器( Container)：是Component(组件)的子类,容器本身是一个组件具有组件的所有性质,但是其主要功能是容纳其他组件和容器布局管理器(LayoutManager): 每个容器都有一个布局管理器,使用布局管理器可以对容器中的某个组件进行定位或判断其大小尺寸等Swing简介Swing是Java基础类库( Java Foundation Classes)中有关图形界面的类库。 Swing扩展自AWT。例如JFrame扩展自 Frame, JButton扩展自Component等。基本上AWT中的每种控件都能在Swing中找到替代品,比如AWT中的Button对应于 Swing中的 JButton,AWT中的 TextField对应于 Swing中的 JTextField等。Swing包是JFC(Java Foundation Classes)的一部分,它由许多包组成,这些包的名称及描述如表16.1所示。容器类窗口( JFrame)、面板( JPanel)和对话框(J)是Swing中提供用来创建表示图形用户界面的类。该类的对象将被当作容器使用,所有的 Swing组件都必须被添加到容器中,才能被显示出来。JFrame类Jframe是一个窗口容器组件,可以被显示在用户桌面上,同时也是一个框架,在其中,可以添加需要的其他的Swing组件。 Jframe是少数几个不是通过绘制的方式显示的Swing组件。 Jframe类的构造方法如下所示public JFrame(String title)构造一个初始状态是不可见的、有指定标题的JFrame对象。参数 title指明了 JFrame对象的标题Jframe类中还提供了一些与窗口有关的方法。其主要方法与方法描述如表16.2所示。JDialog类JDialog是一个用来创建对话框的类,是 Dialog类的子类。创建的 JDialog对象可以用来向用户返回信息,接收用户的输入,实现与用户的交互。JDialog与Jframe的区别JDialog对象需要依赖于其他的对话框(比如 Jframe)而存在,当它所依赖的对话框关闭或最小化的时候,该对话框也随之关闭或最小化。JDialog类创建对话框对象的构造方法如图16.7所示。Dialog(JFrame frame,String s)创建一个对话框对象,初始状态为不可见。参数s用来设置对话框的名字Dialog(frame frame, String s, boolean b)创建一个对话框对象。参数s用来设置对话框的名字,参数b用来决定该对话框的模式JDialog类中的主要方法及方法描述如表16.3所示。JPanel类在得到了 JFrame的内容面板后我们就可以直接将其他的 Swing组件放在其中,或者直接在上面描绘图画或文字,但是习惯上一般不会这么做。通常会将这些图画或文字信息描绘在名为JPanel的容器上,然后再将 JPanel实例放在内容面板上。这样可以使得面板上的布局更合理。JPanel通常只作为纯粹的容器来使用,它不能像框架、窗口或者对话框那样独立存在。 JPanel的构造方法如下所示。JPanel()构造一个使用默认的布局管理器创建的面板JPanel(LayoutManager layout)构造一个使用指定布局管理器的面板Swing常用基本组件创建图形用户界面GUI,就是为了让计算机程序更好的和用户交互。 Java Swing提供了二十多种不同的用户界面组件。所有的Swng组件都是从javax.swing.Jcomponent类中派生而来的,从而继承了组件所特有的属性和方法。常用组件的共性操作Swing类库中的组件都继承自 javax.swing.JComponent,因此都具有 JComponent的操作,包括设置背景色,设置前景色、设置字体以及设置是否禁用等。表16.4中是 JComponent中常用的方法及方法描述。按钮( JButton)按钮是用户界面中常用的组件。用户使用 Swing按钮可以显示图像,将整个按钮设置为窗口默认图标,来处理鼠标在按钮上的事件。java.swing包中提供了标准的按压式按钮( JButton)。同时提供了选择式按钮:多选择( JCheckBox)、单选择( JRadioButton)等。我们在这里先来讲解 JButton的知识JButton的构造方法如图16.1所示。public JButton ()方法用于创建不带有设置文本或图标的按钮public JButton(Icon icon)方法用于创建一个带图标的按钮public JButton(String text)方法用于创建一个带文本的按钮public JButton(Action a)方法用于创建一个按钮,其属性从所提供的 Action中获取文本框( JTextField)与密码输入框( JPasswordField)文本框( JTextField)也是一种常见的组件,用于处理一行文本(中间没有回车符)。 JTextField是JTextComponent的子类。密码输入框是 JTextField的个子类。 JTextField和 PasswordField的构造函数形式和常用方法完全一样。这里只列出 JTextField的构造函数,如下所示。JTextField()构造一个空文本域JTextField(String text)构造一个显示指定字符串的文本域JTextField(int columns)构造一个显示指定列数的空文本域JTextField(String text,int columns)构造一个具有显示指定字符串,指定列数的文本域文本域( JTextArea)文本域( JTextArea)也是一种常用组件,用于处理多行文本。 JTextArea同 JTextField一样,都是JTextcomponent的子类,因此它们的很多操作都类似,我们不再赘述。 JTextArea的构造函数如下所示：JTextArea构造一个空文本区JTextArea(String text)构造一个显示指定字符串的文本区JTextArea(int columns)构造一个显示指定列数的空文本区JTextArea(String text, int columns)构造一个具有显示指定字符串,指定列数的文本区标签( JLabel)标签( JLabel)用来显示一段文本,常用在 JTextField或者 JTextArea前面,提示用户要填写什么样的信息。JLabel用于显示文字,也可以同时显示文字和图标,一般不用于接收鼠标键盘的动作。 JLabel的构造方法如下所示。public JLabel (String text)使用左对齐字符串来构造一个标签public JLabel (Icon icon)使用左对齐图标来构造一个标签public JLabel (String text, int align)构造一个显示指定列数的空文本区public JLabel(String text, Icon icon, int align)构造一个具有显示指定字符串,指定列数的文本区先搬运到这里,后面再看看。看了这么多还是没能达到我想要的结果:设置一个截图的软件，然后自动调用百度识图获取JSON数据，并去除识别的文字，复制到剪贴板中。本文链接: Java图形界面编程]]></content>
      <categories>
        <category>Java</category>
        <category>java_GUI</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java截图]]></title>
    <url>%2Fblog%2F14ec9002%2F</url>
    <content type="text"><![CDATA[源码：https://www.cnblogs.com/feitianshaoxai/p/6560110.html上面代码实现了截图的操作，我要在上面的代码中加入自动保存然后调用百度识图的操作。具体可以模仿上面的保存函数加入的百度文字识图按钮：123456789101112131415161718// 百度识图按钮JButton baiduOCRButton = new JButton("百度文字识别");baiduOCRButton.addActionListener(new ActionListener()&#123; @Override public void actionPerformed(ActionEvent e) &#123; try &#123; // 保存截图 parent.baiduOCR(); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125;&#125;);toolBar.add(baiduOCRButton);实现算法：12345678// 调用百度识图public void baiduOCR() throws IOException&#123; // 写入文件 ImageIO.write(saveImage, "png", new File("1.png")); Thread baiduOCR=new Thread(new BaiduOCR("1.png",this)); baiduOCR.start();&#125;说明：直接把截图保存在工程路径下的“1.png”文件中。然后启动一个baiduOCR线程来处理这个图片：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182package release.ocr.baidu;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import org.json.JSONObject;import com.baidu.aip.ocr.AipOcr;import clipboard.util.SysClipboardUtil;import net.sf.json.JSONArray;public class BaiduOCR implements Runnable&#123; // 设置APPID/AK/SK public static final String APP_ID = "你的百度APP_ID"; public static final String API_KEY = "你的百度API_KEY"; public static final String SECRET_KEY = "你的百度SECRET_KEY"; //窗体引用,用于使得窗体不可见 ScreenShotWindow screenShotWindow; //文件路径,我们识别的就是这个图片 String path; //通过构造函数传入参数 public BaiduOCR(String path,ScreenShotWindow screenShotWindow) &#123; this.path=path; this.screenShotWindow=screenShotWindow; &#125; @Override public void run() &#123; //让窗体不可见，以便用户可以进行其他操作 ScreenShotOCR.notVisiabl(); //调用百度文字识别接口 baiduOCR(path); //回调函数，执行完毕后关闭程序 ScreenShotWindow.Exit(); &#125; /** * 调用百度文字识别 */ public static void baiduOCR(String path) &#123; // 初始化一个AipOcr AipOcr client = new AipOcr(APP_ID, API_KEY, SECRET_KEY); // 可选：设置网络连接参数 client.setConnectionTimeoutInMillis(2000); client.setSocketTimeoutInMillis(60000); // 调用接口取得识别的结果：JSON数据 JSONObject res = client.basicGeneral(path, new HashMap&lt;String, String&gt;()); String text = res.toString(2); //从JSON数据中取出翻译的结果 //转为HashMap HashMap&lt;String, Object&gt; resMap = (HashMap&lt;String, Object&gt;) res.toMap(); // 迭代器 Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; it = resMap.entrySet().iterator(); // 缓冲，用来存储识别结果 StringBuilder sbBuilder = new StringBuilder(); Map.Entry&lt;String, Object&gt; entry; //遍历Map集合 while (it.hasNext()) &#123; entry = it.next(); //找到翻译结果组 if (entry.getKey().equals("words_result")) &#123; // 获取词组 JSONArray jsonArray = JSONArray.fromObject(entry.getValue()); System.out.println(jsonArray.toString()); for (Object object : jsonArray) &#123; sbBuilder.append(object.toString()); &#125; &#125; &#125; //获取识别结果 String words = sbBuilder.toString(); //使用正则表达式删除无用信息，只留下翻译的结果 words = words.replaceAll("(?:(?:\\\"\\&#125;)?\\&#123;\\\"words\\\":\\\"|\\\"\\&#125;)", ""); SysClipboardUtil.setSysClipboardText(words); &#125;&#125;完整的代码ScreenShotOCR类ScreenShotOCR类实现截图的功能，窗体的显示。package release.ocr.baidu;import java.awt.AWTException;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.EventQueue;import java.awt.Graphics;import java.awt.Image;import java.awt.Rectangle;import java.awt.Robot;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.MouseMotionAdapter;import java.awt.image.BufferedImage;import java.awt.image.RescaleOp;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import javax.imageio.ImageIO;import javax.swing.JButton;import javax.swing.JFileChooser;import javax.swing.JToolBar;import javax.swing.JWindow;import javax.swing.filechooser.FileNameExtensionFilter;import javax.swing.filechooser.FileSystemView;public class ScreenShotOCR&#123; static ScreenShotWindow ssw; public static void main(String[] args) &#123; EventQueue.invokeLater(new Runnable() &#123; @Override public void run() &#123; try &#123; ssw = new ScreenShotWindow(); ssw.setVisible(true); &#125; catch (AWTException e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125; // 回调函数，使得当前窗口不可见。 public static void notVisiabl() &#123; ssw.setVisible(false); &#125;&#125;/* * 截图矩形窗口 */class ScreenShotWindow extends JWindow&#123; private int orgx, orgy, endx, endy; private BufferedImage image = null; private BufferedImage tempImage = null; private BufferedImage saveImage = null; private ToolsWindow tools = null; public ScreenShotWindow() throws AWTException &#123; // 获取屏幕尺寸 Dimension d = Toolkit.getDefaultToolkit().getScreenSize(); // 设置窗口显示大小 this.setBounds(0, 0, d.width, d.height); // 截取整个屏幕 Robot robot = new Robot(); image = robot .createScreenCapture(new Rectangle(0, 0, d.width, d.height)); // 设置鼠标监听事件 this.addMouseListener(new MouseAdapter() &#123; // 鼠标按下 @Override public void mousePressed(MouseEvent e) &#123; // 鼠标松开时记录结束点坐标，并隐藏操作窗口 orgx = e.getX(); orgy = e.getY(); if (tools != null) &#123; tools.setVisible(false); &#125; &#125; @Override public void mouseReleased(MouseEvent e) &#123; // 鼠标松开时，显示操作窗口 if (tools == null) &#123; tools = new ToolsWindow(ScreenShotWindow.this, e.getX(), e.getY()); &#125; else &#123; tools.setLocation(e.getX(), e.getY()); &#125; tools.setVisible(true); tools.toFront(); &#125; &#125;); this.addMouseMotionListener(new MouseMotionAdapter() &#123; @Override public void mouseDragged(MouseEvent e) &#123; // 鼠标拖动时，记录坐标并重绘窗口 endx = e.getX(); endy = e.getY(); // 临时图像，用于缓冲屏幕区域放置屏幕闪烁 Image tempImage2 = createImage(ScreenShotWindow.this.getWidth(), ScreenShotWindow.this.getHeight()); Graphics g = tempImage2.getGraphics(); g.drawImage(tempImage, 0, 0, null); int x = Math.min(orgx, endx); int y = Math.min(orgy, endy); int width = Math.abs(endx - orgx) + 1; int height = Math.abs(endy - orgy) + 1; // 加上1防止width或height0 g.setColor(Color.BLUE); g.drawRect(x - 1, y - 1, width + 1, height + 1); // 减1加1都了防止图片矩形框覆盖掉 saveImage = image.getSubimage(x, y, width, height); g.drawImage(saveImage, x, y, null); ScreenShotWindow.this.getGraphics().drawImage(tempImage2, 0, 0, ScreenShotWindow.this); &#125; &#125;); &#125; @Override public void paint(Graphics g) &#123; RescaleOp ro = new RescaleOp(0.8f, 0, null); tempImage = ro.filter(image, null); g.drawImage(tempImage, 0, 0, this); &#125; // 保存图像到文件 public void saveImage() throws IOException &#123; JFileChooser jfc = new JFileChooser(); jfc.setDialogTitle("保存"); // 文件过滤器，用户过滤可选择文件 FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG", "png"); jfc.setFileFilter(filter); // 初始化一个默认文件（此文件会生成到桌面上） SimpleDateFormat sdf = new SimpleDateFormat("yyyymmddHHmmss"); String fileName = sdf.format(new Date()); File filePath = FileSystemView.getFileSystemView().getHomeDirectory(); File defaultFile = new File( filePath + File.separator + fileName + ".png"); jfc.setSelectedFile(defaultFile); int flag = jfc.showSaveDialog(this); if (flag == JFileChooser.APPROVE_OPTION) &#123; File file = jfc.getSelectedFile(); String path = file.getPath(); // 检查文件后缀，放置用户忘记输入后缀或者输入不正确的后缀 if (!(path.endsWith(".png") || path.endsWith(".PNG"))) &#123; path += ".png"; &#125; // 写入文件 ImageIO.write(saveImage, "png", new File(path)); System.exit(0); &#125; &#125; // 调用百度识图 public void baiduOCR() throws IOException &#123; // 写入文件 ImageIO.write(saveImage, "png", new File("1.png")); Thread baiduOCR = new Thread(new BaiduOCR("1.png", this)); baiduOCR.start(); &#125; public static void Exit() &#123; System.exit(0); &#125;&#125;/* * 操作窗口 */class ToolsWindow extends JWindow&#123; private ScreenShotWindow parent; public ToolsWindow(ScreenShotWindow parent, int x, int y) &#123; this.parent = parent; this.init(); this.setLocation(x, y); this.pack(); this.setVisible(true); &#125; private void init() &#123; this.setLayout(new BorderLayout()); JToolBar toolBar = new JToolBar("Java 截图"); // 保存按钮 JButton saveButton = new JButton("保存"); saveButton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; try &#123; // 保存截图 parent.saveImage(); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125; &#125;); toolBar.add(saveButton); // 百度识图按钮 JButton baiduOCRButton = new JButton("百度文字识别"); baiduOCRButton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; try &#123; // 保存截图 parent.baiduOCR(); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125; &#125;); toolBar.add(baiduOCRButton); // 关闭按钮 JButton closeButton = new JButton("退出"); closeButton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; System.exit(0); &#125; &#125;); toolBar.add(closeButton); this.add(toolBar, BorderLayout.NORTH); &#125;&#125;BaiduOCR类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package release.ocr.baidu;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import org.json.JSONObject;import com.baidu.aip.ocr.AipOcr;import clipboard.util.SysClipboardUtil;import net.sf.json.JSONArray;public class BaiduOCR implements Runnable&#123; // 设置APPID/AK/SK public static final String APP_ID = "你的BaiduAPP_ID"; public static final String API_KEY = "你的"; public static final String SECRET_KEY = "你的"; //窗体引用 ScreenShotWindow screenShotWindow; //文件路径 String path; public BaiduOCR(String path,ScreenShotWindow screenShotWindow) &#123; this.path=path; this.screenShotWindow=screenShotWindow; &#125; @Override public void run() &#123; //让窗体不可见 ScreenShotOCR.notVisiabl(); //调用百度文字识别接口 baiduOCR(path); //回调函数，执行完毕后关闭程序 ScreenShotWindow.Exit(); &#125; /** * 调用百度文字识别 */ public static void baiduOCR(String path) &#123; // 初始化一个AipOcr AipOcr client = new AipOcr(APP_ID, API_KEY, SECRET_KEY); // 可选：设置网络连接参数 client.setConnectionTimeoutInMillis(2000); client.setSocketTimeoutInMillis(60000); // 调用接口 JSONObject res = client.basicGeneral(path, new HashMap&lt;String, String&gt;()); String text = res.toString(2); HashMap&lt;String, Object&gt; resMap = (HashMap&lt;String, Object&gt;) res.toMap(); // 第二种： Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; it = resMap.entrySet().iterator(); // 缓冲，用来存储识别结果 StringBuilder sbBuilder = new StringBuilder(); Map.Entry&lt;String, Object&gt; entry; while (it.hasNext()) &#123; entry = it.next(); if (entry.getKey().equals("words_result")) &#123; // 获取词组 JSONArray jsonArray = JSONArray.fromObject(entry.getValue()); System.out.println(jsonArray.toString()); for (Object object : jsonArray) &#123; sbBuilder.append(object.toString()); &#125; &#125; &#125; String words = sbBuilder.toString(); words = words.replaceAll("(?:(?:\\\"\\&#125;)?\\&#123;\\\"words\\\":\\\"|\\\"\\&#125;)", ""); SysClipboardUtil.setSysClipboardText(words); &#125;&#125;本文链接: Java截图]]></content>
      <categories>
        <category>Java</category>
        <category>java_GUI</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 轮询]]></title>
    <url>%2Fblog%2Faa00d27d%2F</url>
    <content type="text"><![CDATA[大多数新手采用的解决方案是,让获取方法返回一个标志值(或者可能抛出一个异常),直到设置了结果字段为止。然后主线程定期询问获取方法,查看是否返回了标志之外的值。这个例子中,这表示要重复地测试 digest是否为空,只有不为空才使用。例如:这个解决方案是可行的。它会以正确的顺序给出正确的答案,而不考虑各个线程的相对运行速度。不过,它做了大量不需要做的工作。更糟糕的是,这个解决方案不能保证一定能工作。在有些虚拟机上,主线程会占用所有可用的时间,而没有给具体的工作线程留出任何时间。主线程太忙于检查工作的完成情况,以至于没有时间来具体完成任务!显然这(轮询)不是一个好方法。本文链接: java网络编程第4版 轮询]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 竞态条件]]></title>
    <url>%2Fblog%2Ffcc5ac73%2F</url>
    <content type="text"><![CDATA[一种可能的方法是把 dr.getDigest()调用移到main()方法的后面部分,如下所示:12345678910111213141516171819public static void main(String[] args)&#123; ReturnDigest[] digests=new ReturnDigest[args.length ]; for(int i =0; i&lt;args.length; i++) &#123; //计算摘要 digests[i]= new ReturnDigest(args[i]); digests[i].start(); &#125; for()int i=0；i&lt; args.length; i++) &#123; //现在显示结果 StringBuffer result=new StringBuffer(args[i]); result. append(":"); byte[] digest = digests[i].getDigest(); result. append(DatatypeConverter.printHexBinary(digest)); System.out.printin(result); &#125;&#125;如果你够幸运,这会正常工作,你将得到期望的输出,如下:但我要强调一下这里所说的“幸运”。你可能得不到这个输出。事实上,你可能仍会得到一个NullPointerException异常。这段代码是否能正常工作,完全取决于每个ReturnDigest线程是否在其 getDigest()方法被调用之前结束。如果第一个for循环太快,在第一个for循环生成的线程结束之前就进入了第二个for循环,那么我们又会回到原点,遭遇同样的问题。更糟糕的是,程序看起来好像被挂起了,没有任何输出,甚至连栈轨迹都没有。到底会得到正确的结果还是异常,或者是一个挂起的程序,这取决于很多因素,包括程序生成了多少线程,系统的CPU和磁盘的速度,系统使用多少个CPU,以及Java虚拟机为不同线程分配时间所用的算法。这些称为竞态条件( race condition)。能否得到正确结果依赖于不同线程的相对速度,而你无法控制这一点!我们需要一种更好的方法,以保证在摘要就绪前不会调用 getDigest()。本文链接: java网络编程第4版 竞态条件]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 从线程返回信息]]></title>
    <url>%2Fblog%2Fec5f40b6%2F</url>
    <content type="text"><![CDATA[习惯了传统单线程过程式模型的程序员在转向多线程环境时,最难掌握的一点就是如何从线程返回信息**。从结束的线程获得信息,这是多线程编程中最常被误解的方面之一**。run()方法和 start()方法不返回任何值。例如,假设不只是像示例3-1和示例3-2那样简单地显示SHA-256摘要,摘要线程需要把摘要返回给执行主线程。大多数人的第一个反应就是把结果存储在一个字段中,再提供一个获取方法,如示例3-3和示例3-4所示。示例3-3是一个计算指定文件摘要的 Thread子类。示例3-4是一个简单的命令行用户界面,会接收文件名,并创建线程为这些文件计算摘要。示例3-3:使用存取方法返回结果的线程ReturnDigest1234567891011121314151617181920212223242526272829303132import java.io.*;import java.security.*;public class ReturnDigest extends Thread &#123; private String filename; private byte[] digest; public ReturnDigest(String filename) &#123; this.filename = filename; &#125; @Override public void run() &#123; try &#123; FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; // read entire file din.close(); digest = sha.digest(); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; catch (NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125; public byte[] getDigest() &#123; return digest; &#125;&#125;示例3-4:使用存取方法获得线程输出的主程序12345678910111213141516171819import javax.xml.bind.*; // for DatatypeConverterpublic class ReturnDigestUserInterface &#123; public static void main(String[] args) &#123; for (String filename : args) &#123;// Calculate the digest ReturnDigest dr = new ReturnDigest(filename); dr.start();// Now print the result StringBuilder result = new StringBuilder(filename); result.append(": "); byte[] digest = dr.getDigest(); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); &#125; &#125;&#125;ReturnDigest类把计算结果存储在私有字段 digest中,可以通过 getDigest()来访问。ReturnDigestUserInterface中的main()方法循环处理由命令行得到的一个文件列表。它为每个文件启动一个新的 ReturnDigest线程,然后试图使用 getDigest()获取结果。不过,当你运行这个程序时,结果却不像你期望的那样:123456D: \JAVA\JNP4\examples \03&gt;java ReturnDigestUserInterface * javaException in thread &quot;main&quot; java. lang NullPointerException at javax.xml.bind Datatype ConverterImpl printHexBinary (DatatypeConverterImpl.java: 358) at javax.xml.bind.DatatypeConverter.printHexBinary(DatatypeConverter.java: 560) at ReturnDigestUserInterface main(ReturnDigestUserInterface.java: 15)问题在于,主程序会在线程有机会初始化摘要之前就获取并使用摘要。在单线程程序里这个控制流可以正常工作,但在这里不行,因为在单线程程序里,dr.start()只是在同一个线程中调用run()方法,而这里情况有所不同。dr.start()启动的计算可能在main()方法调用dr.getDigest()之前结東,也可能还没有结束。如果没有结束, dr.getDigest()则会返回null,第一次尝试访问 digest时会抛出一个NullPointerException异常。本文链接: java网络编程第4版 从线程返回信息]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 实现 Runnable接口]]></title>
    <url>%2Fblog%2Fc680e36f%2F</url>
    <content type="text"><![CDATA[要想避免覆盖标准 Thread方法,一种办法就是不要派生 Thread类,而是将希望线程完成的任务编写为 Runnable接口的一个实例。这个接口声明了run()方法,这与 Thread类完全一样:1public void run()任何实现这个接口的类都必须提供这个方法,除了这个run()方法外,你可以自由地创建任何其他方法(可以使用你选择的任何方法名),而绝不会无意地妨碍线程的行为。它还允许你将线程的任务放在其他类的子类中,如 Applet或 HttpServleT。要启动执行 Runnable任务的一个线程,可以把这个 Runnable对象传入 Thread构造函数。例如:12Thread t=new Thread (my RunnableObject);t.start;对于大多数通过派生 Thread子类来解决的问题,可以很容易地改为使用 Runnable接口。示例3-2展示了这一点,它将示例3-1改写为使用 Runnable接口,而不是派生 Thread的子类。除了名字的改变外,需要做的唯一修改就是将 extends thread改为 implements Runnable,并在main()方法中把 DigestRunnable对象传递给 Thread构造函数。程序的基本逻辑没有变。示例3-2: DigestRunnable1234567891011121314151617181920212223242526272829303132333435363738394041import java.io.*;import java.security.*;import javax.xml.bind.*; // for DatatypeConverter; requires Java 6 or JAXB 1.0public class DigestRunnable implements Runnable &#123; private String filename; public DigestRunnable(String filename) &#123; this.filename = filename; &#125; @Override public void run() &#123; try &#123; FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; din.close(); byte[] digest = sha.digest(); StringBuilder result = new StringBuilder(filename); result.append(": "); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; catch (NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125; public static void main(String[] args) &#123; for (String filename : args) &#123; DigestRunnable dr = new DigestRunnable(filename); Thread t = new Thread(dr); t.start(); &#125; &#125;&#125;并不认为实现 Runnab1e接口一定优于扩展 Thread类,没有强有力的理由支持这一点,反之亦然。在一些特殊的情况下,例如本章后面的示例3-14,在每个 Thread对象的构造函数中调用 Thread类的一些实例方法可能很有用。这就需要使用子类。在另外一些特定的情况下,可能需要将run()方法放在某个类中,而这个类要扩展另一个类(如HttpServlet),这种情况下就必须使用 Runnable接口。最后,有些崇尚面向对象的人认为,线程完成的任务实际上不是一种 Thread,因此应当放在一个单独的类或接口.(如Runnable)中,而不应放在 Thread的子类中。我部分同意这种观点,但我不认为这个观点像其声称的那样理由充分。所以,本书中主要使用 Runnable接口,但你也可以使用对你来说最方便的任何方法。本文链接: java网络编程第4版 实现 Runnable接口]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[json字符串与java对象互转]]></title>
    <url>%2Fblog%2F12f6a417%2F</url>
    <content type="text"><![CDATA[原文：https://www.cnblogs.com/wangf-keep/p/6480019.htmljson字符串与java对象互转在开发过程中，经常需要和别的系统交换数据，数据交换的格式有XML、JSON等，JSON作为一个轻量级的数据格式比XML效率要高，XML需要很多的标签，这无疑占据了网络流量，JSON在这方面则做的很好，下面先看下JSON的格式，JSON可以有两种格式，一种是对象格式的，另一种是数组对象，12&#123;&quot;name&quot;:&quot;JSON&quot;,&quot;address&quot;:&quot;北京市西城区&quot;,&quot;age&quot;:25&#125;//JSON的对象格式的字符串[&#123;&quot;name&quot;:&quot;JSON&quot;,&quot;address&quot;:&quot;北京市西城区&quot;,&quot;age&quot;:25&#125;]//数据对象格式从上面的两种格式可以看出对象格式和数组对象格式唯一的不同则是在对象格式的基础上加上了[]，再来看具体的结构，可以看出都是以键值对的形式出现的，中间以英文逗号（,）分隔。在前端和后端进行数据传输的时候这种格式也是很受欢迎的，后端返回json格式的字符串，前台使用js中的JSON.parse()方法把JSON字符串解析为json对象，然后进行遍历，供前端使用。JAVA中JSON和java对象之间的互转 ##。要想实现JSON和java对象之间的互转，需要借助第三方jar包，这里使用json-lib这个jar包，下载地址为：https://sourceforge.net/projects/json-lib/，json-lib需要commons-beanutils-1.8.0.jar、commons-collections-3.2.1.jar、commons-lang-2.5.jar、commons-logging-1.1.1.jar、ezmorph-1.0.6.jar五个包的支持，可以自行从网上下载，这里不再贴出下载地址。json-lib提供了几个类可以完成此功能，例，JSONObject、JSONArray。从类的名字上可以看出JSONObject转化的应该是对象格式的，而JSONArray转化的则应该是数组对象（即，带[]形式）的。一、java普通对象和json字符串的互转java对象--&gt;字符串 java普通对象指的是java中的一个java bean，即一个实体类，如，123456789101112131415161718192021222324252627282930313233343536373839package com.cn.study.day3;public class Student &#123; //姓名 private String name; //年龄 private String age; //住址 private String address; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return age; &#125; public void setAge(String age) &#123; this.age = age; &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address; &#125; @Override public String toString() &#123; return "Student [name=" + name + ", age=" + age + ", address="+ address + "]"; &#125;&#125;上面是我的一个普通的java实体类，看json-lib如何把它转化为字符串形式，123456789101112131415public static void convertObject() &#123; Student stu=new Student(); stu.setName("JSON"); stu.setAge("23"); stu.setAddress("北京市西城区"); //1、使用JSONObject JSONObject json = JSONObject.fromObject(stu); //2、使用JSONArray JSONArray array=JSONArray.fromObject(stu); String strJson=json.toString(); String strArray=array.toString(); System.out.println("strJson:"+strJson); System.out.println("strArray:"+strArray);&#125;我定义了一个Student的实体类，然后分别使用了JSONObject和JSONArray两种方式转化为JSON字符串，下面看打印的结果:12strJson:&#123;&quot;address&quot;:&quot;北京市西城区&quot;,&quot;age&quot;:&quot;23&quot;,&quot;name&quot;:&quot;JSON&quot;&#125;strArray:[&#123;&quot;address&quot;:&quot;北京市西城区&quot;,&quot;age&quot;:&quot;23&quot;,&quot;name&quot;:&quot;JSON&quot;&#125;]从结果中可以看出两种方法都可以把java对象转化为JSON字符串，只是转化后的结构不同。JSON字符串转为java对象上面说明了如何把java对象转化为JSON字符串，下面看如何把JSON字符串格式转化为java对象，首先需要定义两种不同格式的字符串，需要使用\对双引号进行转义：1234567891011121314151617public static void jsonStrToJava()&#123; //定义两种不同格式的字符串 String objectStr="&#123;\"name\":\"JSON\",\"age\":\"24\",\"address\":\"北京市西城区\"&#125;"; String arrayStr="[&#123;\"name\":\"JSON\",\"age\":\"24\",\"address\":\"北京市西城区\"&#125;]"; //1、使用JSONObject JSONObject jsonObject=JSONObject.fromObject(objectStr); Student stu=(Student)JSONObject.toBean(jsonObject, Student.class); //2、使用JSONArray JSONArray jsonArray=JSONArray.fromObject(arrayStr); //获得jsonArray的第一个元素 Object o=jsonArray.get(0); JSONObject jsonObject2=JSONObject.fromObject(o); Student stu2=(Student)JSONObject.toBean(jsonObject2, Student.class); System.out.println("stu:"+stu); System.out.println("stu2:"+stu2);&#125;打印结果为：12stu:Student [name=JSON, age=24, address=北京市西城区]stu2:Student [name=JSON, age=24, address=北京市西城区]从上面的代码中可以看出，使用JSONObject可以轻松的把JSON格式的字符串转化为java对象，但是使用JSONArray就没那么容易了，因为它有“[]”符号，所以我们这里在获得了JSONArray的对象之后，取其第一个元素即我们需要的一个student的变形，然后使用JSONObject轻松获得。本文链接: json字符串与java对象互转]]></content>
      <categories>
        <category>Json</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[基于java操作的JSON入门教程]]></title>
    <url>%2Fblog%2F4d3e356a%2F</url>
    <content type="text"><![CDATA[原文：https://wenku.baidu.com/view/e80d83571711cc7931b7164c.html?from=search基于java操作的JSON入门教程尽管有许多宣传关于XML如何拥有跨平台,跨语言的优势,然而,除非应用于Web Services,否则,在普通的Web应用中,开发者经常为XML的解析伤透了脑筋,无论是服务器端生成或处理XML,还是客户端用 Javascript解析XML,都常常导致复杂的代码,极低的开发效率。实际上,对于大多数Web应用来说,他们根本不需要复杂的XML来传输数据,XML的扩展性很少具有优势,许多AJAX应用甚至直接返回HTML片段来构建动态Web页面。和返回XML并解析它相比,返回HTML片段大大降低了系统的复杂性,但同时缺少了一定的灵活性。现在,JSON为Web应用开发者提供了另一种数据交换格式。让我们来看看JSON到底是什么,同XML或HTML片段相比,JSON提供了更好的简单性和灵活性。JSON数据格式解析和XML一样,JSON也是基于纯文本的数据格式。由于JSON天生是为 Javascript准备的,因此,JSON的数据格式非常简单,您可以用JSON传输一个简单的 String, Number,Boolean,也可以传输一个数组,或者一个复杂的Object对象。String,Number和Boolean的表示方式String表示方式String, Number和 Boolean用JSON表示非常简单。例如,用JSON表示一个简单的String abc其格式为:”abc”除了字符&quot;,/和一些控制符(b,f,n,r,t)需要编码外,其他 Unicode字符可以直接输出Number表示方式一个 Number可以根据整型或浮点数表示如下:1212345(整数)-3.9e10(浮点数)这与绝大多数编程语言的表示方法一致。Boolean表示方式Boolean类型表示为tue或 false。此外, Javascript中的null被表示为null,注意true、 false和null都没有双引号,否则将被视为一个 String。数组JSON还可以表示一个数组对象,使用[]包含所有元素,每个元素用逗号分隔,元素可以是任意的 Value,例如,以下数组包含了一个 String, Number, Boolean和一个null1[&apos;abc&quot;, 12345, false, null]对象Object对象在JSON中是用{}包含一系列无序的Key-Value(键值对)表示的,实际上，此处的Object相当于Java中的 Map&lt;String, Object&gt; ，而不是Java的Class。注意Key只能用 String表示。例如,一个 Address对象包含如下 Key-value123city: Beijingstreet: Chaoyang Roadpostcode:100025(整数)用JSon表示如下：1&#123;&quot;city&quot;: &quot;Beijing&quot;, &quot;street&quot;: &quot;Chaoyang Road&quot;, &quot;postcode&quot;: 100025&#125;其中Value也可以是另一个 Object或者数组,因此,复杂的 Object可以嵌套表示。例如,一个 Person对象包含name和 address对象,可以表示如下:123&#123;&quot;name&quot;:&quot;Michael&quot;,&quot;address&quot;: &#123;&quot;city&quot; : &quot;Beijing&quot;,&quot;street&quot;:&quot;Chaoyang Road&quot;,&quot;postcode&quot;:100025&#125;&#125;Java Script处理JSON数据上面介绍了如何用JSON表示数据,接下来,我们还要解决如何在服务器端生成JSON格式的数据以便发送到客户端,以及客户端如何使用Javascript处理JSON格式的数据。我们先讨论如何在Web页面中用 Javascript处理JSON数据。我们通过一个简单的Javascript方法就能看到客户端如何将JSON数据表示给用户:123456789function handleJson()&#123; var j = &#123; &quot;name&quot;:&quot;Michael&quot;,&quot;address&quot;: &#123;&quot;city&quot; : &quot;Beijing&quot;,&quot;street&quot;:&quot;Chaoyang Road&quot;,&quot;postcode&quot;:100025&#125; &#125;;document.write(j.name);document.write(j.address.city);&#125;假定服务器返回的JSON数据是上文的:123&#123;&quot;name&quot;:&quot;Michael&quot;,&quot;address&quot;: &#123;&quot;city&quot; : &quot;Beijing&quot;,&quot;street&quot;:&quot;Chaoyang Road&quot;,&quot;postcode&quot;:100025&#125;&#125;只需将其赋值给一个 Javascript变量,就可以立刻使用该变量并更新页面中的信息了,相比XML需要从DOM中读取各种节点而言,JSON的使用非常容易。我们需要做的仅仅是发送一个Ajax请求,然后将服务器返回的JSON数据赋值给一个变量即可。有许多Ajax框架早已包含了处理JSON数据的能力,例如 Prototype(一个流行的 Javascript库:http://prototypejs.org)提供了evalJSON()方法,能直接将服务器返回的JSON文本变成一个JavaScript变量：1234567new Ajax.Request(&quot;http://url&quot;,&#123;method:&quot;get&quot;,onSuccess:function(transport)&#123;var json=transport.responseText.evalJSON();//TODO：document.write(json.xxx);&#125;&#125;);服务器端输出JSON格式数据下面我们讨论如何在服务器端输出JSON格式的数据。以Java为例,我们将演示将个Java对象编码为JSON格式的文本。Java String对象转为JSON将 String对象编码为JSON格式时,只需处理好特殊字符即可。另外,必须用双引号(&quot;)而非单引号(&#39;)表示字符串:代码太长了，我懒得抄，略Java Number转为JSON将 Number表示为JSON就容易得多,利用Java的多态,我们可以处理 Integer,Long,Float等多种 Number格式:1234static String number2JSON(Number number)&#123; return number.toString();&#125;Java Boolean对象转为JSON格式Boolean类型也可以直接通过 toString()方法得到JSON的表示1234static String boolean2JSON(Boolean bool)&#123; return bool.toString();&#125;Java数组转为JSON格式要将数组编码为JSON格式,可以通过循环将每一个元素编码:代码长，不抄。Map&lt;String, Object&gt;编码为JSON格式最后,我们需要将 Map&lt;String, Object&gt;编码为JSON格式,因为 Javascript的 Object实际上对应的是Java的 Map&lt;String, Object&gt;。该方法如下：代码略，以后再补上，现在先了解个大的框架。统一处理任意的Java对象为了统一处理任意的Java对象,我们编写一个入口方法 tolson( Object),能够将任意的Java对象编码为JSON格式:懒得敲，略啊，感觉这篇文章也是抄的人家博客的。小结JSON已经是 Javascript标准的一部分。目前,主流的浏览器对JSON支持都非常完普。应用JSON我们可以从XML的解析中摆脱出来,对那些应用Ajax的Web2.0网站来说JSON确实是目前最灵活的轻量级方案。读后感没有找到我想要知道的东西，但是了解了一些JSON的知识。我还是多找找博客看看。本文链接: 基于java操作的JSON入门教程]]></content>
      <categories>
        <category>Json</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java调用百度文字识别]]></title>
    <url>%2Fblog%2F29121dfd%2F</url>
    <content type="text"><![CDATA[优化加入GUI加入编写GUI,加入Java截图功能，截图后自动保存，然后调用百度识图API,并将从处理结果中的JSON字符串中，取出识别的数据。加入全局热键上面已经完成了大致的功能，但是缺点是每次都要调用一次。我不想每次都调用一次程序，而是打开一次程序，后面可以多次截图处理。工作结束后再关掉程序。代码：ScreenShotOCR程序入口类1234567891011121314151617181920212223242526272829303132333435363738package release.ocr.baidu;import java.awt.AWTException;import java.awt.EventQueue;public class ScreenShotOCR&#123; static ScreenShotWindow ssw; public static void main(String[] args) &#123; EventQueue.invokeLater(new Runnable() &#123; @Override public void run() &#123; try &#123; ssw = new ScreenShotWindow(); ssw.setVisible(true); &#125; catch (AWTException e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125; // 回调函数，使得当前窗口不可见。 public static void notVisible() &#123; ssw.setVisible(false); &#125; public static void visiable() &#123; ssw.setVisible(true); &#125;&#125;菜单窗口这里不用再次添加按钮，所以这个类不用改变。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687package release.ocr.baidu;import java.awt.BorderLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.IOException;import javax.swing.JButton;import javax.swing.JToolBar;import javax.swing.JWindow;/* * 操作窗口 */public class ToolsWindow extends JWindow&#123; private ScreenShotWindow parent; public ToolsWindow(ScreenShotWindow parent, int x, int y) &#123; this.parent = parent; this.init(); this.setLocation(x, y); this.pack(); this.setVisible(true); &#125; private void init() &#123; this.setLayout(new BorderLayout()); JToolBar toolBar = new JToolBar("Java 截图"); // 保存按钮 JButton saveButton = new JButton("保存"); saveButton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; try &#123; // 保存截图 parent.saveImage(); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125; &#125;); toolBar.add(saveButton); // 百度识图按钮 JButton baiduOCRButton = new JButton("文字识别"); baiduOCRButton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; try &#123; // 保存截图 parent.baiduOCR(); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125; &#125;); toolBar.add(baiduOCRButton); // 关闭按钮 JButton closeButton = new JButton("退出"); closeButton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; System.exit(0); &#125; &#125;); toolBar.add(closeButton); this.add(toolBar, BorderLayout.NORTH); &#125;&#125;ScreenShotWindow截图窗口ScreenShotWindow中加入热键相关的代码：添加字段：12345// 热键相关设置private static final long serialVersionUID = 1L;// 定义热键标识，用于在设置多个热键时，在事件处理中区分用户按下的热键public static final int FUNC_KEY_MARK = 1;public static final int EXIT_KEY_MARK = 0;ScreenShotWindow构造函数中加入热键事件监听处理函数。12345678910111213141516171819202122232425// 第2步：注册热键，第一个参数表示该热键的标识，第二个参数表示组合键，如果没有则为0，第三个参数为定义的主要热键JIntellitype.getInstance().registerHotKey(FUNC_KEY_MARK,JIntellitype.MOD_ALT, (int) 'V');JIntellitype.getInstance().registerHotKey(EXIT_KEY_MARK,JIntellitype.MOD_ALT, (int) 'Q');// 第3步：添加热键监听器JIntellitype.getInstance().addHotKeyListener(new HotkeyListener()&#123; @Override public void onHotKey(int markCode) &#123; switch (markCode) &#123; //按下alt+v快捷键表示宝表示打开截图窗口，这样可以开始截图 case FUNC_KEY_MARK : // showMessage(); ScreenShotOCR.visiable(); break; // alt+q快捷键表示退出程序 case EXIT_KEY_MARK : System.exit(0); break; &#125; &#125;&#125;);123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206package release.ocr.baidu;import java.awt.AWTException;import java.awt.Color;import java.awt.Dimension;import java.awt.Graphics;import java.awt.Image;import java.awt.Rectangle;import java.awt.Robot;import java.awt.Toolkit;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.MouseMotionAdapter;import java.awt.image.BufferedImage;import java.awt.image.RescaleOp;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import javax.imageio.ImageIO;import javax.swing.JFileChooser;import javax.swing.JWindow;import javax.swing.filechooser.FileNameExtensionFilter;import javax.swing.filechooser.FileSystemView;import com.melloware.jintellitype.HotkeyListener;import com.melloware.jintellitype.JIntellitype;/** 截图矩形窗口*/public class ScreenShotWindow extends JWindow&#123; private int orgx, orgy, endx, endy; private BufferedImage image = null; private BufferedImage tempImage = null; private BufferedImage saveImage = null; private ToolsWindow tools = null; // 热键相关设置 private static final long serialVersionUID = 1L; // 定义热键标识，用于在设置多个热键时，在事件处理中区分用户按下的热键 public static final int FUNC_KEY_MARK = 1; public static final int EXIT_KEY_MARK = 0; // 构造函数 public ScreenShotWindow() throws AWTException &#123; // 获取屏幕尺寸 Dimension d = Toolkit.getDefaultToolkit().getScreenSize(); // 设置窗口显示大小 this.setBounds(0, 0, d.width, d.height); // 截取整个屏幕 Robot robot = new Robot(); image = robot .createScreenCapture(new Rectangle(0, 0, d.width, d.height)); // 设置鼠标监听事件 this.addMouseListener(new MouseAdapter() &#123; // 鼠标按下 @Override public void mousePressed(MouseEvent e) &#123; // 鼠标松开时记录结束点坐标，并隐藏操作窗口 orgx = e.getX(); orgy = e.getY(); if (tools != null) &#123; tools.setVisible(false); &#125; &#125; @Override public void mouseReleased(MouseEvent e) &#123; // 鼠标松开时，显示操作窗口 if (tools == null) &#123; tools = new ToolsWindow(ScreenShotWindow.this, e.getX(), e.getY()); &#125; else &#123; tools.setLocation(e.getX(), e.getY()); &#125; tools.setVisible(true); tools.toFront(); &#125; &#125;); // 鼠标移动和拖动监听事件处理函数 this.addMouseMotionListener(new MouseMotionAdapter() &#123; @Override public void mouseDragged(MouseEvent e) &#123; // 鼠标拖动时，记录坐标并重绘窗口 endx = e.getX(); endy = e.getY(); // 临时图像，用于缓冲屏幕区域放置屏幕闪烁 Image tempImage2 = createImage(ScreenShotWindow.this.getWidth(), ScreenShotWindow.this.getHeight()); Graphics g = tempImage2.getGraphics(); g.drawImage(tempImage, 0, 0, null); int x = Math.min(orgx, endx); int y = Math.min(orgy, endy); int width = Math.abs(endx - orgx) + 1; int height = Math.abs(endy - orgy) + 1; // 加上1防止width或height0 g.setColor(Color.BLUE); g.drawRect(x - 1, y - 1, width + 1, height + 1); // 减1加1都了防止图片矩形框覆盖掉 saveImage = image.getSubimage(x, y, width, height); g.drawImage(saveImage, x, y, null); ScreenShotWindow.this.getGraphics().drawImage(tempImage2, 0, 0, ScreenShotWindow.this); &#125; &#125;); // 第2步：注册热键，第一个参数表示该热键的标识，第二个参数表示组合键，如果没有则为0，第三个参数为定义的主要热键 JIntellitype.getInstance().registerHotKey(FUNC_KEY_MARK, JIntellitype.MOD_ALT, (int) 'V'); JIntellitype.getInstance().registerHotKey(EXIT_KEY_MARK, JIntellitype.MOD_ALT, (int) 'Q'); // 第3步：添加热键监听器 JIntellitype.getInstance().addHotKeyListener(new HotkeyListener() &#123; @Override public void onHotKey(int markCode) &#123; switch (markCode) &#123; //按下alt+v快捷键表示 case FUNC_KEY_MARK : // showMessage(); ScreenShotOCR.visiable(); break; // alt+q快捷键表示退出程序 case EXIT_KEY_MARK : System.exit(0); break; &#125; &#125; &#125;); &#125; @Override public void paint(Graphics g) &#123; RescaleOp ro = new RescaleOp(0.8f, 0, null); tempImage = ro.filter(image, null); g.drawImage(tempImage, 0, 0, this); &#125; // 保存图像到文件 public void saveImage() throws IOException &#123; JFileChooser jfc = new JFileChooser(); jfc.setDialogTitle("保存"); // 文件过滤器，用户过滤可选择文件 FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG", "png"); jfc.setFileFilter(filter); // 初始化一个默认文件（此文件会生成到桌面上） SimpleDateFormat sdf = new SimpleDateFormat("yyyymmddHHmmss"); String fileName = sdf.format(new Date()); File filePath = FileSystemView.getFileSystemView().getHomeDirectory(); File defaultFile = new File( filePath + File.separator + fileName + ".png"); jfc.setSelectedFile(defaultFile); int flag = jfc.showSaveDialog(this); if (flag == JFileChooser.APPROVE_OPTION) &#123; File file = jfc.getSelectedFile(); String path = file.getPath(); // 检查文件后缀，放置用户忘记输入后缀或者输入不正确的后缀 if (!(path.endsWith(".png") || path.endsWith(".PNG"))) &#123; path += ".png"; &#125; // 写入文件 ImageIO.write(saveImage, "png", new File(path)); System.exit(0); &#125; &#125; // 调用百度识图 public void baiduOCR() throws IOException &#123; // 写入文件 ImageIO.write(saveImage, "png", new File("1.png")); Thread baiduOCR = new Thread(new BaiduOCR("1.png", this)); baiduOCR.start(); &#125; public static void Exit() &#123; System.exit(0); &#125;&#125;新的问题，程序不能很好的退出，而且让截图窗口显示的方式并不会重新截图，这样我已经阅读到一页文章了，但是窗口中保存的还是前页的截图，所以，应该重新初始化话截图才对。也就是说是使用线程来做才对。本文链接: Java调用百度文字识别]]></content>
      <categories>
        <category>我的软件</category>
        <category>百度文字识别</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 派生Thread]]></title>
    <url>%2Fblog%2Fdd928b3e%2F</url>
    <content type="text"><![CDATA[考虑编写一个程序来计算多个文件的安全散列算法(SHA)摘要。在很大程度上,这是一个受限于IO的程序(也就是说,它的速度会受到从磁盘读取文件所花费时间的限制)。如果将它编写为一个标准的程序,串行地处理这些文件,程序就会花费大量时间等待磁盘驱动器返回数据。这个限制对于网络程序尤其明显:程序运行的速度要比网络提供输入的速度快。因此程序的大量时间都耗费在阻塞中。这些时间本可以被其他线程所用,可以处理其他输入源或者完成不依赖于慢速输入的操作(不是所有多线程程序都有这个特点。有时即使并没有线程有大量空闲时间可以分配给其他线程,起码采用多线程设计程序会更容易,可以将程序分解为多个线程,分别执行独立的操作示例3-1是 Thread的子类,它的run()方法将为指定文件计算一个256位的SHA-2消息摘要。为此要用一个 DigestInputStream读取这个文件。这个过滤器流在读取文件时会计算一个加密散列函数。读取结束时,可以从 digest()方法得到这个散列。(这个代码不去了解也罢)示例3-1: DigestThread12345678910111213141516171819202122232425262728293031323334353637383940import java.io.*;import java.security.*;import javax.xml.bind.*; // for DatatypeConverter; requires Java 6 or JAXB 1.0public class DigestThread extends Thread &#123; private String filename; public DigestThread(String filename) &#123; this.filename = filename; &#125; @Override public void run() &#123; try &#123; FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; din.close(); byte[] digest = sha.digest(); StringBuilder result = new StringBuilder(filename); result.append(": "); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; catch (NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125; public static void main(String[] args) &#123; for (String filename : args) &#123; Thread t = new DigestThread(filename); t.start(); &#125; &#125;&#125;main()方法从命令行中读取文件名,针对每个文件名启动一个新的 DigestThread。这个线程的工作实际上在run()方法中完成。这里,由一个 DigestInputstream读取文件,然后结果摘要以十六进制编码方式显示到 System.out。注意,首先在一个本地StringBuffer变量result中建立线程的整个输出,再用一次方法调用将它显示在控制台上。更明显的一种方法是使用 System.out.print()一次显示一部分,但这里不采取这种方法。其原因稍后讨论。由于run()方法的签名是固定的,所以无法向其传递参数或从中返回值。因此,需要其他方法向线程传递信息和从中获得信息。**传递信息最简单的方法是向构造函数传递参数**,这会设置 Thread子类中的字段,如前面所示。由于线程的异步特性,初要获得线程的信息并传回最初的调用线程,这会更加困难。示例3-1回避了这个问题,它没有将任何信息传回调用线程,只是把结果显示在System.out上。不过,大多数情况下,你会希望把信息传递给程序的其他部分。可以把计算结果存储于一个字段,并提供一个获取方法返回这个字段的值。但是如何知道这个值的计算什么时候结束呢?这非常棘手,本章后面将更详细地进行讨论警告:如果对Thread派生子类,就应当只覆盖run(),而不要覆盖其他方法!Thread类的其他各个方法(如 start()、 interrupt()、join()、 sleep()等)都有非常特定的语义,它们与虚拟机的交互很难在你自己的代码中重新实现。应当覆盖run(),并根据需要提供额外的构造函数和其他方法,但不要替换 Thread的任何其他标准方法。本文链接: java网络编程第4版 派生Thread]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 运行线程]]></title>
    <url>%2Fblog%2F21c4dfa5%2F</url>
    <content type="text"><![CDATA[为了启动一个新线程在虚拟机中运行,要构造一个 Thread类的一个实例,调用它的start()方法,如下所示:12Thread t=new Thread();t.start();当然,这个线程没什么意思,因为它什么都没有做。要让线程完成一些操作,可以对Thread类派生子类,覆盖其run()方法。或者实现 Runnablef接口,将 Runnable对象传递给Thread构造函数。我一般会选择第二种方法,因为这样可以更清楚地将线程完成的任务与线程本身区分开,但是在本书以及其他地方,你会看到这两种技术都在使用。不论采用哪一种方法,关键都在于run()方法,它的签名( signature)是:1public vold run()你应当把线程要做的所有工作都放在这个run()方法中。这个方法可以调用其他方法;可以构造其他对象;甚至可以生成其他线程。不过,线程要这里启动,并在这里结束。当run()方法完成时,线程也就消失了。事实上,run()对于线程就像main()方法对于非线程化传统程序的作用一样。单线程程序会在main()方法返回时退出。多线程程序会在main()方法以及所有非守护线程( nondaemon thread)都返回时才退出(守护线程完成后台任务,如垃圾回收,它们并不阻止虚拟机退出)。本文链接: java网络编程第4版 运行线程]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 前言]]></title>
    <url>%2Fblog%2F6a990816%2F</url>
    <content type="text"><![CDATA[回想网络从前的好日子,大约20世纪90年代初期,我们没有Web,没有HTTP,也没有图形界面浏览器。不过,我们有 Usenet新闻、FTP和命令行接口,这一切是那么让人怀念!但是尽管旧时光很美好,却也存在一些问题。例如,当使用 Kermit通过2400b/s调制解调器从热门的FTP网站下裁几K字节的自由软件时,可能经常会遇到这样的错误消息事实上,在 Internet只有几百万用户而不是数十亿用户的时候,我们远比现在更容易碰上超负荷的拥塞网站。问题在于,大多数FTP服务器会为每个连接创建(fork)一个新的进程(也就是说,100个并发用户意味着要处理100个额外的进程)。由于进程是相当重量级的,太多进程会很快让服务器吃不消。问题不在于机器不够强大,或者网络速度不够快,而是因为FTP服务器实现得太差。如果不是每个连接都需要一个新的进程,完全可以为更多的并发用户提供服务。早期Web服务器也有这个问题,不过这个问题由于HTTP连接的短暂特性而有所掩盖。由于Web页面和嵌入的图片一般很小(至少与通常通过FTP获取的软件包相比要小得多),也由于Web浏览器在获取各个文件后会“挂起”连接,而不是一次保持数分钟或几小时的连接,所以Web用户不会像FTP用户那样对服务器施加太多负担。不过,随着使用量的增长,Web服务器的性能仍会下降。根本问题在于,很容易编写代码将每个入站连接和每个新任务都当作单独的进程来处理(至少在UNIX下是如此),这种解决方案将无法扩展。等到服务器要处理成千上万个同时的连接时,性能就会变得像爬行一样慢了。这个问题至少有两种解决方案。第一种是重用进程,而不是创建新的进程。服务器启动时,就创建固定数量的进程(比如300个)来处理请求。入站请求将放入一个队列。每个进程从队列中删除一个请求,为这个请求提供服务,然后返回到队列来得到下一个请求。尽管仍有300个单独的进程在运行,但是由于避免了建立和销毁进程的所有开销,现在这300个进程可以完成1000个进程的任务。这个数目是粗略估计的。你的实际情况可能有所出入,尤其是当你的服务器还没有达到一定的处理规模,即还没有遭遇可扩展性问题的时侯,到底能有多少获益并不确定。不过,不论不生成新进程会有什么好处,起码重用旧的进程总会有更好的表现。这个问题的第二种解决方案是,使用轻量级的线程来处理连接,而不是重量级的进程。虽然每个单独的进程都有自己的一块内存,但线程在资源使用上更宽松,因为它们会共享内存。使用线程来代替进程,可以再让你的服务器性能提升三倍。再结合使用可重用线程池(而不是可重用进程池),在同样的硬件和网络连接条件下,服务器的运行可以快9倍多!在服务器硬件上运行多个不同的线程,其影响是相对最小的,因为这些线程都在一个进程中运行。如果并发线程数达到4000至20000时,大多数Java虚拟机可能会由于内存耗尽而无法承受。不过,通过使用线程池而不是为每个连接生成新线程,服务器每分钟就可以用不到100个线程来处理数千个短连接。线程的替代方法如果一个应用同时需要数千个持续很长时间的连接(这种应用相当少见),就要考虑异步I/O而不是线程。我们将在第11章介绍这个内容。选择器支持一个线程查询一组 socket,找出哪些 socket t已经准备就绪可以读/写数据,然后顺序地处理这些准备好的 socket。在这种情况下,必须基于通道和缓冲区来设计I/O而不是流。由于现代虚拟机和操作系统中线程可以提供很高的性能,而且构建一个基于线程的服务器相对简单,所以开始时总会考虑米用基于线程的设计,直到遇到难以逾越的困难。如果确实遇到麻烦,应该考虑将应用分解到多个冗余的服务器上,而不要完全依仗一个服务器上的3倍性能提升。当然,分解又会带来相应的设计问题,特别是在一致性方面,这是单个系统中没有的问题。不过,与利用单个系统相比,不论实现的效率如何,这样确实可以提供更大的可扩展性和冗余性。遗憾的是,这种性能的提升并不是没有代价的,它会增加程序的复杂性。特别是多线程服务器(和其他多线程程序)要求程序员解决一些问题,而对于单线程程序而言原本不存在这些问题,尤其是安全性和活动性问题。因为不同的线程共享相同的内存,一个线程完全有可能会破坏另一个线程使用的变量和数据结构。这就类似于如果一个程序在没有内存保护机制的操作系统(如 Windows95)中运行,则有可能会破坏整个系统。因此,不同线程必须非常注意当时使用的资源。一般来讲,每个线程只有在确保资源不会改变或者它有独占访问权的时候才可以使用某个资源。不过,也可能两个线程太过小心，每个线程都在等待对资源的独占访问权,却永远都得不到。这会导致死锁,在这种情况下两个线程都在等待另一个线程所占有的资源。在没有得到另一个线程所保留的资源时,两个线程都不会继续处理,但同时都不愿意放弃已经占有的资源。本文链接: java网络编程第4版 前言]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
        <category>第3章</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Windows地址格式和Linux地址格式相互转换]]></title>
    <url>%2Fblog%2F99823945%2F</url>
    <content type="text"><![CDATA[需求我想从Windows中的文件资源管理器中复制路径，用java代码转成Linux格式，然后粘贴到git-bash中，这样在git-bash中可以快速的进入这个目录。或者从git-bash中复制路径，用java代码转换成Windows格式，这样我可以用文件资源管理器快速的打开这个目录或者文件。实现代码12345678910111213141516171819202122232425262728293031package linux.path.windows.path;import clipboard.util.SysClipboardUtil;public class ChangePathFormat&#123; public static void main(String[] args) &#123; String path=SysClipboardUtil.getSysClipboardText(); System.out.println(path);// /d/Blog/bolg5 if(path.matches("/[a-zA-Z](?:/.+)*")) &#123; System.out.println("Linux地址表示方式:"+path); //D:\Blog\bolg5 path=path.replaceFirst("/([a-zA-Z])", "$1:"); path=path.replace("/", "\\"); System.out.println("转为window类型："+path); SysClipboardUtil.setSysClipboardText(path); &#125; //d:\Blog\bolg5 else if(path.matches("[a-zA-Z]:(?:\\\\.+)*")) &#123; System.out.println("windows地址表示方式:"+path); path=path.replaceFirst("([a-zA-Z]):", "/$1"); path=path.replace("\\", "/"); System.out.println("转为Linux类型："+path); SysClipboardUtil.setSysClipboardText(path); &#125; &#125;&#125;依赖SysClipboardUtil使用说明复制路径然后调用上面的代码，程序会判断，如果是Linux格式的路径，就转换为Windows路径格式，如果是Windows路径就转换为Linux路径格式。本文链接: Windows地址格式和Linux地址格式相互转换]]></content>
      <categories>
        <category>我的软件</category>
        <category>Windows系统相关工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Math Processing Error]]></title>
    <url>%2Fblog%2Ffb569c24%2F</url>
    <content type="text"><![CDATA[最近mathjax渲染LaTex公式时，公式老是变成：[Math Processing Error]。我很无奈。解决方法：打开主题配置文件，找到mathjax下面的cdn:配置项，换一个cdn路径就行了。重新更换cdn之后就可以渲染了。本文链接: [Math Processing Error]]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>报错</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo 写博客时在文章中添加到其他文章的超链接]]></title>
    <url>%2Fblog%2F9575d743%2F</url>
    <content type="text"><![CDATA[我希望在文章首部添加一些锚点，这样可以在这篇文章之间跳转，例如从文章首部跳转到文章尾部。解决方案先在本地服务器打开这篇文章，然后复制锚点的链接，然后去掉站点的地址，使用绝对地址即可。例如，我现在想跳转到上面的问题描述部分1http://localhost:4000/2018/09/03/Hexo搭建博客/写文章/Hexo 写博客跳转到其他页面/#问题描述这里用的是绝对地址，我们需要使用相对地址。去掉上面的localhost:4000就行了，得到相对地址：1[跳转到问题描述](/2018/09/03/Hexo搭建博客/写文章/Hexo 写博客跳转到其他页面/#问题描述)效果如下：跳转到问题描述本文链接: Hexo 写博客时在文章中添加到其他文章的超链接]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>写文章技巧</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTex牛顿莱布尼兹上下限的问题]]></title>
    <url>%2Fblog%2F161696a3%2F</url>
    <content type="text"><![CDATA[正确的写法先是：\left.注意left后面要有点号.然后是其他公式，然后是：\right|如下所示：1$$L[t]=L[\int 1(t)dt]=\frac&#123;1&#125;&#123;s&#125;\cdot\frac&#123;1&#125;&#123;s&#125;+\left. \frac&#123;1&#125;&#123;s&#125;t \right|_&#123;t=0&#125;=\frac&#123;1&#125;&#123;s^2&#125;$$效果：$$L[t]=L[\int 1(t)dt]=\frac{1}{s}\cdot\frac{1}{s}+\left. \frac{1}{s}t \right|_{t=0}=\frac{1}{s^2}$$如果没有写点号的话，会显示不正确：1$$L[t]=L[\int 1(t)dt]=\frac&#123;1&#125;&#123;s&#125;\cdot\frac&#123;1&#125;&#123;s&#125;+\left \frac&#123;1&#125;&#123;s&#125;t \right|_&#123;t=0&#125;=\frac&#123;1&#125;&#123;s^2&#125;$$效果：$$L[t]=L[\int 1(t)dt]=\frac{1}{s}\cdot\frac{1}{s}+\left \frac{1}{s}t \right|_{t=0}=\frac{1}{s^2}$$本文链接: LaTex牛顿莱布尼兹上下限的问题]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[箭头_箭头上下标]]></title>
    <url>%2Fblog%2F9d116ea%2F</url>
    <content type="text"><![CDATA[除了作为上下标之外，箭头还用于表示过程。amsmath的\xleftarrow和\xrightarrow命令可以为箭头增加上下标：12\[ a\xleftarrow&#123;x+y+z&#125; b \]\[ c\xrightarrow[x&lt;y]&#123;a*b*c&#125;d \]$$a\xleftarrow{x+y+z} b \\c\xrightarrow[x&lt;y]{a*b*c}d$$本文链接: 箭头_箭头上下标]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[巨算符--连乘符号]]></title>
    <url>%2Fblog%2F525c11d8%2F</url>
    <content type="text"><![CDATA[连乘符号($\prod$)用:\prod表示修改上下标的显示位置巨算符的上下标用作其上下限。行间公式中，积分号默认将上下限放在右上角和右下角，求和号默认在上下方；行内公式一律默认在右上角和右下角。可以在巨算符后使用\limits手动令上下限显示在上下方，\nolimits则相反。12345678In text:$\sum\limits_&#123;i=1&#125;^n \quad\int\limits_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\prod\limits_\epsilon $ \\In display:\[\sum\nolimits_&#123;i=1&#125;^n \quad\int\limits_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\prod\nolimits_\epsilon \]In text:$\sum\limits_{i=1}^n \quad\int\limits_0^{\frac{\pi}{2}} \quad\prod\limits_\epsilon $ \\In display:$$\sum\nolimits_{i=1}^n \quad\int\limits_0^{\frac{\pi}{2}} \quad\prod\nolimits_\epsilon $$本文链接: 巨算符–连乘符号]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTex偏导，条件偏导]]></title>
    <url>%2Fblog%2Fbdf1358e%2F</url>
    <content type="text"><![CDATA[偏导符号$\partial$1$\left.\frac&#123;\partial f(x,y)&#125;&#123;\partial x&#125;\right|_&#123;x=0&#125;$$\left.\frac{\partial f(x,y)}{\partial x}\right|_{x=0}$参考: https://blog.csdn.net/thither_shore/article/details/52260742本文链接: LaTex偏导，条件偏导]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[解决Hexo博客中mathJax LaTex公式手机端无法显示]]></title>
    <url>%2Fblog%2F74c14e83%2F</url>
    <content type="text"><![CDATA[我用手机自带的浏览器，发现加载不出公式，解决方法：换用谷歌浏览器app就行了。本文链接: 解决Hexo博客中mathJax LaTex公式手机端无法显示]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTex牛顿莱布尼茨上下限符号]]></title>
    <url>%2Fblog%2Ff24112ad%2F</url>
    <content type="text"><![CDATA[123$$\left.\int_&#123;a&#125;^&#123;b&#125;f(x)&#123;\mathrm&#123;d&#125;&#125;x=F(x)\right|_&#123;a&#125;^&#123;b&#125;$$$$\left.\int_{a}^{b}f(x){\mathrm{d}}x=F(x)\right|_{a}^{b}$$本文链接: LaTex牛顿莱布尼茨上下限符号]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTex巨算符--积分号，求和号等]]></title>
    <url>%2Fblog%2F825a3007%2F</url>
    <content type="text"><![CDATA[积分号∫(\int)、求和号∑(\sum)等符号称为巨算符。巨算符在行内公式和行间公式的大小和形状有区别。12345678910In text:$\sum_&#123;i=1&#125;^n \quad\int_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\oint_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\prod_\epsilon $In display:$$\sum_&#123;i=1&#125;^n \quad\int_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\oint_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\prod_\epsilon $$In text:$\sum_{i=1}^n \quad\int_0^{\frac{\pi}{2}} \quad\oint_0^{\frac{\pi}{2}} \quad\prod_\epsilon$In display:$$\sum_{i=1}^n \quad\int_0^{\frac{\pi}{2}} \quad\oint_0^{\frac{\pi}{2}} \quad\prod_\epsilon $$本文链接: LaTex巨算符–积分号，求和号等]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MathJax LaTex多行公式对齐]]></title>
    <url>%2Fblog%2Fc9e3a3a5%2F</url>
    <content type="text"><![CDATA[多行公式更多的情况是，我们需要罗列一系列公式，并令其按照等号对齐。目前最常用的是align环境，它将公式用&amp;隔为两部分并对齐。分隔符通常放在等号左边：123456$$\begin&#123;align&#125;a &amp; = b + c \\&amp; = d + e\end&#123;align&#125;$$$$\begin{align}a &amp; = b + c \\&amp; = d + e\end{align}$$align环境会给每行公式都编号。我们仍然可以用\notag去掉某行的编号。在以下的例子，为了对齐加号，我们将分隔符放在等号右边，这时需要给等号后添加一对括号{}以产生正常的间距：12345678$$\begin&#123;align&#125;a =&#123;&#125; &amp; b + c \\=&#123;&#125; &amp; d + e + f + g + h + i+ j + k + l \notag \\&amp; + m + n + o \\=&#123;&#125; &amp; p + q + r + s\end&#123;align&#125;$$$$\begin{align}a ={} &amp; b + c \\={} &amp; d + e + f + g + h + i+ j + k + l \notag \\&amp; + m + n + o \\={} &amp; p + q + r + s\end{align}$$align还能够对齐多组公式，除等号前的&amp;之外，公式之间也用&amp;分隔：1234$$\begin&#123;align&#125;a &amp;=1 &amp; b &amp;=2 &amp; c &amp;=3 \\d &amp;=-1 &amp; e &amp;=-2 &amp; f &amp;=-5\end&#123;align&#125;$$$$\begin{align}a &amp;=1 &amp; b &amp;=2 &amp; c &amp;=3 \\d &amp;=-1 &amp; e &amp;=-2 &amp; f &amp;=-5\end{align}$$本文链接: MathJax LaTex多行公式对齐]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo部署问题 Hexo -d时 `fatal bad config line 1 in file .gitconfig`]]></title>
    <url>%2Fblog%2F1189ba2d%2F</url>
    <content type="text"><![CDATA[Hexo -d发布问题：fatal: bad config line 1 in file .git/config1234567891011121314INFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...fatal: bad config line 1 in file .git/configFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: fatal: bad config line 1 in file .git/config at ChildProcess.&lt;anonymous&gt; (D:\Blog\bolg5\node_modules\hexo-util\lib\spawn.js:37:17) at emitTwo (events.js:126:13) at ChildProcess.emit (events.js:214:7) at ChildProcess.cp.emit (D:\Blog\bolg5\node_modules\cross-spawn\lib\enoent.js:40:29) at maybeClose (internal/child_process.js:925:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:209:5)应该是.git/config这个文件有问题。这个文件在哪里呢，就在.deploy_git目录下。所以：解决方法:删除hexo站点目录下的.deploy_git目录，然后再输入hexo clean &amp;&amp;hexo g&amp;&amp;hexo d即可发布。参考:https://blog.csdn.net/cijiancao/article/details/80819975本文链接: Hexo部署问题 Hexo -d时 fatal bad config line 1 in file .gitconfig]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTex符号表图片]]></title>
    <url>%2Fblog%2F42ec57e0%2F</url>
    <content type="text"><![CDATA[文本/数字模式通用符号希腊字母二元关系巨算子数学重音符号箭头作为重音的箭头符号定界符本文链接: LaTex符号表图片]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTex符号表]]></title>
    <url>%2Fblog%2F2846862b%2F</url>
    <content type="text"><![CDATA[后面把这些符号表粘贴进来就行了，后面的那些不需要再看了，保留官方文档的连接，现在只要留个印象。表4.4:文本/数学模式通用符号文本/数学模式通用符号命令$\{$\{$\}$\}$ $ $\$$\%$\%$\S$\S$\dots$\dots表4.5:希腊字母。\Alpha，\Beta等希腊字母符号不存在，因为它们和拉丁字母A,B等一模一样；小写字母里也不存在\omicron，直接用o代替。效果命令效果命令效果命令效果命令$\alpha$\alpha$\theta$\theta$o$o$\upsilon$\upsilon$\beta$\beta$\vartheta$\vartheta$\pi$\pi$\phi$\phi$\gamma$\gamma$\iota$\iota$\varpi$\varpi$\varphi$\varphi$\delta$\delta$\kappa$\kappa$\rho$\rho$\chi$\chi$\epsilon$\epsilon$\lambda$\lambda$\varrho$\varrho$\psi$\psi$\varepsilon$\varepsilon$\mu$\mu$\sigma$\sigma$\omega$\omega$\zeta$\zeta$\nu$\nu$\varsigma$\varsigma$\eta$\eta$\xi$\xi$\tau$\tau$\Gamma$\Gamma$\Lambda$\Lambda$\Sigma$\Sigma$\Psi$\Psi$\Delta$\Delta$\Xi$\Xi$\Upsilon$\Upsilon$\Omega$\Omega$\Theta$\Theta$\Pi$\Pi$\Phi$\Phi$\varGamma$\varGamma$\varLambda$\varLambda$\varSigma$\varSigma$\varPsi$\varPsi$\varDelta$\varDelta$\varXi$\varXi$\varUpsilon$\varUpsilon$\varOmega$\varOmega$\varTheta$\varTheta$\varPi$\varPi$\varPhi$\varPhi表4.6:二元关系符。有的二元关系符都可以加\not前缀得到相反意义的关系符，例如\not=就得到不等号（同\ne）。效果命令效果命令效果命令$&lt;$&lt;$&gt;$&gt;$=$=$\leq$\leq or \le$\ge$\geq or \ge$\equiv$\equiv$\ll$\ll$\gg$\gg$\doteq$\doteq$\prec$\prec$\succ$\succ$\sim$\sim$\preceq$\preceq$\succeq$\succeq$\simeq$\simeq$\subset$\subset$\supset$\supset$\approx$\approx$\subseteq$\subseteq$\supseteq$\supseteq$\cong$\cong$\sqsubset$\sqsubset$\sqsupset$\sqsupset太多了，不搬运了，我处理不过来。到时候看官方文档吧。本文链接: LaTex符号表]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTex数学公式语法]]></title>
    <url>%2Fblog%2F83c2e83a%2F</url>
    <content type="text"><![CDATA[参考文献：http://texdoc.net/texmf-dist/doc/latex/lshort-chinese/lshort-zh-cn.pdf公式排版基础数学公式有两种排版方式：其一是文字混排，称为行内公式；其二是单独列为一行排版，称为行间公式。行内公式由一对$包裹：1Add $a$ squared and $b$ Squared to get $c$ Squared .Or,using a more mathmatical approach:$a^2+b^2=c^2$显示效果：Add $a$ squared and $b$ Squared to get $c$ Squared .Or,using a more mathmatical approach:$a^2+b^2=c^2$数学符号一般符号希腊字母符号的名称就是其英文名称，如$\alpha$(\alpha),$\beta$(\beta)等等。大写的希腊字母为首字母大写的命令，如$\Gamma$(\Gamma),$\Delta$(\Delta)等等。无穷大符号为$\infty$(\infty)。省略号有$\dots$(\dots)和$cdots$(\cdots)两种形式。他们有各自合适的用途：12$a_1,a_2,\dots,a_n$$a_1,a_2,\cdots,a_n$显示效果如下：$a_1,a_2,\dots,a_n$$a_1,a_2,\cdots,a_n$\ldost和\dots是完全等效的，它们既能用在公式中，也用在文本里作为省略号。除此之外，在矩阵中可能会用到竖排的$\vdots$(\vdots)和斜排的$\ddots$(\ddots)指数，上下标和导数在LaTex中用^和_表明上下标。注意上下标的内容(子公式)一般需要用花括号包裹，否则上下标只对后面的一个符号起作用12$p^3_&#123;ij&#125; \qquad m_\mathrm&#123;Knuth&#125;\qquad \sum_&#123;K=1&#125;^3 k $$a^x+y \neq a^&#123;x+y&#125;\\qquad e^(x^2) \neq &#123;e^x&#125;^2$显示效果：$p^3_{ij} \qquad m_\mathrm{Knuth}\qquad \sum_{K=1}^3 k $$a^x+y \neq a^{x+y}\qquad e^(x^2) \neq {e^x}^2$导数符号‘(’)是一类特殊的上标，可以适当连用表示多阶导数，也可以在其后连用上标：1$f(x)=x^2 \quad f&apos;(x)=2x \quad f&apos;&apos;^&#123;2&#125;=4$显示效果：$f(x)=x^2 \quad f’(x)=2x \quad f’’^{2}=4$分式和根式分式使用\frac{分子}{分母}来书写。分式的大小在行间公式是正常显示大小，而在行内被极度压缩。amsmath提供了方便的命令\dfrac和\tfrac,令用户能够在行内使用正常大小的行内公式，或是反过来。1斜分式: $3/8 \qquad $,压缩分式：$\frac&#123;3&#125;&#123;8&#125;\qquad$ ,显示正常大小：$\dfrac&#123;3&#125;&#123;8&#125;$斜分式: $3/8 \qquad $,压缩分式：$\frac{3}{8}\qquad$ ,显示正常大小：$\dfrac{3}{8}$一般的根式使用\sqrt{…}表示，表示n此方跟时写成\sqrt[n]{…}1234$\sqrt&#123;x&#125; \Leftrightarrow x^&#123;1/2&#125;\quad \sqrt[3]&#123;2&#125;\quad \sqrt&#123;x^&#123;2&#125;+\sqrt&#123;y&#125;&#125;$$$\sqrt{x} \Leftrightarrow x^{1/2}\quad \sqrt[3]{2}\quad \sqrt{x^{2}+\sqrt{y}}$特殊的分式形式，如二项式结构，由amsmath宏包的\binom命令生成：1234Pascal&apos;s rule is$$\binom&#123;n&#125;&#123;k&#125;=\binom&#123;n-1&#125;&#123;k&#125;+\binom&#123;n-1&#125;&#123;k-1&#125;$$Pascal’s rule is$$\binom{n}{k}=\binom{n-1}{k}+\binom{n-1}{k-1}$$关系符LaTex常见的关系符号除了可以直接输入的=,&gt;,&lt;，其他符号用命令输入，常用的有不等于: $\ne$ (\ne),大于等于号: $\ge$ (\ge)和小于等于号:$\le$ (\le),约等于号: $\approx$ (\approx),等价 $\equiv$ (\equiv),正比: $\propto$ (\propto),相似: $\sim$ (\sim)等等。LaTex还提供了自定义二元关系符的命令\stackrel,用于将一个符号叠加在原有的二元关系符之上：123$$f_n(x) \stackrel&#123;*&#125;&#123;\approx&#125; 1$$$$f_n(x) \stackrel{*}{\approx} 1$$算符LaTex中的算符大多数是二元算符，除了直接用键盘可以输入的+，-，*，/外，其他符号用命令输入，常用的符号有乘号：$\times$(\times),除号: $\div$ (\div),点乘: $\cdot$ (\cdot),加减号 $\pm$ (\pm) 或者 $\mp$ (\mp)等等。更多符号命令可参考表4.7以及表4.17巨算子积分号$\int$(\int),求和号$\sum$(\sum)等符号称为巨算子。巨算子在行内公式和行间公式的大小形状有区别123456789在行内显示:$\sum_&#123;i=1&#125;^n \quad\int_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\oint_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\prod_\epsilon $在行间显示：$$\sum_&#123;i=1&#125;^n \quad\int_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\oint_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\prod_\epsilon $$在行内显示:$\sum_{i=1}^n \quad\int_0^{\frac{\pi}{2}} \quad\oint_0^{\frac{\pi}{2}} \quad\prod_\epsilon $在行间显示：$$\sum_{i=1}^n \quad\int_0^{\frac{\pi}{2}} \quad\oint_0^{\frac{\pi}{2}} \quad\prod_\epsilon $$巨算符的上下标用作其上下限。行间公式中，积分号默认将上下限放在右上角和右下角，求和号默认在上下方；行内公式一律默认在右上角和右下角。可以在巨算符后使用\limits手动令上下限显示在上下方，\nolimits则相反,即不显示在上下方，也就是显示在右上角，右下角。12345678In text:$\sum\limits_&#123;i=1&#125;^n \quad\int\limits_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\prod\limits_\epsilon $ In display:$$\sum\nolimits_&#123;i=1&#125;^n \quad\int\limits_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad\prod\nolimits_\epsilon $$In text:$\sum\limits_{i=1}^n \quad\int\limits_0^{\frac{\pi}{2}} \quad\prod\limits_\epsilon $In display:$$\sum\nolimits_{i=1}^n \quad\int\limits_0^{\frac{\pi}{2}} \quad\prod\nolimits_\epsilon $$数学重音和上下括号数学符号可以像文字一样加重音，比如对时间求导的符号$\dot{r}$(\dot{r})、$ddot{r}$(ddot{r})、表示向量的箭头$vec{r}$(vec{r})、表示欧式空间单位向量的$\hat{\mathbf{e}}$(\hat{\mathbf{e}})等，详见表4.9。使用时要注意重音符号的作用区域，一般应当对某个符号而不是不符号加下表使用重音：1234$\bar&#123;x_0&#125; \quad \bar&#123;x&#125;_0$\\[5pt]$\vec&#123;x_0&#125; \quad \vec&#123;x&#125;_0$\\[5pt]$\hat&#123;\mathbf&#123;e&#125;_x&#125; \quad\hat&#123;\mathbf&#123;e&#125;&#125;_x$$\bar{x_0} \quad \bar{x}_0$$\vec{x_0} \quad \vec{x}_0$$\hat{\mathbf{e}_x} \quad\hat{\mathbf{e}}_x$LATEX也能为多个字符加重音，包括直接画线的\overline和\underline命令（可叠加使用）、宽重音符号\widehat、表示向量的箭头\overrightarrow等。后两者详见表4.9和4.11等。12345$0.\overline&#123;3&#125; =\underline&#123;\underline&#123;1/3&#125;&#125;$$\hat&#123;XY&#125; \qquad \widehat&#123;XY&#125;$$\vec&#123;AB&#125; \qquad\overrightarrow&#123;AB&#125;$$0.\overline{3} =\underline{\underline{1/3}}$$\hat{XY} \qquad \widehat{XY}$$\vec{AB} \qquad\overrightarrow{AB}$\overbrace和\underbrace命令用来生成上/下括号，各自可带一个上/下标公式。123$\underbrace&#123;\overbrace&#123;a+b+c&#125;^6\cdot \overbrace&#123;d+e+f&#125;^7&#125;_\text&#123;meaning of life&#125; = 42$$\underbrace{\overbrace{a+b+c}^6\cdot \overbrace{d+e+f}^7}_\text{meaning of life} = 42$箭头除了作为上下标之外，箭头还用于表示过程。amsmath的\xleftarrow和\xrightarrow命令可以为箭头增加上下标：12$$ a\xleftarrow&#123;x+y+z&#125; b $$$$c\xrightarrow[x&lt;y]&#123;a\*b\*c&#125;d $$$$ a\xleftarrow{x+y+z} b$$$$c\xrightarrow[x&lt;y]{a*b*c}d $$注意，这里$$c\xrightarrow[x&lt;y]{a\*b\*c}d $$乘号前面加转义符是让Markdown引擎不解析这两个星号，因为两个连续的星号，markdown会解析成斜体字。括号和定界符LATEX提供了多种括号和定界符表示公式块的边界。除小括号( )、中括号[ ]之外，其余都是LATEX命令，包括大括号\{ \}。表4.12和4.13给出了更多的括号/定界符命令。1$&#123;a,b,c&#125; \neq \&#123;a,b,c\&#125;$${a,b,c} \neq \{a,b,c\}$使用\left和\right命令可令括号（定界符）的大小可变，在行间公式中常用。LATEX会自动根据括号内的公式大小决定定界符大小。\left和\right必须成对使用。需要使用单个定界符时，另一个定界符写成\left.或\right.。1234\[1 + \left(\frac&#123;1&#125;&#123;1-x^&#123;2&#125;&#125;\right)^3 \qquad\left.\frac&#123;\partial f&#125;&#123;\partial t&#125;\right|_&#123;t=0&#125;\]$$1 + \left(\frac{1}{1-x^{2}}\right)^3 \qquad\left.\frac{\partial f}{\partial t}\right|_{t=0}$$多行公式长公式折行通常来讲应当避免写出超过一行而需要折行的长公式。如果一定要折行的话，优先在等号之前折行，其次在加号、减号之前，再次在乘号、除号之前。其它位置应当避免折行。amsmath宏包的multline环境提供了书写折行长公式的方便环境。它允许用\\\\(markdown中显示:\\\)折行，将公式编号放在最后一行。多行公式的首行左对齐，末行右对齐，其余行居中。因为markdown中\是转义符，所以\\才表示一个\\,所以这里要写四个\(\\\\)123456$\begin&#123;multline&#125;a + b + c + d + e + f+ g + h + i \\= j + k + l + m + n\\= o + p + q + r + s\\= t + u + v + x + z\end&#123;multline&#125;$$\begin{multline}a + b + c + d + e + f+ g + h + i \\= j + k + l + m + n\\= o + p + q + r + s\\= t + u + v + x + z\end{multline}$与表格不同的是，公式的最后一行不写\\，如果写了，反倒会产生一个多余的空行。类似equation*，multline*环境排版不带编号的折行长公式。多行公式更多的情况是，我们需要罗列一系列公式，并令其按照等号对齐。读者可能阅读过其它手册或者资料，知道LATEX提供了eqnarray环境。它按照等号左边——等号——等号右边呈三列对齐，但等号周围的空隙过大，加上公式编号等一些bug，目前已不推荐使用目前最常用的是align环境，它将公式用&amp;隔为两部分并对齐。分隔符通常放在等号左边：1234\begin&#123;align&#125;a &amp; = b + c \\&amp; = d + e\end&#123;align&#125;$\begin{align}a &amp; = b + c \\&amp; = d + e\end{align}$align环境会给每行公式都编号。我们仍然可以用\notag去掉某行的编号。在以下的例子，为了对齐加号，我们将分隔符放在等号右边，这时需要给等号后添加一对括号{}以产生正常的间距：1234567$\begin&#123;align&#125;a =&#123;&#125; &amp; b + c \\=&#123;&#125; &amp; d + e + f + g + h + i+ j + k + l \notag \\&amp; + m + n + o \\=&#123;&#125; &amp; p + q + r + s\end&#123;align&#125;$$\begin{align}a ={} &amp; b + c \\={} &amp; d + e + f + g + h + i+ j + k + l \notag \\&amp; + m + n + o \\={} &amp; p + q + r + s\end{align}$align还能够对齐多组公式，除等号前的&amp;之外，公式之间也用&amp;分隔：1234$\begin&#123;align&#125;a &amp;=1 &amp; b &amp;=2 &amp; c &amp;=3 \\d &amp;=-1 &amp; e &amp;=-2 &amp; f &amp;=-5\end&#123;align&#125;$$\begin{align}a &amp;=1 &amp; b &amp;=2 &amp; c &amp;=3 \\d &amp;=-1 &amp; e &amp;=-2 &amp; f &amp;=-5\end{align}$如果我们不需要按等号对齐，只需罗列数个公式，gather将是一个很好用的环境：123456$\begin&#123;gather&#125;a = b + c \\d = e + f + g \\h + i = j + k \notag \\l + m = n\end&#123;gather&#125;$$\begin{gather}a = b + c \\d = e + f + g \\h + i = j + k \notag \\l + m = n\end{gather}$align和gather有对应的不带编号的版本align*和gather*。公用编号的多行公式另一个常见的需求是将多个公式组在一起公用一个编号，编号位于公式的居中位置。为此，amsmath宏包提供了诸如aligned、gathered等环境，与equation环境套用。以-ed结尾的环境用法与前一节不以-ed结尾的环境用法一一对应。我们仅以aligned举例：12345678$\begin&#123;equation&#125;\begin&#123;aligned&#125;a &amp;= b + c \\d &amp;= e + f + g \\h + i &amp;= j + k \\l + m &amp;= n\end&#123;aligned&#125;\end&#123;equation&#125;$$\begin{equation}\begin{aligned}a &amp;= b + c \\d &amp;= e + f + g \\h + i &amp;= j + k \\l + m &amp;= n\end{aligned}\end{equation}$split环境和aligned环境用法类似，也用于和equation环境套用，区别是split只能将每行的一个公式分两栏，aligned允许每行多个公式多栏。数组和矩阵为了排版二维数组，LATEX提供了array环境，用法与tabular环境极为类似，也需要定义列格式，并用\\换行。数组可作为一个公式块，在外套用\left、\right等定界符:12345678$$ \mathbf&#123;X&#125; = \left(\begin&#123;array&#125;&#123;cccc&#125;x_&#123;11&#125; &amp; x_&#123;12&#125; &amp; \ldots &amp; x_&#123;1n&#125;\\x_&#123;21&#125; &amp; x_&#123;22&#125; &amp; \ldots &amp; x_&#123;2n&#125;\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\x_&#123;n1&#125; &amp; x_&#123;n2&#125; &amp; \ldots &amp; x_&#123;nn&#125;\\\end&#123;array&#125;\right) $$还是因为是在markdown文档中\需要转义，所以两个斜杠:\\,在markdown文档中需要使用四个斜杠:\\\\来表示$$ \mathbf{X} = \left(\begin{array}{cccc}x_{11} &amp; x_{12} &amp; \ldots &amp; x_{1n}\\x_{21} &amp; x_{22} &amp; \ldots &amp; x_{2n}\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\x_{n1} &amp; x_{n2} &amp; \ldots &amp; x_{nn}\\\end{array}\right) $$值得注意的是，上一节末尾介绍的aligned等环境也可以用定界符包裹。我们还可以利用空的定界符排版出这样的效果：123456\[ |x| = \left\&#123;\begin&#123;array&#125;&#123;rl&#125;-x &amp; \text&#123;if &#125; x &lt; 0,\\0 &amp; \text&#123;if &#125; x = 0,\\x &amp; \text&#123;if &#125; x &gt; 0.\end&#123;array&#125; \right. \][ |x| = \left\{\begin{array}{rl}-x &amp; \text{if } x &lt; 0,\\0 &amp; \text{if } x = 0,\\x &amp; \text{if } x &gt; 0.\end{array} \right. ]我不知道这里为什么显示不正常，可以能不支持把，下面的例子同样也可额完成，衣柜对于分段函数可以写下面的这种形式。分段函数不过上述例子可以用amsmath提供的cases环境更轻松地完成：123456$$ |x| =\begin&#123;cases&#125;-x &amp; \text&#123;if &#125; x &lt; 0,\\0 &amp; \text&#123;if &#125; x = 0,\\x &amp; \text&#123;if &#125; x &gt; 0.\end&#123;cases&#125; $$$$ |x| =\begin{cases}-x &amp; \text{if } x &lt; 0,\\0 &amp; \text{if } x = 0,\\x &amp; \text{if } x &gt; 0.\end{cases} $$我们当然也可以用array环境排版各种矩阵。amsmath宏包还直接提供了多种排版矩阵的环境，包括不带定界符的matrix，以及带各种定界符的矩阵pmatrix（(）、bmatrix（[）、Bmatrix（{）、vmatrix（）、Vmatrix（）。使用这些环境时，无需给定列格式5：1234567891011\[\begin&#123;matrix&#125;1 &amp; 2 \\ 3 &amp; 4\end&#123;matrix&#125; \qquad\begin&#123;bmatrix&#125;x_&#123;11&#125; &amp; x_&#123;12&#125; &amp; \ldots &amp; x_&#123;1n&#125;\\x_&#123;21&#125; &amp; x_&#123;22&#125; &amp; \ldots &amp; x_&#123;2n&#125;\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\x_&#123;n1&#125; &amp; x_&#123;n2&#125; &amp; \ldots &amp; x_&#123;nn&#125;\\\end&#123;bmatrix&#125;\]$$\begin{matrix}1 &amp; 2 \\\\ 3 &amp; 4\end{matrix} \qquad\begin{bmatrix}x_{11} &amp; x_{12} &amp; \ldots &amp; x_{1n}\\x_{21} &amp; x_{22} &amp; \ldots &amp; x_{2n}\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\x_{n1} &amp; x_{n2} &amp; \ldots &amp; x_{nn}\\\end{bmatrix}$$在矩阵中的元素里排版分式时，一来要用到\dfrac等命令，二来行与行之间有可能紧贴着，这时要用到3.6.6小节的方法来调节间距：1234567891011$$\mathbf&#123;H&#125;=\begin&#123;bmatrix&#125;\dfrac&#123;\partial^2 f&#125;&#123;\partial x^2&#125; &amp;\dfrac&#123;\partial^2 f&#125;&#123;\partial x \partial y&#125; \\[8pt]\dfrac&#123;\partial^2 f&#125;&#123;\partial x \partial y&#125; &amp;\dfrac&#123;\partial^2 f&#125;&#123;\partial y^2&#125;\end&#123;bmatrix&#125;$$$$\mathbf{H}=\begin{bmatrix}\dfrac{\partial^2 f}{\partial x^2} &amp;\dfrac{\partial^2 f}{\partial x \partial y} \\ [8pt]\dfrac{\partial^2 f}{\partial x \partial y} &amp;\dfrac{\partial^2 f}{\partial y^2}\end{bmatrix}$$公式中的间距前文提到过，绝大部分时候，数学公式中各元素的间距是根据符号类型自动生成的，需要我们手动调整的情况极少。我们已经认识了两个生成间距的命令\quad和\qquad。在公式中我们还可能用到的间距包括\,、\:、\;以及负间距\!，其中\quad、\qquad和\,在文本和数学环境中可用，后三个命令只用于数学环境。文本中的\␣也能使用在数学公式中。此处应该有图片，但是我的图片好像用不了了一个常见的用途是修正积分的被积函数$f(x)$和微元$dx$之间的距离。注意微元里的$d$用的是直立体：12345$$\int_a^b f(x)\mathrm&#123;d&#125;x\qquad\int_a^b f(x)\,\mathrm&#123;d&#125;x$$$$\int_a^b f(x)\mathrm{d}x\qquad\int_a^b f(x)\,\mathrm{d}x$$另一个用途是生成多重积分号。如果我们直接连写两个\int，之间的间距将会过宽，此时可以使用负间距\!修正之。不过amsmath提供了更方便的多重积分号，如二重积分\iint、三重积分\iiint等。123456789$$\newcommand\diff&#123;\,\mathrm&#123;d&#125;&#125;\begin&#123;gather\*&#125;\int\int f(x)g(y)\diff x \diff y \\\int\\!\\!\\!\intf(x)g(y) \diff x \diff y \\\iint f(x)g(y) \diff x \diff y \\\iint\quad \iiint\quad \idotsint\end&#123;gather\*&#125;$$这上面还是有问题的，我在hexo mathjax的marked.js（在./node_modules/marked/lib/中）修改了：123//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/, //它取消了该渲染引擎对\,&#123;,&#125;的转义 escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,取消了\\的转义，但是这了\i还是现实错误，我不知道该怎么弄，所以，上面的代码中使用\\i代替\i。修改源码需谨慎。$$\newcommand\diff{\,\mathrm{d}}\begin{gather*}\int\int f(x)g(y)\diff x \diff y \\\int\!\!\!\intf(x)g(y) \diff x \diff y \\\iint f(x)g(y) \diff x \diff y \\\iint\quad \iiint\quad \idotsint\end{gather*}$$数学符号的字体控制数学字母字体LATEX允许一部分数学符号切换字体，主要是拉丁字母、数字等等。表4.2给出了切换字体的命令。某一些命令需要字体宏包的支持。123456$\mathcal&#123;R&#125; \quad \mathfrak&#123;R&#125;\quad \mathbb&#123;R&#125;$$$\mathcal&#123;L&#125;= -\frac&#123;1&#125;&#123;4&#125;F_&#123;\mu\nu&#125;F^&#123;\mu\nu&#125;$$$\mathfrak&#123;su&#125;(2)$ and$\mathfrak&#123;so&#125;(3)$ Lie algebr$\mathcal{R} \quad \mathfrak{R}\quad \mathbb{R}$$$\mathcal{L}= -\frac{1}{4}F_{\mu\nu}F^{\mu\nu}$$$\mathfrak{su}(2)$ and$\mathfrak{so}(3)$ Lie algebr数学符号的尺寸数学符号按照符号排版的位置规定尺寸，从大到小包括行间公式尺寸、行内公式尺寸、上下标尺寸、次级上下标尺寸。除了字号有别之外，行间和行内公式尺寸下的巨算符也使用不一样的大小。LATEX为每个数学尺寸指定了一个切换的命令，见4.3。例如行间公式的分式内，分子分母使用行内公式尺寸，巨算符采用行内尺寸的形式。对比一下分子分母使用\displaystyle命令与否的区别：这里有一个表格12345678$$P = \frac&#123;\sum_&#123;i=1&#125;^n (x_i- x)(y_i- y)&#125;&#123;\displaystyle \left[\sum_&#123;i=1&#125;^n (x_i-x)^2\sum_&#123;i=1&#125;^n (y_i-y)^2\right]^&#123;1/2&#125; &#125;$$$$P = \frac{\sum_{i=1}^n (x_i- x)(y_i- y)}{\displaystyle \left[\sum_{i=1}^n (x_i-x)^2\sum_{i=1}^n (y_i-y)^2\right]^{1/2} }$$符号表后面把这些符号表粘贴进来就行了，后面的那些不需要再看了，保留官方文档的连接，现在只要留个印象。表4.4:文本/数学模式通用符号文本/数学模式通用符号命令$\{$\{$\}$\}$$$$$\%$\%$\dag$\dag$\S$\S$\copyright$\copyright$\dots$\dots$\ddag$\ddag$\P$\P$\pounds$\pounds表4.5:希腊字母。\Alpha，\Beta等希腊字母符号不存在，因为它们和拉丁字母A,B等一模一样；小写字母里也不存在\omicron，直接用o代替。效果命令效果命令效果命令效果命令$\alpha$\alpha$\theta$\theta$o$o$\upsilon$\upsilon$\beta$\beta$\vartheta$\vartheta$\pi$\pi$\phi$\phi$\gamma$\gamma$\iota$\iota$\varpi$\varpi$\varphi$\varphi$\delta$\delta$\kappa$\kappa$\rho$\rho$\chi$\chi$\epsilon$\epsilon$\lambda$\lambda$\varrho$\varrho$\psi$\psi$\varepsilon$\varepsilon$\mu$\mu$\sigma$\sigma$\omega$\omega$\zeta$\zeta$\nu$\nu$\varsigma$\varsigma$\eta$\eta$\xi$\xi$\tau$\tau$\Gamma$\Gamma$\Lambda$\Lambda$\Sigma$\Sigma$\Psi$\Psi$\Delta$\Delta$\Xi$\Xi$\Upsilon$\Upsilon$\Omega$\Omega$\Theta$\Theta$\Pi$\Pi$\Phi$\Phi$\varGamma$\varGamma$\varLambda$\varLambda$\varSigma$\varSigma$\varPsi$\varPsi$\varDelta$\varDelta$\varXi$\varXi$\varUpsilon$\varUpsilon$\varOmega$\varOmega$\varTheta$\varTheta$\varPi$\varPi$\varPhi$\varPhi表4.6:二元关系符。有的二元关系符都可以加\not前缀得到相反意义的关系符，例如\not=就得到不等号（同\ne）。效果命令效果命令效果命令$&lt;$&lt;$&gt;$&gt;==$\leq$\leq or \le≥\geq or \ge≡\equiv≪\ll≫\gg.=\doteq≺\prec≻\succ∼\sim⪯\preceq⪰\succeq≃\simeq⊂\subset⊃\supset≈\approx⊆\subseteq⊇\supseteq∼=\cong&lt;\sqsubsetℓ=\sqsupsetℓ1\Joinℓ⊑\sqsubseteq⊒\sqsupseteq▷◁\bowtie∈\in∋\ni,\owns∝\propto⊢\vdash⊣\dashv=\models\mid∥\parallel⊥\perp⌣\smile⌢\frown≍\asymp::/∈\notin̸=\neqor\ne本文链接: LaTex数学公式语法]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MathJax语法]]></title>
    <url>%2Fblog%2F171023e7%2F</url>
    <content type="text"><![CDATA[行内公式行内公式是首尾使用一个$包裹起来的公式,显示效果如：$\sum_{i=0}^N \int_{a}^{b}g(t,i)\text{d}t$,显示效果：$\sum_{i=0}^N \int_{a}^{b}g(t,i)\text{d}t$行间公式行间公式是首尾使用两个$包裹起来的公式，行间公式会另起一行单独显示，并且自动区中对齐。显示效果如$$\sum_{i=0}^N \int_{a}^{b}g(t,i)\text{d}t$$:$$\sum_{i=0}^N \int_{a}^{b}g(t,i)\text{d}t$$下面主要使用latex公式希腊字母小写显示效果小写命令大写显示小姑大写命令$\alpha $\alpha$\beta$\beta$\gamma$\gamma$\Gamma$\Gamma$\delta$\delta$\Delta$\Delta$\epsilon$\epsilon$\zeta$\zeta$\eta$\eta$\theta$\theta$\Theta$\Theta$\iota$\iota$\kappa$\kappa$\lambda$\lambda$\Lambda$\Lambda$\mu$\mu$\nu$\nu$\xi$\xi$\Xi$\Xi$\pi$\pi$\Pi$\Pi$\rho$\rho$\sigma$\sigma$\Sigma$\Sigma$\tau$\tau$\upsilon$\upsilon$\Upsilon$\Upsilon$\phi$\phi$\Phi$\Phi$\chi$\chi$\psi$\psi$\Psi$\Psi$\omega$\omega$\Omega$\Omega若需要大写希腊字母，将命令首字母大写即可。\Gamma呈现为:$\Gamma$若需要斜体希腊字母，将命令前加上var前缀即可。\varGamma呈现为:$\varGamma$字母修饰上下标上标：^下标：_例如：$C_n^2$呈现为:$C_n^2$矢量\vec a呈现为:$\vec a$\overrightarrow{xy}呈现为:$\overrightarrow{xy}$分组使用{}将具有相同等级的内容扩入其中，成组处理举例：10^{10}呈现为$10^{10}$,而10^10呈现为$10^10$括号小括号$()$呈现为$()$中括号$[]$呈现为$[]$括号大小：使用\left(或者\right)使符号大小与里面的公式相适应；该语句适用于内部有分数的类型，比如一个分数直接加括号，括号很小不美观。用\left(,\right)括起来就可以把分数包整个包起来，这样比较美观。(\frac{x}{y})呈现为:$(\frac{x}{y})$而\left(\frac{x}{y}\right)呈现为:$\left(\frac{x}{y}\right)$(\frac{\frac{x}{y}}{\frac{a}{b}})呈现为:$(\frac{\frac{x}{y}}{\frac{a}{b}})$\left(\frac{\frac{x}{y}}{\frac{a}{b}}\right)呈现为:$\left(\frac{\frac{x}{y}}{\frac{a}{b}}\right)$分式与根式分式(fractions):\frac{公式1}{公式2}呈现为: $\frac{公式1}{公式2}$根式:\sqrt[x]{y}呈现为:$\sqrt[x]{y}$数学符号\数学符号名举例：\sin x,\ln x,\max(a,b,x)呈现为：$\sin x$,$\ln x$,$\max(a,b,x)$显示命令译名$\infty$\infty无穷大$\cup$\cup并集$\cap$\cap交集$\subset$\subset子集$\subseteq$\subseteq真子集$\supset$\supset这个符号有点奇怪$\in$\in属于$\notin$\notin不属于$\varnothing$\varnothing空集$\forall$\forall全称量词$\exists$\exists存在量词$\lnot$\lnot否定量词$\nabla$\nabla微分算子$\partial$\partial偏微商空格LaTex语法本省会忽略空格的存在求和、极限与积分求和：\sum举例：\sum_{i=1}^n{a_i}呈现为$\sum_{i=1}^n{a_i}$极限：\lim举例:\lim_{x\to 0}呈现为$\lim_{x\to 0}$积分：\int举例：\int_0^\infty{f(x)dx} 呈现为$\int_0^\infty{f(x)dx}$LaTex中文官方文档:http://texdoc.net/texmf-dist/doc/latex/lshort-chinese/lshort-zh-cn.pdf参考：https://www.cnblogs.com/purepleasure/p/9019176.html参考：https://www.jianshu.com/p/a0aa94ef8ab2参考：https://www.cnblogs.com/purepleasure/p/9019176.html本文链接: MathJax语法]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>使用MathJax公式</category>
        <category>LaTex语法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next主题中使用MathJax公式步骤]]></title>
    <url>%2Fblog%2F56f6db1d%2F</url>
    <content type="text"><![CDATA[title: index.htmldate: 2018-07-05 12:01:30tags:mathjax: true`之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。参考：https://blog.csdn.net/wgshun616/article/details/81019687mathjax中文文档：https://mathjax-chinese-doc.readthedocs.io/en/latest/本文链接: Hexo Next主题中使用MathJax公式步骤]]></content>
      <categories>
        <category>Hexo搭建博客</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java使用BOM判断一个文件是不是UTF-8文件]]></title>
    <url>%2Fblog%2F2fe8061d%2F</url>
    <content type="text"><![CDATA[BOMBOM（byte-order mark）文件编码头，即 字节顺序标记.它是插入到以UTF-8、UTF16或UTF-32编码文件开头的特殊标记，用来标记多字节编码文件的编码类型和字节顺序（big-endian或little- endian）。一般用来识别文件的编码类型。应用在windows系统中，记事本会自动在文件头部加上BOM,也就是加三个字节进行标记，例如对于UTF-8文件，会在文件字节序列前面加上EF BB BF这三个字节。例如test_utf8.py这个文件用的是utf-8+BOM编码的.现在打开这个文件，然后以16进制的方式查看该文件。可以看到该文件以EF BB BF这三个字节开头，这三个字节表示该文件是UTF-8编码的。EF BB BF转成字节表示就是-17,-69,-65.不信来看下面的代码：123456public static void main(String[] args)&#123; System.out.print((byte)Integer.parseInt("EF", 16)+","); System.out.print((byte)Integer.parseInt("BB", 16)+","); System.out.print((byte)Integer.parseInt("BF", 16));&#125;运行结果：-17,-69,-65利用BOM判断一个文件是不是utf-8文件：12345678910111213141516171819202122232425262728293031323334353637/*** 判断是不是utf8编码* @param file 文件名* @return 根据文件字节序列的头部的编码信息判断是不是utf8编码*/public static boolean isUTF8File(File file)&#123; InputStream in = null; byte[] b = new byte[3]; try &#123; in = new java.io.FileInputStream(file);// 读取3个字节 in.read(b); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (in != null) &#123; try &#123; in.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; if (b[0] == -17 &amp;&amp; b[1] == -69 &amp;&amp; b[2] == -65) return true; return false;&#125;测试：123456public static void main(String[] args) throws IOException&#123; String path = "D:\\学习\\python\\test_utf8.py"; File file = new File(path); System.out.println(file.getAbsolutePath()+"是utf-8编码的文件:"+isUTF8File(file));&#125;运行结果：1D:\学习\python\test_utf8.py是utf-8编码的文件:true这么做的问题是只能判断带BOM的文件，如果不带BOM那就不好判断了。例如把上面的文件从utf-8+BOM改成utf-8格式，然后保存。再切换到16进制视图查看：可以看到不带BOM的utf-8格式的文件不以EF BB BF这三个字节开头，这样来上述的方法就不好使了。运行结果：1D:\学习\python\test_utf8.py是utf-8编码的文件:false可以看到我明明是utf-8的文件，但是判断的结果却是false。本文链接: Java使用BOM判断一个文件是不是UTF-8文件]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建博客5 Next主题进阶配置]]></title>
    <url>%2Fblog%2Ff01200cd%2F</url>
    <content type="text"><![CDATA[摘要：本文将实现：实现点击出现爱心效果网站底部字数统计保留README.md文件设置网站的图标Favicon实现统计功能隐藏网页底部powered By Hexo / 强力驱动隐藏网页底部主题 – NexT.Gemini v6.4.0修改字体大小实现点击出现爱心效果原文：https://blog.csdn.net/qq_33699981/article/details/72716951#t9实现效果图：具体实现方法：在浏览器地址栏输入如下http://7u2ss1.com1.z0.glb.clouddn.com/love.js然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\themes\next\layout\_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;然后刷新浏览器就可看到效果了。网站底部字数统计实现效果图：安装插件切换到根目录下，然后运行如下代码,安装插件。1npm install hexo-wordcount --save修改文件然后在/themes/next/layout/_partials/footer.swig文件尾部加上：1234&lt;div class=&quot;theme-info&quot;&gt; &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt; &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt;保留README.md文件每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml，将 skip_render 参数的值设置为1skip_render: README.md保存退出即可。再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 这个文件了。设置网站的图标Favicon实现效果图具体方法实现在EasyIcon中找一张（32*32）的ico图标,或者去别的网站下载或者制作，我下载的是这个和很可爱的图标：https://www.easyicon.net/570008-matte_white_square_icon_animals_animal_panda_sc_icon.html下载后，用Photoshop调了大小(像素)：这里只是为了，记录着良心的图标网站，具体设置方法不细在主题配置文件中配置就好了，图标和其他图片一样放在source/images/目录下。123456favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json实现统计功能安装插件https://github.com/willin/hexo-wordcount这个插件已经好久没更新了，而这个插件：https://github.com/theme-next/hexo-symbols-count-time最近更新的。而且hexo-symbols-count-time的介绍是Symbols count and time to read of articles.Better than hexo-reading-time and faster than hexo-worcount. No external dependencies.所以当然选最快的啦。1npm install hexo-symbols-count-time --save在主题配置文件中找到symbols_count_time然后配置如下：1234567# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275显示效果如下：隐藏网页底部powered By Hexo / 强力驱动在主题配置文件中，找到powered键，设置enable为false就行。123456copyright:# -------------------------------------------------------------powered: # Hexo link (Powered by Hexo). enable: false #原本是默认打开的 # Version info o隐藏网页底部主题 – NexT.Gemini v6.4.0在主题配置文件中，找到theme:，设置enable为false就行。12345theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false #原本是默认打开的 设置为则false隐藏网页底部powered By Hexo / 强力驱动 # Version info of NexT after scheme info (vX.X.X). version: true显示效果：修改字体大小打开\themes\next\source\css\ _variables\base.styl文件，将$font-size-base改成16px，如下所示：1$font-size-base =16px16px我看太大了手机上阅读不方便，留着这个方法，也许哪天我想把字体改小。本文链接: Hexo搭建博客5 Next主题进阶配置]]></content>
      <categories>
        <category>Hexo搭建博客</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建博客3 Next主题基本配置]]></title>
    <url>%2Fblog%2F60deb6e1%2F</url>
    <content type="text"><![CDATA[文本完成：添加分类页面菜单设置代码高亮主题侧边栏社交链接开启打赏功能支持部署到Github头像添加分类页面修改菜单在菜单中添加链接。编辑 主题配置文件 ， 取消categories前面的注释#，添加 categories 到 menu 中，如下:123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat然后，开启本地服务器，显示效果如下：设置代码高亮主题NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties：在主题配置文件中，更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：1highlight_theme: night这样，代码框部分就显示如下了。这个根据个人喜好配置。侧边栏社交链接侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。链接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。例如：12social: GitHub: https://github.com/lanlan2017 || github双竖杠后面的是 Font Awesome图标名。设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键:Font Awesome 图标名称，匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。显示效果下：可以看到侧栏已经重现了Github的连接，点击该连接后，可以跳转到你的GitHub首页。我上面还没什么东西，还是先不要给出的好开启打赏功能 由 habren 贡献越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 主题配置文件 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。找到123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /path/to/wechat-reward-imagealipay: /path/to/alipay-reward-image打赏按钮将会显示在每篇文章的末尾，如下所示：如果遇到图片大小不一样的话可以P图，###解决赞赏码大小不一致的问题–P图啊 ###但是这样大小不一样，强迫症的人会不舒服，怎么办呢？P图呗，把两张图片P成一样大小的就行了。支付宝的收钱码，不能直接用Photoshop打开，所以，我先打开支付宝收钱码图片，截图。然后打开Photoshop，按下ctrl+n新建一个图层。Photoshop会自动新建一个和我们复制大小一样的图层，粘贴这个支付宝的截图就行了，然后，再按下ctrl+n，这样会再建立一个大小一样的图层，把微信赞赏码的图片粘贴进去，微信赞赏码比较宽，肯定无法全部放下，拖动调整显示效果，露出赞赏码就行了。然后再在主题配置文件中配置即可，现在效果如下：嗯，这样就看起来就舒服了。支持部署到Github安装插件：1npm install --save hexo-deployer-git在GitHub建立一个，你的用户名.github.io的库。然后复制ssh链接。更改站点配置文件中,repo：配置你的ssh链接，使用https的话可能要输入密码。1234deploy: type: git repo: git@github.com:你的用户名/你的用户名.github.io.git # 3中创建的仓库的地址 branch: master然后开始部署：1hexo clean &amp;&amp;hexo g &amp;&amp; hexo d即可，`git@github.com:你的用户名/你的用户名.github.io.git`，这个是我的地址，改为你的ssh链接即可。头像在主题配置文件中配置。把图片放置在source/images目录下，然后设置 avatar 项为你头像的链接，例如设置avatar: /images/avatar.png。或者使用 url: /images/avatar.jpg来引用链接如下所示：1234567891011avatar: # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/avatar.jpg # If true, the avatar would be dispalyed in circle. rounded: true # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 1 # If true, the avatar would be rotated with the cursor. rotated: false还有就是如果可能引用不到的话可以改一下作者图片的名称看看。剩下的我不想写了，我上次没弄好是因为，next安装有问题。这次安装没问题，按官方文档配置就行了。剩下的还有，添加评论，添加搜索引擎，调整显示宽度本文链接: Hexo搭建博客3 Next主题基本配置]]></content>
      <categories>
        <category>Hexo搭建博客</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建博客4 Next主题优化配置]]></title>
    <url>%2Fblog%2Fd7900030%2F</url>
    <content type="text"><![CDATA[文本完成：不蒜子计数修改文章内链接文本样式代码块自定义样式把文章底部标签中的#号改为图标设置网站图标访客&amp;访问量NexT主题中已经集成了不蒜子统计，直接编辑主题配置文件：把enable: 设置为true即可。12345678910111213141516# 不蒜子计数busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;本站访客数&lt;/i&gt; site_uv_footer: 人次 # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;本站总访问量&lt;/i&gt; site_pv_footer: 次 # custom pv span for one page only page_pv: true page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;本文总阅读量&lt;/i&gt; page_pv_footer: 次site_uv_header，site_pv_header，page_pv_header，这几个分别为网站访客数，网站访问量，文章阅读量。你可以在这里写下你的表述。&lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;表示图标，你可把文字写在标签里，也可以直接使用文字不显示标签也行。开启后的效果：可以看到开启后显示访问的用户数，和访问的数量。不过这里，奇怪的是访问数这么多，显然是哪里有问题的。我才刚开始建站，显然不可能有这么多的访问量的。修改文章内链接文本样式原文：http://blog.ynxiu.com/2016/hexo-next-theme-optimize.htmlnext默认的超链接是不带颜色的如下图所示，这里通过修改源码(样式)样式实现。将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。修改文件themes\next\source\css\_common\components\post\post.styl ，添加如下css 样式，：1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125;选择.post-body 是为了不影响标题，选择 p 是为了不影响首页 “阅读全文” 的显示样式。显示效果：每篇文章末尾统一添加 “本文结束” 标记新建 passage-end-tag.swig 文件在路径 \themes\next\layout\_macro 中添加 passage-end-tag.swig 文件，其内容为：12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢阅读------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt;好像并没有效果啊，好吧，是我心急了，还没完，继续操作：修改 post.swig 文件在 \themes\next\layout_macro\post.swig 中， post-body 之后， post-footer 之前添加如下代码（post-footer 之前两个 DIV）：12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt;我试了，这样并没有效果，还是先算了，别把代码搞崩了，修改代码需谨慎。在主题配置文件中添加字段在主题配置文件 _config.yml中添加以下字段开启此功能：123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true完成以上设置之后，在每篇文章之后都会添加 “本文结束” 标记。试了没有成功，还是把加进去的删掉比较好代码块自定义样式Next在默认代码块的颜色是没有的如下如所示，为了让代码块突出显示，可以加入自定义的样式：打开自定义 CSS：\themes\next\source\css\_custom\custom.styl 加入1234567891011121314151617//自定义样式开始// 代码块自定义样式``内的code &#123; color: #fc6423; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125;//自定义样式结束然后显示效果为：嗯，这样比较美观一点。下面的配置来自文章：https://blog.csdn.net/qq_32454537/article/details/79482896#t11添加图标到这个网站中找有一个你喜欢的图标：然后复制下图标的名字，例如：arrow-right(注意不要复制全面 icon-arrow-right，复制后面就行了然后粘贴到图标的配置项就行了)例如，给社交链接添加图标：123social: GitHub: https://github.com/yourname || github CSDN: https://blog.csdn.net/qq_21808961 || arrow-right显示效果：把文章底部标签中的井号改为图标去掉文章后面的标签前面的#号。修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将#换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;这个图标。设置网站图标首先是生成图标到这个网站http://emblemmatic.org/markmaker/#/designs(或是其他图标生成网站生成)，输入你想要的名字，例如我输入我的首字母L.然后下载该图标(.png格式)。转换像素大小使用Photoshop打开,把整个图片(或者裁剪下的一部分部分)。转储为web所用的格式,设置像素大小为16*16的和32*32的如下图所示。保存，然后放到站点目录下的source/images目录中即可。然后在主题配置文件中配置如下：1234567favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xmlsafari_pinned_tab这一项需要使用.svg格式，找一个在线png转svg的网站转换一下就行了。命名为logo.svg本文链接: Hexo搭建博客4 Next主题优化配置]]></content>
      <categories>
        <category>Hexo搭建博客</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建博客2 Hexo安装及部署]]></title>
    <url>%2Fblog%2F48803%2F</url>
    <content type="text"><![CDATA[本文介绍安装hexo注意安装成功hexo的输出：Hexo命令创建站点目录清楚缓存生成静态页面开启本地服务器连写形式hexo组合命令将博客部署到Github Pages上安装插件修改站点配置文件部署hexo参考文章安装hexo在站点目录下，打开git-bash输入下面的指令安装hexo:1npm install hexo-cli g注意安装过程可能比较慢，这跟网络环境有关。如果天没有见到运行效果，请耐心等待。我在用git bash安装的时候就半天没反应，这个时候，不小心按下ctrl+c结束了，这样安装没有完整。先删除掉再说：npm uninstall hexo。然后，我默默的打开手机用开个热点。再安装：npm install hexo-cli g安装成功hexo的输出：1234567891011121314$ npm install hexo-cli gnpm WARN saveError ENOENT: no such file or directory, open &apos;D:\Blog\package.json&apos;npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN enoent ENOENT: no such file or directory, open &apos;D:\Blog\package.json&apos;npm WARN Blog No descriptionnpm WARN Blog No repository field.npm WARN Blog No README datanpm WARN Blog No license field.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ hexo-cli@1.1.0+ g@2.0.1added 104 packages in 15.271s安装成功之后就可以使用Hexo来建立站点了。Hexo命令创建站点目录安装完成后，根据自己喜好建立目录。如在git-bash中进入/d/Blog/目录下，初始化一个名为blog站点目录，我们以后的所有操作都在这个站点目录下进行。1hexo init blog初始化输出：12345678910$ hexo init blogINFO Cloning hexo-starter to D:\Blog\blogCloning into &apos;D:\Blog\blog&apos;...remote: Counting objects: 68, done.remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 67......&#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)added 396 packages in 33.779sINFO Start blogging with Hexo!建立好站点之后，Hexo已经默认给我们创建好一个Hello World页面了。清楚缓存使用hexo clean可以清除缓存，清除缓存可以让新配置的信息立即生效。生成静态页面使用hexo generate或简写hexo g命令生成静态页面(html),一般使用简写形式就行了。1$ hexo generate开启本地服务器输入hexo server或者输入其简写形式hexo s即可开启本地服务器。1$ hexo server然后打开浏览器，输出localhost:4000可以看到效果。连写形式使用&amp;&amp;作为分隔符可以把多条命令写成一行。例如hexo clean,hexo g,hexo s这三条命令可以写成hexo clean&amp;&amp;hexo g&amp;&amp;hexo s这样的一行的形式。这样可以较少输入命令的次数，git-bash支持按上下键，显示上次执行过的命令。这样我们在调试的时候就可以按一下上键，然后回车执行这三条命令了。hexo组合命令也可以写成下面的形式：清除、生成、启动1hexo clean &amp;&amp; hexo g -s清除、生成、部署1hexo clean &amp;&amp; hexo g -d将博客部署到Github Pages上使用hexo s可以在本机上启动服务器(部署在本机)，这种方式适用于调试阶段。部署到Github之后我们可以通过网络来访问。安装插件hexo要想到githbu pages的要安装hexo-deployer-git这个插件,站点目录下，打开git-bash输入下面的命令进行安装。1npm install hexo-deployer-git --save修改站点配置文件打开站点根目录(blog)下的_config.yml文件，这个文件以后称为站点配置文件找到下面的deploy:字段 并更改为：1234deploy: type: git repo: https://github.com/用户名/用户名.github.io.git #你的仓库地址 branch: master其中repo字段使github仓库的地址，branch使你想要推送的分支。注意：冒号后面有一个半角空格。以上配置完成后,就可以部署到gitbub上了。部署hexo输入下面的命令将hexo博客部署到github中：123456# 清空静态页面hexo clean# 生成静态页面hexo generate# 部署 hexo deploy相当于执行1hexo c &amp;&amp; hexo g -d参考文章https://blog.csdn.net/xuezhisdc/article/details/53130328https://www.cnblogs.com/nuannuan7362/p/6111171.htmlhttps://my.oschina.net/ryaneLee/blog/638440https://www.cnblogs.com/visugar/p/6821777.htmlhttps://my.oschina.net/ryaneLee/blog/638440https://www.jianshu.com/p/343934573342本文链接: Hexo搭建博客2 Hexo安装及部署]]></content>
      <categories>
        <category>Hexo搭建博客</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo写博客 使用多级分类]]></title>
    <url>%2Fblog%2Fd8f66139%2F</url>
    <content type="text"><![CDATA[Hexo原生支持父子分类，只需要在 Front-matter中的分类标记后面写下多个分类就行了。写在后面的分类就在前面分类的子分类，例如：123categories:- Diary- Life会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。hexo中分类和标签的区别如下：首先来看官方文档：https://hexo.io/zh-cn/docs/front-matter.html分类和标签Hexo只对文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说分类中 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。123456&gt; categories:&gt; - Diary&gt; tags:&gt; - PS3&gt; - Games&gt;分类方法的分歧如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：1234&gt; categories:&gt; - Diary&gt; - Life&gt;会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。本文链接: Hexo写博客 使用多级分类]]></content>
      <categories>
        <category>Hexo搭建博客</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建博客问题2 hexo d命令报错_ERROR Deployer not found_git]]></title>
    <url>%2Fblog%2F8abbc073%2F</url>
    <content type="text"><![CDATA[Hexo搭建博客问题2 hexo d命令报错 ERROR Deployer not found_git.md这是因为插件没有安装好，站点目录下输入npm install --save hexo-deployer-git安装部署插件即可。问题描述我已经在站点配置文件中写入了：1234deploy: type: git repo: git@github.com:lanlan2017/lanlan2017.github.io.git # Github pages地址 branch: master但是执行，hexo d报错：1ERROR Deployer not found: git解决方案这是因为我还没安装插件，输入下面的插件安装就好了：1npm install --save hexo-deployer-git然后在使用Hexo -d命令就可以推送了。本文链接: Hexo搭建博客问题2 hexo d命令报错_ERROR Deployer not found_git]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客问题 RSS地址出错为(yoursite.com)]]></title>
    <url>%2Fblog%2F2c22a8d1%2F</url>
    <content type="text"><![CDATA[原因这是因为你的站点url项没有配置好，因为默认的url配置为https://yoursite.com。解决方案，修改站点配置文件中的url字段为你自己的域名打开站点配置文件，地位到url配置项，如下所示，可以看到我的网站地址错误的设置为https://yoursite.com1234567# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;# 网站的地址url: https://yoursite.com/root: /permalink: :year/:month/:day/:title/permalink_defaults:把站点配置文件url字段，改为我的域名https://www.lansheng.net.cn/这样就可以了，如下所示。1234567# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;# 网站的地址url: https://www.lansheng.net.cn/root: /permalink: :year/:month/:day/:title/permalink_defaults:然后后面就可以使用hexo clean &amp;&amp; hexo g -d进行发布,然后就可正确使用RSS功能了。本文链接: Hexo博客问题 RSS地址出错为(yoursite.com)]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客显示问题：中文网站名乱码]]></title>
    <url>%2Fblog%2F87aa90c2%2F</url>
    <content type="text"><![CDATA[这是因为站点配置文件没有使用utf-8编码造成的，所以在站点配置文件_config.yml中写中文网站名，然后把站点配置文件保存为utf-8格式。例如：12345678# Sitetitle: 蓝生的博客subtitle:description: 记录美好生活keywords:author: 蓝生language: zh_CNtimezone:然后重新启动即可：1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s本文链接: Hexo博客显示问题：中文网站名乱码]]></content>
      <categories>
        <category>Hexo搭建博客</category>
        <category>遇到问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[详解Java如何获取文件编码格式]]></title>
    <url>%2Fblog%2F56f38074%2F</url>
    <content type="text"><![CDATA[本文转自这篇文章主要介绍了详解Java如何获取文件编码格式，具有一定的参考价值，感兴趣的小伙伴们可以参考一下。Windows中使用BOM判断该文件1：简单判断是UTF-8或不是UTF-8，因为在国内一般除了UTF-8之外就是GBK，所以就设置默认为GBK。按照给定的字符集存储文件时，在文件的最开头的三个字节中就有可能存储着编码信息，所以，基本的原理就是只要读出文件前三个字节，判定这些字节的值，就可以得知其编码的格式。其实，，如果这些文本文件在项目内产生，即开发人员可以控制文本的编码格式，只要判定两种如果项目运行的平台就是中文操作系统常见的编码就可以了：GBK和UTF-8。由于中文Windows默认的编码是GBK，所以一般只要判定UTF-8编码格式。对于UTF-8编码格式的文本文件，其前3个字节的值就是-17、-69、-65，所以，判定是否是UTF-8编码格式的代码片段如下：123456789File file = new File(path); InputStream in= new java.io.FileInputStream(file); byte[] b = new byte[3]; in.read(b); in.close(); if (b[0] == -17 &amp;&amp; b[1] == -69 &amp;&amp; b[2] == -65) System.out.println(file.getName() + "：编码为UTF-8"); else System.out.println(file.getName() + "：可能是GBK，也可能是其他编码");通过这个方法，只要知道文件头存储的编码信息，可以类似判断文件是否是某一编码格式的文件，不再限于是否是utf-8，就不在赘述。注意这个方法的局限：文件头必须有文件存储编码的信息，对于不规范的文件或被篡改过的就不好办了把上面的方法封装成函数12345678910111213141516171819202122232425262728293031323334353637/*** 判断是不是utf8编码* @param file 文件名* @return 根据文件字节序列的头部的编码信息判断是不是utf8编码*/public static boolean isUTF8File(File file)&#123; InputStream in = null; byte[] b = new byte[3]; try &#123; in = new java.io.FileInputStream(file);// 读取3个字节 in.read(b); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (in != null) &#123; try &#123; in.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; if (b[0] == -17 &amp;&amp; b[1] == -69 &amp;&amp; b[2] == -65) return true; return false;&#125;测试：123456public static void main(String[] args) throws IOException&#123; String path = "D:\\学习\\python\\test_utf8.py"; File file = new File(path); System.out.println(file.getAbsolutePath()+"是utf-8编码的文件:"+isUTF8File(file));&#125;这里的test_utf8.py这个文件用的是utf-8编码的，现在打开这个文件，然后以16进制的方式查看该文件。可以看到该文件以EF BB BF这三个字节开头，这三个字节表示该文件是UTF-8编码的。所以我们能通过这样来判断该文件是不是UTF-8编码的。EF BB BF转成字节表示就是-17,-69,-65.不信来看下面的代码：123456public static void main(String[] args)&#123; System.out.print((byte)Integer.parseInt("EF", 16)+","); System.out.print((byte)Integer.parseInt("BB", 16)+","); System.out.print((byte)Integer.parseInt("BF", 16));&#125;运行结果：-17,-69,-65使用开源项目2：若想实现更复杂的文件编码检测，可以使用一个开源项目cpdetector，它所在的网址是：http://cpdetector.sourceforge.net/。它的类库很小，只有500K左右，cpDetector是基于统计学原理的，不保证完全正确，利用该类库判定文本文件的代码如下：读外部文件(先利用cpdetector检测文件的编码格式，然后用检测到的编码方式去读文件):1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * 利用第三方开源包cpdetector获取文件编码格式 * * @param path * 要判断文件编码格式的源文件的路径 * @author huanglei * @version 2012-7-12 14:05 */ public static String getFileEncode(String path) &#123; /* * detector是探测器，它把探测任务交给具体的探测实现类的实例完成。 * cpDetector内置了一些常用的探测实现类，这些探测实现类的实例可以通过add方法 加进来，如ParsingDetector、 * JChardetFacade、ASCIIDetector、UnicodeDetector。 * detector按照“谁最先返回非空的探测结果，就以该结果为准”的原则返回探测到的 * 字符集编码。使用需要用到三个第三方JAR包：antlr.jar、chardet.jar和cpdetector.jar * cpDetector是基于统计学原理的，不保证完全正确。 */ CodepageDetectorProxy detector = CodepageDetectorProxy.getInstance(); /* * ParsingDetector可用于检查HTML、XML等文件或字符流的编码,构造方法中的参数用于 * 指示是否显示探测过程的详细信息，为false不显示。 */ detector.add(new ParsingDetector(false)); /* * JChardetFacade封装了由Mozilla组织提供的JChardet，它可以完成大多数文件的编码 * 测定。所以，一般有了这个探测器就可满足大多数项目的要求，如果你还不放心，可以 * 再多加几个探测器，比如下面的ASCIIDetector、UnicodeDetector等。 */ detector.add(JChardetFacade.getInstance());// 用到antlr.jar、chardet.jar // ASCIIDetector用于ASCII编码测定 detector.add(ASCIIDetector.getInstance()); // UnicodeDetector用于Unicode家族编码的测定 detector.add(UnicodeDetector.getInstance()); java.nio.charset.Charset charset = null; File f = new File(path); try &#123; charset = detector.detectCodepage(f.toURI().toURL()); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; if (charset != null) return charset.name(); else return null; &#125; String charsetName = getFileEncode(configFilePath); System.out.println(charsetName); inputStream = new FileInputStream(configFile); BufferedReader in = new BufferedReader(new InputStreamReader(inputStream, charsetName));读jar包内部资源文件(先利用cpdetector检测jar内部的资源文件的编码格式，然后以检测到的编码方式去读文件)：/**利用第三方开源包cpdetector获取URL对应的文件编码@param path要判断文件编码格式的源文件的URL@author huanglei@version 2012-7-12 14:05/public static String getFileEncode(URL url) {/detector是探测器，它把探测任务交给具体的探测实现类的实例完成。cpDetector内置了一些常用的探测实现类，这些探测实现类的实例可以通过add方法 加进来，如ParsingDetector、JChardetFacade、ASCIIDetector、UnicodeDetector。detector按照“谁最先返回非空的探测结果，就以该结果为准”的原则返回探测到的字符集编码。使用需要用到三个第三方JAR包：antlr.jar、chardet.jar和cpdetector.jarcpDetector是基于统计学原理的，不保证完全正确。/CodepageDetectorProxy detector = CodepageDetectorProxy.getInstance();/ParsingDetector可用于检查HTML、XML等文件或字符流的编码,构造方法中的参数用于指示是否显示探测过程的详细信息，为false不显示。/detector.add(new ParsingDetector(false));/JChardetFacade封装了由Mozilla组织提供的JChardet，它可以完成大多数文件的编码测定。所以，一般有了这个探测器就可满足大多数项目的要求，如果你还不放心，可以再多加几个探测器，比如下面的ASCIIDetector、UnicodeDetector等。*/detector.add(JChardetFacade.getInstance());// 用到antlr.jar、chardet.jar// ASCIIDetector用于ASCII编码测定detector.add(ASCIIDetector.getInstance());// UnicodeDetector用于Unicode家族编码的测定detector.add(UnicodeDetector.getInstance());java.nio.charset.Charset charset = null;try {charset = detector.detectCodepage(url);} catch (Exception ex) {ex.printStackTrace();}if (charset != null)return charset.name();elsereturn null;}URL url = CreateStationTreeModel.class.getResource(“/resource/“ + “配置文件”);URLConnection urlConnection = url.openConnection();inputStream=urlConnection.getInputStream();String charsetName = getFileEncode(url);System.out.println(charsetName);BufferedReader in = new BufferedReader(new InputStreamReader(inputStream, charsetName));3：探测任意输入的文本流的编码，方法是调用其重载形式：charset=detector.detectCodepage(待测的文本输入流,测量该流所需的读入字节数);上面的字节数由程序员指定，字节数越多，判定越准确，当然时间也花得越长。要注意，字节数的指定不能超过文本流的最大长度。4：判定文件编码的具体应用举例：属性文件(.properties)是Java程序中的常用文本存储方式，象STRUTS框架就是利用属性文件存储程序中的字符串资源。它的内容如下所示：#注释语句属性名=属性值读入属性文件的一般方法是：FileInputStream ios=new FileInputStream(“属性文件名”);Properties prop=new Properties();prop.load(ios);String value=prop.getProperty(“属性名”);ios.close();利用java.io.Properties的load方法读入属性文件虽然方便，但如果属性文件中有中文，在读入之后就会发现出现乱码现象。发生这个原因是load方法使用字节流读入文本，在读入后需要将字节流编码成为字符串，而它使用的编码是“iso-8859-1”,这个字符集是ASCII码字符集，不支持中文编码，方法一：使用显式的转码：String value=prop.getProperty(“属性名”);String encValue=new String(value.getBytes(“iso-8859-1″),”属性文件的实际编码”);方法二：象这种属性文件是项目内部的，我们可以控制属性文件的编码格式，比如约定采用Windows内定的GBK，就直接利用”gbk”来转码， 如果约定采用UTF-8，就使用”UTF-8″直接转码。方法三：如果想灵活一些，做到自动探测编码，就可利用上面介绍的方法测定属性文件的编码，从而方便开发人员的工作补充：可以用下面代码获得Java支持编码集合：Charset.availableCharsets().keySet();可以用下面的代码获得系统默认编码：Charset.defaultCharset();以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持脚本之家。本文链接: 详解Java如何获取文件编码格式]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[utf-8与utf-8+bom的区别]]></title>
    <url>%2Fblog%2F9d9c8d3%2F</url>
    <content type="text"><![CDATA[utf-8与utf-8+bom的区别原文链接在utf-8编码文件中，BOM写在文件头部，占用三个字节，用来标识该文件属于utf-8编码，现在已经有很多软件识别BOM头，但还是有些不能识别BOM头，比如PHP就不能识别BOM头，这也就是用记事本编辑utf-8编码的PHP文件后，就会报错的原因。在windows环境下，用记事本打开任何一个文本文件，另存为utf-8格式后，这样文件就自动被加上了BOM头信息。可以很明显的看出，含BOM头的文件多出三个字节 efbbbf。notepad++会自动添加为带Bom的utf8比较坑爹。带 BOM 的 UTF-8 就是赤裸裸的耍流氓！！！！！！！！！windows总是自做聪明的做一些别人无法理解的事情！！！UTF-8是不需要BOM头的~~~！！原文链接utf-8+bom比utf-8多了三个字节前缀：0xEF0xBB0xBF，有这三个字节前缀的文本或字符串，程序可以自动判断它为utf-8格式，并按照utf-8格式来解析文本或字符串，否则，一个文本或者字符串在未知编码的情况下，需要按照字符编码规范去一个个验证UTF-8的BOM含义原文链接BOM的介绍在github上写md文件的时候，发现生成自己blog时，报出一个错误是让使用UTF-8编码，然后在Notepad++上把文件转成UTF-8时，发现菜单中有”UTF-8无BOM编码格式”。上网查了一下BOM的定义：byte order mark这个是为UTF-16和UTF-32准备的，用于标记字节序(byte order)。「UTF-8」和「带 BOM 的 UTF-8」的区别就是有没有 BOM。即文件开头有没有 U+FEFF。BOM的爱恨情仇知乎上有个比较好的文章，讲了BOM问题，下面直接引用了原文：作者：陈甫鸼链接：https://www.zhihu.com/question/20167122/answer/14199022来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。首先，BOM是啥。这个就不解释了，Wikipedia上很详细。http://en.wikipedia.org/wiki/Byte_order_mark。在网页上使用BOM是个错误。BOM设计出来不是用来支持HTML和XML的,要识别文本编码。HTML有charset属性，XML有encoding属性，没必要拉BOM撑场面。虽然理论上BOM可以用来识别UTF-16编码的HTML页面，但实际工程上很少有人这么干。毕竟UTF-16这种编码连ASCII都双字节，实在不适用于做网页。其实说BOM是个坏习惯也不尽然。BOM也是Unicode标准的一部分，有它特定的适用范围。通常BOM是用来标示Unicode纯文本字节流的，用来提供一种方便的方法让文本处理程序识别读入的.txt文件是哪个Unicode编码（UTF-8，UTF-16BE，UTF-16LE）。Windows相对对BOM处理比较好，是因为Windows把Unicode识别代码集成进了API里，主要是CreateFile()。打开文本文件时它会自动识别并剔除BOM。Windows用这个有历史原因，因为它最初脱胎于多代码页的环境。而引入Unicode时Windows的设计者又希望能在用户不注意的情况下同时兼容Unicode和非Unicode（Multiple byte）文本文件，就只能借助这种小trick了。相比之下，Linux这样的系统在多locale的环境中浸染的时间比较短，再加上社区本身也有足够的动力轻装前进（吐槽：微软对兼容性的要求确实是到了非常偏执的地步，任何一点破坏兼容性的做法都不允许，以至于很多时候是自己绑住自己的双手），所以干脆一步到位进入UTF-8。当然中间其实有一段过渡期，比如从最初全UTF-8的GTK+2.0发布到基本上所有GTK开发者都弃用多locale的GTK+1.2，我印象中至少经历了三到四年。BOM不受欢迎主要是在UNIX环境下，因为很多UNIX程序不鸟BOM。主要问题出在UNIX那个所有脚本语言通行的首行#!标示，这东西依赖于shell解析，而很多shell出于兼容的考虑不检测BOM，所以加进BOM时shell会把它解释为某个普通字符输入导致破坏#!标示，这就麻烦了。其实很多现代脚本语言，比如Python，其解释器本身都是能处理BOM的，但是shell卡在这里，没办法，只能躺着也中枪。说起来这也不能怪shell，因为BOM本身违反了一个UNIX设计的常见原则，就是文档中存在的数据必须可见。BOM不能作为可见字符被文本编辑器编辑，就这一条很多UNIX开发者就不满意。顺便说一句，即使脚本语言能处理BOM，随处使用BOM也不是推荐的办法。各个脚本语言对Unicode的处理都有自己的一套，Python的 # – coding: utf-8 –，Perl的use utf8，都比BOM简单而且可靠。另一个好消息是，即使是必须在Windows和UNIX之间切换的朋友也不会悲催。幸亏在UNIX环境下我们还有VIM这种神器，即使遇到BOM挡道，我们也可以通过 set nobomb; set fileencoding=utf8; w 三条命令解决问题。最后回头想想，似乎也真就只有Windows坚持用BOM了。总结以下是一些经典语录：HTML有charset属性，XML有encoding属性，没必要拉BOM撑场面UTF-16这种编码连ASCII都双字节，实在不适用于做网页通常BOM是用来标示Unicode纯文本字节流的，让文本处理程序识别txt文件是哪个Unicode编码（UTF-8，UTF-16BE，UTF-16LE）Windows相对对BOM处理比较好, 打开文本文件时它会自动识别并剔除BOM.BOM不受欢迎主要是在UNIX环境下，因为很多UNIX程序不鸟BOM。因为BOM本身违反了一个UNIX设计的常见原则，就是文档中存在的数据必须可见。UNIX环境下我们还有VIM这种神器，即使遇到BOM挡道，我们也可以通过 set nobomb; set fileencoding=utf8; w 三条命令解决问题。似乎也真就只有Windows坚持用BOM了,微软在 UTF-8 中使用 BOM 是因为这样可以把 UTF-8 和 ASCII 等编码明确区分开UTF-8不需要BOM, 所以不含BOM的UTF-8才是标准形式.UTF-8 的网页代码不应使用 BOM，否则常常会出错写C++代码建议程序要在windows 和 mac 还有linux 上运行的话，源代码最好保存成utf-8 带bom的格式，这样比较通用一些。而用utf-16 无论大端还是小端，g++ 都不认的。或者用utf-8 不带bom格式，然后代码不要出现非ascii 127以后的字符。带用bom的utf-8也是符合国际标准的为什么windows的记事本要强行给utf8加bom的原因——为了兼容旧系统的编码问题，unix阵营放弃带bom的utf8——为了让它们的上古程序能继续运行下去，这个各自有自己利益诉求的差异决定其实并不对错本文链接: utf-8与utf-8+bom的区别]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Node_js安装教程]]></title>
    <url>%2Fblog%2F6d7c88e7%2F</url>
    <content type="text"><![CDATA[参见：https://www.cnblogs.com/zhouyu2017/p/6485265.html本文链接: Node_js安装教程]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 第3章 线程]]></title>
    <url>%2Fblog%2F4bfc148a%2F</url>
    <content type="text"><![CDATA[事实上，在Internet只有几百万用户而不是数十亿用户的时候，我们远比现在更容易碰上超负荷的拥塞网站。问题在于，大多数FTP服务器会费每个连接创建(fork)一个新的进程(也就是说100个并发用户意味着要处理100个额外的进程)。由于进程是相当重量级的，太多进程会很快让服务器吃不消。问题不在于机器不够强大，或者网络速度不够开，而是因为你FTP服务器实现得太差。如果不是每个连接都需要一个新的进程，完全可以为更多的并发用户提供服务。早起Web服务器也有这个问题，不过这个问题由于HTTP连接的短暂特性而有所掩盖。由于Web页面嵌入的图片一般很小(至少与通常通过FTP获取的软件包相比要小的多)，也由于Web浏览器在获取各个文件后会”挂起”连接，而不是一次保持数分钟或几小时的连接。所以Web用户不会像FTP用户那样对服务器施加太多负担。不过，随着使用量的增长，Web服务器的性能仍会下降。根本问题在于，很容易编写代码将每个入站和新任务当多独立的进程来处理(至少UNIX下是如此)，这种解决方案将无法扩展。等到服务器要处理成千上万个同时的连接时，性能就会变得像爬行一样慢了。这问题至少有两种解决方案。第一种是重用进程，而不是创建新的进程。服务器启动时，就创建固定数量的进程(比如300个)来处理请求。入站请求将放入一个队列。每个进程从队列中删除一个请求，为这个请求提供服务，然后返回到队列来得到下一个请求。金软仍有300个单独的进程在运行，但是由于避免了建立和销毁进程的所有开销，现在这300个进程就可用完场1000个进程的任务。这个数目是粗略估计的，你的实际情况可能有所出入，尤其是当你的服务器还没有达到一定的处理规模，即还没有遭遇可扩展性问题的时候，到底能有多少获益并不确定。不过，不论不生成新进程有什么好处，起码重用就的进程总会有更好的表现。这个问题的第二种解决方案是，使用轻量级的线程来处理连接，而不是重量级的进程。虽然每个单独的进程都有自己的一块内存，但线程在资源使用上更宽松，因为它们会共享内存。使用线程来代替进程，开业让你的服务性能提升三倍。再结合使用可重用线程池(而不是可重用进程池)，在同样的硬件和网络连接条件下，服务器的运行可以快9倍多！在服务器硬件上运行多个不同的线程，其影响是相对最小的，因为致谢线程都在一个进程中运行。如果并发线程达到4000到20000时，大多数Java虚拟机可能会由于内存耗尽而无法承受。不过，通过使用线程池而不是为每个连接生成新线程，服务器每分钟就可以用不到100个线程来处理数千个短连接。线程的替代方法如果一个应用同时需要数千个持续很长时间的连接(这种应用相当少见)，就需要考虑异步I/O而不是线程。选择器，支持一个线程查询一组socket,找出那些socket已经准备就绪可以读写数据，然后顺序地处理这些准备好的socket。在这种情况下，必须基于通道和缓冲区来设计I/O而不是流。由于现代虚拟机和操作系统中线程可以用提供很高的性能，而且构建一个基于线程的服务器相对简单，所以开始时总会考虑采用基于线程的设置，知道遇到难以逾越的困难。如果确实遇到了麻烦，应该考虑将应用分解到多个冗余的服务器上，而不要完全一张一个服务器上的3倍性能提升。当然，分解又会带来相应的设计问题，特别是在一致性方面，而这个单系统中没有的问题。不过，与利用单个系统相比，不论实现的效率如何，这样确实可以提供更大的可扩展型和冗余性。遗憾的是，这种性能的提升并不是没有代价的,它会增加程序的复杂性。特别是多线程服务器(和其他多线程程序)要求程序员解决一些问题，对于单线程程序而言远门不存在这些问题，尤其是安全性和活动性的问题，因为不同的线程共享相同的内存，一个线程完全有可能会破坏另一个线程使用的变量和数据结构。这就类似与如果一个程序在没有内存保护机制的操作系统(如Windows 95)中运行，则有可能会破坏整个系统。因此，不同线程必须分厂注意当时使用的资源。一般来讲，每个线程只能在确保资源不会改变或者它独占访问权的室友才可以使用某个资源。不过，也可能两个线程太多小心，每个线程都在等待对资源的独占访问权，却永远都得不到。这样导致死锁，在这种情况下两个线程都在等待另一个线程所占有的资源。在没有得到另一线程所保留的资源时，两个线程都不会继续处理，但同时都不愿意放弃已经占有的资源。运行线程线程如果以小写字母t打头(thread)，这表示虚拟机中以单独，独立的执行了路径。如果以大写字母T打头(Thread)，则是java.lang.Thread类的一个实例。在虚拟机中执行的线程与虚拟机构造的Thread对象之间存在一种一一对应的关系。如果确实需要区分这两者，大多数情况下是从上下文就能显示地看出到你是线程还是Thread对象。为了启动一个新线程在虚拟机中运行，要构造一个Thread类的一个实例，调用它的start()方法，如下所示:12Thread t =new Thread();t.start();当然这个线程没什么意思，因为它什么都没有做。要让线程完成一些操作，可以对Thread类派生子类，覆盖其run()方法。或只实现Runable接口，将Runable对象传递给Thread够着函数。我一般会选择第二种方法，因为这样可以更清楚地将线程完成的任务与线程本分区分开，但是在本书以及其他地方，你会看到这两种技术都在使用。不论采用哪一种方法，关键都在于run()方法，它的签名是：1public void run()你应当把线程要做的所有工作够放在这个方法中，这个方法可以调用其他方法;可以构造其他对象。甚至可以生成其他线程，不过线程要在这里启动，并在这里结束。当run()方法完成时，线程也就消失了。事实上，run()对于线程就想main()方法对于非线程化传统程序的作用一样。单线程程序会在main()方法返回时退出。多线程程序会在main()方法以及所有非守护线程(nodaemon thread)都返回时才退出(守护线程完成后台任务，如垃圾回收，守护线程并不阻止虚拟机退出)。派生Thread考虑编写一个程序来计算多个文件的安全散列算法(SHA)摘要。很大程度上，这是一个受限于I/O的程序(也就是说，它的速度会受到从磁盘读取文件所花费时间的限制)。如果将它编写为一个标准的程序，串行地处理这些文件，程序就会花费大量的时间等待驱动器返回数据。这个限制对于网络程序尤其明显:程序运行的速度要比网络提供的输入的速度快。因此程序的大量时间够耗费在阻塞中。这些时间本可以被其他线程所用，可以处理其他输入源或者完成不依赖于慢速输入的操作(不是所有多线程程序都有这个特点。有时即使没有线程有大量空闲时间可以分配给其他线程，起码采用多线程设计程序会更容易，可以将程序分解为多个线程，分别执行独立的操作)。实例3-1是Thread的子类，它的run()方法将为指定文件计算一个256位的SHA-2消息摘要。为此要用一个DiestInputStream读取这个文件。这个过滤器流在读取文件时计算一个加密散列函数。读取结束时，可以从digest()方法得到这个散列。实例3-1: DigestThread12345678910111213141516171819202122232425262728293031323334353637383940import java.io.*;import java.security.*;import javax.xml.bind.*; // for DatatypeConverter; requires Java 6 or JAXB 1.0public class DigestThread extends Thread &#123; private String filename; public DigestThread(String filename) &#123; this.filename = filename; &#125; @Override public void run() &#123; try &#123; FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; din.close(); byte[] digest = sha.digest(); StringBuilder result = new StringBuilder(filename); result.append(": "); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; catch (NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125; public static void main(String[] args) &#123; for (String filename : args) &#123; Thread t = new DigestThread(filename); t.start(); &#125; &#125;&#125;main()方法从命令行中读取文件名，针对每个文件名启动一个新的DigestThread。这个线程的工作实际上是在run()方法中完成。这里，由一个DigestInputStream读取文件，然后结果摘要要以16进制编码方式显示到System.out。注意，首先在一个本地StringBuffer变量result中建立线程的整个输出，再用一次方法调用将它显示在控制台上。更明显的一种方法是使用System.out.print()一次显示一部分，但这里不采取这种方法。其愿意稍后讨论。由于run()方法的签名是固定的，所以无法向其传递参数或从中返回值。因此，需要其他方法向线程传递信息和从中获取信息。传递信息最简单的方法是向构造函数传递参数，这会设置Thread子类中的字段，如签名所示。由于线程的异步特性，要获得线程的信息并传回最初的调用线程，这会更加困难。示例3-1回避了这个问题，它没有将任何信息返回调用线程。只是把结果显示在System.out上。不过,大多数情况下，你希望把信息传递给程序的其他部分。可以把计算结果存储于一个字段，并提供一个获取方法返回这个字段的值。但是如何知道这个值的计算什么时候结束呢？这非常棘手，本章后面将更详细地进行讨论。警告:如果对Thread派生子类，就应当只覆盖run(),而不要覆盖其他方法！Thread类的其他各个方法(如start(),interrupt(),join(),sleep()等)都非常有特定的语义，它们与虚拟机的交互很难在你自己的代码中重新实现。应当覆盖run(),并根据需要提供额外的够着函数和其他方法，但不要替换Thread的任何其他标准方法。实现Runable接口要想避免覆盖标准Thread方法，一种办法就是不要派生Thread类，而是将希望线程完成的任务编写为Runable接口的一个实例。这个接口声明了run()方法，这与Thread类完全一样:1public void run()任何实现这个接口的类都必须提供这个方法，除了这个方法外，你可以自由地创建任何其他方法(可以使用你选择的任何方法名)，而绝不会无意外的妨碍线程的行为。它还运行你将香橙的任务放在其他类的子类中，如Applet或HTTPServlet。要启动Runable任务的一个线程，可以把 这个Runable对象传入Thread构造函数。例如:12Thread t =new Thread(myRunnableObject);t.start();对于大多数通过派生Thread子类来解决的问题，可以很容易地改为使用Runable接口。实例3-2展示了这一点，它将实例3-1改写外使用Runable接口，而不是派生Thread的子类，除了名字的改变外，需要做的唯一修改就将extends Thread改为implements Runable,并在main()方法中把DigestRunable对象传递给Thread构造函数。程序的基本逻辑没有变。1234567891011121314151617181920212223242526272829303132333435363738394041import java.io.*;import java.security.*;import javax.xml.bind.*; // for DatatypeConverter; requires Java 6 or JAXB 1.0public class DigestRunnable implements Runnable &#123; private String filename; public DigestRunnable(String filename) &#123; this.filename = filename; &#125; @Override public void run() &#123; try &#123; FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; din.close(); byte[] digest = sha.digest(); StringBuilder result = new StringBuilder(filename); result.append(": "); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; catch (NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125; public static void main(String[] args) &#123; for (String filename : args) &#123; DigestRunnable dr = new DigestRunnable(filename); Thread t = new Thread(dr); t.start(); &#125; &#125;&#125;并不认为实现Runable接口一定优于扩展Thread类，没有强有力的理由支持这一点，反之亦然。在一些特殊的情况下，例如本章后面的实例3-14，在每个Thread对象的构造函数中调用Thread类的一些实例方法可能很有中。这就需要使用子类。在另外一些特定的情况下，可能需要将run()方法放在某个类中，而这个类要扩展另一个类(如HTTPServlet),这种情况下就必须使用Runable接口。最后，有些崇尚面向对象的人人文，线程完成的任务实际上不是一种Thread，因此应当放在一个单独的类或接口。(如Runable)中，而不应该放在Thread的子类中。我部分同意这种观点，但我不认为这个观点想其声称的那样理由充分。所以，本书中主要使用Runable接口，但你也可以使用对你来说最方便的任何方法。从线程返回信息习惯了传统单线程过程模型的程序员在转向多线程环境时，最难掌握的一点就是如何从线程返回信息。从结束的线程获得信息，这是多线程编程中最被误解的反面之一。run()方法和start()方法不不返回任何值。例如，假设不只是像示例3-1和示例3-2那样简单地显示SHA-256摘要，摘要线程需要把摘要返回给执行主线程。大多数人的第一个反应就是把结果存储在一个字段中，再提供一个获取方法，如示例3-3和示例3-4所示。示例3-3是一个计算指定文件摘要的Thread子类。示例3-4是一个简单的命令行用户界面，会接收文件名，并创建线程为这些文件计算摘要。示例3-3:使用存取方法返回结果的线程1234567891011121314151617181920212223242526272829303132import java.io.*;import java.security.*;public class ReturnDigest extends Thread &#123; private String filename; private byte[] digest; public ReturnDigest(String filename) &#123; this.filename = filename; &#125; @Override public void run() &#123; try &#123; FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; // read entire file din.close(); digest = sha.digest(); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; catch (NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125; public byte[] getDigest() &#123; return digest; &#125;&#125;示例3-4: 使用存取方法获得线程输出的主程序12345678910111213141516171819import javax.xml.bind.*; // for DatatypeConverterpublic class ReturnDigestUserInterface &#123; public static void main(String[] args) &#123; for (String filename : args) &#123; // Calculate the digest ReturnDigest dr = new ReturnDigest(filename); dr.start(); // Now print the result StringBuilder result = new StringBuilder(filename); result.append(": "); byte[] digest = dr.getDigest(); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); &#125; &#125;&#125;ReturnDiggest类把计算结果存储在私有字段digest中，可以通过getDigest()来访问。ReturnDiggestUserInterface中的main()方法循环处理由命令行得到的一个文件列表。它为每个文件启动一个新的ReturnDigest线程，然后试图使用getDigest()获取结果。不过，当你运行这个程序时，结果却不想你期望的那样:问题在于，主程序会在线程有机会初始化摘要之前就获取并使用摘要。在单线程程序里这个控制流可以正常工作，但在这里不行，因为在单线程程序里，dr.start()只是在同一个线程中调用run()方法，而这里的情况有所不同。dr.start()启动的计算结果可能在main()方法调用dr.getDigest()之前结束，也可能还没有结束。如果没有结束，dr.getDigest()则会返回null,第一次尝试访问digest时会抛出一个NullPointerException异常。竞态条件一种可能的方法是吧dr.getDigest()调用移到main()方法的后面部分，如下所示：public void main(String[] args){ReturnDigest[] digest=new ReturnDigest[args.length];for(int i=0;i&lt;args.length;i++){digests[i]=new ReturnDigest(args[i]);digest[i].start();}for(int i=0;i&lt;args.length;i++){//现在显示结果StringBuffered result=new StringBuffer(args[i]);result.append(“: “);byte[] digest=digests[i].getDigest();result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); } }如果你够幸运，这会正常工作，你将的到期望的输出，如下:但我要强调一下这里所说的”幸运”。你可能得不到这个输出。事实上，你可能仍然会得到一个NullPointerException异常。这段代码是否能正常工作，完全取决于每个ReturnDigest线程是否在其getDigest()方法被调用之前结束。如果第一个for循环太快，在第一个for循环生成的线程结束之前就进入了第二个for循环。那么我们又会回到原点，遭遇同样的问题。更糟糕的是，程序看起来好型被挂起，而没有任何输出，甚至连栈轨迹都没有。到底会得到正确的结果还是异常，或者是一个挂起的程序，这取决于很多因素，包括程序生成了多少线程，系统的CPU和磁盘的速度，系统使用多少个CPU,以及Java虚拟机为不同线程分配所用的算法。这些称为竞态条件(race condition)。能否取得到正确结果依赖于不同线程的相对速度，而你无法控制着一点。我们需要一种更好的方法，以保证在摘要就绪前不会调用getDigest()。轮询大多数新手采用的解决方案是，让获取方法返回一个标志值(或者可能抛出一个异常)，直到设置了结束字段为止。然后主线程定期询问获取方法，查看是否返回了标志之外的值。这个例子中，这表示要重复地测试digest是否为空，只有不为空才使用。例如：12345678910111213141516171819202122232425public static void main(String[] args)&#123; ReturnDigesst[] digests=new ReturnDigest[args.length]; for (int i =0;i&lt;args.length;i++) &#123; //计算摘要 digest[i]=new ReturnDigest(args[i]); digest[i].start(); &#125; for(int i=0;i&lt;args.length;i++) &#123; while(true) &#123; byte[] digest=digest[i].getDigest(); if(digest!=null) &#123; StringBuilder result=new StringBuilder(args[i]); result.append(": "); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); break; &#125; &#125; &#125;&#125;这个方案是可行的，它会以正确的顺序给出正确的答案，而不考虑各个线程的相对运行速度。不过，它做了大量不需要的工作。更糟糕的是，这个解决方案不能保证一定能工作。在有些虚拟机上，主线程会占用所有可用的时间，而没有给具体的工作线程留出任何时间。主线程太忙与检查工作的完成情况，以至于没有时间来完成任务！显然这不是一个好方法。回调事实上，还有一种更简单有效的方法来解决这个问题。有了这个方法，我们完全可以淘汰前面的做法，不必通过无线循环来重复地询问每个ReturnDigest对象来查看是否结束。这个方法的技巧在于，不是在主程序中重复地询问每个ReturnDigest线程是否结束(就想一个五岁小孩子在长途汽车旅行中反复的问”我们到了吗?”这就真的很烦人)，而是让线程告诉主程序它何时结束。这是通过调用主类(即启动这个线程的类)中的一个方法来做到。这被称为回调(callback),因为线程在完成时，反过来调用其创建者。这样一来，主程序就可以在等待线程结束期间休息，而不会占用运行线程的时间。但当线程的run()方法接近结束时，要做的最后一件事情就是基于结果调用主程序中的一个已知的方法。不是由主程序询问每个线程来寻求答案，而是由每个线程告知主程序答案。使用静态方法完成回调例如，实例3-5展示了一个与前面很相似的CallbackDigest类。不过，在run()方法的末尾，对于最初启动的这个线程的类，它要将digest传递给这个类的CallbackDigestUserInterface.receiveDigest()静态方法。实例3-5: CallbackDigest1234567891011121314151617181920212223242526272829import java.io.*;import java.security.*;public class CallbackDigest implements Runnable &#123; private String filename; public CallbackDigest(String filename) &#123; this.filename = filename; &#125; @Override public void run() &#123; try &#123; FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; // read entire file din.close(); byte[] digest = sha.digest(); //调用主类的静态方法通知主类 CallbackDigestUserInterface.receiveDigest(digest, filename); &#125; catch (IOException ex) &#123; System.err.println(ex); &#125; catch (NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125;&#125;示例3-6中所示的CallbackDigestUserInterface类提供了main()方法。不过，与这个程序的其他变体中的main()方法不同，这个方法只是为命令行中指定的文件启动线程。它不会具体读取，显示或对计算结果完成其他的操作。这些功能有一个单独的方法，receiveDigest()来处理。receiveDigest()不在main()方法中调用，沿着main()方法的控制流所能到达的任何方法也不会调用这个receiveDigest()方法。实际上，它由每个线程单独调用。也就是说，receiveDigest()在摘要线程中运行，而不是在执行主线程的程序中运行。实例3-6: CallbackDigestUserInterface1234567891011121314151617181920import javax.xml.bind.*; // for DatatypeConverter; requires Java 6 or JAXB 1.0public class CallbackDigestUserInterface &#123; public static void receiveDigest(byte[] digest, String name) &#123; StringBuilder result = new StringBuilder(name); result.append(": "); result.append(DatatypeConverter.printHexBinary(digest)); System.out.println(result); &#125; public static void main(String[] args) &#123; for (String filename : args) &#123; // Calculate the digest CallbackDigest cb = new CallbackDigest(filename); Thread t = new Thread(cb); t.start(); &#125; &#125;&#125;实例3-5和实例3-6使用静态方法完成回调，这样CallbackDigest只需要知道CallbackDigestUserInterface要调用的方法名。不过，回调实例方法也不会太难(而且回调实例方法更为常见)。回调实例的方法这种情况下，进行回调的类必须有其回调对象的一个引用。通常情况下，这个引用通过线程构造函数的参数来提供。当run()方法接近结束时，要做的最后一件事情就是调用回调对象的实例方法来传递结果。例如，示例3-7展示了一个与前面很类似的CallbackDigest类。不过，这一次它有一个额定的字段，这是一个名为callback的InstanceClassbackDigestUserInterface对象。在run()方法的末尾，digest被传递给callback的receiveDigest()方法。InstanceCallbackDigestUserInterface对象本身在构造函数中设置。示例3-7: InstanceCallbackDigest12345678910111213141516171819202122232425262728293031import java.io.*;import java.security.*;public class InstanceCallbackDigest implements Runnable &#123; private String filename; //调用主类的引用 private InstanceCallbackDigestUserInterface callback; //通过构造函数，传入调用者(主类)的引用 public InstanceCallbackDigest(String filename, InstanceCallbackDigestUserInterface callback) &#123; this.filename = filename; this.callback = callback; &#125; @Override public void run() &#123; try &#123; FileInputStream in = new FileInputStream(filename); MessageDigest sha = MessageDigest.getInstance("SHA-256"); DigestInputStream din = new DigestInputStream(in, sha); while (din.read() != -1) ; // read entire file din.close(); byte[] digest = sha.digest(); //线程(被调用)调用主类(调用者)的方法，被主类调用的线程现在反过来调用主类，所以叫做回调。 callback.receiveDigest(digest); &#125; catch (IOException | NoSuchAlgorithmException ex) &#123; System.err.println(ex); &#125; &#125;&#125;示例3-8中的InstanceCallbackDigestUserInterface类有main()方法和reciveDigest()方法，用于处理传入的摘要。示例3-8只是显示摘要，但是功能更强的类还可以完成其他操作。如将摘要存储在一个字段中，用它启动另一个线程，或者对它完成进一步的计算。示例3-8: InstanceCallbackDigestUserInterface1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import javax.xml.bind.*; // for DatatypeConverter; requires Java 6 or JAXB 1.0public class InstanceCallbackDigestUserInterface &#123; private String filename; private byte[] digest; public InstanceCallbackDigestUserInterface(String filename) &#123; this.filename = filename; &#125; //启动线程计算摘要 public void calculateDigest() &#123; //创建处理线程，传入主类的对象引用，以便线程可以回调本类(主类)的实例 InstanceCallbackDigest cb = new InstanceCallbackDigest(filename, this); // 使用Thread类来启动线程 Thread t = new Thread(cb); t.start(); &#125; //线程会回调这个方法，参数由线程传入 void receiveDigest(byte[] digest) &#123; //从参数中获取线程的处理结果 this.digest = digest; System.out.println(this); &#125; @Override public String toString() &#123; String result = filename + ": "; if (digest != null) &#123; result += DatatypeConverter.printHexBinary(digest); &#125; else &#123; result += "digest not available"; &#125; return result; &#125; public static void main(String[] args) &#123; for (String filename : args) &#123; // Calculate the digest //实例化主类 InstanceCallbackDigestUserInterface d = new InstanceCallbackDigestUserInterface(filename); //调用主类方法，该方法中启动一个线程计算摘要，线程计算接收后将回调主类的方法把结果传回给主类 d.calculateDigest(); &#125; &#125;&#125;//上面的代码一会要好好注释一下使用实例方法代替静态方法进行回调要复杂一些，但有很多优点。首先，主类(这个例子中主类是InstanceCallbackDigestUserInterface)的各个实例只映射至一个文件，可以自然地跟踪记录这个文件的信息，而不需要额外的数据结构。此外，这个实例在必要时可以很容易地重新计算某个特定文件的摘要。实际上，经证明这种机制有更大的灵活性。但是也有一个警告。注意这里新增了启动线程的calculateDigest()方法。从逻辑上考虑，你可能认为这属于构造函数。不过，在构造函数中启动线程很危险，特备是线程将回调原来的对象时。这里就有一个竞态条件，可能会在构造函数结束而且对象完全初始化之前允许新线程进行回调。这里不太可能，因为启动新线程是在构造函数做的最后一件。不过，至少理论上是可能的。因此，万无一失的做法是避免在构造函数中启动线程。相比于轮询机制，回调机制的第一个有点是不会浪费那么多CPU周期。但更重要的优点是回调更灵活，可以处理涉及更多线程，对象和类的更复杂的情况。例如,如果有多个对象对线程的计算结果感兴趣，那么线程可以保存一个要回调的对象列表。特定的对象可以通过调用Thread或Runnable类的一个方法把自己添加到这个列表中来完成注册，表示自己对计算结果很感兴趣。如果有多个类的实例对结果感兴趣，可以定义一个新的interface(接口)，所有这些类都要实现这个新接口。这个interface(接口)将声明回调方法。如果你对此有种似曾相识的感觉，可能是因为你以前见过这种机制。这正是在Swing，AWT和JavaBean中处理事件的方法。AWT在程序之外的一个单独的线程中运行。组件和bean通过回调在特定接口(如ActionListener和PropertyChangeListener)中声明的方法来通知事件的发生。监听者对象使用Component类中的方法(如addActionListenner()和addPropertyChangeListener()）来完成注册，表示对特定组件触发的事件感兴趣。在组件内部，已注册的监听者存储在由java.awt.AWTEventMulticaster构成的一个链表中。这种机制有一个更一般的名字:观察者(Observer)设计模式。Future,Callable和ExecutorJava 5引入了多线程的一个新方法，通过隐藏细节可以更容易地处理回调。不再是直接创建一个线程，你要创建一个ExecutorService,它会根据需要为你创建线程。可以向ExecutorService提交Callable任务，对于每个Callable任务，会分别得到一个Future。之后可以向Future请求得到任务的结果。如果结果已经准备就绪，就会立即得到这个结果。如果还没有准备好，轮询线程会阻塞，知道结果准备就绪。这种做法的好处是，你可以创建很多不同的线程，然后按你需要的顺序得到你需要的答案。例如，假设你要找出一个很大的数字数组中的最大值。如果采用最原始的方法实现，需要的时间为O(n),其中n是数字中的元素个数。不过如果可以将这个工作分解到多个线程，每个线程分别在一个单独的内核上运行，这样就会快得多。为了便于说明，下面假设需要两个线程。Callable接口定义了以call()方法，它可以返回任意的类型。示例3-9是一个本文链接: java网络编程第4版 第3章 线程]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git 删除远程仓库中网络过滤的文本]]></title>
    <url>%2Fblog%2Fb1d11119%2F</url>
    <content type="text"><![CDATA[有时候我们不小心把一下文件上传到远程中去了，那么如何删除掉这些过滤的文本呢?首先：先把本地仓库拉到和远程仓库一致。1git pull然后，在本地仓库下，删除这些文件(剪切到别处去)，例如，\Java\java_net\java网络编程第四版 读书笔记\随书源码\src目录下的源码剪切到C:\Users\lan\Desktop\源码这个空文件中去。编写，过滤文件.gitignore,写入源码的目录，在后续的操作中删除过滤掉这些文件：12....../Java/java_net/java网络编程第四版 读书笔记/随书源码/src/然后同步本地代码库到远程：123git add .git commit -m &quot;从远程库中删除随书源码,不上传这个源码&quot;git push origin master这样远程仓库中就不会再有我们一开始忘掉过滤掉的文件了。现在把刚才剪切走的文件再粘贴回来。而.gitigore对这些粘贴过来的新文件有效，后续 git将会忽略掉这些文件。(.gitignore只对新文件有效)粘贴回来后，现在再使用git status查看将查看不到这些新粘贴的文件的信息。也就是说已经被git忽略掉了。本文链接: Git 删除远程仓库中网络过滤的文本]]></content>
      <categories>
        <category>git教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[挖掉图片中间一部分]]></title>
    <url>%2Fblog%2Fad610aad%2F</url>
    <content type="text"><![CDATA[明确需求例如这里有一张图片(1.png):现在要求把中间的两页之间的空白部分删除掉，如下图所示：实现裁剪上半部分用Photoshop打开”1.png”图片,然后把上半部分裁剪下来:另存为”上部分.png”:这个时候Photoshop中显示的是我们刚生成的”上部分.png”这个图片，下面来裁剪下半部分。裁剪下半部分还是一样，打开”1.png”图片，然后把下半部分裁剪下来，裁剪好后就是下半部分的内容了，不在需要另存为，保存即可。然后，切换到移动工具。避免误触碰造成没必要的裁剪。拼图:把上下两个部分拼到一张图片中计算两个图片的高度之和选择图像-&gt;图像大小查看图像的高度:可以看到下部分(“1.png”)的高度为：334然后查看“上部分.png”的高度：506修改其中一张图片的高度为两者高度之和计算两部分的高度506+334=840,然后点击：图像&gt;画布大小。调整”上部分.png”的画布大小由50改为840像素：解锁图层，调整图层位置效果如下所示，然后双击解锁该图层：然后使用移动工具，把该图层移动到顶部：复制粘贴移动另一部分然后切换到1.png，使用矩形选框，选中整个图层，按下Ctrl+C复制整个图层：然后切换到 上部分.png，粘贴该图层,使用移动工具移动调整位置对齐即可：最后保存即可，这样就能图片中间无用的部分去掉了，拼接后的效果如下：本文链接: 挖掉图片中间一部分]]></content>
      <categories>
        <category>PS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 第2章 流]]></title>
    <url>%2Fblog%2Fd3f6b577%2F</url>
    <content type="text"><![CDATA[引言网络程序所做的很大一部分工作都是简单的输入和数据:将数据字节从一个系统移动到另一个系统。字节就是字节。很短程度上讲，读取服务器发送给你的数据与读取文件并没有什么不同。向客户端发送文本和写文件也没有什么不同。但是,Java中输入和输出(I/O)的组织与其他大多数语言如(Fortran,C和C++)都不一样。因此，这里要用几页来总结一下Java独特的I/O方法。Java的I/O流建立与流(stream)之上。输入流用于读取数据，输出流用于写入数据。不同的流类，如java.io.FileInputStream和sun.net.TelnetOutputStream会读/写某个特定的数据源。但是，所有输出流都有相同的基本方法来写入数据，所有输入也使用相同的方法来读取数据。创建一个流之后，读/写时通常可以忽略读/写的具体细节。过滤器(filter)流可以串联到输入流或输出流上。读写数据时，过滤器可以修改数据(例如,通过加密或压缩)，或者只是提供额外的方法，将读写的数据转换为其他格式。例如，java.io.DataOutputStream类就提供了一个方法，可以将int转换为4字节，并把这些字节写入低层的输出流。阅读器(reader)和书写器(writer)可以串联到输入流和输出流上，允许程序读写文本(即字符)而不是字节。只要正确的使用，阅读器和书写器可以处理很多字符编码，包括多字节字符集，如SJIS和UTF-8流是同步的。也就是说，当程序(确切的讲是线程)请求一个流读写一段数据时，在做任何其他操作前，它要等待所读写的数据。Java还支持使用通道和缓冲区的非阻塞I/O。非阻塞I/O稍微有些复杂，但是在某些高吞吐量的应用程序中(如Web服务器)，非阻塞I/O要快的多。通常情况下，基本流模型就是实现客户端所需要和应当使用的全部内容。由于通道和缓冲依赖于流，下面将介绍流和客户端。输出流Java 的基本输出流式java.io.OutputStream:12&gt; public abstract class OutputStreamextends Objectimplements Closeable, Flushable&gt;这个类提供了写入数据所需的基本方法，这些方法包括：方法描述public abstract void write(int b) throws IOException将指定的字节写入此输出流。public void write(byte[] b) throws IOException将 b.length 个字节从指定的 byte 数组写入此输出流。public void write(byte[] b,int off,int len) throws IOException将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。public void close() throws IOException关闭此输出流并释放与此流有关的所有系统资源。public void flush() throws IOException刷新此输出流并强制写出所有缓冲的输出字节。OutputStream的子类使用这些方法向某种特定介质写入数据。例如，FileOutputStream使用这些方法写入文件，TelnetOutputStream使用这些方法写入网络连接。ByteArraryOutputStream使用这些方法将数据写入可扩展的字节数组。但不管写那种介质，大多都会使用同样的这5个方法。有时候甚至可能不知道所写入的流具体是何种类型。例如，在Java类库文档中找不到TelnetOutputStream。它被有意的隐藏在sun包中。java.net中很多方法都会返回TelnetOutputStream，如Java.net.Socket的getOutputStream()方法。但是，这些方法声明为只返回OutputStream,而不是更特定的子类TelnetOutputStream。这正是多态的威力。如果你知道如何使用这些超类，那也就知道如何使用所有这些子类。write(int b)方法OutputStream的基本方法是write(int b)。这个方法接收一个0-255之间的整数作为参数，将对应的字节写入输出流中。这个方法声明为抽象方法，因为各个子类需要修改这个方法来处理特定的介质。例如，ByteArrayOutputStream可以用纯Java代码实现这个方法，将字节复制到数组中。与此不同，FileOutputStream则需要使用原生代码，这些代码了解如何将数据写入到主机平台的文件中。注意，虽然这个方法接受一个int作为参数，但它实际上会写入一个无符号字节。Java没有无符号字节数据类型，所以这里要使用int来代替。无符号字节和有符号字节之间唯一真正的区别在于解释。它们都是由8个二进制位组成，当使用write(int b)将int协议一个网络连接时，线缆上只会放入8个二进制位。如果将一个超出0~255的int传入write(int b),将写入这个数的最低字节，其他3字节将被忽略(这正是将int强制转换为byte的结果)。提示: 不过在极少数情况下，你可能会看到一些有问题的第三方类，在写超出0~255的值时，它们的做法有所不同，比如会抛出IllegalArgumentException异常或者总是写入255，所以尽可能要避免写入超出0~255的intwrite(int b)方法实例例如，字符生成器协议定义了一个发出ASCII文本的服务器。这个协议最流行的变体是发送72个字符的文本行，其中包含可显示的ASCII字符。(可显示的ASCII字符是33~126之间的字符，不包括各种空白行和控制字符)。第一行按顺序包含字符33到字符104.第二行包含字符33+1到104+1,也就是字符34到字符105。第三行宝行字符35到字符106。一直到第29行宝行字符55到字符126。到这里，字符将回绕，第30行包含字符56到字符126加上字符33。各行用回车(ASCII 13)和换行(ASCII 10)结束。输出结果如下：1234567!&quot;#$%&amp;&apos;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefgh&quot;#$%&amp;&apos;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghi#$%&amp;&apos;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghij$%&amp;&apos;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijk%&amp;&apos;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijkl&amp;&apos;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklm&apos;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn可以看到第一行第第一个字符是!到了第二行它将变为最后一个字符!由于ASCII是一个7位字符集，所以每个字符都作为单字节发送。因此，这个协议可以直接使用基本write()方法实现。实现代码如下：123456789101112131415161718192021&gt; public static void generatecharacters(OutputStream out) throws IOException&gt; &#123;&gt; int firstPrintableCharacter = 33;&gt; int numberOfPrintableCharacters = 94;&gt; int numberOfCharactersPerLine = 72;&gt; int start = firstPrintableCharacter;&gt; while (true)&gt; &#123;/* 无限循环 */&gt; &gt; for (int i = start; i &lt; start + numberOfCharactersPerLine; i++)&gt; &#123;&gt; out.write((i - firstPrintableCharacter)&gt; % numberOfCharactersPerLine + firstPrintableCharacter);&gt; &#125;&gt; out.write('\r');// 回车&gt; out.write('\n');// 换行&gt; start = ((start + 1) - firstPrintableCharacter)&gt; % numberOfPrintableCharacters + firstPrintableCharacter;&gt; &#125;&gt; &#125;&gt;这里将一个OutputStream通过out参数传入到generatecharacters()方法中。一次项out写入1字节。这些字节作为33到126之间循环列出中的整数给出。这里的大部分运算都是让循环在这个范围内回绕。并写入每个72字符块之后，就想输出流写入一个回车和一个换行。然后计算下一个起始字符,重复这个循环。整个方法声明为抛出IOException异常。这一点很重要，因为字符生成器服务器只又在客户端关闭连接时才会终止。Java代码会把它看做是一个IOException异常。看到这里可以能回迷惑，其实，作者这里是在介绍write(int b)这个方法的用法。不用去理解这个什么字符生成器的原理和作用。main()方法：1234public static void main(String[] args) throws IOException&#123; generatecharacters(System.out);&#125;一次写入1字节通常效率不高。例如，流出以太网卡的每个TCP分片包含至少40字节的开销用于路由和纠错。如果每字节都单独发送，那么与你预想的数据量相比，使用write(int b)方法实际填入到网络中的数据可能是41个字节,也就是说比实际写入一个字节高了41倍。如果增加主机网络层协议的开销，情况可能更糟糕。因此，大多数TCP/IP实现都会在某种程度上缓存数据。也就是说，它们在内存中积累数据字节，只有积累到一定的数量后，或经过一定的时间后，才将积累的数据发送到最终目的地。不过，如果有多字节要发送。则一次全部发送，不失为一个好主意。使用write(byte[] data)或write(byte[] data,int offset,int length)一次写入一个数组，或数组中的一部分，通常比write(int b)一次写入一个字节要快的多。例如，下面是generatecharacters()方法的另一个实现，它将整行打包字节数组中，一次发送一行:123456789101112131415161718192021222324public static void generateCharacters(OutputStream out) throws IOException&#123; int firstPrintableCharacter = 33; int numberOfPrintableCharacters = 94; int numberOfCharactersPerLine = 72; int start = firstPrintableCharacter; //+2对应回车和换行 byte[] line=new byte[numberOfCharactersPerLine+2]; int count=0; while (true) &#123;/* 无限循环 */ for (int i = start; i &lt; start + numberOfCharactersPerLine; i++) &#123; line[i-start]=(byte)((i-firstPrintableCharacter)%numberOfPrintableCharacters+firstPrintableCharacter); &#125; line[72]=(byte)&apos;\r&apos;; line[73]=(byte)&apos;\n&apos;; out.write(line); start = ((start + 1) - firstPrintableCharacter) % numberOfPrintableCharacters + firstPrintableCharacter; if((count++)&gt;=72) break; &#125;&#125;计算何时写那些字节的算法与前面的实现中是一样的。重要的区别在于这些字节在写入网络之前先打包到字节数组中。还要注意计算的结果是int类型的，在存储到字节数组是要强制类型转换。这在前面的实现中是不需要强制类型转换的，因为write(int b )方法声明为接收一个int作为参数。flush()方法与网络硬件中缓存一样，流还是可以在软件中得到缓冲，即直接使用Java代码缓存。一般来说，这可以通过把BufferedOutputStream或BufferedWriter串链到低层流上来实现，因此，在写入数据完成后，刷新(flush)输出流非常重要。例如假设已经向使用HTTP Keep-Alive的HTTP1.1服务器写入了300字节的请求到输出流中，然后服务器会等待客户端的响应。然后再发送更过的数据。不过，如果输出流有一个1024字节的缓冲区，那么这个流在发送缓冲区中的数据之前会等待等过的数据到达，以填满这个1024字节的缓冲区。不过在客户端的响应到达之前，服务器不会向流写入更多的数据，但是请求现在其实还在缓冲区中，没有发给客户端，所以客户端的响应是永远不会到来的。客户端等待服务器的消息，而服务端等待客户端的响应，两个相互等待，造成死锁，如下图所示。这种情况，应该使用flush()方法，flush()方法可以强迫缓冲的流发送数据，即使缓冲区还没填满，以此来打破这种死锁状态。不管你是否认为有必要，刷新输出流都很重要，取决于以如何控制流的引用，你可能知道流是否有缓冲，也可能不知道(例如，不论你是否希望如此，System.out都会使用缓冲)。如果有必要刷新输出,不刷新，那么可能导致不可预知，不可重现的程序挂起。相应的，应当在关闭流之前立即刷新输出所有流，否则，关闭流时留在缓冲区中的数据可能会丢失。close()方法最后，当结束一个流的操作时,要通过调用他的close()方法将其关闭。这会释放与这个流相关联的所有资源，如文件句柄或端口。如果流来自一个网络连接，那么关闭这个流也会终止这个连接。一旦输出流关闭，继续写入时就会抛出IOException异常。不过，有些流仍允许对这个对象做一些处理。例如，关闭的ByteArrayOutputStream仍然可以转换为实际的字节数组，关闭的DigesOutputStream仍然可以返回其摘要。close()方法正确的写法在一个长时间运行的程序中，如果未能关闭一个流，则可能会泄露文件句柄，网络端口和其他资源。因此在Java6和更早的版本中，明智的做法是在finally块中关闭流。而为了正确的变量作用域，必须在try块之前声明流变量，但必须在try块内完成初始化。另外为了避免NullPointerException异常，在关闭流之前需要检查流变量是否为null.最后通常都希望忽略关闭流时出现的异常，或者最多只是把这些异常记入日志中。例如：1234567891011121314151617181920212223//输出流引用定义在try块外面，以提高作用域OutputStream out =null;try&#123; //初始化输出流 out=new FileOutputStream("data.txt"); //处理输出流...&#125;catch(IOEXception ex)&#123; System.err.println(ex.getMessage());&#125;finally&#123; if(out!=null) &#123; try&#123; out.colse(); &#125;catch(IOException ex)&#123; //忽略 &#125; &#125;&#125;这个技术有时称为释放模式(dispose pattern),这对于需要在垃圾回收前先进行清理的对象时很常见的。你会看到，这个技术不仅用于流，还可以用于socket,通道，JDBC连接和语句等。Java 7引入了带资源的try构造(try with resources),可以更简洁地完成这个清理。不需要再try块之外声明流变量，完全可以在try块的一个参数表中声明。例如，前面的代码段现在就变得简单多了：12345678try(OutputStream out=new FileOutputStream(&quot;data.txt&quot;))&#123; //处理输出流&#125;catch(IOException ex)&#123; System.err.println(ex.getMessage());&#125;现在不需要Finally子句，Java会对try块参数表中声明的所有AutoCloseable对象自动调用close()。提示：只要对象事项了Closeable接口，都可以使用带资源的try构造。这包括几乎所有需要释放的对象。到到目前为止，JavaMail Transport对象是我见过的唯一的例外，这些对象还需要显式的释放。输入流Java的基本输入流类是java.io.InputStream:public abstract class InputStreamextends Objectimplements Closeable这个类提供两个将数据读取为原始字节所需要的基本方法。这些方法包括：方法描述public abstract int read() throws IOException从输入流中读取数据的下一个字节。public int read(byte[] b) throws IOException从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。public int read(byte[] b, int off, int len) throws IOException将输入流中最多 len 个数据字节读入 byte 数组。public long skip(long n) throws IOException跳过和丢弃此输入流中数据的 n 个字节。public int available() throws IOException返回此输入流下一个方法调用可以不受阻塞地从此输入流读取（或跳过）的估计字节数。public void close() throws IOException关闭此输入流并释放与该流关联的所有系统资源。public void mark(int readlimit)在此输入流中标记当前的位置。public boolean markSupported()测试此输入流是否支持 mark 和 reset 方法。public void reset() throws IOException将此流重新定位到最后一次对此输入流调用 mark 方法时的位置。InputStream的具体子类使用这些方法从某种特定介质中读取数据。例如，FileInputStream从文件中读取数据。TelnetInputStream从网络中读取数据。ByteArrayInputStream从字节数组中读取数据。但无论读完哪种数据源，主要使用以上这六个方法。有时你不知道正在读取的流具体是何种类型。例如，TelnetInputStream类隐藏在sun.net包中，没有提供相关文档。java.net包中的很多方法都会返回这个类的实例(例如java.net.URL的openStream()方法)。不过，这些方法声明为只返回InputStream，而不是特定的子类TelnetInputStream。这又是多态在起作用。子类的实例可以透明的作为其超类的实例来使用。而不需要子类更特定的知识。InputStream的基本方法是没有参数的read()方法。这个方法从输入流的源中读取1个字节数据，作为一个0~255的int返回。流的结束通过放回-1来表示。read()方法会等待并阻塞其后任何代码的执行，知道有1字节的数据可供读取。输入和输出可能很慢，所以如果程序在做其他重要的工作，要尽量将I/O放在单独的线程中。read()方法read()方法声明为抽象方法，因为各个子类需要修改这个方法来处理特定的介质。例如，ByteArraryInputStream会用纯Java代码实现这个方法，从数组复制字节。不过，TelnetInputStream需要使用一个原生库，它知道如何从主机平台的网络接口读取数据。下面的代码段从InputStream in中读取10个字节，存储在byte数组input中。不过，如果检测到流结束,循环就会提前终止。1234567byte[] input =new byte[10];for(int i=0;i&lt;input.length,i++)&#123; int b=in.read(); if(b==-1) break; input[i]=(byte)b;&#125;有符号字节转换为无符号字节虽然read()只读取一个字节，但它会返回一个int.这样把结果存储到字节数组之前就必须进行强制类型转换。当然，这会产生一个-128到127之间的有符号字节，而不是read()方法返回的0到255之间的一个无符号字节。不过，只要你清楚在做什么，这就不是大问题。你可以如下将一个有符号字节转换为无符号字节：1int i=b&gt;=0 ? b :256+b;与一次写入1字节的数据一样，一次读取1字节的效率也不高。因此，有两个重载的read()方法，可以用流中读取多个字节的数据来填充一个指定的数组：read(byte[] input)和read(byte[] input,int offset,int length)。第一个犯法尝试填充指定的数组input,第二个方法尝试填充指定的input从offset开始连续length字节的子数组。注意我说着这些方法是在尝试填充数组，也就是说不是一定会成功。尝试可能会以很多不同的方式失败。例如，你可能听说说，当你的程序正在通过DSL从远程Web服务器读取数据时，由于电话公式中心办公室的交换机存在bug，这会断开你与其他地方数百个邻居的连接。这会导致一个IOException异常。但更常见的是，读尝试可能不会完全失败，但也不会完全成功。可能读取到一些请求的字节，但未能全部读取到。例如，你可能尝试从一个网络连接中读取1024字节，限制实际上只有512字节到达，其他的仍在传输中。尽管它们最终会到达，但此时却不可用。考虑这一点，读取多字节的方法会返回实际读取的字节数。例如，考虑下面的代码段：12byte[] input =new byte[1024];int bytesRead=in.read(input);它尝试从InputStream in向数组input读入1024字节。不过，如果只有512字节可用，那就只会读取这么多，bytesRead将会设置为512。为了保证你希望的所有数据都真正读取到，要把读取方法放在循环中，这样会重复读取，知道数组填满为止。例如：1234567int bytesRead=0；int bytesToRead=1024;byte[] input= new byte[bytesToRead];while(bytesRead&lt;bytesToRead)&#123; bytesRead+=in.read(intput,bytesRead,bytesToRead-bytesRead);&#125;这项技术对于网络流尤为重要,一般来讲如果一个文件完全可用，那么文件的所有字节也都可用。不过由于网络要不CPU慢很多，所以郑旭很容易在所有数据到达前清空网络缓冲区。事实上，如果这两个方法读取展示为空但打开的网络缓冲区，它通常会返回0，表示没有数据可用，但是流还没有关闭。这往往要比单个字节的read()方法要好，因为在这种情况下单字节方法会阻塞正在运行的线程。所有3个read()方法都用返回-1表示流的结束。如果流已经结束，而又没有读取的数据，多字节read()方法会返回这些数据，直到缓冲区清空。其后任何一个read()方法调用会返回-1，-1永远不会放进数组中，数组中只包含实际的数据。前面的代码段中存在一个bug,因为它没有考虑所有1024字节永远不可能到达的情况(这与前面所说的情况不同，那只是当时不可用,但以后所有字节总会到达)。要修复这个bug,需要先测试read()的返回值，然后在增加到哦bytesRead中。例如：123456789int bytesRead=0；int bytesToRead=1024;byte[] input=new byte[bytesToRead];while(bytesRead&lt;bytesToRead)&#123; int result=in.read(input,bytesRead,bytesToRead-bytesRead); if(result==-1) break;//流结束 bytesRead+=result;&#125;available()方法如果不想等待所需的全部字节都立即可用，可以使用available()方法来确定不阻塞的情况下有多少字节可用读取。它会返回可以读取的最少字节数。事实上还能读取更多字节，但至少可以读取available()建立的字节数。例如：1234int byteAvailable = in.available();byte[] input=new byte[bytesAvailable];int bytesRead=in.read(input,0,bytesAvailable);//立即继续执行程序的其他部分...在这种情况下，可以人文bytesRead与bytesAvailable相等。不过，不能期望bytesRead大于0。有可能没有可用的字节，在流的最后，available()会返回0。一般来说，read(byte[] input,int offset,int length)在流结束时返回-1;但如果length是0,那么他不会注意流的结束，而是返回0。skip()方法在少数情况下，你可能希望跳过数据不进行读取。skip()方法会完全完成这项任务。与读取文件相比，在网络连接中它的用处不大。网络连接是顺序的，一般情况下很慢，所以与跳过数据(不读取)相比，读取数据并不会耗费太长时间。文件是随机访问的，所以要跳过数据，可以简单的实现为重新指定文件指针位置，而不需要跳过的各字节。close()方法与输出流一样，一旦结束对输入流的操作，应当调用他的close()方法将其关闭。这会释放与这个流关联的所有资源如句柄或端口。一旦输入流已关闭,进一步读取这个流会抛出IOException异常。不过，有些流可能仍然允许处理这个对象。例如，你通常会在读取了数据并关闭之后才会从java.security.DigestInputStream获取消息摘要。标记和重置InputStream类还有3个不太用的方法，允许程序备份和重新读取已经读取的数据。这些方法是：方法描述public void mark(int readAheadLimit)在此输入流中标记当前的位置。public void reset() throws IOException将此流重新定位到最后一次对此输入流调用 mark 方法时的位置。public boolean markSupported()测试此输入流是否支持 mark 和 reset 方法。为了重新读取数据，用mark()方法标记流的当前位置。在以后某个时刻，可以用reset()方法把流重置到之前标记的位置。接下来的读取操作会返回从标记位置开始的数据。不过，不能随心所欲的向前重置任意远的位置。从标记处读取和重置的字节数有mark()的readAheadLimit参数确定。如果试图重置的太远，就会抛出IOException异常。此外，一个流在任何时刻都只能有一个标记，标记第二个位置会清除第一个标记。标记和重置通常通过将标记位置之后的所有字节存储在一个内部缓冲区来事项。不过，不是所有输入流都支持这一点。在尝试使用标记和重置之前，要检查markSupported()方法是否返回true。如果返回true,那么这个流确实支持标记和重置。否则，mark()方法会什么都不做，而调用reset()方法将抛出一个IOException异常。提示：在我看来，这是一个非常差的设计，实际上，不支持标记和重置的流比支持的更过。如果向抽象的超类附加一个功能，但这个功能对很多(甚至可能是大多数)子类都不可用，这就是一个很不好的想法。把这三个方法放在一个单独的接口中，由提供这个功能的类实现这个接口，这样做可能会更好。这个方法的缺点是不能在外置类型的任意输入流上调用这些方法，但实际上也不会这么做，因为并不是所有流都支持标记和重置。可以提供一个方法(如markSupport())在运行时进行检查，这是针对该问题的一个更传统的非面向对象的解决方案。面向对象的方法是通过接口和类将其嵌入在类型系统中，这样就可以在编译时进行检查。java.io中仅有连个的使用支持标记的输入流时BufferedInputStream和ByteArrayInputStream。而其他输入流(如TelnetInputStream)如果先串链到缓冲的输入流才支持标记，这里的串链，应该是这种类型的写法：BufferedInputStream in=new BufferedInputStrem(new TelnetInputStream);其实这样不就是直接使用了BufferedInputStream的标记功能了吗过滤器流InputStream和OutputStream是相当原始的类。他们可以单个或成组的读写字节，但仅此而已。要确定这些字节的含义(比如，他们是整数还是IEEE 754浮点数，或者是Unicode文本)，这就完全由程序员和代码来完成。不过，有一些极为常见的数据格式，如果在类库中提供这些数据格式的固定实现，会有很多好处。例如，许多作为网络协议一部分传递的整数是32位的big-endain整数。许多通过Web发送的文本是7位ASCII,8位Latin-1或多字节UTF-8。许多由FTP传输的文件存储为zip格式。Java提供了很多过滤器类，可以附加到原始流中，在原始字节和个中格式之间来回转换。这里有必要说一下过滤器流BufferedInputStream, CheckedInputStream, CipherInputStream, DataInputStream, DeflaterInputStream, DigestInputStream, InflaterInputStream, LineNumberInputStream, ProgressMonitorInputStream, PushbackInputStream过滤器有两个版本:过滤器流以及阅读器和书写器。过滤器流仍然主要讲原始数据作为字节处理，例如通过压缩数据或解释为二进制数字。阅读器和书写器处理多种编码文本的特殊情况，如UTF-8和ISO 8859-1。过滤器流以链的形式进行组织，如下图所示。链中的每个环节都接收一个过滤器或流的数据，并把数据传递给链中的下一个环节。在这个示例中，从本地网络结构结构到一个压缩的加密文本文件，在这里本地代码将这个文件表示为TelnetInputStream(TelnetInputStream没有相关文档提供说明)。通过一个BufferedInputStream缓冲这个数据来加速整个过程。由一个CipherInputStream将数据解密。再由一个GZIPInputStream解压解密后的数据。一个InputStreamReader将解压后的数据转换为Unicode文本。最后，文本由应用程序读取并处理。每个过滤器输出流都有与java.io.OutputStream相同的write(),close()和flush()方法。每个过滤器输入流都有与java.io.InputStream相同的read(),close()和available()方法。有些情况下，如BufferedInputStream和BufferedOutputStream,过滤器可能只有这些方法。过滤纯粹是内部操作，不提供任何新的公共接口。不过，在大多数情况下，过滤器流还增加一些公共方法提供额外的作用。有时除了平常的read()和write()方法之外，还需要使用这些方法，如PushbackInputStream的unread()方法。另外一些情况下，它们几乎完全代替了最初的接口。例如PrintStream的write()方法就很少使用，而会使用它的print()和println()方法。将过滤器串链在一起过滤器通过其构造函数与流连接。例如，下面的代码段将缓冲文件data.txt的输入。首先，创建一个FileInputStream对象fin，为此将文件名作为参数传递给FileInputStram构造函数。然后，通过将fin作为参数传递给BufferedInputStream构造函数来创建一个BufferendInputStream对象bin:12FileInputStream fin=new FileInputStream(&quot;data.txt&quot;);BufferedInputStream bin=new BufferedInputStream(fin);在此之后，从文件data.txt中读取文件可能会同时使用fin和bin的read()方法。不过，如果很合调用连接到同一和源的不同流，这可能睡违反过滤流的一些隐含的约定。大多数情况下，应当只使用链中最后一个过滤器进行实际的读写。想要在编写代码时尽量不带入这个中bug,可以有意的重写低层输入流的引用。例如：12InputStream in =new FileInputStream(&quot;data.txt&quot;);in=new BufferedInputStream(in);执行这两行代码后，再没有任何方法能够访问低层文件输入流了，所以也就不会不小心读取这个流而破坏缓冲区。这个实例之所以可运行，原因是既然BufferedInputStream可以多态的用作InputStream的实例，所以没有必要区分InputStream和BufferedInputStream的方法。如果必须使用超类中没有声明的过滤器流的其他方法，可以直接在一个流中构建另一个流，例如：1DateOutputStream dout=new DataOutputStream(new BufferesOutputStream(new FileOutputStream(&quot;data.txt&quot;)));虽然这些语句有些长，不过很容易将这条语句分成多行，像这样：1234DataOutputStream dout =new DataOutputStream（ new BufferedOutputStream( new FileOutputStream(&quot;data.txt&quot;) ));这种连接时永久的，过滤器无法与流断开连接。有时可能会需要使用链找那个多个过滤器的方法。例如，在读取Unicode文本文件时，可能希望读取前3个字节的字节顺序标记，来判断文件时用big-endian UCS-2,little-endian USC-2，还是UTF-8编码的。然后选择读取服务器发送的首部，找到Content-encoding(内容编码)，然后用这个内容编码方式选取正确的Reader(阅读器)过滤器来读取响应主体。或者可能希望通过网络连接使用DataOutputStream发送浮点数，然后从DataOutputStream所连接的DigestOutputStream中获取一个MessageDigest。在所有这些情况下，都小保存和使用各低层流的引用。不过，除了链中最后一个过滤器之外，无论如何你都不应该从其他过滤器读取数据，或想其写入任何内容。缓冲流BufferedOutputStream类将写入的数据存储在缓冲区中(一个名为buff的保护字节数组字段)，直到缓冲区满或刷新输出流。然后它将数据一次全部写入低层输出流。如果一次写入多字节，这与多次写入少量字节(但字节加起来是一样的)相比，前者往往要快得多。对于网络连接尤其是这样，因为每个TCP片或UDP包都有一定的开销，一般大约为40字节。这里就假设为40字节，这意味着，如果一次发送1字节，则实际发送40+1=41字节。那么发送1K数据，要发送1K次，则实际上需要通过线缆发送41K，而一次全部发送只需要发送1K+40字节。不过大多数网卡和TCP实现自身都是提供了一定程度的缓冲，所以实际的数量不会那么夸张。尽管如此，缓冲网络输出通常会带来巨大的性能提升。BufferedInputStream类也有一个缓冲区的保护字节数组，名为buf。当调用某个流的read()方法时，它会首先尝试从缓冲区获得请求的数据。只有当缓冲区没有数据时，流才从底层的源中读取数据。这时，它会从源中读取尽可能多的数据存入缓冲区，而不管是否马上需要所有这些数据。不会立即用到的数据可以在以后调用read()时读取。当文本从本地磁盘中读取文件时，从底层流中读取几百字节的数据与读取1字节数据几乎一样快。因此，缓冲和显著提高性能。对于网络连接，这种效果则不甚明显，在这里瓶颈往往是网络传送数据的速度，而不是网络结构向程序传送数据的速度或程序运行的速度。尽管如此，缓冲输入没有什么坏处，随着网络的速度加快会变得更为重要。BufferedInputStream有两个构造函数，BufferedOutputStream也一样：方法描述BufferedInputStream(InputStream in)创建一个 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。BufferedInputStream(InputStream in, int size)创建具有指定缓冲区大小的 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。方法描述BufferedOutputStream(OutputStream out)创建一个新的缓冲输出流，以将数据写入指定的底层输出流。BufferedOutputStream(OutputStream out, int size)创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。第一个参数是底层流，可以从中读取未缓冲的数据，或向其写入缓冲的数据。如果给出第二个参数，它会指定缓冲区的字节数。否则，输入流的缓冲区大小设置为8192字节。输入流的缓冲区大小也设置为8192字节。缓冲区的理想大小取决于所缓冲的流时何种类型。对于网络连接，你希望比一般的包大小更大一些。不过，这很难预测，根据本地网络连接和协议不同也有所区别。更快，更大带宽的网络倾向于使用更大的包，不过TCP片通常不会大于1K字节。方法描述int read()参见 InputStream 的 read 方法的常规协定。int read(byte[] b, int off, int len)从此字节输入流中给定偏移量处开始将各字节读取到指定的 byte 数组中。int available()返回可以从此输入流读取（或跳过）、且不受此输入流接下来的方法调用阻塞的估计字节数。void close()关闭此输入流并释放与该流关联的所有系统资源。long skip(long n)参见 InputStream 的 skip 方法的常规协定。boolean markSupported()测试此输入流是否支持 mark 和 reset 方法。void mark(int readlimit)参见 InputStream 的 mark 方法的常规协定。void reset()参见 InputStream 的 reset 方法的常规协定。从类 java.io.FilterInputStream 继承的方法 (没有覆盖)public int read(byte[] b) throws IOExceptionBufferedInputStream没有声明自己的任何新方法,它只覆盖了InputStream的方法。它折尺标记和重置。两个多字节read(byte[] b)和read(byte[] b, int off, int len)方法尝试根据需要多次从底层输入流中读取数据，从而完全填充指定的数组或子数组。只有当数组或子数组完全填满，到达流的结尾或低层流阻塞而无法进一步读取时，这两个read()方法才返回。而大多数输入流(如FileInputStream等)都不这样做。它们在返回前只从低层流或数据源中读取一次。BufferedOutputStream也没有声明自己的任何新方法。调用它的方法与任何输出流的方法是一样的。区别在于，每次写入会把数据放在缓冲区中，而不是直接放入底层的输出流。因此，需要发送数据时应当刷新输出流，这一点非常重要。PrintStreamPrintStream类是大多数程序员都会遇到的第一个过滤器输出流，因为System.out就是一个PrintStream。不过还可以使用下面两个构造函数将其他输出流串链到打印流:方法描述PrintStream(OutputStream out)创建新的打印流。PrintStream(OutputStream out, boolean autoFlush)创建新的打印流。默认情况下，打印流应当显示刷新输出。不过，如果autoFlush参数为true,那么每次写入1字节数组或换行，或者调用println()方法时，都会刷新输出流。除了平常的write()，flsuh()和close()方法，PrintStream还有9个重载的print()方法和10个重载的println()方法。每个print()方法都当参数以可预见的方式转换为一个字符串，再用默认的编码方式把每个字符串写入低层输出流。println()方法也完成相同的操作，但会在所写的行尾追加一个与平台有关的行分隔符。在UNIX(包括Mac OS)下是换行符(\n)。在Windows下是回车/换行符(\r\n)。警告: PrintStream是有害的，网络程序员应当向躲避瘟疫一样避开它!第一个问题是println()的输出是与平台相关的，取决于运行代码的机器各行有时用换行符分割，有时则用回车符或者回车/换行符来分割。写入控制台时不会产生问题，但对于编写必须遵循明确协议的网络客户端和服务而言，这却是个灾难。大多数网络协议(如HTTP和Gnutela)明确指定行应当以回车/换行符结束。而使用println()写出的程序可能在Windows上正常工作，但在UNIX和Mac上无法工作。虽然许多服务和客户端能够”宽容”地接收而器能处理不正确的行结束符，但偶尔也有例外。第二个问题是Printstream假定使用所在平台的默认编码方式。不过,这种编码方式可能不是服务器或客户端所期望的。例如，以接收XML文件的Web浏览器希望文件已UTF-8或UTF16方式编码，除非服务器另行要求。不过，一个使用PrintStream的Web服务器可能会从一个没做本地化环境的Windows胸发送CP1252编码的文件，或者从日本本地化环境的系统发送SJIS编码的文件，而不管客户端是否期望或理解这些编码方式。PrintStream不提供任何改变默认编码的机制。这个问题可以通过使用相关的PrintWriter类来修补。但是其他问题依旧。第三个问题是PrintStream吞掉了所有的异常。这使得PrintSteam很适合作为教科书程序，比如HelloWrold,因为你要讲授简单的控制台输出，不用让学生先去学习异常处理的所有闲逛的知识。不过，网络连接不如控制台那么可靠。连接经常会由于网络拥塞，电话公司的错误，远程系统崩溃，以及很多其他原因而断开。网络程序必须准备处理数据流中意外的中断。要做到这一点，就需要使用异常处理。不过，PrintStream捕获了低层输出流抛出的所有异常。注意PrintStream中重写过的标准的OutputStream方法的声明没有平常的throws IOExceprion:方法描述public void write(int b)将指定的字节写入此流。public void write(byte[] buf, int off, int len)将 len 字节从指定的初始偏移量为 off 的 byte 数组写入此流。public void close()关闭流。public void flush()刷新该流的缓冲。实际上，PrintStream要依靠一个过时的不充分的错误标志。如果低层流抛出一个异常，就是设置这个内部错误标志。要由程序员使用checkError()方法来检查这个标志的值：public boolean checkError()要对PrintStream完成任何错误检查，代码必须显示的检查每一个调用。此外，异动单出现错误，就没有办法重置这个标志再进行进一步的错误检测，也就没有关于这个错误的更多信息。简而言之，PrintStream提供的错误通知对于不可靠的网络连接来说还远远不够。数据流DataInputStream和DataOutputStream类提供了一些方法，可用二进制格式读写Java的基本数据类型和字符串。所用的二进制格式主要用于在两个不同的Java程序之间交换数据(可能通过网络连接，数据文件，管道或者其他中间介质)。输出流写入什么数据，输入流就能读取什么数据。不过，这碰巧与大多数交换二进制的Internet协议所用的格式相同。例如，事件协议使用32位的IEEE 754浮点数，类似于Java的float数据类型(这是有关联的，而不只是巧合。Java和大多数网络协议都是由UNIX程序员设计的，因此都倾向于使用大多数UNIX系统中的常见格式)。然而，这并不适用与所有网络协议，所以请检查你使用的协议的具体细节。例如,网络时间协议(NTP)会把时间表示为64位无符号定点数，前32位是整数部分，后32位是小数部分。这与所有常见编程语言中的基本类型都不相同，不过处理起来相当简单，至少对NTP必须使用这种格式。DataOutputStream类提供了下面11中方法，可以写入特定的Java数据类型:方法描述void writeBoolean(boolean v)将一个 boolean 值以 1-byte 值形式写入基础输出流。void writeByte(int v)将一个 byte 值以 1-byte 值形式写出到基础输出流中。void writeBytes(String s)将字符串按字节顺序写出到基础输出流中。void writeShort(int v)将一个 short 值以 2-byte 值形式写入基础输出流中，先写入高字节。void writeInt(int v)将一个 int 值以 4-byte 值形式写入基础输出流中，先写入高字节。void writeLong(long v)将一个 long 值以 8-byte 值形式写入基础输出流中，先写入高字节。void writeFloat(float v)使用 Float 类中的 floatToIntBits 方法将 float 参数转换为一个 int 值，然后将该 int 值以 4-byte 值形式写入基础输出流中，先写入高字节。void writeDouble(double v)使用 Double 类中的 doubleToLongBits 方法将 double 参数转换为一个 long 值，然后将该 long 值以 8-byte 值形式写入基础输出流中，先写入高字节。void writeChar(int v)将一个 char 值以 2-byte 值形式写入基础输出流中，先写入高字节。void writeChars(String s)将字符串按字符顺序写入基础输出流。void writeUTF(String str)以与机器无关方式使用 UTF-8 修改版编码将一个字符串写入基础输出流。网络字节顺序字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序(一个字节的数据当然就无需谈顺序的问题了)。其实大部分人在实际的开发中都很少会直接和字节序打交道。唯有在跨平台以及网络程序中字节序才是一个应该被考虑的问题。在所有的介绍字节序的文章中都会提到字节序分为两类：Big-Endian和Little-Endian，引用标准的Big-Endian和Little-Endian的定义如下：a) Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。b)Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。c) 网络字节序：TCP/IP各层协议将字节序定义为Big-Endian，因此TCP/IP协议中使用的字节序通常称之为网络字节序。little-endian是x86系列CPU的数据存储方式，即将低序的部分存储在前面。而big-endian是将高序部分存储在前面。例子例如，要存储0xF432，little-endian将以32F4存储，而使用big-endian与此相反，将存储为F432所有数据都以big-endian格式写入。整数用尽可能少的字节写为2进制的补码。因此，byte会写为1字节，short写为2字节，int写为4字节，long写为8字节。浮点数和双精度分别写为4字节和8字节的IEEE 754格式。布尔数写为1字节。0表示false,1表示true。字符写为两个无符号字节。最后三个方法有些棘手，writeChars()方法只是对String参数迭代(循环)处理,将各个字符安顺序写为一个2字节的big-endain Unicode字符(确切的讲是UTF-16码点),writeBytes()犯法迭代处理String参数，但只写入每个字符的低字节。因此，如果字符串中包换有Latin-1字符集以外的字符，其中的信息将会丢失。对于一些指定了ASCII编码的网络协议来说，这个方法或许有用，但多数情况下都应当避免使用。writeChars和writeBytes都不会对输出流的字符串的长度编码。因此，你无法真正区分原始字符和作为字符串一部分的字符。writeUTF()方法则包含了字符串的长度。它将字符串本社用Unicode UTF-8编码的一个变体进行编码，由于这个变体的编码与大多数非Java软件有点不兼容，所以应当只用于与其他使用DataInputStream读取字符串的Java程序进行数据交换。为了与所有其他软件交换UTF-8文本,应当使用有适当编码的InputStreamReader(如果Sun当初把这个方法的以及相应的读取方法命名为writeString()和readString(),而不是writeUTF()和readUTF(),那就不会产生任何混淆了)。除了这些写入二进制数字和字符串的方法，DataOutputStream当然还有OutputStream类平常的write(),flush()和close()方法。重写或继承与父类的方法：方法描述void write(int b)将指定字节（参数 b 的八个低位）写入基础输出流。void write(byte[] b, int off, int len)将指定 byte 数组中从偏移量 off 开始的 len 个字节写入基础输出流。void write(byte[] b)写一个数组，继承于父类void flush()清空此数据输出流。public void close() throws IOException关闭此输出流并释放与此流有关的所有系统资源。DataInputStream和DataOutputStream是互补的。DataOutputStream协议一种格式，DataInputStream都可以读取。此外DateInputSteam还有通常的read()，available(),skip()和close()方法，以及读取整个字节数组和文本行的方法。有9个读取而二进制数据的方法，这些方法对应于DataOutputStream的11个方法(writeBytes()或writeChars()没有相应的读取方法，这要通过一次读取1字节和字符来处理):方法描述boolean readBoolean()参见 DataInput 的 readBoolean 方法的常规协定。byte readByte()参见 DataInput 的 readByte 方法的常规协定。short readShort()参见 DataInput 的 readShort 方法的常规协定。int readInt()参见 DataInput 的 readInt 方法的常规协定。long readLong()参见 DataInput 的 readLong 方法的常规协定。float readFloat()参见 DataInput 的 readFloat 方法的常规协定。double readDouble()参见 DataInput 的 readDouble 方法的常规协定。char readChar()参见 DataInput 的 readChar 方法的常规协定。String readUTF()参见 DataInput 的 readUTF 方法的常规协定。此外，DataInputStream提供了两个方法，可以读取无符号字节和无法好短整数，并返回等价的int。Java没有这些数据类型，但在读完C程序写入的二进制数据时会遇到：方法描述int readUnsignedByte()参见 DataInput 的 readUnsignedByte 方法的常规协定。int readUnsignedShort()参见 DataInput 的 readUnsignedShort 方法的常规协定。DataInputStream有两个通常的多字节read()方法，可以把数据读入一个数组或子数组，并返回读取的字节数。它还有两个readFully()方法，会重复的从底层输入流像一个数组读取数据，知道读取了所有请求的字节数为止。如果不能读取到足够的数据，就会抛出IOException异常。如果你能提前知道要读取多少字节，使用这些方法尤其有用。例如如果你已经从HTTP首部读取了Content-lenght(内容长度)字段，就能知道有多少字节的数据，这种情况下就可以很好的利用这些方法：方法描述int read(byte[] b)从包含的输入流中读取一定数量的字节，并将它们存储到缓冲区数组 b 中。int read(byte[] b, int off, int len)从包含的输入流中将最多 len 个字节读入一个 byte 数组中。void readFully(byte[] b)参见 DataInput 的 readFully 方法的常规协定。void readFully(byte[] b, int off, int len)参见 DataInput 的 readFully 方法的常规协定。最后,DataInputStream还提供了流行的readLine()方法,它读取用行结束符分隔的一行，文本，并返回一个字符串:方法描述String readLine()已过时。 该方法无法将字节正确转换为字符。从 JDK 1.1 开始，读取文本行的首选方法是使用 BufferedReader.readLine() 方法。不过，任何情况下都不要使用这个方法，不仅是因为它已经被废弃，而且它还有bug。之所以将这个方法废弃，是因为你在大多数情况下它不能正确地将非ASCII字符转换为字节。这个任务现在有BufferedReader类的readLine()方法来处理。不过，这两个方法都存在一个隐含的bug:它们并不总能把一个回车识别为行结束。实际上，readLine()只能识别换行或回车/换行对。如果是换行，则抛出这个回车和换行。把这一行作为String返回。如果不是换行，就抛掉这个回车，把这一行作为String返回，刚读取的这个额外的字符会成为下一行的一部分。不过，如果回车是流的最后一个字符，那么readLine()会挂起，等待最后一个字符的出现，但这个字符永远也不会出现。这个问题在读取文件时，不太明显，因为几乎可以肯定会有下一个字符:如果没有别的字符，那么会由-1表示流结束。不过，在持久的网络连接中(如用于FTP和新型HTTP的连接),服务器或客户端可能只是在最后一个字符之后停止发送数据，并等待响应，二不会真正关闭连接。如果幸运，最终可能某一端的连接超时，你将得到一个IOEception异常，不过这可能至少要花费几分钟，而且会使你丢失流的最后一行数据，如果不够幸运，程序将永远挂起。阅读器和书写器许多程序员在编码时有一个坏习惯，好像所有文本都是ASCII,或者至少是该平台的内置编码方式。虽然有些比较老，较简单的网络协议(如daytime,quete of the day和chargen)确定指定文本采用ASCII编码方式,如K0I8-R西里尔文，Big-5中文和土耳其语使用的是ISO8859-9。Java的内置字符集是Unicode的UTF-16编码。当编码不再是ASCII时，如果假定字节和字符实质上是一样的，这也会出现问题。因此，对应输入和输出流类层次体系，Java提供了一个基本上完整的镜像，用来处理字符而不是字节。这个镜像体系中，两个抽象超类定义了读/写字符的基本API，java.io.Reader类指定读取字符的API。java.io.Writer指定写字符的API。对应输入和输出流使用字节的地方，阅读器和书写器会使用Unicode字符。Reader和Writer的具体子类允许读取特定的源和写入特定的目标。过滤器阅读器和书写器可以附加在其他阅读器或书写器上，以提供额外的服务或接口。Reader和Writer最重要的具体子类是InputStreamReader和OutputStreamWriter类。InputStreamReader类包含一个底层输入流，可以从中读取原始字节。它根据指定的编码方式，将这些字节转换为Unicode字符。OutputStreamWriter从运行的程序中接收Unicode字符。然后使用指定的编码方式将这些字符转换为字节，再将这些字节写入低层输出流中。除了这两个类，java.io包还提供了几个原始阅读器和书写器类,它们可以读取字符而不需要一个地城输入流，这些类包括：FileReaderFileWriterStringReaderStringWriterCharArrayReaderCharArrayWriter以上所列的两个类可以处理文件，后四个由Java内部使用，所以在网络编程中不太常用。不过，除了构造函数不同，这些类与其他阅读器和书写器类一样，都有相同的公共接口。书写器Writer类是java.io.OutputStream类的映射。它是一个抽象类，有两个保护类型的构造函数，与OutputStream类似，Writer类从不直接使用;相反，会通过它的某个子类以多态方式使用。它有5个write()方法，另外还有flush()和close()方法：方法描述protected Writer()创建一个新的字符流 writer，其关键部分将同步 writer 自身。protected Writer(Object lock)创建一个新的字符流 writer，其关键部分将同步给定的对象。方法描述void write(int c)写入单个字符。void write(char[] cbuf)写入字符数组。abstract void write(char[] cbuf, int off, int len)写入字符数组的某一部分。void write(String str)写入字符串。void write(String str, int off, int len)写入字符串的某一部分。Writer append(char c)将指定字符添加到此 writer。Writer append(CharSequence csq)将指定字符序列添加到此 writer。Writer append(CharSequence csq, int start, int end)将指定字符序列的子序列添加到此 writer.Appendable。abstract void close()关闭此流，但要先刷新它。abstract void flush()刷新该流的缓冲。write(char[] text,int offset,int length)方法是基础方法，其他四个write()都是根据它实现的。子类至少要覆盖这个方法以及flush()和close()，但是为了提供更搞笑的实现方法，大多数子类还覆盖了其他一些write()方法。例如，给定一个Writer对象w,可以这样写入字符串“Network”12char[] network=&#123;&apos;N&apos;,&apos;e&apos;,&apos;t&apos;,&apos;w&apos;,&apos;o&apos;,&apos;r&apos;,&apos;k&apos;&#125;;w.write(network,0,network.length);也可以用其他write()方法完成同样的任务:123w.write(network);for(int i=0;i&lt;network.length;i++) w.write(network[i]);或者：1w.write(&quot;Network&quot;);或者：1w.write(&quot;Network&quot;,0,7);所有这些例子表述都是同样的事情，只不过方式有所不同。在任何给定情况下，选择使用哪个方法主要考虑是否方便，以及你有什么偏好。不过，这些代码写入多字节以及写入哪些字节，则取决于w使用的编码方式。如果使用big-endian UTF-16编码，那么它将依次写入下面14字节(以16进制显示):100 4E 00 65 00 74 00 77 00 6F 00 72 00 8B另一方面，如果w使用little-endain UTF-16，则写入下面14字节序列：14E 00 65 00 74 00 77 00 6f 00 72 00 8B 00如果w使用Latin-1,UTF-8或MacRoman,则写入下面7字节的序列:14E 65 74 77 6F 72 6B其他编码方式可能写入不同的字节序列。具体的输出取决于编码方式。书写器可以缓冲，有可能直接串链到BufferedWriter,也有可能间接链入(因为其低层输出流时缓冲的)。为了强制将一个写入提前交给输出介质，要调用flush()方法：1w.flush();close()方法的行为与OutputStream的close()方法类似。close()刷新输出书写器，然后关闭低层输出流，并释放与之关联的所有资源:1public absctract void close() throws IOException在书写器关闭之后，进一步的写入会抛出IOException异常。OutputStreamWrterOutputStreamWriter是Writer的最重要的具体子类。OutputStreamWriter会从Java程序接收字符。它根据指定的编码方式将这些字符转换为字节，并写入低层输出流。它的构造函数指定了要写入的输出流和使用的编码方式：1public OutputStreamWriter(OutputStream out,String encoding) throws UnsupportedEncodingExceptionJDK中包括一个Sun的native2ascii工具，其相关文档中列出了所有合法的编码方式，如果没有指定编码方式，就使用平台的默认编码方式。2013年，Mac上默认编码方式是UTF-8,Linux上也大多如此。不过，在Linux上，如果本地操作系统配置为默认使用另外某个字符集，Linux上的默认编码方式可能有变化。在Windows上，默认编码方式会根据国家和配置而改变，但是在美国，Windows上默认的编码方式往往是Windows-1252，又叫做CP1252。默认字符集可能会在出乎意料的时候导致意外的问题。如果能明确地指定字符集，这往往比让Java为你选择一个字符集要好。除了构造函数，OutputStramWriter只有通常的Writer方法(这些方法与所有Writer类中的用法相同)，还有一个返回对象编码方式的方法：1public String getEncoding()阅读器Reader类是java.io.InputStream类的镜像。它是以抽象类，有两个保护的构造函数。与InputStream和Writer类似，Reader类从不直接使用，只通过其子类来使用。他有三个read()方法，另外还有skip()，close()，ready()，mark()，reset()和markSupported()方法方法描述protected Reader()创建一个新的字符流 reader，其重要部分将同步其自身的 reader。protected Reader(Object lock)创建一个新的字符流 reader，其重要部分将同步给定的对象。方法描述void reset()重置该流。int read()读取单个字符。int read(char[] cbuf)将字符读入数组。abstract int read(char[] cbuf, int offset, int len)将字符读入数组的某一部分。int read(CharBuffer target)试图将字符读入指定的字符缓冲区。boolean markSupported()判断此流是否支持 mark() 操作。void mark(int readAheadLimit)标记流中的当前位置。long skip(long n)跳过字符。boolean ready()判断是否准备读取此流。abstract void close()关闭该流并释放与之关联的所有资源。read(char[] cbuf, int off, int len)方法是基本方法，其他两个read()方法都是根据它实现的。子类必须至少覆盖这个方法以及close()方法，但是为了提供更搞笑的实现，大多数子类还会覆盖其他一些read()方法。由于与对应的InputStream类似，大多数方法都很容易理解。read()方法将一个Unicode字符作为一个int返回。可以是0到65535之间的一个值,或者在流结束时返回-1(理论上讲，它会返回一个UTF-16码点,不过这基于等同于Unicode字符)。read(char[] cbuf)方法尝试使用字符填充cbuf,并返回实际读取的字节数，或者在流结束时返回-1。read(char[] cbuf, int offset, int length)方法尝试将length个字符读入text的子数组中(从offset开始持续读入length个字符)。它也会返回实际读取的字符数，或者在流结束时返回-1。skip(long n)方法跳过n个字符。mark()和reset()方法允许一些阅读器重置到字符序列中做标记的位置。markSupported()方法会告知阅读器是否支持标记和重置。close()方法会关闭阅读器和所有底层输入流，如果试图进一步读取则会抛出IOException异常。尽管与InputStream非常相似，但也有所例外: Reader类有一个ready()方法，它与InputStream的available()的用途相同，但语义却不尽相同，尽管都涉及字节到字符转换。available()返回一个int,指定可无阻赛的最少读取多少字节。但ready()犯法只返回一个boolean,指示阅读器是否可以无阻赛的读取。问题在于，有些字符编码仿方式(如UTF-8)对于不同的字符会使用不同数量的字节。因此在实际从缓冲区读取之前，很难说有多好个字符正在网络或文件系统的缓冲区中等待。InputStreamReader是Reader的最重要的具体子类。InputStreamReader从底层输入流(FileInputStream或TelnetInputStream)中读取字节。它根据指定的编码方式将这些字节转换为字符。并返回这些字符。构造函数指定要读取的输入流所用的编码方式:123public InputStreamReader(InputStream in)public InputStreamReader(InputStream in,String encoding) throws UnsupportedEncodingException如果没有指定编码方式，就使用平台的默认编码方式。如果指定了一个未知的编码方式，会抛出UnsupportEncodingException异常。例如，下面的方法将读取一个输入流，使用MacCyrillic编码方式将其全部转换为一个Unicode字符串：1234567891011public static String getMacCyrillicString(InputStream in) throws IOExceptionn &#123; InputStreamReader r=new InputStreamReader(in,&quot;MacCyrillic&quot;); StringBuilder sb=new StringBuilder(); int c; while( (c=r.read()!=-1) ) sb.append((char) c); return sb.toString();&#125;过滤器阅读器和书写器InputStreamReader和OutputStreamWriter类就相当于输入和输出流的装饰器，把面向字节的接口改为面向字符的接口。完场之后，就可以将其他面向字符的过滤器放在用java.io.FilterReader和java.io.FilterWriter类的阅读器或书写器上面。与过滤器流一样，有很多子类可以完成特定的过滤工作，包括:BufferedReaderBufferedWriterLineNumberRederPushbackReaderPrintWriterBufferedReader和BufferedWriter类是基于字符的，而BufferedInputStream和BufferedOutputStream类是面向字节的BufferedInputStream和BufferedOutputStream使用一个内部字节数组作为缓冲区，响应的，BufferedReader和BufferedWriter使用一个内部字符数组作为缓冲区。当程序从BufferedReader读取时，文本会从缓冲区得到，而不是直接同低层输入流或其他文本源读取。当缓冲区清空时，BufferedReader将用尽可能多的文本再次填充，尽管这些文本不是全部都立即需要，这样可以使以后的读取速度更快。当程序写入一个BufferedWriter时，文本被放置在缓冲区中。只有当缓冲区填满或者当书写器显示刷新输出时，文本才会被一道低层输出流或其他目标，这样使得写入也要快得多。如果没有设置大小，则默认使用的大小为8192字符：1234public BufferedReader(Reader in,int bufferSize)public BufferedReader(Reader in)public BufferedWriter(Writer out)public BufferedWriter(Writer out,int bufferSize)例如，前面的getMacCyrillicString()示例效率不太高，因为它每次只读取一个字符。由于MacCyrillic是一个单字节的字符集，所以也是每次读取1字节。不过,通常将一个BufferedReader串链到InputStreamReader，会是它运行得更快，如下所示:public static String getMacCyrillicString(InputStream in)throws IOException{Reader r=new InputStreamReader(in,”MacCyrillic”);r=new BufferedReader(r,1024);StringBuider sb=new StringBuilder();int c;while((c=r.read())!=-1)sb.append((char)c);return sb.toString(); }要让这个方法进行缓冲，只需要增加另外一行代码。算法的其他部分都不用改变，因为要用到的InputStreamReader方法只是Reader超类中声明的read()和close()方法，所有的Reader子类都有着两个方法，BufferedReader也不例外。BufferedReader类还有一个readeLine()方法，它读取一行文本，并作为一个字符串返回:1public String readLine() throws IOException这个方法可以替代DataInputStream中已废弃的readerLine()方法，它与该方法的行为基本相同。主要区别在于，通过将BufferedReader串链到InputStreamReader,你可以采用正确的字符集进读取行，而不是采用平台的默认编码方式。这个BufferedWriter()类增加了一个其超类所没有的新的方法，名为newLine()，也用于写入一行:1public void newLine() throws IOException这个方法向输出插入一个与平台有关的行分隔符字符串。line.separator系统属性会确定这个字符串是什么:在UNIX和Mac OS X可能是换行”\n“,在Windows下是回车/换行对。由于网络协议一般会指定所需的行结束符，所以网络编程中不要使用这个方法。而是应当显示的下如协议所需的行结束符。大多数情况下，所需的结束符都是回车/换行对(“\r\n”)PrintWriterPrintWriter类用于取代Java 1.0的PrintStream类，它能正确的处理多字节字符集和国际化文本。Sun最初计划废弃PrintStream而支持PrintWriter，但是当它意识到这样做会使太多现有的代码失效(尤其是依赖于System.out的代码)，就放弃了这种想法。尽管如此，新编写的代码还是应当使用PrintWriter而不是PrintStream。除了构造函数，PrintWriter类也有与PrintStream几乎相同的方法集。包括:方法描述PrintWriter(File file)使用指定文件创建不具有自动行刷新的新 PrintWriter。PrintWriter(File file, String csn)创建具有指定文件和字符集且不带自动刷行新的新 PrintWriter。PrintWriter(OutputStream out)根据现有的 OutputStream 创建不带自动行刷新的新 PrintWriter。PrintWriter(OutputStream out, boolean autoFlush)通过现有的 OutputStream 创建新的 PrintWriter。PrintWriter(String fileName)创建具有指定文件名称且不带自动行刷新的新 PrintWriter。PrintWriter(String fileName, String csn)创建具有指定文件名称和字符集且不带自动行刷新的新 PrintWriter。PrintWriter(Writer out)创建不带自动行刷新的新 PrintWriter。PrintWriter(Writer out, boolean autoFlush)创建新 PrintWriter。方法描述PrintWriter append(char c)将指定字符添加到此 writer。PrintWriter append(CharSequence csq)将指定的字符序列添加到此 writer。PrintWriter append(CharSequence csq, int start, int end)将指定字符序列的子序列添加到此 writer。void close()关闭该流并释放与之关联的所有系统资源。void flush()刷新该流的缓冲。boolean checkError()如果流没有关闭，则刷新流且检查其错误状态。protected void clearError()清除此流的错误状态。protected void setError()指示已发生错误。void write(char[] buf)写入字符数组。void write(char[] buf, int off, int len)写入字符数组的某一部分。void write(int c)写入单个字符。void write(String s)写入字符串。void write(String s, int off, int len)写入字符串的某一部分。PrintWriter format(Locale l, String format, Object... args)使用指定格式字符串和参数将一个格式化字符串写入此 writer 中。PrintWriter format(String format, Object... args)使用指定格式字符串和参数将一个格式化字符串写入此 writer 中。void print(boolean b)打印 boolean 值。void print(char c)打印字符。void print(char[] s)打印字符数组。void print(double d)打印 double 精度浮点数。void print(float f)打印一个浮点数。void print(int i)打印整数。void print(long l)打印 long 整数。void print(Object obj)打印对象。void print(String s)打印字符串。PrintWriter printf(Locale l, String format, Object... args)使用指定格式字符串和参数将格式化的字符串写入此 writer 的便捷方法。PrintWriter printf(String format, Object... args)使用指定格式字符串和参数将格式化的字符串写入此 writer 的便捷方法。void println()通过写入行分隔符字符串终止当前行。void println(boolean x)打印 boolean 值，然后终止该行。void println(char x)打印字符，然后终止该行。void println(char[] x)打印字符数组，然后终止该行。void println(double x)打印双精度浮点数，然后终止该行。void println(float x)打印浮点数，然后终止该行。void println(int x)打印整数，然后终止该行。void println(long x)打印 long 整数，然后终止该行。void println(Object x)打印 Object，然后终止该行。void println(String x)打印 String，然后终止该行。这些方法的行为大多与PrintStream中相同。只有4个write()方法有所例外，他们写入字符而不是字节。此外，如果低层的书写器能够正确地处理字符集转换，那么PrintWriter的所有方法也能处理这种转换。这是对非国际化的PrintStream类的改进，但对弈网络编程来说，仍然不太合适。很遗憾，PrintWriter也存在困扰PrintStream类的平台依赖性和错误检查报告信息量小的问题。提示:本章快速的浏览了java.io包，涵盖了编写网络程序所需要的最起码的知识。更详细的介绍及更多的实例请查阅这个系列中我的另一本数《Java I/O》(O’Reilly出版)。好的，一定看看。本文链接: java网络编程第4版 第2章 流]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[BufferedInputStream读数组方法和FileInputStream读数组方法的区别：]]></title>
    <url>%2Fblog%2Fd4b540e%2F</url>
    <content type="text"><![CDATA[BufferedInputStream读数组方法，尽量读满整个数组，然后再返回，所以可能会多次读取，才返回。而FileInputStream的读数组方法只会读取一次，读到多少就返回多少。读取一次，就返回一次。不管数组有没有读满。本文链接: BufferedInputStream读数组方法和FileInputStream读数组方法的区别：]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux下删除目录及其子目录下某种类型文件]]></title>
    <url>%2Fblog%2Fd10c0440%2F</url>
    <content type="text"><![CDATA[原文：https://www.cnblogs.com/wyb628/p/7374372.htmlLinux下，如果想要删除目录及其子目录下某种类型文件，比如说所有的txt文件，则可以使用下面的命令：命令1find . -name "*.txt" -type f -print -exec rm -rf &#123;&#125; \;执行结果：12345$ find . -name "*.txt" -type f -print -exec rm -rf &#123;&#125; \;./a.txt./b.txt./Java/c.txt./其他/d.txt可以看到，当前目录下的a.txt,b.txt,子目录./Java/下的c.txt，子目录./其他/下的d.txt都被删除掉了。参数说明.: 表示在当前目录下1-name "*.txt"表示查找所有后缀为txt的文件1-type f表示文件类型为一般正规文件1-print表示将查询结果打印到屏幕上1-exec commandcommand为其他命令，-exec后可再接其他的命令来处理查找到的结果，上式中，{}表示”由find命令查找到的结果“，如上所示，find所查找到的结果放置到{}位置，-exec一直到”\;“是关键字，表示find额外命令的开始（-exec）到结束（\;），这中间的就是find命令的额外命令，上式中就是rm -rf本文链接: linux下删除目录及其子目录下某种类型文件]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git忽略eclipse中的Java工程]]></title>
    <url>%2Fblog%2F5e9f32fb%2F</url>
    <content type="text"><![CDATA[如果已经添加过了的话，.gitignore是无法过滤的，所以，先删掉版本库吧，好在不是什么重要的代码；删除本地版本库：git-bash中，在当前工程路径下输入1rm -rf .git强制删除版本库。删除远程仓库登录码云，github等，把上面的仓库删除掉。重新初始化本地版本库然后git-bash中输入1git init重新初始化本地版本库创建readme文件：1touch README.md添加readme.md文件1git add README.md新建.gitignore文件1touch .gitignore编辑过滤文件.gitignore输入下面的内容12/bin//.settings//bin/上面的意思是忽略工程bin目录下下的所有文件，注意这里的/指的是当前的工程路径，而不是系统的根路径。/.settings/表示忽略工程根路径下色.setings/目录中的所有文件输入git status查看可以看到还有几个文件我也不需要提交，在.gitignore加上这几个文件。12345/bin//.settings/.gitignore.classpath.project.gitignore表示忽略.gitignore文件自身.classpath表示忽略.classpath文件.project表示忽略.project文件然后在输入git status查看状态：可以看到其他文件都过滤掉了，只需要提交src中的源码就行了。添加所有的文件：1git add .查看状态：1git status可以看到现在只会添加src目录下的文件重新提交：1git commit -m “删除临时文件,重新提交”然后重新在码云上重新创建代码库，然后重新连接，重新提交即可。本文链接: Git忽略eclipse中的Java工程]]></content>
      <categories>
        <category>git教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 节点流和处理流]]></title>
    <url>%2Fblog%2F2e0f7472%2F</url>
    <content type="text"><![CDATA[节点流：可以从或向一个特定的地方（节点）读写数据。如FileReader.处理流：是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如BufferedReader.处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。JAVA常用的节点流： ##文 件: FileInputStream FileOutputStrean FileReader FileWriter 文件进行处理的节点流。字符串: StringReader StringWriter 对字符串进行处理的节点流。数 组: ByteArrayInputStream ByteArrayOutputStream CharArrayReader CharArrayWriter 对数组进行处理的节点流（对应的不再是文件，而是内存中的一个数组）。管 道: PipedInputStream PipedOutputStream PipedReaderPipedWriter对管道进行处理的节点流。常用处理流（关闭处理流使用关闭里面的节点流）缓冲流：BufferedInputStrean BufferedOutputStream BufferedReader BufferedWriter—增加缓冲功能，避免频繁读写硬盘。转换流：InputStreamReader OutputStreamReader实现字节流和字符流之间的转换。数据流 DataInputStream DataOutputStream 等-提供将基础数据类型写入到文件中，或者读取出来.流的关闭顺序一般情况下是：先打开的后关闭，后打开的先关闭另一种情况：看依赖关系，如果流a依赖流b，应该先关闭流a，再关闭流b。例如，处理流a依赖节点流b，应该先关闭处理流a，再关闭节点流b可以只关闭处理流，不用关闭节点流。处理流关闭的时候，会调用其处理的节点流的关闭方法。注意：如果将节点流关闭以后再关闭处理流，会抛出IO异常。如果关闭了处理流，在关闭与之相关的节点流，也可能出现IO异常。（hadoop编程文件流操作中遇到了。）总结：通常在IO的继承树中，继承自Filter开头的流或者转换流(InputStreamReader,OutputStreamReader)都是处理流，其他的都是节点流。本文链接: Java IO流 节点流和处理流]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 过滤器流]]></title>
    <url>%2Fblog%2Fc52cb4ad%2F</url>
    <content type="text"><![CDATA[文件流、字节数组流、管道流等等被称之为原始流，它们提供了对某类数据的输入输出功能。为了在流处理的过程中简化和标准化某一类功能，例如缓冲、压缩、加密、摘要等，Java提供了一系列过滤器类，每组类提供了一种典型的信息处理功能。根据操作对象是字节还是字符，过滤器又分为过滤器流和阅读器/书写器两类，举例如下：BufferedInputStream/BufferedOutputStream 提供了字节流的缓冲功能；BufferedReader/BufferedWriter 提供了字符流的缓冲功能；DataInputStream/DataOutputStream 用来将java的简单数据类型和字符串保存为二进制格式，并从二进制格式读取；ZipInputStream/ZipOutputStream 提供了字节流的zip格式压缩功能；GZIPInputStream/GZIPOutputStream 提供了字节流的gzip格式压缩功能；DigestInputStream/DigestOutputStream 提供了字节流的信息摘要功能；CipherInputStream/CipherOutputStream 提供了字节流的加密解密功能；过滤器使用规则过滤器可以和其他过滤器、原始流和阅读器/书写器链接使用，但要遵守以下规则：过滤器流可以置于原始流或其他过滤器流之上；阅读器/书写器可置于原始流、过滤器流或其他阅读器/书写器之上；过滤器流不能放在阅读器/书写器之后。本文链接: Java IO流 过滤器流]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java网络编程第4版 第1章 基本网络概念]]></title>
    <url>%2Fblog%2F40aaea03%2F</url>
    <content type="text"><![CDATA[网络是几乎可以实时相互发送和接收数据的计算机和其他设备的集合节点网络中的每台机器称为一个节点(node),主机具有玩呗功能的计算机节点称为主机(host)用节点指代网络的所有设备，主机指代通用的计算机节点分组交换网络所有的现代计算机网络都是分组交换网络，流经网络的数据被分割成一个个的小块数据，称为包(packet,也称为分组)协议协议(protocol)是定义计算机如何通信的一组明确的规则：包括地址格式，数据如何分包等例如超文本传输协议(Hypertext Transfer Protocol,HTTP)定义了Web浏览器如何与服务器通信网络的分层在理论生，每一层只与紧挨其上和其下的层对话。将网络分层，这样就可以修改甚至替换某一层的软件，只要层与层之间的接口保持不变，就不会影响到其他层。TCP/IP四层模型Web浏览器发送请求过程例如，当Web浏览器向Web服务器发送获取网页的请求是，浏览器实际上只与本地客户机上的传输层对话。传输层将请求分解为TCP片，向数据添加序列号和校验和，让后将请求(处理后的TCP片)传递给本地网际层。网际层根据本地网络所需的大小将各个TCP片分成IP数据报。并传递到主机物理网络层，以便通过线缆传输数据。主机物理网络层将数字编码为合适特定物理介质的模拟信号，将请求发送到线缆，目的地址的远程系统的主机网络层可以由此读取请求。远程系统的主机物理网络层将模拟信号解码为数字数据，将生成的IP数据包传递给服务器的网际层。网网际层简单的检查IP数据报是否被破坏，如果已经分片则重组数据，然后传递给服务器的传输层。服务器的传输层检查所有的数据是否都已经到达，对于丢失或破坏的部分，则要去重传(这个请求实际上将向下通过服务器的网际层，再通过服务器的主机网络层,回到客户端系统，然后再在客户端系统向上返回客户端的传输层，传输层在通过本地网际层和主机网络层重传前面丢失的数据。所有这些对于应用层是完全透明的)，一旦服务器的传输层接收到足够多的连续顺序数据报，就将这些连续的数据报重组写入一个流，由服务器应用层上运行的Web服务器读取。服务器响应这个请求，再通过服务器系统的各个分层发回响应。通过Internet进行传输并分发给Web客户端。可以猜到，实际的过程更为错综复杂。主机网络层是最为复杂的，特意地隐藏了很多细节。例如Internet发送的数据在最终目的地之前，完全有可能经过几个路由器以及相应的分层。可能需要从大气中的无线电波转换为铜线缆中的电子信号，在转换到光缆中的光脉冲，然后再反过来，从光脉冲转换到电子信号再到无线电波。不过，90%的情况下Java代码都将在应用层工作，只需要与传输层对话。其他10%的时间会在传输层处理，与应用层或网际层对话。主机网络层的复杂性对你是隐藏的，这是分层模型的关键。主机网络层在基于IP的Internet(Java唯一真正理解的网络)的标准参考模型中，网络中隐藏的部分数据主机网络层(host-to-work layer,也成链路层，数据链路层或网络接口层)主机网络层，定义了一个特定的网络接口(如以太网卡或WiFi天线)如何通过物理连接想本地网络或世界其他地方发送IP数据报Java从来都看不到物理层需要考虑网络层和物理层的主要与原因是性能网际层网际层(internet layer)这个是需要你考虑的第一层，在OSI模型中，网际层使用一个更一般的名字，称为网络层(network layer)。网络层协议定义了数据为和字节如何组织为更大的分组，称为包,还定义了寻址机制，不同计算机要按照这个寻址机制查找对方。忘记协议(IP)是世界上使用最广泛的网络层协议，也是java唯一理解的网络层协议。数据按包在网际层上传输，这些包称为数据包(datagram)。每个IPv4数据报包含一个长度为20到60个字节的首部，以及一个包含多大65515字节的有效载荷(payload)。实际上，大多数IPv4数据包都小得多，从几十个字节到大约8K字节不等。IPv6数据报包含一个更大的首部，数据可以多大4G字节。下图展示了各个部分再IPv4数据报是如何排列的，所有为和字节都采用big-endian方式，从左至右为最高位到最低位。除了路由和寻址，网际层的第二个作用是支持不同类型的主机网络层相互对话。Internet路由器会完成WiFi和Ethernet,Ethernet和DSL,DSL和光纤往返等协议之间的转换。如果没有网际层或类似的分层，则每个计算机只能与同一类网络上的其他计算进对话。网际层负责使用同构协议将异构网络相互连接。传输层原始数据报有一些特点。最显著的缺点是不能保证发送可靠，即使能传送也可能在传输中遭到破坏。首部校验和只能检测首部中的破坏情况，而不能检测数据部分。最后即使数据包能到达目的地儿为被破坏，也不一定会以发送时的顺讯到达。各个数据报可能经过不同路由从源到达目的地。如果数据报A在数据报B之前发送，这并不意味着数据报A会在数据报B之前到达。传输层(transport layer)负责确保各包以发送的顺序接收，并保证没有数据丢失或被破坏，如果丢包，传输层会要求发送方重传这个包。为了实现这个目标IP网络会给每个数据报添加一个附加首部，其中包含有更多信息。传输层上主要有两个协议，一个是传输控制协议(Transmission Control Protocol，TCP)，这是一个开销很高的协议，支持对丢失或破坏的数据进行重传，并按照发送时的顺序进行传送。第二个协议是用户数据报协议(User Dategram Protocol,UDP),它允许接收方法检测被破坏的包，但不保证这些包以正确的顺序传输(或者包有可能根本未传送)。但是UDP通常比TCP快。TCP称为可靠的协议；UDP是不可靠的协议。应用层向用户传送数据的层称为应用层(application layer)。它下面的三层共同定义了数据如何从一台计算机传输到另一台计算机。应用层确定了数据传输后的操作。例如应用层协议如HTTP(用于国际互联网)可以确保Web浏览器将图像显示为图片，而不是一长串数字。你的程序中有关网络的部分大多是在应用层花费时间。除了用于Web的HTTP，还有用于电子邮件的SMTP,POP和IMAP;用于文件传输的FTP,FSP,和TFTP用于文件访问的NFS,用于文件共享的Guntella和BitTorrent;用于语言通话的会话启动协议(Session Initiation Protocol，SIP)和Skype等。此外，你的程序可以在必要时，定义自己的应用层协议IP,TCP和UDPIP(网际协议)IP设计为允许任意两点之间有多个路由，可以绕过被破坏的路由器实现数据包的路由IP必须是开放的，与平台无关TCP置于IP之上，使得连接的两端能够确认接收到的IP包，以及请求重传丢失或被破坏的包。此外TCP允许接收端的包按发送时的顺序重新组合在一起。不过TCP会有很大开销，因此，如果数据的顺序不是特别重要，而且单个包的丢失不会完全破坏数据流，那么有时候可以使用UDP发送数据包，而不需要TCP提供的保证。UDP是不可靠的协议，它不能保证包一定到达目的地，也不保证包会以发送时相同的顺序到达。虽然这对于文件传输等用途来说存在问题，但是有些应用程序中，即使丢失部分数据最终用户也不会注意到，对于这种应用程序而言，UDP则完全可以接收。例如，丢失视屏或银屏中的一些数据为不会造成太大的质量下降。如果要等待类似TCP等协议请求重传丢失的数据，那才会是更严重的问题。此外，可以在应用层的UDP数据流中建立纠错码，来解决数据丢失问题可以在IP之上运行很多其他协议。最常使用的是ICMP，即网际控制消息协议(Internet Control Message Protocol),它使用原始IP数据报在主机之间传递错误消息。使用这个协议最著名的应用是ping程序。Java不支持ICMP,也不允许发送原始IP数据报(而值运行发送TCP片或UDP数据报)Java支持的协议只有TCP和UDP,如ICMP,IGMP，ARP,RARP,RSVP和其他协议在Java程序中都只能通过链接到原生代码来实现。IP地址和域名作为Java程序员，你不需要担心IP的内部工作原理，但你必须了解寻址。IPv4网络中的每台计算机都由有一个4字节的数字来标识。一般写为点分四段格式，如199.1.32.90,这4个数中，每个数都是一个无符号字节，范围从0到255。IPv4网络中的每台计算机都有唯一的4字节地址。当数据通过网络传输时，包的首部会包括发往的机器地址(目的地址)和发送这个包的机器地址(源地址)。沿途的路由器通过检查目的地址来发送数据包的最佳路由。IP包中包括源地址是为了让接收方知道要向谁回复。IP地址不够用，现在正在想IPv6慢慢的过渡IPv6使用16个字节的地址，这样就能有足够的地址来表示每个人，每天计算机，甚至是地球上的每一个设备。IPv6地址格式:IPv6地址通常为冒号分割的8个区块，每个区块是4个16进制数字，如FEDC:BA98:7654:3210:FEDC:BA98:7654:3210。前导的0不需要写，两个冒号表示多个0区块。例如FEDC:0000:0000:0000:00DC:0000:7076:0010可以写为更紧凑的形式，如：FEDC::DC:0:7076:10在IPv6和IPv4的混合网络中，IPv6地址的最后4个字节有时候写为IPv4的点分四段地址。例如,FEDC:BA98:7654:3210:FEDC:BA98:7654:3210可以写为：FEDC:BA98:7654:3210:118.84.50.16IPv6只在Java1.4以及以后版本中支持。Java1.3及以前版本只支持4字节地址。域名系统虽然计算机可以轻松的处理数字，但是人来对记忆数字不在行。所以开发了域名系统(Domain Name System,DNS)，用来将人类易于记忆的主机名(例如：github.com)转换为数字Internert地址(例如52.74.223.119)。当Java程序访问网络时，它们需要同时处理数字地址和响应的主机名。这些方法由java.net.InetAddress类提供。有些计算机(尤其是服务器)有固定的地址。也有些其他计算机(特别是局域网和无线连接上的客户端)可能每次启动时会分配到不同的地址，这通常有DHCP服务器提供。你只需要记住IP地址可能会随着时间而改变，写代码时不要假定系统有相同的IP地址。不可路由的地址有一些地址区块和模式很特殊，以10.，172.16.，172.31.，和192.168.开头的所有IPv4地址都未分配。这些地址可以在内部网络使用，但是使用这些地址的主机不允许加入全球Internet。不过这些不可路由的地址对于建立Internet上看不到的专用网会很有用。本地回送地址以127开头的IPv4地址(最常见的是127.0.0.1)总是表示本地回送地址(local loopback address)。这就是说，这些地址总是指向本地计算机，而不论你在哪个计算机上运行。这个地址的主机名通常是localhost。广播地址4个字节都使用相同数字的IPv4地址(如255.255.255.255)是一个广播地址。发送到这个地址的包将由本地网络多行的所有节点接收，但不能超越这个本地网络。例如,一个临时使用的客户端(如笔记本电脑)启动时，他会想255.255.255.255发送一个特定的消息，查找本地DHCP服务器。这个网络上的所有节点都接收到这个包，不过只有DHCP服务器做出相应。具体地，它会想这个笔记本电脑发送本地网络配置的有关信息，包括这个笔记本电脑在余下的会话中要使用的IP地址以及用来解析主机名的DNS服务器的地址。端口如果每台计算机每次只做一件事情，那么地址可能就足够了。但是，现代计算机同时要做很多不同的事情。电子邮件需要与FTP请求分开，而FTP又要与Web业务流分开。这是通过端口(port)来实现的。每台有IP地址的计算机都有几千个逻辑端口，确切的讲，每个传输层洗衣有65535个端口。这些知识计算机内存中的抽象，不表示任何物理实体，与USB端口不同。每个端口都是由1到65535之间的一个数字标识。每个端口可以分配给一个特定的服务。例如，Web层协议HTTP一般使用80端口，我们说Web服务器在端口80监听(listen)入站连接(incomming connection)。当数据发送到特定IP地址的某个机器上的Web服务器时,它还会发送到该机器的特定端口(通常是80端口)。接收方检查接口收到的每个包，将数据发送给监听这个端口的程序。各种通信业务流就是这样区分的。1到1023的端口号保留给已知的服务，如finger,FTP，HTTP和IMAP.在UNIX系统上包括Linux,这有root用户运行的程序来可以接收这些端口的数据。但是所有的程序都可以想这些端口发送数据。在Windows上，所有的程序都可以使用这些端口，不需要专门的特权。协议名端口使用的传输协议用途echo7TCP/UDPecho是一个测试协议，通过回显另一台机器的输入来验证两台机器是否连接成功discard9TCP/UDPdiscard是一种用处不太大的协议，它将忽略服务器收到的所有数据daytime13TCP/UDP提供服务器当前时间的ASCII表示FTP数据20TCPFTP使用两个已知端口，这个20端口用来传输文件FTP21TCP这个端口用来发送FTP命令，如put和getSSH22TCP用于加密的远程登录Telnet23TCP用于交互式远程命令行会话smtp25TCP简单邮件传输协议(Simple Mail Transfer Protocol)用来在机器间发送邮件time37TCP/UDP时间服务器返回服务器从1990年1月1日0:0:0之后过去的秒数，这是一个4字节有符号big-endain整数whois43TCP用于Internet网络管理的简单目录服务finger79TCP返回本地系统中用户(或多个用户)有关信息的服务HTTP80TCP国际互联网的低层协议POP3110TCP邮局协议版本3(Post Office Protocol Version 3)协议可以将积累的电子邮件从主机传输到偶然连接的客户端NNTP119TCPUsenet新闻传输，正式的说无法为”网络新闻传输协议”(Network News Transfer Protocol)IMAP143TCPInternet消息访问协议(Internet Message Access Protocol)是访问存储在服务器上的邮件的协议dict2628TCP提供单词定义的UTF-8编码的字典服务InternetInternet是世界上最大的基于IP的网络。Internet不属于任何人(不过它的各个部分有响应的所有者)。它只是约定以只用标准方式相互对话的一个非常大的计算机集合。Internet不是唯一的基于IP的网络，但却是最大的一个。其他的IP网络成为internet(首字母i小写)为确保Internet上不同网络的主机可以相互通信，就需要遵守一些对纯粹内部internet不适用的规则。更重要的规则是要处理不同组织，公司和个人地址的分配。如果每个人都随意地挑选Internet地址，那么有相同地址的不同计算机出现在Internet上立即就会引起冲突。Internet地址分块为了避免这个问题，区域Internet注册机构为Internet服务提供商(ISP)分配IPv4地址块。当公式或组织要建立一个基于IP的网络连接到Internet时，它们的ISP会给她们分配一个地址块。每个地址块有固定的前缀。例如如果前缀是216.254.85，那么本地网络可以使用从216.254.85.0到216.254.85.255的地址。由于这个块固定了前24位，所以称为/24。同理：/23指定了前23位,而留出9位表示总共2^9=512个本机IP地址。“/30”子网(最小的子网)指定了子网中IP地址的前30位，留出2位表示2^2=4个本地IP地址。不过，所有块中最低地址用于表示网络本身，最高地址是这个网络的一个广播地址。所以可用地址比分到的地址要少两个。那么”/30“中的四个本地IP地址中，除去一个表示网络本身的最低地址，除去一个用于广播的最高地址，就只剩下两个可用自由分配的地址了。网络地址转换由于IP地址越来越稀缺，而对原始IP地址的需求越来越大，如今大多数网络都使用了网络地址转换(Network Address Translation,NAT)。基于NAT的网络中，大多数阶段只有不可路由的本地地址，这些地址可能从10.x.x.x,172.16.x.x到172.31.x.x或192.168.x.x选择。例如，我的公寓里大学有十来个IP节点，大家会公用一个外部可见的IP(216.254.85.72)地址。我现在用的这个计算机的IP地址是192.168.1.5，不过在你的网络中192.168.1.5这个地址可能指示的是一个完全不同的主机(如果存在这样一个主机)。另外，你也无法使用192.168.1.5发送数据到我的计算机。实际上你必须把数据发送到到216.254.85.72这个地址(即使如此，只有当为把NAT路由器配置为将入站连接传递到`192.168.1.5`时,数据才会真正送达我的计算机)。路由器会监视出站和入站连接，调整IP包中地址。例如，我向外网发数据，对于这些出站的包，路由器将这个包的源地址该为路由器的外部地址(在我这个网络是:2016.254.85.72)。而外网发来的这些入站的包，路由器将目的地址改为一个本地地址。如192.168.1.12。那么路由器如何记录哪些连接来自或发往那台内部计算机,这对于Java程序员并不是特别重要。只要正确配置了你的机器，这个过程基本上就是透明的。你只需要记住外部地址和内部地址有可能不同就行了。感觉作者这里没有说清楚，说了一半的感觉防火墙位于Internet和本地网络之间的一些硬件和软件会检查所有进出的数据，以保证其合法性。这就称为防火墙(firewall)。防火墙要负责检查传入或传出其网络结构的各个包，根据一组规则接收或拒绝这些包。过滤通常是基于地址和端口的。例如，多有来自C类网络193.28.25.x的通信会被拒绝，因为你过去遭受过这个网站中黑客的攻击。出站的SSH连接可能是允许的，但入站的SSH连接不允许，端口80(Web)的入站连接时允许的，但只限于公司的Web服务器。更智能的防火墙会查看包的内容，确定是否接收或拒绝。防火墙具体的配置(哪些数据包允许通过而哪些不允许通过)取决于网站的安全需求。Java与防火墙没有太大关系，除非防火墙总是妨碍你的事。代理服务器代理服务器(proxy server)与防火墙有关。如果说防火墙会阻止一个网络上的主机与外界直接建立连接，那么代理服务器就起到中间人的作用。如果防火墙阻止一个机器连接外部网络，这个机器可以请求本地代理服务器的Web页面，而不是直接请求远程Web服务器的Web页面。然后代理服务器会请求远程Web服务器的页面，将远程Web服务器的响应转发给最初发出请求的机器。代理还可以用于FTP服务器和其他连接。使用代理服务器的安全优势之一是外部主机只能看到代理服务器，而不会知道内部机器的主机名和IP地址，这样就是的攻击内部网络更加困难。个人绝对代理服务器就好比黄牛，通过访问代理服务器来访问外网，就跟我们跟黄牛买票差不多。防火墙一般工作与传输层或网际层，而代理服务器通常工作与应用层。代理服务器对一些应用层协议非常了解，如HTTP和FTP(一个值得注意的例外是SOCKS代理服务器，Socks服务器工作与传输层，可以代理所有的TCP和UDP连接，而不考虑应用层协议)可以检查通过代理服务的包，确保其中包含适当类型的数据。下图展示了代理服务器在分层模型中的位置：只要所有对Internet的访问都通过代理服务器转发，那么访问就可以收到严格的控制。例如，公司可能选择组织访问www.playboy.com,但允许访问www.microsoft.com。一些公式允许入站FTP，但不允许出站FTP。这样公司的机密数据就不会容易的被非法带出公司。其他公式已经开始使用代理服务器来跟踪员工的Web使用情况，这样可以看到是谁在利用Internet获取技术支持，是谁在利用它找私人朋友。实现本地缓存代理服务器还可以用来实现本地缓存(local caching)。当请求Web服务器的文件时，代理服务器首先查看此文件是否已经在缓存中。如果文件在缓存中，那么代理服务器将提供缓存中的文件，而不是Internet上的文件。如果这个文件不在缓存中，那么代理服务器将从Internet中获取此文件，然后转发给请求方，并将该文件存储在缓存中，供下次请求使用。这种机制可以显著的降低Internet连接的负载，大大提高响应时间。例如，美国在线(America Online)aol.com运行着世界上最大的代理服务器场之一，代理服务器可以加快向用户传输数据的速度。如果你查看Web服务器的日志文件，可能会发现aol.com域客户的一些点击记录，但不想你想象的那么多，要知道AOL用户已经超过300万。按理说，这么多人访问，点击记录应该很多才是。这是因为当用户访问时，AOL代理服务器优先从其缓存中提供了许多页面，而不是为每位用户都重新请求页面。很多其他大的ISP也是这样做的。代理服务器的缺点代理服务器最大的问题在于它无法应对所有协议。通常已有的协议如HTTP,FTP和SMTP允许通过，而新的协议如BitTorrent则可能不允许通过。在快速改变的Internet世界，这是一个很大的缺点，对于Java程序员而言这是一个缺点，因为他限制了定制协议的有效性。使用Java可以很容易地创建为你的应用而优化的新协议，这么做通常也很有用。但是，没有代理服务器能够理解你这些独一无二的协议。因此，有些开发人员开始通过HTTP来接入他们定制的协议，最著名的是SOAP。客户/服务器模型大多数现代网络编程都基于客户/服务器模型。客户端和服务器端功能分解客户/服务器应用程序一般讲大量数据存储在昂贵的高性能服务器或服务器云上。而大多数程序逻辑和用户界面有客户端软件处理，这些客户端软件运行在相对便宜的个人计算机上。在多数情况下，服务器主要发送数据，而客户端主要接收数据，但是很少有一个程序只发送或只接受数据。更有可能的是客户端发起对话，而服务器等待客户端与它开始对话。在有些情况下，同一个程序会同时作为客户端和服务器，下图展示了这两种可能性。Internet上最流行的客户/服务器系统是Web,Web服务器(如Apache)响应Web客户端(如Firefox)的请求。数据存储在Web服务器上，会发送给请求数据的客户端。除了最初的页面请求，几乎所有数据都从服务器想客户端传输，而不是从客户端传输到服务器。FTP是符合客户端/服务器模型的更古老的服务。FTP使用不同的应用协议和不同的软件，但依然分为发送文件的FTP服务器和接收文件的FTP客户端。人们通常使用FTP从客户端向服务器上传文件，所以很难讲数据传输是一个方向传输的。但是要说FTP客户端发起连接而FTP服务器进行响应，这仍然是正确的。对等连接不是所有应用程序都简单的符合客户端/服务器模型。例如，在网络游戏中，看起来两个玩家都能大致相同的来回发送数据(公平游戏中)。这种连接称为对等(peer-to-peer)连接。对等网路典型例子电话系统就是典型的对等网络例子,每部电话都可以呼叫另外的电话，或者被另外的电话呼叫。Java在其核心网络API中没有显示的对等通信。不过，引用程序可以很容易的通过集中方式提供对等通信，最常见的是同时所谓服务器和客户端。另外，对等端可以通过中间服务器程序相互通信，这个程序将程序从一端转发到其他对等端。这样就很好的解决了两个对等端如何发现对方的问题。Internet标准世界上有很多标准组织，但是关于应用层网络编程的协议大多数标准都是由下面两个组织制定的，它们分别是IETF(Internet Engineering Task Forse,Internet工程任务组)和W3C(World Wide Web Consortium,国际互联网协会)。IETF是不太正式的民间团体,向所有感兴趣参与的团队开放。它的标准是根据”多数人的意见和正在运行的代码”做出决定,倾向于跟踪而不是引导实现。IETF(Internet工程任务组)标准包括TCP/IP,MIME和SMTP。与IETF不同W3C是厂商组织，由缴纳会费的成员公司控制，明确拒绝个人参与。在极大程度上，W3C会尽力在实现之前定义标准，W3C标准包括HTTP，HTML和XML。本文链接: java网络编程第4版 第1章 基本网络概念]]></content>
      <categories>
        <category>读书笔记</category>
        <category>java网络编程第四版</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[匹配IP地址]]></title>
    <url>%2Fblog%2F9e1b6b70%2F</url>
    <content type="text"><![CDATA[正则表达式匹配IP地址正则表达式，又称规则表达式。接下来通过本文给大家介绍正则表达式匹配IP的表达式，非常不错，具有参考借鉴价值，需要的的朋友参考下吧这里给大家详细讲解一下一个匹配IP地址的正则表达式，有关正则方面的知识，会在详细的讲解中提到。在讲解之前，我先给大家介绍一下，ip地址的生成规则。IP地址，是由32位数字二进制转为四个十进制的字符串组成。怎么转化？下面讲解：二进制：11111111111111111111111111111111分为四部分：11111111.11111111.11111111.11111111转化：2^7+2^6+2^5+2^4+2^3+2^2+2^1+2^0=255转为十进制范围：0~255.0~255.0~255.0~255这就是IP地址的范围。根据这个生成IP的规则和范围，我们可以用正则表达式来匹配出IP地址，但怎么匹配呢？各人有各人的方法，这里我讲解一下我的思路。根据IP地址的字符串规律，我把匹配IP地址的表达式分为两部分来考虑。第一部分：匹配3个0~255.（注意后面的一个点）第二部分：匹配最后的数字0~255也就是说，先匹配出0~255.（注意后面的一个点） 这个字符串，然后重复匹配3次，然后再匹配最后的数字部分0~255。这就是我匹配IP地址的思路。首先，我要提一下，正则是没有办法做数字运算的，所以，我们无法用数字运算的方式筛选出IP的数字范围。既然没法用数字运算的方式筛选出IP的数字范围，那么我们应该用什么其他方式来筛选这个数字范围呢？我的思路是分组讨论，然后再把这些分组合并起来组成IP的数字范围。匹配一个合法的数字三位数的情况：假设百位是2，那么根据IP数字的范围规则，这里又要分为两种情况，为什么？你想想，最大数字是255，当十位数为5时，个位数最大只能为5是吧？(250-255).而当十位数为0到4时，个位数可以是任意数字对吧？(200-249)所以，这里的两种情况分别为：2[0-4][0-9]25[0-5]假设百位数是1，那么这个数字的范围为100-199,对应正则表达式就为1[0-9][0-9]。这个应该不难理解，就不解释。两位数的情况分析完了三位数数的情况，接下来就是两数的情况了，假如是两位数，那么十位数的前面第一个数不能为零是吧？也就是范围为10-99(10,11...,19,20,...,99),对应的正则表达式为[1-9][0-9]一位数的情况剩下的就是个位数的情况了，个位数的情况，大家应该很容易得出结论，就是：[0-9]。四种情况分析下来，我们得出了IP数字的范围分组为：25[0-5]2[0-4][0-9]1[0-9][0-9][1-9][0-9][0-9]匹配一个合法的数字所以匹配IPv4中一个和法的数组的正则表达式为(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])优化：可以把两位数[1-9][0-9]和一位数的情况[0-9]合并，写为[1-9]?[0-9].用简写\d替代[0-9]所以优化后的一个合法的数字的正则表达式为：(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)匹配一个合法的数字和点号三次 ##：点号要转义为\.,((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}最终的表达式：三组数字和点号之后，后面还有一组数字。这样的话综合起来就是：((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)优化：上面我们使用了括号(...)来限定量词和多选的作用范围。但是这样也会在匹配的时候进行捕获，捕获的话会造成不必要的开销，这里使用(?:...)来限定，这样省去捕获分组的开销。(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)测试：合法的IP地址：本文链接: 匹配IP地址]]></content>
      <categories>
        <category>Java</category>
        <category>Java 正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[通过FTP快速传输文件到手机]]></title>
    <url>%2Fblog%2F5b873e00%2F</url>
    <content type="text"><![CDATA[手机上安装了ES文件浏览器在手机下载安装APP“ES文件管理器“（其他文件管理器只要具有“远程管理器”功能的也可以)ES文件浏览器中的设置首先将手机连上wifi（和电脑在同一个局域网)，或者直接连接到电脑开的热点打开APP后点左上角的菜单。点“网络”项，然后点“远程管理器”这里解释一下为什么不用 “局域网” 和 “FTP” ，这两种方法也可以实现无线传输文件的功能，但使用局域网可能会由于权限而导致拒绝访问的问题，对普通用户来说解决这个问题有点头疼。而”FTP”和”远程管理器”的其实都是使用的FTP协议，区别在于”FTP”是手机做为FTP客户端，电脑上需要安装一个FTP服务器软件。“远程管理器”则手机是FTP服务端，电脑上安装的是FTP客户端，本文使用远程管理器，相对来说在电脑安装FTP客户端软件更简单.点“打开“即可看到主机地址和端口号，把这个记下来，在电脑上要使用，如图按下Win+E快捷键，打开文件资源管理器输入这个地址按下回车，就可进入手机中的目录啦传输文件进入手机目录，可以很方便的在手机和电脑之间互相传输(复制粘贴)文件,这种方式比蓝牙快的多了。从电脑中复制文件：粘贴到手机中：很快就传输好啦：复制成功：关闭连接最后再ES文件浏览器中关闭连接即可：参考：http://baijiahao.baidu.com/s?id=1596833763494677229&amp;wfr=spider&amp;for=pc本文链接: 通过FTP快速传输文件到手机]]></content>
      <categories>
        <category>其他</category>
        <category>Windows相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[DatagramSocket类]]></title>
    <url>%2Fblog%2Fc1fee13e%2F</url>
    <content type="text"><![CDATA[方法描述DatagramSocket()构造数据报套接字并将其绑定到本地主机上任何可用的端口。DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。DatagramSocket(int port, InetAddress laddr)创建数据报套接字，将其绑定到指定的IP地址DatagramSocket(SocketAddress bindaddr)创建数据报套接字，将其绑定到指定的本地套接字地址。protected DatagramSocket(DatagramSocketImpl impl)创建带有指定 DatagramSocketImpl 的未绑定数据报套接字。成员方法方法描述void bind(SocketAddress addr)将此 DatagramSocket 绑定到特定的地址和端口。void close()关闭此数据报套接字。void connect(InetAddress address, int port)将套接字连接到此套接字的远程地址。void connect(SocketAddress addr)将此套接字连接到远程套接字地址（IP 地址 + 端口号）。void disconnect()断开套接字的连接。boolean getBroadcast()检测是否启用了 SO_BROADCAST。DatagramChannel getChannel()返回与此数据报套接字关联的唯一 DatagramChannel 对象（如果有）。InetAddress getInetAddress()返回此套接字连接的地址。InetAddress getLocalAddress()获取套接字绑定的本地地址。int getLocalPort()返回此套接字绑定的本地主机上的端口号。SocketAddress getLocalSocketAddress()返回此套接字绑定的端点的地址，如果尚未绑定则返回 null。int getPort()返回此套接字的端口。int getReceiveBufferSize()获取此 DatagramSocket 的 SO_RCVBUF 选项的值，该值是平台在 DatagramSocket 上输入时使用的缓冲区大小。SocketAddress getRemoteSocketAddress()返回此套接字连接的端点的地址，如果未连接则返回 null。boolean getReuseAddress()检测是否启用了 SO_REUSEADDR。int getSendBufferSize()获取此 DatagramSocket 的 SO_SNDBUF 选项的值，该值是平台在 DatagramSocket 上输出时使用的缓冲区大小。int getSoTimeout()获取 SO_TIMEOUT 的设置。int getTrafficClass()为从此 DatagramSocket 上发送的包获取 IP 数据报头中的流量类别或服务类型。boolean isBound()返回套接字的绑定状态。boolean isClosed()返回是否关闭了套接字。boolean isConnected()返回套接字的连接状态。void receive(DatagramPacket p)从此套接字接收数据报包。void send(DatagramPacket p)从此套接字发送数据报包。void setBroadcast(boolean on)启用/禁用 SO_BROADCAST。static void setDatagramSocketImplFactory(DatagramSocketImplFactory fac)为应用程序设置数据报套接字实现工厂。void setReceiveBufferSize(int size)将此 DatagramSocket 的 SO_RCVBUF 选项设置为指定的值。void setReuseAddress(boolean on)启用/禁用 SO_REUSEADDR 套接字选项。void setSendBufferSize(int size)将此 DatagramSocket 的 SO_SNDBUF 选项设置为指定的值。void setSoTimeout(int timeout)启用/禁用带有指定超时值的 SO_TIMEOUT，以毫秒为单位。void setTrafficClass(int tc)为从此 DatagramSocket 上发送的数据报在 IP 数据报头中设置流量类别 (traffic class) 或服务类型八位组 (type-of-service octet)。本文链接: DatagramSocket类]]></content>
      <categories>
        <category>Java</category>
        <category>java 网络编程</category>
        <category>API</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[7网络协议]]></title>
    <url>%2Fblog%2F12786bb5%2F</url>
    <content type="text"><![CDATA[参考：http://www.cnblogs.com/springcsc/archive/2009/12/03/1616413.html对于需要从事网络编程的程序员来说，网络协议是一个需要深刻理解的概念。那么什么是网络协议呢？网络协议是指对于网络中传输的数据格式的规定。对于网络编程初学者来说，没有必要深入了解TCP/IP协议簇，所以对于初学者来说去读大部头的《TCP/IP协议》也不是一件很合适的事情，因为深入了解TCP/IP协议是网络编程提高阶段，也是深入网络编程底层时才需要做的事情。对于一般的网络编程来说，更多的是关心网络上传输的逻辑数据内容，也就是更多的是应用层上的网络协议，所以后续的内容均以实际应用的数据为基础来介绍网络协议的概念。那么什么是网络协议呢，下面看一个简单的例子。春节晚会上“小沈阳”和赵本山合作的小品《不差钱》中，小沈阳和赵本山之间就设计了一个协议，协议的内容为：1如果点的菜价钱比较贵是，就说没有。按照该协议的规定，就有了下面的对话：1234赵本山：4斤的龙虾小沈阳：(经过判断，得出价格比较高)，没有赵本山：鲍鱼小沈阳：(经过判断，得出价格比较高)，没有这就是一种双方达成的一种协议约定，其实这种约定的实质和网络协议的实质是一样的。网络协议的实质也是客户端程序和服务器端程序对于数据的一种约定，只是由于以计算机为基础，所以更多的是使用数字来代表内容，这样就显得比较抽象一些。实例下 面再举一个简单的例子，介绍一些基础的网络协议设计的知识。例如需要设计一个简单的网络程序：网络计算器。也就是在客户端输入需要计算的数字和运算符，在 服务器端实现计算，并将计算的结果反馈给客户端。在这个例子中，就需要约定两个数据格式：客户端发送给服务器端的数据格式，以及服务器端反馈给客户端的数 据格式。客户端发送给服务器的数据格式可能你觉得这个比较简单，例如客户端输入的数字依次是12和432，输入的运算符是加号，可能最容易想到的数据格式是形成字符串“12+432”，这样格式的确比较容易阅读，但是服务器端在进行计算时，逻辑就比较麻烦，因为需要首先拆分该字符串，然后才能进行计算，所以可用的数据格式就有了一下几种：12“12，432，+” 格式为：第一个数字，第二个数字，运算符“12，+，432” 格式为：第一个数字，运算符，第二个数字其实以上两种数据格式很接近，比较容易阅读，在服务器端收到该数据格式以后，使用“，”为分隔符分割字符串即可。假设对于运算符再进行一次约定，例如约定数字0代表加法+，1代表减法-，2代表乘法*，3代表除法/，整体格式遵循以上第一种格式，则上面的数字生产的协议数据为：1“12，432，0”这就是一种基本的发送的协议约定了。服务器反馈的数据格式另 外一个需要设计的协议格式就是服务器端反馈的数据格式，其实服务器端主要反馈计算结果，但是在实际接受数据时，有可能存在格式错误的情况，这样就需要简单 的设计一下服务器端反馈的数据格式了。例如规定，如果发送的数据格式正确，则反馈结果，否则反馈字符串“错误”。这样就有了以下的数据格式：123客户端：“1,111,1” 服务器端：”-110”客户端：“123,23,0” 服务器端：“146”客户端：“1,2,5” 服务器端：“错误”这样就设计出了一种最最基本的网络协议格式，从该示例中可以看出，网络协议就是一种格式上的约定，可以根据逻辑的需要约定出各种数据格式，在进行设计时一般遵循“简单、通用、容易解析”的原则进行。而对于复杂的网络程序来说，需要传输的数据种类和数据量都比较大，这样只需要依次设计出每种情况下的数据格式即可，例如QQ程序，在该程序中需要进行传输的网络数据种类很多，那么在设计时就可以遵循：登录格式、注册格式、发送消息格式等等，一一进行设计即可。所以对于复杂的网络程序来说，只是增加了更多的命令格式，在实际设计时的工作量增加不是太大。不管怎么说，在网络编程中，对于同一个网络程序来说，一般都会涉及到两个网络协议格式：客户端发送数据格式和服务器端反馈数据格式，在实际设计时，需要一一对应。这就是最基本的网络协议的知识。网络协议设计完成以后，在进行网络编程时，就需要根据设计好的协议格式，在程序中进行对应的编码了，客户端程序和服务器端程序需要进行协议处理的代码分别如下。客户端程序需要完成的处理为：客户端发送协议格式的生成服务器端反馈数据格式的解析服务器端程序需要完成的处理为：服务器端反馈协议格式的生成客户端发送协议格式的解析这里的生成是指将计算好的数据，转换成规定的数据格式，这里的解析指，从反馈的数据格式中拆分出需要的数据。在进行对应的代码编写时，严格遵循协议约定即可。所以，对于程序员来说，在进行网络程序编写时，需要首先根据逻辑的需要设计网络协议格式，然后遵循协议格式约定进行协议生成和解析代码的编写，最后使用网络编程技术实现整个网络编程的功能。由于各种网络程序使用不同的协议格式，所以不同网络程序的客户端之间无法通用。常见协议而对于常见协议的格式，例如HTTP(Hyper Text Transfer Protocol，超文本传输协议)、FTP(File Transfer Protocol，文件传输协议)，SMTP(Simple Mail Transfer Protocol，简单邮件传输协议)等等，都有通用的规定，具体可以查阅相关的RFC文档。最后，对于一种网络程序来说，网络协议格式是该程序最核心的技术秘密，因为一旦协议格式泄漏，则任何一个人都可以根据该格式进行客户端的编写，这样将影响服务器端的实现，也容易出现一些其它的影响。小结关于网络编程基本的技术就介绍这么多，该部分介绍了网络编程的基础知识，以及Java语言对于网络编程的支持，网络编程的步骤等，并详细介绍了TCP方式网络编程和UDP方式网络编程在Java语言中的实现。网络协议也是网络程序的核心，所以在实际开始进行网络编程时，设计一个良好的协议格式也是必须进行的工作。网络编程示例“实践出真知”，所以在进行技术学习时，还是需要进行很多的练习，才可以体会技术的奥妙，下面通过两个简单的示例，演示网络编程的实际使用。质数判别示例该示例实现的功能是质数判断，程序实现的功能为客户端程序接收用户输入的数字，然后将用户输入的内容发送给服务器端，服务器端判断客户端发送的数字是否是质数，并将判断的结果反馈给客户端，客户端根据服务器端的反馈显示判断结果。质数的规则是：最小的质数是2，只能被1和自身整除的自然数。当用户输入小于2的数字，以及输入的内容不是自然数时，都属于非法输入。网络程序的功能都分为客户端程序和服务器端程序实现，下面先描述一下每个程序分别实现的功能：客户端程序功能：接收用户控制台输入判断输入内容是否合法按照协议格式生成发送数据发送数据接收服务器端反馈解析服务器端反馈信息，并输出服务器端程序功能：接收客户端发送数据按照协议格式解析数据判断数字是否是质数根据判断结果，生成协议数据将数据反馈给客户端分解好了网络程序的功能以后，就可以设计网络协议格式了，如果该程序的功能比较简单，所以设计出的协议格式也不复杂。客户端发送协议格式：将用户输入的数字转换为字符串，再将字符串转换为byte数组即可。例如用户输入16，则转换为字符串“16”，使用getBytes转换为byte数组。客户端发送“quit”字符串代表结束连接服务器端发送协议格式：反馈数据长度为1个字节。数字0代表是质数，1代表不是质数，2代表协议格式错误。例如客户端发送数字12，则反馈1，发送13则反馈0，发送0则反馈2。功能设计完成以后，就可以分别进行客户端和服务器端程序的编写了，在编写完成以后联合起来进行调试即可。下面分别以TCP方式和UDP方式实现该程序，注意其实现上的差异。不管使用哪种方式实现，客户端都可以多次输入数据进行判断。对于UDP方式来说，不需要向服务器端发送quit字符串。以TCP方式实现客户端程序以TCP方式实现的客户端程序代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182package example1;import java.io.*;import java.net.*;/*** 以TCP方式实现的质数判断客户端程序*/public class TCPPrimeClient &#123; static BufferedReader br; static Socket socket; static InputStream is; static OutputStream os; /**服务器IP*/ final static String HOST = "127.0.0.1"; /**服务器端端口*/ final static int PORT = 10005; public static void main(String[] args) &#123; init(); //初始化 while(true) &#123; System.out.println("请输入数字："); String input = readInput(); //读取输入 if(isQuit(input)) &#123; //判读是否结束 byte[] b = "quit".getBytes(); send(b); break; //结束程序 &#125; if(checkInput(input)) &#123; //校验合法 //发送数据 send(input.getBytes()); //接收数据 byte[] data = receive(); //解析反馈数据 parse(data); &#125;else&#123; System.out.println("输入不合法，请重新输入！"); &#125; &#125; close(); //关闭流和连接 &#125; /** * 初始化 */ private static void init() &#123; try &#123; br = new BufferedReader( new InputStreamReader(System.in)); socket = new Socket(HOST,PORT); is = socket.getInputStream(); os = socket.getOutputStream(); &#125; catch (Exception e) &#123;&#125; &#125; /** * 读取客户端输入 */ private static String readInput() &#123; try &#123; return br.readLine(); &#125; catch (Exception e) &#123; return null; &#125; &#125; /** * 判断是否输入quit * @param input 输入内容 * @return true代表结束，false代表不结束 */ private static boolean isQuit(String input) &#123; if(input == null) &#123; return false; &#125;else&#123; if("quit".equalsIgnoreCase(input)) &#123; return true; &#125;else&#123; return false; &#125; &#125; &#125; /** * 校验输入 * @param input 用户输入内容 * @return true代表输入符合要求，false代表不符合 */ private static boolean checkInput(String input) &#123; if(input == null) &#123; return false; &#125; try &#123; int n = Integer.parseInt(input); if(n &gt;= 2) &#123; return true; &#125;else&#123; return false; &#125; &#125;catch(Exception e)&#123; return false; //输入不是整数 &#125; &#125; /** * 向服务器端发送数据 * @param data 数据内容 */ private static void send(byte[] data) &#123; try &#123; os.write(data); &#125;catch(Exception e)&#123;&#125; &#125; /** * 接收服务器端反馈 * @return 反馈数据 */ private static byte[] receive() &#123; byte[] b = new byte[1024]; try &#123; int n = is.read(b); byte[] data = new byte[n]; //复制有效数据 System.arraycopy(b, 0, data, 0, n); return data; &#125; catch (Exception e)&#123;&#125; return null; &#125; /** * 解析协议数据 * @param data 协议数据 */ private static void parse(byte[] data) &#123; if(data == null) &#123; System.out.println("服务器端反馈数据不正确！"); return; &#125; byte value = data[0]; //取第一个byte //按照协议格式解析 switch(value) &#123; case 0: System.out.println("质数"); break; case 1: System.out.println("不是质数"); break; case 2: System.out.println("协议格式错误"); break; &#125; &#125; /** * 关闭流和连接 */ private static void close() &#123; try &#123; br.close(); is.close(); os.close(); socket.close(); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; &#125;&#125;在该代码中，将程序的功能使用方法进行组织，使得结构比较清晰，核心的逻辑流程在main方法中实现。服务器端实现以TCP方式实现的服务器端的代码如下：123456789101112131415161718192021222324252627282930package example1;import java.net.*;/*** 以TCP方式实现的质数判别服务器端*/public class TCPPrimeServer &#123; public static void main(String[] args) &#123; final int PORT = 10005; ServerSocket ss = null; try &#123; ss = new ServerSocket(PORT); System.out.println("服务器端已启动："); while(true) &#123; Socket s = ss.accept(); new PrimeLogicThread(s); &#125; &#125; catch (Exception e) &#123;&#125; finally &#123; try &#123; ss.close(); &#125; catch (Exception e2) &#123;&#125; &#125; &#125;&#125;服务器逻辑线程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159package example1;import java.io.*;import java.net.*;/*** 实现质数判别逻辑的线程*/public class PrimeLogicThread extends Thread &#123; Socket socket; InputStream is; OutputStream os; public PrimeLogicThread(Socket socket) &#123; this.socket = socket; init(); start(); &#125; /** * 初始化 */ private void init() &#123; try &#123; is = socket.getInputStream(); os = socket.getOutputStream(); &#125;catch(Exception e)&#123;&#125; &#125; public void run() &#123; while(true) &#123; //接收客户端反馈 byte[] data = receive(); //判断是否是退出 if(isQuit(data)) &#123; break; //结束循环 &#125; //逻辑处理 byte[] b = logic(data); //反馈数据 send(b); &#125; close(); &#125; /** * 接收客户端数据 * @return 客户端发送的数据 */ private byte[] receive() &#123; byte[] b = new byte[1024]; try &#123; int n = is.read(b); byte[] data = new byte[n]; //复制有效数据 System.arraycopy(b, 0, data, 0, n); return data; &#125; catch (Exception e)&#123;&#125; return null; &#125; /** * 向客户端发送数据 * @param data 数据内容 */ private void send(byte[] data) &#123; try &#123; os.write(data); &#125;catch(Exception e)&#123;&#125; &#125; /** * 判断是否是quit * @return 是返回true，否则返回false */ private boolean isQuit(byte[] data) &#123; if(data == null) &#123; return false; &#125;else&#123; String s = new String(data); if(s.equalsIgnoreCase(&quot;quit&quot;)) &#123; return true; &#125;else&#123; return false; &#125; &#125; &#125; private byte[] logic(byte[] data) &#123; //反馈数组 byte[] b = new byte[1]; //校验参数 if(data == null) &#123; b[0] = 2; return b; &#125; try &#123; //转换为数字 String s = new String(data); int n = Integer.parseInt(s); //判断是否是质数 if(n &gt;= 2) &#123; boolean flag = isPrime(n); if(flag) &#123; b[0] = 0; &#125;else&#123; b[0] = 1; &#125; &#125;else&#123; b[0] = 2; //格式错误 System.out.println(n); &#125; &#125;catch(Exception e)&#123; e.printStackTrace(); b[0] = 2; &#125; return b; &#125; /** * * @param n * @return */ private boolean isPrime(int n) &#123; boolean b = true; for(int i = 2;i &lt;= Math.sqrt(n);i++) &#123; if(n % i == 0) &#123; b = false; break; &#125; &#125; return b; &#125; /** * 关闭连接 */ private void close() &#123; try &#123; is.close(); os.close(); socket.close(); &#125; catch (Exception e)&#123;&#125; &#125;&#125;本示例使用的服务器端的结构和前面示例中的结构一致，只是逻辑线程的实现相对来说要复杂一些，在线程类中的logic方法中实现了服务器端逻辑，根据客户端发送过来的数据，判断是否是质数，然后根据判断结果按照协议格式要求，生成客户端反馈数据，实现服务器端要求的功能。运行结果如下猜数字小游戏下面这个示例是一个猜数字的控制台小游戏。该游戏的规则是：当客户端第一次连接到服务器端时，服务器端生产一个【0，50】之间的随机数字，然后客户端输入数字来猜该数字，每次客户端输入数字以后，发送给服务器端，服务器端判断该客户端发送的数字和随机数字的关系，并反馈比较结果，客户端总共有5次猜的机会，猜中时提示猜中，当输入”quit”时结束程序。和前面的示例类似，在进行网络程序开发时，首先需要分解一下功能的实现，觉得功能是在客户端程序中实现还是在服务器端程序中实现。区分的规则一般是：客户端 程序实现接收用户输入等界面功能，并实现一些基础的校验降低服务器端的压力，而将程序核心的逻辑以及数据存储等功能放在服务器端进行实现。遵循该原则划分 的客户端和服务器端功能如下所示。客户端程序功能列表：接收用户控制台输入判断输入内容是否合法按照协议格式发送数据根据服务器端的反馈给出相应提示服务器端程序功能列表：接收客户端发送数据按照协议格式解析数据判断发送过来的数字和随机数字的关系根据判断结果生产协议数据将生产的数据反馈给客户端在该示例中，实际使用的网络命令也只有两条，所以显得协议的格式比较简单。其中客户端程序协议格式如下：将用户输入的数字转换为字符串，然后转换为byte数组发送“quit”字符串代表退出其中服务器端程序协议格式如下：反馈长度为1个字节，数字0代表相等(猜中)，1代表大了，2代表小了，其它数字代表错误。实现该程序的代码比较多，下面分为客户端程序实现和服务器端程序实现分别进行列举。客户端程序实现代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103package guess;import java.net.*;import java.io.*;/** * 猜数字客户端 */public class TCPClient&#123; public static void main(String[] args) &#123; Socket socket = null; OutputStream os = null; InputStream is = null; BufferedReader br = null; byte[] data = new byte[2]; try &#123; // 建立连接 socket = new Socket(&quot;127.0.0.1&quot;, 10001); // 发送数据 os = socket.getOutputStream(); // 读取反馈数据 is = socket.getInputStream(); // 键盘输入流 br = new BufferedReader(new InputStreamReader(System.in)); // 多次输入 while (true) &#123; System.out.println(&quot;请输入数字：&quot;); // 接收输入 String s = br.readLine(); // 结束条件 if (s.equals(&quot;quit&quot;)) &#123; os.write(&quot;quit&quot;.getBytes()); break; &#125; // 校验输入是否合法 boolean b = true; try &#123; Integer.parseInt(s); &#125; catch (Exception e) &#123; b = false; &#125; if (b) &#123; // 输入合法 // 发送数据 os.write(s.getBytes()); // 接收反馈 is.read(data); // 判断 switch (data[0]) &#123; case 0 : System.out.println(&quot;相等！祝贺你！&quot;); break; case 1 : System.out.println(&quot;大了！&quot;); break; case 2 : System.out.println(&quot;小了！&quot;); break; default : System.out.println(&quot;其它错误！&quot;); &#125; // 提示猜的次数 System.out.println(&quot;你已经猜了&quot; + data[1] + &quot;次！&quot;); // 判断次数是否达到5次 if (data[1] &gt;= 5) &#123; System.out.println(&quot;你挂了！&quot;); // 给服务器端线程关闭的机会 os.write(&quot;quit&quot;.getBytes()); // 结束客户端程序 break; &#125; &#125; else &#123; // 输入错误 System.out.println(&quot;输入错误！&quot;); &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; // 关闭连接 br.close(); is.close(); os.close(); socket.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;在该示例中，首先建立一个到IP地址为127.0.0.1的端口为10001的连接，然后进行各个流的初始化工作，将逻辑控制的代码放入在一个while循环中，这样可以在客户端多次进行输入。在循环内部，首先判断用户输入的是否为quit字符串，如果是则结束程序，如果输入不是quit，则首先校验输入的是否是数字，如果不是数字则直接输出“输入错误！”并继续接收用户输入，如果是数字则发送给服务器端，并根据服务器端的反馈显示相应的提示信息。最后关闭流和连接，结束客户端程序。服务器端程序的实现还是分为服务器控制程序和逻辑线程，实现的代码分别如下：服务器控制程序12345678910111213141516171819202122232425262728package guess;import java.net.*;/*** TCP连接方式的服务器端* 实现功能：接收客户端的数据，判断数字关系*/public class TCPServer &#123; public static void main(String[] args) &#123; try &#123; //监听端口 ServerSocket ss = new ServerSocket(10001); System.out.println("服务器已启动："); //逻辑处理 while(true) &#123; //获得连接 Socket s = ss.accept(); //启动线程处理 new LogicThread(s); &#125; &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; &#125;&#125;逻辑线程1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283package guess;import java.net.*;import java.io.*;import java.util.*;/*** 逻辑处理线程*/public class LogicThread extends Thread &#123; Socket s; static Random r = new Random(); public LogicThread(Socket s) &#123; this.s = s; start(); //启动线程 &#125; public void run() &#123; //生成一个[0，50]的随机数 int randomNumber = Math.abs(r.nextInt() % 51); //用户猜的次数 int guessNumber = 0; InputStream is = null; OutputStream os = null; byte[] data = new byte[2]; try &#123; //获得输入流 is = s.getInputStream(); //获得输出流 os = s.getOutputStream(); while(true) &#123; //多次处理 //读取客户端发送的数据 byte[] b = new byte[1024]; int n = is.read(b); String send = new String(b,0,n); //结束判别 if(send.equals(&quot;quit&quot;)) &#123; break; &#125; //解析、判断 try &#123; int num = Integer.parseInt(send); //处理 guessNumber++; //猜的次数增加1 data[1] = (byte)guessNumber; //判断 if(num &gt; randomNumber) &#123; data[0] = 1; &#125;else if(num &lt; randomNumber)&#123; data[0] = 2; &#125;else&#123; data[0] = 0; //如果猜对 guessNumber = 0; //清零 randomNumber = Math.abs(r.nextInt() % 51); &#125; //反馈给客户端 os.write(data); &#125;catch(Exception e)&#123; //数据格式错误 data[0] = 3; data[1] = (byte)guessNumber; os.write(data); //发送错误标识 break; &#125; os.flush(); //强制发送 &#125; &#125;catch(Exception e)&#123; e.printStackTrace(); &#125;finally&#123; try &#123; is.close(); os.close(); s.close(); &#125;catch(Exception e)&#123;&#125; &#125; &#125;&#125;本文链接: 7网络协议]]></content>
      <categories>
        <category>Java</category>
        <category>java 网络编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[UDP网络编程]]></title>
    <url>%2Fblog%2Fb6cecc51%2F</url>
    <content type="text"><![CDATA[参考：https://blog.csdn.net/sihai12345/article/details/79334299网络通讯的方式除了TCP方式以外，还有一种实现的方式就是UDP方式。UDP(User Datagram Protocol)，中文意思是用户数据报协议，方式类似于发短信息，是一种物美价廉的通讯方式，使用该种方式无需建立专用的虚拟连接，由于无需建立专用的连接，所以对于服务器的压力要比TCP小很多，所以也是一种常见的网络编程方式。但是使用该种方式最大的不足是传输不可靠，当然也不是说经常丢失，就像大家发短信息一样，理论上存在收不到的可能，这种可能性可能是1%，反正比较小，但是由于这种可能的存在，所以平时我们都觉得重要的事情还是打个电话吧(类似TCP方式)，一般的事情才发短信息(类似UDP方式)。网络编程中也是这样，必须要求可靠传输的信息一般使用TCP方式实现，一般的数据才使用UDP方式实现。UDP方式的网络编程也在Java语言中获得了良好的支持，由于其在传输数据的过程中不需要建立专用的连接等特点，所以在Java API中设计的实现结构和TCP方式不太一样。当然，需要使用的类还是包含在java.net包中。Java UDP网络编程相关类在Java API中，实现UDP方式的编程，包含客户端网络编程和服务器端网络编程，主要由两个类实现，分别是：DatagramSocket类DatagramSocket类实现“网络连接”，包括客户端网络连接和服务器端网络连接。虽然UDP方式的网络通讯不需要建立专用的网络连接，但是毕竟还是需要发送和接收数据，DatagramSocket实现的就是发送数据时的发射器，以及接收数据时的监听器的角色。类比于TCP中的网络连接，该类既可以用于实现客户端连接，也可以用于实现服务器端连接。DatagramPacket类DatagramPacket类实现对于网络中传输的数据封装，也就是说，该类的对象代表网络中交换的数据。在UDP方式的网络编程中，无论是需要发送的数据还是需要接收的数据，都必须被处理成DatagramPacket类型的对象，该对象中包含发送到的地址、发送到的端口号以及发送的内容等。其实DatagramPacket类的作用类似于现实中的信件，在信件中包含信件发送到的地址以及接收人，还有发送的内容等，邮局只需要按照地址传递即可。在接收数据时，接收到的数据也必须被处理成DatagramPacket类型的对象，在该对象中包含发送方的地址、端口号等信息，也包含数据的内容。和TCP方式的网络传输相比，IO编程在UDP方式的网络编程中变得不是必须的内容，结构也要比TCP方式的网络编程简单一些。下面介绍一下UDP方式的网络编程中，客户端和服务器端的实现步骤，以及通过基础的示例演示UDP方式的网络编程在Java语言中的实现方式。UDP方式的网络编程，编程的步骤和TCP方式类似，只是使用的类和方法存在比较大的区别，下面首先介绍一下UDP方式的网络编程客户端实现过程。UDP客户端编程步骤UDP客户端编程涉及的步骤也是4个部分：建立连接、发送数据、接收数据和关闭连接。建立连接首先介绍UDP方式的网络编程中建立连接的实现。其中UDP方式的建立连接和TCP方式不同，只需要建立一个连接对象即可，不需要指定服务器的IP和端口号码。实现的代码为：1DatagramSocket ds = new DatagramSocket();这样就建立了一个客户端连接，该客户端连接使用系统随机分配的一个本地计算机的未用端口号。在该连接中，不指定服务器端的IP和端口，所以UDP方式的网络连接更像一个发射器，而不是一个具体的连接。当然，可以通过制定连接使用的端口号来创建客户端连接。1DatagramSocket ds = new DatagramSocket(5000);这样就是使用本地计算机的5000号端口建立了一个连接。一般在建立客户端连接时没有必要指定端口号码。发送数据接着，介绍一下UDP客户端编程中发送数据的实现。在UDP方式的网络编程中，IO技术不是必须的，发送数据步骤：需要将需要发送的数据内容首先转换为byte数组，然后将数据内容、服务器IP和服务器端口号一起构造成一个DatagramPacket类型的对象，这样数据的准备就完成了，发送时调用网络连接对象中的send方法发送该对象即可。例如将字符串“Hello”发送到IP是127.0.0.1，端口号是10001的服务器，则实现发送数据的代码如下：1234567891011String s = “Hello”;String host = “127.0.0.1”;int port = 10001;//将发送的内容转换为byte数组byte[] byteToSend = s.getBytes();//将服务器IP转换为InetAddress对象InetAddress serverIP = InetAddress.getByName(host);//构造发送的数据包对象,数据包中放入数据，目的地址，目的端口号DatagramPacket sendDp = new DatagramPacket(byteToSend,byteToSend.length,serverIP,port);//发送数据ds.send(sendDp);在该示例代码中，不管发送的数据内容是什么，都需要转换为byte数组，然后将服务器端的IP地址构造成InetAddress类型的对象，在准备完成以后，将这些信息构造成一个DatagramPacket类型的对象，发送的数据内容、服务器端的IP和端口号，都包含在DatagramPacket对象中。在准备完成以后，调用连接对象ds的send方法把DatagramPacket对象发送出去即可。按照UDP协议的约定，在进行数据传输时，系统只是尽全力传输数据，但是并不保证数据一定被正确传输，如果数据在传输过程中丢失，那就丢失了。UDP方式在进行网络通讯时，也遵循“请求-响应”模型，在发送数据完成以后，就可以接收服务器端的反馈数据了。客户端接收数据下面介绍一下UDP客户端编程中接收数据的实现。当数据发送出去以后，就可以接收服务器端的反馈信息了。接收数据在Java语言中的实现是这样的：首先构造一个数据缓冲数组，该数组用于存储接收的服务器端反馈数据，该数组的长度必须大于或等于服务器端反馈的实际有效数据的长度。然后以该缓冲数组为基础构造一个DatagramPacket数据包对象，最后调用连接对象的receive方法接收数据即可。接收到的服务器端反馈数据存储在DatagramPacket类型的对象内部。实现接收数据以及显示服务器端反馈内容的示例代码如下：1234567891011//第一步,构造缓冲数组用于接收数据byte[] data = new byte[1024];//第二步,构造数据包对象DatagramPacket received = new DatagramPacket(data,data.length);//接收数据ds.receive(receiveDp);//输出数据内容byte[] b = receiveDp.getData(); //获得缓冲数组int len = receiveDp.getLength(); //获得有效数据长度String s = new String(b,0,len);System.out.println(s);在该代码中，首先构造缓冲数组data，这里设置的长度1024是预估的接收到的数据长度，要求该长度必须大于或等于接收到的数据长度，然后以该缓冲数组为基础，构造数据包对象，使用连接对象ds的receive方法接收反馈数据，由于在Java语言中，除String以外的其它对象都是按照地址传递，所以在receive方法内部可以改变数据包对象receiveDp的内容，这里的receiveDp的功能和返回值类似。数据接收到以后，只需要从数据包对象中读取出来就可以了，使用DatagramPacket对象中的getData方法可以获得数据包对象的缓冲区数组，但是缓冲区数组的长度一般大于有效数据的长度，换句话说，也就是缓冲区数组中只有一部分数据是反馈数据，所以需要使用DatagramPacket对象中的getLength方法获得有效数据的长度，则有效数据就是缓冲数组中的前有效数据长度个内容，这些才是真正的服务器端反馈的数据的内容。关闭UDP方式客户端网络编程的最后一个步骤就是关闭连接。虽然UDP方式不建立专用的虚拟连接，但是连接对象还是需要占用系统资源，所以在使用完成以后必须关闭连接。关闭连接使用连接对象中的close方法即可，实现的代码如下：1ds.close();需要说明的是，和TCP建立连接的方式不同，UDP方式的同一个网络连接对象，可以发送到达不同服务器端IP或端口的数据包，这点是TCP方式无法做到的。UDP服务端网络编程介绍完了UDP方式客户端网络编程的基础知识以后，下面再来介绍一下UDP方式服务器端网络编程的基础知识。UDP方式网络编程的服务器端实现和TCP方式的服务器端实现类似，也是服务器端监听某个端口，然后获得数据包，进行逻辑处理以后将处理以后的结果反馈给客户端，最后关闭网络连接，下面依次进行介绍。第一步监听窗口，建立连接首先UDP方式服务器端网络编程需要建立一个连接，该连接监听某个端口，实现的代码为：1DatagramSocket ds = new DatagramSocket(10010);由于服务器端的端口需要固定，所以一般在建立服务器端连接时，都指定端口号。例如该示例代码中指定10010端口为服务器端使用的端口号，客户端端在连接服务器端时连接该端口号即可。第二步：接收客户端的数据接着服务器端就开始接收客户端发送过来的数据，其接收的方法和客户端接收的方法一直，其中receive方法的作用类似于TCP方式中accept方法的作用，该方法也是一个阻塞方法，其作用是接收数据。第三步：处理接收的数据，给出响应接收到客户端发送过来的数据以后，服务器端对该数据进行逻辑处理，然后将处理以后的结果再发送给客户端，在这里发送时就比客户端要麻烦一些，因为服务器端需要获得客户端的IP和客户端使用的端口号，这个都可以从接收到的数据包中获得。示例代码如下：1234//获得客户端的IPInetAddress clientIP = receiveDp.getAddress();//获得客户端的端口号Int clientPort = receiveDp.getPort();使用以上代码，就可以从接收到的数据包对象receiveDp中获得客户端的IP地址和客户端的端口号，这样就可以在服务器端中将处理以后的数据构造成数据包对象，然后将处理以后的数据内容反馈给客户端了。最后，当服务器端实现完成以后，关闭服务器端连接，实现的方式为调用连接对象的close方法，示例代码如下：1ds.close();介绍完了UDP方式下的客户端编程和服务器端编程的基础知识以后，下面通过一个简单的示例演示UDP网络编程的基本使用。实例该实例的功能是实现将客户端程序的系统时间发送给服务器端，服务器端接收到时间以后，向客户端反馈字符串“OK”。实现该功能的客户端代码如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package udp;import java.net.*;import java.util.*;/** * 简单的UDP客户端，实现向服务器端发生系统时间功能 */public class SimpleUDPClient&#123; public static void main(String[] args) &#123; DatagramSocket ds = null; // 连接对象 DatagramPacket sendDp; // 发送数据包对象 DatagramPacket receiveDp; // 接收数据包对象 String serverHost = "127.0.0.1"; // 服务器IP int serverPort = 10010; // 服务器端口号 try &#123; // 建立连接,自动分配一个空闲端口 ds = new DatagramSocket(); // 初始化发送数据 Date d = new Date(); // 当前时间 String content = d.toString(); // 转换为字符串 byte[] data = content.getBytes(); // 初始化IP地址 InetAddress address = InetAddress.getByName(serverHost); // 初始化发送包对象 数据,数据的长度,IP地址,端口号 sendDp = new DatagramPacket(data, data.length, address, serverPort); // 发送这个数据包 ds.send(sendDp); // 初始化接收数据 byte[] receive = new byte[1024]; receiveDp = new DatagramPacket(receive, receive.length); // 从服务器接收数据包, ds.receive(receiveDp); // 读取反馈内容，并输出 byte[] response = receiveDp.getData(); int len = receiveDp.getLength(); String s = new String(response, 0, len); System.out.println("服务器端反馈为：" + s); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; // 关闭连接 ds.close(); &#125; catch (Exception e) &#123; &#125; &#125; &#125;&#125;在该示例代码中，首先建立UDP方式的网络连接，然后获得当前系统时间，这里获得的系统时间是客户端程序运行的本地计算机的时间，然后将时间字符串以及服务器端的IP和端口，构造成发送数据包对象，调用连接对象ds的send方法发送出去。在数据发送出去以后，构造接收数据的数据包对象，调用连接对象ds的receive方法接收服务器端的反馈，并输出在控制台。最后在finally语句块中关闭客户端网络连接。和下面将要介绍的服务器端一起运行时，客户端程序的输出结果为：1服务器端反馈为：OK下面是该示例程序的服务器端代码实现：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package udp;import java.net.*;/*** 简单UDP服务器端，实现功能是输出客户端发送数据，并反馈字符串“OK"给客户端*/public class SimpleUDPServer &#123; public static void main(String[] args) &#123; DatagramSocket ds = null; //连接对象 DatagramPacket sendDp; //发送数据包对象 DatagramPacket receiveDp; //接收数据包对象 final int PORT = 10010; //端口 try &#123; //建立连接，监听端口 ds = new DatagramSocket(PORT); System.out.println("服务器端已启动："); //初始化接收数据 byte[] b = new byte[1024]; receiveDp = new DatagramPacket(b,b.length); //接收 ds.receive(receiveDp); //读取反馈内容，并输出 InetAddress clientIP = receiveDp.getAddress(); int clientPort = receiveDp.getPort(); byte[] data = receiveDp.getData(); int len = receiveDp.getLength(); System.out.println("客户端IP：" + clientIP.getHostAddress()); System.out.println("客户端端口：" + clientPort); System.out.println("客户端发送内容：" + new String(data,0,len)); //发送反馈 String response = "OK"; byte[] bData = response.getBytes(); sendDp = new DatagramPacket(bData,bData.length,clientIP,clientPort); //发送 ds.send(sendDp); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125;finally&#123; try &#123; //关闭连接,释放占用的端口 ds.close(); &#125;catch(Exception e)&#123;&#125; &#125; &#125;&#125;在该服务器端实现中，首先监听10010号端口，和TCP方式的网络编程类似，服务器端的receive方法是阻塞方法，如果客户端不发送数据，则程序会在该方法处阻塞。当客户端发送数据到达服务器端时，则接收客户端发送过来的数据，然后将客户端发送的数据内容读取出来，并在服务器端程序中打印客户端的相关信息，从客户端发送过来的数据包中可以读取出客户端的IP以及客户端端口号，将反馈数据字符串“OK”发送给客户端，最后关闭服务器端连接，释放占用的系统资源，完成程序功能示例。运行结果：和前面TCP方式中的网络编程类似，这个示例也仅仅是网络编程的功能示例，也存在前面介绍的客户端无法进行多次数据交换，以及服务器端不支持多个客户端的问题，这两个问题也需要对于代码进行处理才可以很方便的进行解决。在解决该问题以前，需要特别指出的是UDP方式的网络编程由于不建立虚拟的连接，所以在实际使用时和TCP方式存在很多的不同，最大的一个不同就是“无状态”。该特点指每次服务器端都收到信息，但是这些信息和连接无关，换句话说，也就是服务器端只是从信息是无法识别出是谁发送的，这样就要求发送信息时的内容需要多一些，这个在后续的示例中可以看到。多次发送多次接收下面是实现客户端多次发送以及服务器端支持多个数据包同时处理的程序结构，实现的原理和TCP方式类似，在客户端将数据的发送和接收放入循环中，而服务器端则将接收到的每个数据包启动一个专门的线程进行处理。实现的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package udp;import java.net.*;import java.util.*;/*** 简单的UDP客户端，实现向服务器端发生系统时间功能* 该程序发送3次数据到服务器端*/public class MulUDPClient &#123; public static void main(String[] args) &#123; DatagramSocket ds = null; //连接对象 DatagramPacket sendDp; //发送数据包对象 DatagramPacket receiveDp; //接收数据包对象 String serverHost = "127.0.0.1"; //服务器IP int serverPort = 10012; //服务器端口号 try &#123; //建立连接 ds = new DatagramSocket(); //初始化 InetAddress address = InetAddress.getByName(serverHost); byte[] b = new byte[1024]; receiveDp = new DatagramPacket(b,b.length); System.out.println("客户端准备完成"); //循环10次，每次间隔0.01秒 for(int i = 0;i &lt; 10;i++) &#123; //初始化发送数据 Date d = new Date(); //当前时间 String content = d.toString(); //转换为字符串 byte[] data = content.getBytes(); //初始化发送包对象 sendDp = new DatagramPacket(data,data.length,address, serverPort); //发送 ds.send(sendDp); //延迟 Thread.sleep(10); //接收 ds.receive(receiveDp); //读取反馈内容，并输出 byte[] response = receiveDp.getData(); int len = receiveDp.getLength(); String s = new String(response,0,len); System.out.println("服务器端反馈为：" + s); &#125; &#125;catch(Exception e)&#123; e.printStackTrace(); &#125;finally&#123; try &#123; //关闭连接 ds.close(); &#125;catch(Exception e)&#123;&#125; &#125; &#125;&#125;在该示例中，将和服务器端进行数据交换的逻辑写在一个for循环的内部，这样就可以实现和服务器端的多次交换了，考虑到服务器端的响应速度，在每次发送之间加入0.01秒的时间间隔。最后当数据交换完成以后关闭连接，结束程序。实现该逻辑的服务器端程序代码如下：1234567891011121314151617181920212223242526272829303132333435363738package udp;import java.net.*;/*** 可以并发处理数据包的服务器端* 功能为：显示客户端发送的内容，并向客户端反馈字符串“OK”*/public class MulUDPServer &#123; public static void main(String[] args) &#123; DatagramSocket ds = null; //连接对象 DatagramPacket receiveDp; //接收数据包对象 final int PORT = 10012; //端口 byte[] b = new byte[1024]; receiveDp = new DatagramPacket(b,b.length); try &#123; //建立连接，监听端口 ds = new DatagramSocket(PORT); System.out.println("服务器端已启动："); while(true) &#123; //接收 ds.receive(receiveDp); //启动线程处理数据包 new LogicThread(ds,receiveDp); &#125; &#125;catch(Exception e)&#123; e.printStackTrace(); &#125;finally&#123; try &#123; //关闭连接 ds.close(); &#125;catch(Exception e)&#123;&#125; &#125; &#125;&#125;该代码实现了服务器端的接收逻辑，使用一个循环来接收客户端发送过来的数据包，当接收到数据包以后启动一个LogicThread线程处理该数据包。这样服务器端就可以实现同时处理多个数据包了。实现逻辑处理的线程代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243package udp;import java.net.*;/*** 逻辑处理线程*/public class LogicThread extends Thread &#123; /**连接对象*/ DatagramSocket ds; /**接收到的数据包*/ DatagramPacket dp; public LogicThread(DatagramSocket ds,DatagramPacket dp) &#123; this.ds = ds; this.dp = dp; start(); //启动线程 &#125; public void run() &#123; try &#123; //获得缓冲数组 byte[] data = dp.getData(); //获得有效数据长度 int len = dp.getLength(); //客户端IP InetAddress clientAddress = dp.getAddress(); //客户端端口 int clientPort = dp.getPort(); //输出 System.out.println("客户端IP：" + clientAddress.getHostAddress()); System.out.println("客户端端口号：" + clientPort); System.out.println("客户端发送内容：" + new String(data,0,len)); //反馈到客户端 byte[] b = "OK".getBytes(); DatagramPacket sendDp = new DatagramPacket(b,b.length,clientAddress,clientPort); //发送 ds.send(sendDp); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; &#125;&#125;在该线程中，只处理一次UDP通讯，当通讯结束以后线程死亡，在线程内部，每次获得客户端发送过来的信息，将获得的信息输出到服务器端程序的控制台，然后向客户端反馈字符串“OK”。由于UDP数据传输过程中可能存在丢失，所以在运行该程序时可能会出现程序阻塞的情况。如果需要避免该问题，可以将客户端的网络发送部分也修改成线程实现。情况：得不到服务器的响应，一直阻塞正常运行的情况：客户端接收响应的时候，设置超时时间，超时的时候停止等待接收。1234567891011121314151617181920for(int i = 0;i &lt; 10;i++)&#123; //初始化发送数据 Date d = new Date(); //当前时间 String content = d.toString(); //转换为字符串 byte[] data = content.getBytes(); //初始化发送包对象 sendDp = new DatagramPacket(data,data.length,address, serverPort); //发送 ds.send(sendDp); //设置接收的延时如果超过这个时间就不在等待接收 ds.setSoTimeout(3000); //接收 ds.receive(receiveDp); //读取反馈内容，并输出 byte[] response = receiveDp.getData(); int len = receiveDp.getLength(); String s = new String(response,0,len); System.out.println(&quot;服务器端反馈为：&quot; + s);&#125;这样当客户端长时间接收不到服务器的响应的时候，就会抛出java.net.SocketTimeoutException异常，客户端被终止运行。超时的运行效果：12345678客户端准备完成服务器端反馈为：OKjava.net.SocketTimeoutException: Receive timed out at java.net.DualStackPlainDatagramSocketImpl.socketReceiveOrPeekData(Native Method) at java.net.DualStackPlainDatagramSocketImpl.receive0(DualStackPlainDatagramSocketImpl.java:124) at java.net.AbstractPlainDatagramSocketImpl.receive(AbstractPlainDatagramSocketImpl.java:143) at java.net.DatagramSocket.receive(DatagramSocket.java:812) at udp.MulUDPClient.main(MulUDPClient.java:40)关于基础的UDP网络编程就介绍这么多了，下面将介绍一下网络协议的概念。本文链接: UDP网络编程]]></content>
      <categories>
        <category>Java</category>
        <category>java 网络编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[5TCP编程优化]]></title>
    <url>%2Fblog%2F5eef6183%2F</url>
    <content type="text"><![CDATA[在前面的示例中，客户端中建立了一次连接，只发送一次数据就关闭了，这就相当于拨打电话时，电话打通了只对话一次就关闭了，其实更加常用的应该是拨通一次电话以后多次对话，这就是复用客户端连接。把客户端交换的逻辑写到循环中那 么如何实现建立一次连接，进行多次数据交换呢？其实很简单，建立连接以后，将数据交换的逻辑写到一个循环中就可以了。这样只要循环不结束则连接就不会被关 闭。按照这种思路，可以改造一下上面的代码，让该程序可以在建立连接一次以后，发送三次数据，当然这里的次数也可以是多次，示例代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package tcp;import java.io.*;import java.net.*;/*** 复用连接的Socket客户端* 功能为：发送字符串“Hello”到服务器端，并打印出服务器端的反馈*/public class MulSocketClient &#123; public static void main(String[] args) &#123; Socket socket = null; InputStream is = null; OutputStream os = null; //服务器端IP地址 String serverIP = "127.0.0.1"; //服务器端端口号 int port = 10000; //发送内容 String data[] =&#123;"First","Second","Third"&#125;; try &#123; //建立连接 socket = new Socket(serverIP,port); //初始化流 os = socket.getOutputStream(); is = socket.getInputStream(); byte[] b = new byte[1024]; //输出全部的数据 for(int i = 0;i &lt; data.length;i++) &#123; //发送数据 os.write(data[i].getBytes()); //接收数据 int n = is.read(b); //输出反馈数据 System.out.println("服务器反馈：" + new String(b,0,n)); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); //打印异常信息 &#125;finally&#123; try &#123; //关闭流和连接 is.close(); os.close(); socket.close(); &#125; catch (Exception e2) &#123;&#125; &#125; &#125;&#125;该示例程序和前面的代码相比，将数据交换部分的逻辑写在一个for循环的内容，这样就可以建立一次连接，依次将data数组中的数据按照顺序发送给服务器端了。如果还是使用前面示例代码中的服务器端程序运行该程序，则该程序的结果是：12345678服务器反馈：Firstjava.net.SocketException: Software caused connection abort: recv failed at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) at java.net.SocketInputStream.read(SocketInputStream.java:170) at java.net.SocketInputStream.read(SocketInputStream.java:141) at java.net.SocketInputStream.read(SocketInputStream.java:127) at tcp.MulSocketClient.main(MulSocketClient.java:35)显然，客户端在实际运行时出现了异常，出现异常的原因是什么呢？如果仔细阅读前面的代码，应该还记得前面示例代码中的服务器端是对话一次数据以后就关闭了连接，如果服务器端程序关闭了，客户端继续发送数据肯定会出现异常，这就是出现该问题的原因。按照客户端实现的逻辑，也可以复用服务器端的连接，实现的原理也是将服务器端的数据交换逻辑写在循环中即可，按照该种思路改造以后的服务器端代码为：把服务器端的数据交换逻辑写在循环1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package tcp;import java.io.*;import java.net.*;/*** 复用连接的echo服务器* 功能：将客户端发送的内容反馈给客户端*/public class MulSocketServer &#123; public static void main(String[] args) &#123; ServerSocket serverSocket = null; Socket socket = null; OutputStream os = null; InputStream is = null; //监听端口号 int port = 10000; try &#123; //建立连接 serverSocket = new ServerSocket(port); System.out.println("服务器已启动："); //获得连接 socket = serverSocket.accept(); //初始化流 is = socket.getInputStream(); os = socket.getOutputStream(); byte[] b = new byte[1024]; for(int i = 0;i &lt; 3;i++) &#123; int n = is.read(b); //输出 System.out.println("客户端发送内容为：" + new String(b,0,n)); //向客户端发送反馈内容 os.write(b, 0, n); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally&#123; try &#123; //关闭流和连接 os.close(); is.close(); socket.close(); serverSocket.close(); &#125;catch(Exception e)&#123;&#125; &#125; &#125;&#125;在该示例代码中，也将数据发送和接收的逻辑写在了一个for循环内部，只是在实现时硬性的将循环次数规定成了3次，这样代码虽然比较简单，但是通用性比较差。服务器端程序的输出结果为：1234服务器已启动：客户端发送内容为：First客户端发送内容为：Second客户端发送内容为：Third客户端的输出结果为：123服务器反馈：First服务器反馈：Second服务器反馈：Third在该程序中，比较明显的体现出了“请求-响应”模型，也就是在客户端发起连接以后，首先发送字符串“First”给服务器端，服务器端输出客户端发送的内容“First”，然后将客户端发送的内容再反馈给客户端，这样客户端也输出服务器反馈“First”，这样就完成了客户端和服务器端的一次对话，紧接着客户端发送“Second”给服务器端，服务端输出“Second”，然后将“Second”再反馈给客户端，客户端再输出“Second”，从而完成第二次对话，第三次会话的过程和这个一样。在这个过程中，每次都是客户端程序首先发送数据给服务器端，服务器接收数据以后，将结果反馈给客户端，客户端接收到服务器端的反馈，从而完成一次通讯过程。在该示例中，虽然解决了多次发送的问题，但是客户端和服务器端的次数控制还不够灵活，如果客户端的次数不固定怎么办呢？是否可以使用某个特殊的字符串，例如quit，表示客户端退出呢,这就涉及到网络协议的内容了，会在后续的网络应用示例部分详细介绍。下面开始介绍另外一个网络编程的突出问题。如何使服务器端支持多个客户端同时工作前面介绍的服务器端程序，只是实现了概念上的服务器端，离实际的服务器端程序结构距离还很遥远，如果需要让服务器端能够实际使用，那么最需要解决的问题就是——如何支持多个客户端同时工作。一个服务器端一般都需要同时为多个客户端提供通讯，如果需要同时支持多个客户端，则必须使用前面介绍的线程的概念。简单来说，也就是当服务器端接收到一个连接时，启动一个专门的线程处理和该客户端的通讯。按照这个思路改写的服务端示例程序将由两个部分组成，MulThreadSocketServer类实现服务器端控制，实现接收客户端连接，然后开启专门的逻辑线程处理该连接，LogicThread类实现对于一个客户端连接的逻辑处理，将处理的逻辑放置在该类的run方法中。该示例的代码实现为：12345678910111213141516171819202122232425262728293031323334353637package tcp;import java.net.ServerSocket;import java.net.Socket;/*** 支持多客户端的服务器端实现*/public class MulThreadSocketServer &#123; public static void main(String[] args) &#123; ServerSocket serverSocket = null; Socket socket = null; //监听端口号 int port = 10000; try &#123; //建立连接 serverSocket = new ServerSocket(port); System.out.println("服务器已启动："); while(true) &#123; //获得连接 socket = serverSocket.accept(); //启动线程处理连接 new LogicThread(socket); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally&#123; try &#123; //关闭连接 serverSocket.close(); &#125;catch(Exception e)&#123;&#125; &#125; &#125;&#125;在该示例代码中，实现了一个while形式的死循环，由于accept方法是阻塞方法，所以当客户端连接未到达时，将阻塞该程序的执行，当客户端到达时接收该连接，并启动一个新的ResponseThread线程处理该连接，然后按照循环的执行流程，继续等待下一个客户端连接。这样当任何一个客户端连接到达时，都开启一个专门的线程处理，通过多个线程支持多个客户端同时处理。下面再看一下ResponseThread线程类的源代码实现：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package tcp;import java.io.*;import java.net.*;/*** 服务器端逻辑线程*/public class ResponseThread extends Thread &#123; Socket socket; InputStream in; OutputStream out; public ResponseThread(Socket socket) &#123; this.socket = socket; start(); //启动线程 &#125; public void run() &#123; byte[] receive = new byte[1024]; try &#123; response(receive); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125;finally&#123; close(); &#125; &#125; /** * @param receive 接收到的数据 * @throws IOException */ public void response(byte[] receive) throws IOException &#123; //初始化流 out = socket.getOutputStream(); in = socket.getInputStream(); for(int i = 0;i &lt; 3;i++) &#123; //读取数据 int n = in.read(receive); //反馈数据 out.write(receive,0,n); &#125; &#125; /** * 关闭流和连接 */ private void close() &#123; try &#123; //关闭流和连接 out.close(); in.close(); socket.close(); &#125;catch(Exception e)&#123;&#125; &#125;&#125;在该示例代码中，每次使用一个连接对象构造一个处理线程，该连接对象就是该线程需要处理的连接，在线程构造完成以后，该线程就被启动起来了，然后在run方法内部对客户端连接进行处理，数据交换的逻辑和前面的示例代码一致，只是这里将接收到客户端发送过来的数据并进行处理的逻辑封装成了response方法，实现的是echo服务的逻辑。运行效果出现的问题1javac -d . MulThreadSocketServer.java编译结果：123456MulThreadSocketServer.java:26: 错误: 找不到符号 new ResponseThread(socket); ^ 符号: 类 ResponseThread 位置: 类 MulThreadSocketServer1 个错误换到IDE中运行，运行起来是好好的，但是CMD中却报这样的错误。这是怎么回事呢，这个其实是因为ResponseThread.class没有，所以应该先编译ResponseThread,然后再编译MulThreadSocketServer编译响应逻辑线程：1javac -d . ResponseThread.java编译服务器：1javac -d . MulThreadSocketServer.java运行服务器：1java tcp.MulThreadSocketServer运行客户端1：1java tcp.MulSocketClient运行客户端2：1java tcp.MulSocketClient两个客户端的响应效果如下所示：这里的示例还只是基础的服务器端实现，在实际的服务器端实现中，由于硬件和端口数的限制，所以不能无限制的创建线程对象，而且频繁的创建线程对象效率也比较低，所以程序中都实现了线程池来提高程序的执行效率。使用线程池这里简单介绍一下线程池的概念，线程池(Thread pool)是池技术的一种，就是在程序启动时首先把需要的线程对象创建好，例如创建5000个线程对象，然后当客户端连接到达时从线程池中取出一个已经创建完成的线程对象使用即可。当客户端连接关闭以后，将该线程对象重新放入到线程池中供其它的客户端重复使用，这样可以提高程序的执行速度，优化程序对于内存的占用等。关于基础的TCP方式的网络编程就介绍这么多，下面介绍UDP方式的网络编程在Java语言中的实现。本文链接: 5TCP编程优化]]></content>
      <categories>
        <category>Java</category>
        <category>java 网络编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4TCP编程]]></title>
    <url>%2Fblog%2Fdfafaccc%2F</url>
    <content type="text"><![CDATA[按照前面的介绍，网络通讯的方式有TCP和UDP两种，其中TCP方式的网络通讯是指在通讯的过程中保持连接，有点类似于打电话，只需要拨打一次号码(建立一次网络连接)，就可以多次通话(多次传输数据)。这样方式在实际的网络编程中，由于传输可靠，类似于打电话，如果甲给乙打电话，乙说没有听清楚让甲重复一遍，直到乙听清楚为止，实际的网络传输也是这样，如果发送的一方发送的数据接收方觉得有问题，则网络底层会自动要求发送方重发，直到接收方收到为止。在Java语言中，对于TCP方式的网络编程提供了良好的支持，在实际实现时，以java.net.Socket类代表客户端连接，以java.net.ServerSocket类代表服务器端连接。在进行网络编程时，底层网络通讯的细节已经实现了比较高的封装，所以在程序员实际编程时，只需要指定IP地址和端口号码就可以建立连接了。正是由于这种高度的封装，一方面简化了Java语言网络编程的难度，另外也使得使用Java语言进行网络编程时无法深入到网络的底层，所以使用Java语言进行网络底层系统编程很困难，具体点说，Java语言无法实现底层的网络嗅探以及获得IP包结构等信息。但是由于Java语言的网络编程比较简单，所以还是获得了广泛的使用。在使用TCP方式进行网络编程时，需要按照前面介绍的网络编程的步骤进行，下面分别介绍一下在Java语言中客户端和服务器端的实现步骤。客户端网络编程第一步：建立连接在客户端网络编程中，首先需要建立连接，在Java API中以java.net.Socket类的对象代表网络连接，所以建立客户端网络连接，也就是创建Socket类型的对象，该对象代表网络连接，示例如下：12Socket socket1 = new Socket(“192.168.1.103”,10000);Socket socket2 = new Socket(“github.com”,80);上面的代码中，socket1实现的是连接到IP地址是192.168.1.103的计算机的10000号端口，而socket2实现的是连接到域名是www.sohu.com的计算机的80号端口，至于底层网络如何实现建立连接，对于程序员来说是完全透明的。如果建立连接时，本机网络不通，或服务器端程序未开启，则会抛出异常。第二步: 交换数据连接一旦建立，则完成了客户端编程的第一步，紧接着的步骤就是按照“请求-响应”模型进行网络数据交换，在Java语言中，数据传输功能由Java IO实现，也就是说只需要从连接中获得输入流和输出流即可，然后将需要发送的数据写入连接对象的输出流中，在发送完成以后从输入流中读取数据即可。示例代码如下：12OutputStream os = socket1.getOutputStream(); //获得输出流，用来想服务发送请求InputStream is = socket1.getInputStream(); //获得输入流,用来读取服务器的响应上面的代码中，分别从socket1这个连接对象获得了输出流和输入流对象，在整个网络编程中，后续的数据交换就变成了IO操作，也就是遵循“请求-响应”模型的规定，先向输出流中写入数据，这些数据会被系统发送出去，然后再从输入流中读取服务器端的反馈信息，这样就完成了一次数据交换过程，当然这个数据交换过程可以多次进行。这里获得的只是最基本的输出流和输入流对象，还可以根据前面学习到的IO知识，使用流的嵌套将这些获得到的基本流对象转换成需要的装饰流对象，从而方便数据的操作。第三步：关闭网络连接最后当数据交换完成以后，关闭网络连接，释放网络连接占用的系统端口和内存等资源，完成网络操作，示例代码如下：1socket1.close();实例这就是最基本的网络编程功能介绍。下面是一个简单的网络客户端程序示例，该程序的作用是向服务器端发送一个字符串“Hello”，并将服务器端的响应显示到控制台，数据交换只进行一次，当数据交换进行完成以后关闭网络连接，程序结束。实现的代码如下：实例：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879package tcp;import java.io.*;import java.net.*;/** * 简单的Socket客户端 * 功能为：发送字符串“Hello”到服务器端，并打印出服务器端的响应 */public class SimpleSocketClient&#123; public static void main(String[] args) &#123; Socket socket = null; InputStream is = null; OutputStream os = null; // 服务器端IP地址 String serverIP = &quot;127.0.0.1&quot;; // 服务器端端口号 int serverPort = 10000; // 发送内容 String request = &quot;Hello&quot;; try &#123; // 第一步:建立连接 socket = new Socket(serverIP, serverPort); // 第二步:交换数据 // 获取输出流 os = socket.getOutputStream(); // 发送数据给服务器 os.write(request.getBytes()); // 接收服务器的数据 is = socket.getInputStream(); byte[] response = new byte[1024]; int size = is.read(response); // 输出反馈数据 System.out.println(&quot;服务器响应：&quot; + new String(response, 0, size)); &#125; catch (Exception e) &#123; e.printStackTrace(); // 打印异常信息 &#125; finally &#123; if(os!=null) &#123; try &#123; os.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if(is!=null) &#123; try &#123; is.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if(socket!=null) &#123; try &#123; socket.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; &#125;&#125;在该示例代码中建立了一个连接到IP地址为127.0.0.1，端口号码为10000的TCP类型的网络连接，然后获得连接的输出流对象，将需要发送的字符串“Hello”转换为byte数组写入到输出流中，由系统自动完成将输出流中的数据发送出去，如果需要强制发送，可以调用输出流对象中的flush方法实现。在数据发送出去以后，从连接对象的输入流中读取服务器端的反馈信息，读取时可以使用IO中的各种读取方法进行读取，这里使用最简单的方法进行读取，从输入流中读取到的内容就是服务器端的响应，并将读取到的内容在客户端的控制台进行输出，最后依次关闭打开的流对象和网络连接对象。这是一个简单的功能示例，在该示例中演示了TCP类型的网络客户端基本方法的使用，该代码只起演示目的，还无法达到实用的级别。TCP客户端编程介绍完一个简单的客户端编程的示例，下面接着介绍一下TCP类型的服务器端的编写。首先需要说明的是，客户端的步骤和服务器端的编写步骤不同，所以在学习服务器端编程时注意不要和客户端混淆起来。第一步：监听窗口在服务器端程序编程中，由于服务器端实现的是被动等待连接，所以服务器端编程的第一个步骤是监听端口，也就是监听是否有客户端连接到达。实现服务器端监听的代码为：1ServerSocket ss = new ServerSocket(10000);该代码实现的功能是监听当前计算机的10000号端口，如果在执行该代码时，10000号端口已经被别的程序占用，那么将抛出异常。否则将实现监听。第二步：建立连接服务器端编程的第二个步骤是获得连接。该步骤的作用是当有客户端连接到达时，建立一个和客户端连接对应的Socket连 接对象，从而释放客户端连接对于服务器端端口的占用。实现功能就像公司的前台一样，当一个客户到达公司时，会告诉前台我找某某某，然后前台就通知某某某， 然后就可以继续接待其它客户了。通过获得连接，使得客户端的连接在服务器端获得了保持，另外使得服务器端的端口释放出来，可以继续等待其它的客户端连接。 实现获得连接的代码是：1Socket socket = ss.accept();该代码实现的功能是获得当前连接到服务器端的客户端连接。需要说明的是accept和IO部分介绍的read方法一样，都是一个阻塞方法，也就是当无连接时，该方法将阻塞程序的执行，直到连接到达时才执行该行代码。另外获得的连接会在服务器端的该端口注册，这样以后就可以通过在服务器端的注册信息直接通信，而注册以后服务器端的端口就被释放出来，又可以继续接受其它的连接了。第三步：交换数据连接获得以后，后续的编程就和客户端的网络编程类似了，这里获得的Socket类型的连接就和客户端的网络连接一样了，只是服务器端需要首先读取发送过来的数据，然后进行逻辑处理以后再发送给客户端，也就是交换数据的顺序和客户端交换数据的步骤刚好相反。这部分的内容和客户端很类似，所以就不重复了，如果还不熟悉，可以参看下面的示例代码。关闭连接最后，在服务器端通信完成以后，关闭服务器端连接。实现的代码为：1ss.close();这就是基本的TCP类型的服务器端编程步骤。下面以一个简单的echo服务实现为例子，介绍综合使用示例。echo的意思就是“回声”，echo服务器端实现的功能就是将客户端发送的内容再原封不动的反馈给客户端。实现的代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package tcp;import java.io.*;import java.net.*;/** * echo服务器 功能：将客户端发送的内容反馈给客户端 */public class SimpleSocketServer&#123; public static void main(String[] args) &#123; ServerSocket serverSocket = null; Socket socket = null; OutputStream out = null; InputStream in = null; // 监听端口号 int port = 10000; try &#123; // 建立连接 serverSocket = new ServerSocket(port); // 获得连接 socket = serverSocket.accept(); // 接收客户端发送内容 in = socket.getInputStream(); byte[] recive = new byte[1024]; int size = in.read(recive); // 输出 System.out.println("客户端发送内容为：" + new String(recive, 0, size)); // 向客户端发送反馈内容 out = socket.getOutputStream(); out.write(recive, 0, size); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; // 关闭流和连接 out.close(); in.close(); socket.close(); serverSocket.close(); &#125; catch (Exception e) &#123; &#125; &#125; &#125;&#125;在该示例代码中建立了一个监听当前计算机10000号端口的服务器端Socket连接，然后获得客户端发送过来的连接，如果有连接到达时，读取连接中发送过来的内容，并将发送的内容在控制台进行输出，输出完成以后将客户端发送的内容再反馈给客户端。最后关闭流和连接对象，结束程序。运行客户端和服务端 ###：因为在IDE中只有一个控制台窗口，所以运行效果不明显，所以这里再cmd命令行中编译运行简单点。编译运行服务器在cmd中编译服务器1javac -d . SimpleSocketServer.java在cmd中运行服务器1java tcp.SimpleSocketServer此时，服务器端将阻塞，等待客户端的连接。编译运行客户端在cmd中编译客户端1javac -d . SimpleSocketClient.java在cmd中运行客户端1java tcp.SimpleSocketClient运行结果：这样，就以一个很简单的示例演示了TCP类型的网络编程在Java语言中的基本实现，这个示例只是演示了网络编程的基本步骤以及各个功能方法的基本使用，只是为网络编程打下了一个基础，下面将就几个问题来深入介绍网络编程深层次的一些知识。为了一步一步的掌握网络编程，下面再研究网络编程中的两个基本问题，通过解决这两个问题将对网络编程的认识深入一层。本文链接: 4TCP编程]]></content>
      <categories>
        <category>Java</category>
        <category>java 网络编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3Java网络编程技术]]></title>
    <url>%2Fblog%2Feadab85c%2F</url>
    <content type="text"><![CDATA[Java语言是在网络环境下诞生的，所以Java语言虽然不能说是对于网络编程的支持最好的语言，但是必须说是一种对于网络编程提供良好支持的语言，使用Java语言进行网络编程将是一件比较轻松的工作。和网络编程有关的基本API位于java.net包中，该包中包含了基本的网络编程实现，该包是网络编程的基础。该包中既包含基础的网络编程类，也包含封装后的专门处理WEB相关的处理类。在本章中，将只介绍基础的网络编程类。首先来介绍一个基础的网络类——InetAddress类。该类的功能是代表一个IP地址，是ip地址的java表示方式。并且将IP地址和域名相关的操作方法包含在该类的内部。InetAddress类–代表一个IP地址创建InetAddress类实例的方法InetAddress没有public构造器，必须通过一系列的静态方法获取实例。如下表所示。方法描述static InetAddress[] getAllByName(String host)在给定主机名的情况下，根据系统上配置的名称服务返回其 IP 地址所组成的数组。static InetAddress getByAddress(byte[] addr)在给定原始 IP 地址的情况下，返回 InetAddress 对象。static InetAddress getByAddress(String host, byte[] addr)根据提供的主机名和 IP 地址创建 InetAddress。static InetAddress getByName(String host)在给定主机名的情况下确定主机的 IP 地址。static InetAddress getLocalHost()返回本地主机。在这些静态方法中，最为常用的应该是getByName(String host)方法，只需要传入目标主机的名字，实例通过域名获取InetAddress对象：12// 使用域名创建InetAddress对象InetAddress inetAddr = InetAddress.getByName("github.com");通过IP地址获取InetAddress对象:12// 使用点分十进制IP地址创建InetAddress对象InetAddress inetAddr = InetAddress.getByName("52.74.223.119");获取本机的InetAddress对象:1InetAddress address = InetAddress.getLocalHost();重写Object类的方法：方法描述boolean equals(Object obj)将此对象与指定对象比较。int hashCode()返回此 IP 地址的哈希码。String toString()将此 IP 地址转换为 String。实例：123456789//根据域名生成实例InetAddress inetAddr=InetAddress.getByName("github.com");System.out.println(inetAddr.toString());//根据IP地址生产实例inetAddr=InetAddress.getByName("13.250.177.223");System.out.println(inetAddr.toString());//获取本机inetAddr=InetAddress.getLocalHost();System.out.println(inetAddr.toString());运行结果：123github.com/13.250.177.223/13.250.177.223DESKTOP-9H231R6/192.168.233.233获取IP地址相关信息的方法方法描述String getCanonicalHostName()获取此 IP 地址的完全限定域名。String getHostAddress()获取点分十进制表示的ip地址byte[] getAddress()获取字节数组表示的ip地址String getHostName()获取此 IP 地址的主机名。实例：12345678910111213141516171819202122232425public static void main(String[] args)&#123; try &#123; // 使用域名创建对象 InetAddress inetAddr = InetAddress.getByName(&quot;github.com&quot;); System.out.println(&quot;IP地址的完全限定域名：&quot; + inetAddr.getCanonicalHostName()); System.out.println(&quot;主机IP地址为：&quot; + inetAddr.getHostAddress()); System.out.println(&quot;主机名称为：&quot; + inetAddr.getHostName()); // byte[] getAddress() 返回此 InetAddress 对象的原始 IP 地址。 byte[] ipbyte = inetAddr.getAddress();// 获取原始IP地址 System.out.println(&quot;字节数组表示的ip地址：&quot; + Arrays.toString(ipbyte)); System.out.print(&quot;字节地址转为点分十进制表示:&quot;); for (int i = 0; i &lt; ipbyte.length; i++) &#123; if (i != 0) System.out.print(&quot;.&quot;); System.out.print(Byte.toUnsignedInt(ipbyte[i])); &#125; System.out.println(); &#125; catch (Exception e) &#123; &#125;&#125;运行结果：12345IP地址的完全限定域名：ec2-52-74-223-119.ap-southeast-1.compute.amazonaws.com主机IP地址为：52.74.223.119主机名称为：github.com字节数组表示的ip地址：[52, 74, -33, 119]字节地址转为点分十进制表示:52.74.223.119从运行结果中可以看到getHostAddress()方法获取的是字符串表示的IP地址(点分十进制)，而getAddress()获取的是字节数组表示的IP地址，这两者只是表示方式不同而已，两者之间可以相互转化。判断方法：方法描述boolean isAnyLocalAddress()检查 InetAddress 是否是通配符地址的实用例行程序。boolean isLinkLocalAddress()检查 InetAddress 是否是链接本地地址的实用例行程序。boolean isLoopbackAddress()检查 InetAddress 是否是回送地址的实用例行程序。boolean isMCGlobal()检查多播地址是否具有全局域的实用例行程序。boolean isMCLinkLocal()检查多播地址是否具有链接范围的实用例行程序。boolean isMCNodeLocal()检查多播地址是否具有节点范围的实用例行程序。boolean isMCOrgLocal()检查多播地址是否具有组织范围的实用例行程序。boolean isMCSiteLocal()检查多播地址是否具有站点范围的实用例行程序。boolean isMulticastAddress()检查 InetAddress 是否是 IP 多播地址的实用例行程序。boolean isReachable(int timeout)测试是否可以达到该地址。boolean isReachable(NetworkInterface netif,int ttl, int timeout)测试是否可以达到该地址。boolean isSiteLocalAddress()检查 InetAddress 是否是站点本地地址的实用例行程序。本文链接: 3Java网络编程技术]]></content>
      <categories>
        <category>Java</category>
        <category>java 网络编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2网络编程技术]]></title>
    <url>%2Fblog%2F20535608%2F</url>
    <content type="text"><![CDATA[原文:https://blog.csdn.net/sihai12345/article/details/79334299前面介绍了网络编程的相关基础知识，初步建立了网络编程的概念，但是实际学习网络编程还必须使用某种程序设计语言进行代码实现，下面就介绍一下网络编程的代码实现。网络编程步骤按照前面的基础知识介绍，无论使用TCP方式还是UDP方式进行网络通讯，网络编程都是由客户端和服务器端组成。当然，B/S结构的编程中只需要实现服务器端即可。所以，下面介绍网络编程的步骤时，均以C/S结构为基础进行介绍。说明：这里的步骤实现和语言无关，也就是说，这个步骤适用于各种语言实现，不局限于Java语言。客户端网络编程步骤客户端(Client)是指网络编程中首先发起连接的程序，客户端一般实现程序界面和基本逻辑实现，在进行实际的客户端编程时，无论客户端复杂还是简单，以及客户端实现的方式，客户端的编程主要由三个步骤实现：建立网络连接客户端网络编程的第一步都是建立网络连接。在建立网络连接时需要指定连接到的服务器的IP地址和端口号，建立完成以后，会形成一条虚拟的连接，后续的操作就可以通过该连接实现数据交换了。交换数据连接建立以后，就可以通过这个连接交换数据了。交换数据严格按照请求响应模型进行，由客户端发送一个请求数据到服务器，服务器反馈一个响应数据给客户端，如果客户端不发送请求则服务器端就不响应。根据逻辑需要，可以多次交换数据，但是还是必须遵循请求响应模型。关闭网络连接在数据交换完成以后，关闭网络连接，释放程序占用的端口、内存等系统资源，结束网络编程。最基本的步骤一般都是这三个步骤，在实际实现时，步骤2会出现重复，在进行代码组织时，由于网络编程是比较耗时的操作，所以一般开启专门的现场进行网络通讯。服务器端网络编程步骤服务器端(Server)是指在网络编程中被动等待连接的程序，服务器端一般实现程序的核心逻辑以及数据存储等核心功能。服务器端的编程步骤和客户端不同，是由四个步骤实现，依次是：监听端口服务器端属于被动等待连接，所以服务器端启动以后，不需要发起连接，而只需要监听本地计算机的某个固定端口即可。这个端口就是服务器端开放给客户端的端口，服务器端程序运行的本地计算机的IP地址就是服务器端程序的IP地址。获得连接当客户端连接到服务器端时，服务器端就可以获得一个连接，这个连接包含客户端的信息，例如客户端IP地址等等，服务器端和客户端也通过该连接进行数据交换。一般在服务器端编程中，当获得连接时，需要开启专门的线程处理该连接，每个连接都由独立的线程实现。交换数据服务器端通过获得的连接进行数据交换。服务器端的数据交换步骤是首先接收客户端发送过来的数据，然后进行逻辑处理，再把处理以后的结果数据发送给客户端。简单来说，就是先接收请求再发送处理结果(响应)，这个和客户端的数据交换数序不同。其实，服务器端获得的连接和客户端连接是一样的，只是数据交换的步骤不同。当然，服务器端的数据交换也是可以多次进行的。在数据交换完成以后，关闭和客户端的连接。关闭连接当服务器程序关闭时，需要关闭服务器端，通过关闭服务器端使得服务器监听的端口以及占用的内存可以释放出来，实现了连接的关闭。现实的例子其实服务器端编程的模型和呼叫中心的实现是类似的，例如移动的客服电话10086就是典型的呼叫中心，当一个用户拨打10086时，转接给一个专门的客服人员，由该客服实现和该用户的问题解决，当另外一个用户拨打10086时，则转接给另一个客服，实现问题解决，依次类推。在服务器端编程时，10086这个电话号码就类似于服务器端的端口号码，每个用户就相当于一个客户端程序，每个客服人员就相当于服务器端启动的专门和客户端连接的线程，每个线程都是独立进行交互的。这就是服务器端编程的模型，只是TCP方式是需要建立连接的，对于服务器端的压力比较大，而UDP是不需要建立连接的，对于服务器端的压力比较小罢了。小结总之，无论使用任何语言，任何方式进行基础的网络编程，都必须遵循固定的步骤进行操作，在熟悉了这些步骤以后，可以根据需要进行逻辑上的处理，但是还是必须遵循固定的步骤进行。其实，基础的网络编程本身不难，也不需要很多的基础网络知识，只是由于编程的基础功能都已经由API实现，而且需要按照固定的步骤进行，所以在入门时有一定的门槛，希望下面的内容能够将你快速的带入网络编程技术的大门。本文链接: 2网络编程技术]]></content>
      <categories>
        <category>Java</category>
        <category>java 网络编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1网络概述]]></title>
    <url>%2Fblog%2Fd9a41e7d%2F</url>
    <content type="text"><![CDATA[原文:https://blog.csdn.net/sihai12345/article/details/79334299网络编程就是在两个或两个以上的设备(例如计算机)之间传输数据。程序员所作的事情就是把数据发送到指定的位置，或者接收到指定的数据，这个就是狭义的网络编程范畴。在发送和接收数据时，大部分的程序设计语言都设计了专门的API实现这些功能，程序员只需要调用即可。所以，基础的网络编程可以和打电话一样简单。网络概述计算机网络概述网络编程的实质就是两个(或多个)设备(例如计算机)之间的数据传输。网络最主要的优势在于共享：共享设备和数据，现在共享设备最常见的是打印机，一个公司一般一个打印机即可，共享数据就是将大量的数据存储在一组机器中，其它的计算机通过网络访问这些数据，例如网站、银行服务器等等。对于网络编程来说，最主要的是计算机和计算机之间的通信，这样首要的问题就是如何找到网络上的计算机呢？这就需要了解IP地址的概念。从网络中找到一个计算机–IP地址为了能够方便的识别网络上的每个设备，网络中的每个设备都会有一个唯一的数字标识，这个就是IP地址。在计算机网络中,现在命名IP地址的规定是IPv4协议，该协议规定每个IP地址由4个0-255之间的数字组成，例如10.0.120.34。每个接入网络的计算机都拥有唯一的IP地址，这个IP地址可能是固定的，例如网络上各种各样的服务器，也可以是动态的，例如使用ADSL拨号上网的宽带用户，无论以何种方式获得或是否是固定的，每个计算机在联网以后都拥有一个唯一的合法IP地址，就像每个手机号码一样。域名–方便记忆但是由于IP地址不容易记忆，所以为了方便记忆，有创造了另外一个概念——域名(Domain Name)，例如sohu.com等。一个IP地址可以对应多个域名，一个域名只能对应一个IP地址。域名的概念可以类比手机中的通讯簿，由于手机号码不方便记忆，所以添加一个姓名标识号码，在实际拨打电话时可以选择该姓名，然后拨打即可。在网络中传输的数据，全部是以IP地址作为地址标识，所以在实际传输数据以前需要将域名转换为IP地址，实现这种功能的服务器称之为DNS服务器，也就是通俗的说法叫做域名解析。例如当用户在浏览器输入域名时，浏览器首先请求DNS服务器，将域名转换为IP地址，然后将转换后的IP地址反馈给浏览器，然后再进行实际的数据传输。域名和IP地址的区别当DNS服务器正常工作时，使用IP地址或域名都可以很方便的找到计算机网络中的某个设备，例如服务器计算机。当DNS不正常工作时，只能通过IP地址访问该设备。所以IP地址的使用要比域名通用一些。在一个计算机中找到一个程序–端口IP地址和域名很好的解决了在网络中找到一个计算机的问题，但是为了让一个计算机可以同时运行多个网络程序，就引入了另外一个概念——端口(port)。在介绍端口的概念以前，首先来看一个例子，一般一个公司前台会有一个电话，每个员工会有一个分机，这样如果需要找到这个员工的话，需要首先拨打前台总机，然后转该分机号即可。这样减少了公司的开销，也方便了每个员工。在该示例中前台总机的电话号码就相当于IP地址，而每个员工的分机号就相当于端口。有了端口的概念以后，在同一个计算机中每个程序对应唯一的端口，这样一个计算机上就可以通过端口区分发送给每个端口的数据了，换句话说，也就是一个计算机上可以并发运行多个网络程序，而不会在互相之间产生干扰。在硬件上规定，端口的号码必须位于0-65535之间，每个端口唯一的对应一个网络程序，一个网络程序可以使用多个端口。这样一个网络程序运行在一台计算上时，不管是客户端还是服务器，都是至少占用一个端口进行网络通讯。在接收数据时，首先发送给对应的计算机，然后计算机根据端口把数据转发给对应的程序。在网络上找到一个程序：IP地址+端口号有了IP地址和端口的概念以后，在进行网络通讯交换时，就可以通过IP地址查找到该台计算机，然后通过端口标识这台计算机上的一个唯一的程序。这样就可以进行网络数据的交换了。但是，进行网络编程时，只有IP地址和端口的概念还是不够的，下面就介绍一下基础的网络编程相关的软件基础知识。网络编程概述按照前面的介绍，网络编程就是两个或多个设备之间的数据交换，其实更具体的说，网络编程就是两个或多个程序之间的数据交换，和普通的单机程序相比，网络程序最大的不同就是需要交换数据的程序运行在不同的计算机上，这样就造成了数据交换的复杂。虽然通过IP地址和端口可以找到网络上运行的一个程序，但是如果需要进行网络编程，则还需要了解网络通讯的过程。请求响应模型网络通讯基于“请求-响应”模型。为了理解这个模型，先来看一个例子，经常看电视的人肯定见过审讯的场面吧，一般是这样的：1234567警察：姓名嫌疑犯：XXX警察：性别嫌疑犯：男警察：年龄嫌疑犯：29……请求响应模型在这个例子中，警察问一句，嫌疑犯回答一句，如果警察不问，则嫌疑犯保持沉默。这种一问一答的形式就是网络中的“请求-响应”模型。也就是通讯的一端发送数据，另外一端反馈数据，网络通讯都基于该模型。在网络通讯中，第一次主动发起通讯的程序被称作客户端(Client)程序，简称客户端，而在第一次通讯中等待连接的程序被称作服务器端(Server)程序，简称服务器。一旦通讯建立，则客户端和服务器端完全一样，没有本质的区别。客户端/服务器结构由此，网络编程中的两种程序就分别是客户端和服务器端，例如QQ程序，每个QQ用户安装的都是QQ客户端程序，而QQ服务器端程序则运行在腾讯公司的机房中，为大量的QQ用户提供服务。这种网络编程的结构被称作客户端/服务器结构，也叫做Client/Server结构，简称C/S结构。优缺点使用C/S结 构的程序，在开发时需要分别开发客户端和服务器端，这种结构的优势在于由于客户端是专门开发的，所以根据需要实现各种效果，专业点说就是表现力丰富，而服 务器端也需要专门进行开发。但是这种结构也存在着很多不足，例如通用性差，几乎不能通用等，也就是说一种程序的客户端只能和对应的服务器端通讯，而不能和 其它服务器端通讯，在实际维护时，也需要维护专门的客户端和服务器端，维护的压力比较大。浏览器/服务器结构其实在运行很多程序时，没有必要使用专用的客户端，而需要使用通用的客户端，例如浏览器，使用浏览器作为客户端的结构被称作浏览器/服务器结构，也叫做Browser/Server结构，简称为B/S结构。使用B/S结构的程序，在开发时只需要开发服务器端即可优点：这种结构的优势在于开发的压力比较小，不需要维护客户端。缺点但是这种结构也存在着很多不足，例如浏览器的限制比较大，表现力不强，无法进行系统级操作等。总之C/S结构和B/S结构是现在网络编程中常见的两种结构，B/S结构其实也就是一种特殊的C/S结构。P2P(Point to Point)程序另外简单的介绍一下P2P(Point to Point)程序，常见的如BT、电驴等。P2P程序是一种特殊的程序，应该一个P2P程序中既包含客户端程序，也包含服务器端程序，例如BT，使用客户端程序部分连接其它的种子(服务器端)，而使用服务器端向其它的BT客户端传输数据。如果这个还不是很清楚，其实P2P程序和手机是一样的，当手机拨打电话时就是使用客户端的作用，而手机处于待机状态时，可以接收到其它用户拨打的电话则起的就是服务器端的功能，只是一般的手机不能同时使用拨打电话和接听电话的功能，而P2P程序实现了该功能。协议(Protocol)最后再介绍一个网络编程中最重要，也是最复杂的概念——协议(Protocol)。按照前面的介绍，网络编程就是运行在不同计算机中两个程序之间的数据交换。在实际进行数据交换时，为了让接收端理解该数据，计算机比较笨，什么都不懂的，那么就需要规定该数据的格式，这个数据的格式就是协议。协议的列子如 果没有理解协议的概念，那么再举一个例子，记得有个电影叫《永不消逝的电波》，讲述的是地下党通过电台发送情报的故事，这里我们不探讨电影的剧情，而只关 心电台发送的数据。在实际发报时，需要首先将需要发送的内容转换为电报编码，然后将电报编码发送出去，而接收端接收的是电报编码，如果需要理解电报的内容 则需要根据密码本翻译出该电报的内容。这里的密码本就规定了一种数据格式，这种对于网络中传输的数据格式在网络编程中就被称作协议。那么如何来编写协议格式呢？答案是随意。只要按照这种协议格式能够生成唯一的编码，按照该编码可以唯一的解析出发送数据的内容即可。也正因为各个网络程序之间协议格式的不同，所以才导致了客户端程序都是专用的结构。在实际的网络程序编程中，最麻烦的内容不是数据的发送和接收，因为这个功能在几乎所有的程序语言中都提供了封装好的API进行调用，最麻烦的内容就是协议的设计以及协议的生产和解析，这个才是网络编程中最核心的内容。关于网络编程的基础知识，就介绍这里，深刻理解IP地址、端口和协议等概念，将会极大的有助于后续知识的学习。网络通讯方式在现有的网络中，网络通讯的方式主要有两种：TCP(传输控制协议)方式UDP(用户数据报协议)方式为 了方便理解这两种方式，还是先来看一个例子。大家使用手机时，向别人传递信息时有两种方式：拨打电话和发送短信。使用拨打电话的方式可以保证将信息传递给 别人，因为别人接听电话时本身就确认接收到了该信息。而发送短信的方式价格低廉，使用方便，但是接收人有可能接收不到。在网络通讯中，TCP方式就类似于拨打电话，使用该种方式进行网络通讯时，需要建立专门的虚拟连接，然后进行可靠的数据传输，如果数据发送失败，则客户端会自动重发该数据。而UDP方式就类似于发送短信，使用这种方式进行网络通讯时，不需要建立专门的虚拟连接，传输也不是很可靠，如果发送失败则客户端无法获得。这两种传输方式都是实际的网络编程中进行使用，重要的数据一般使用TCP方式进行数据传输，而大量的非核心数据则都通过UDP方式进行传递，在一些程序中甚至结合使用这两种方式进行数据的传递。由于TCP需要建立专用的虚拟连接以及确认传输是否正确，所以使用TCP方式的速度稍微慢一些，而且传输时产生的数据量要比UDP稍微大一些。关于网络编程的基础知识就介绍这么多，如果需要深入了解相关知识请阅读专门的计算机网络书籍，下面开始介绍Java语言中网络编程的相关技术。本文链接: 1网络概述]]></content>
      <categories>
        <category>Java</category>
        <category>java 网络编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[markdown表格支持单元格合并]]></title>
    <url>%2Fblog%2F9d21d6ad%2F</url>
    <content type="text"><![CDATA[MarkDown语法并不支持表格单元格合并，不过可以插入html表格标签来实现。123456789101112131415161718192021222324252627282930313233343536373839404142&lt;table&gt; &lt;tr&gt; &lt;th&gt;序号 &lt;/td&gt; &lt;th&gt;OSI的体系结构 &lt;/td&gt; &lt;th&gt;TCP/IP的体系结构 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;7&lt;/td&gt; &lt;td&gt;应用层&lt;/td&gt; &lt;td rowspan=&quot;3&quot;&gt;应用层 (各种应用层协议如 TELNET, FTP, SMTP 等)&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;6&lt;/td&gt; &lt;td&gt;表示层&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;会话层&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;传输层&lt;/td&gt; &lt;td&gt;传输层&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;网络层&lt;/td&gt; &lt;td&gt;互连网络层&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;数据链路层&lt;/td&gt; &lt;td rowspan=&quot;2&quot;&gt;网络接入层&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;物理层&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;效果如下：序号OSI的体系结构TCP/IP的体系结构7应用层应用层 (各种应用层协议如 TELNET, FTP, SMTP 等)6表示层5会话层4传输层传输层3网络层互连网络层2数据链路层网络接入层1物理层是不是看起很奇怪，表格跟上面的文字隔了这么多行这是&lt;table&gt;&lt;/table&gt;标签之间有回车符造成的,删除这些回车符，这样就显示正常了，不过这样的坏处就是看起来很凌乱不好修改。当然要是自己一行一行的删的话那得删到什么时候，最好使用正则表达式进行删除。我这里用的editplus这个编辑器。把上面的代码粘贴到文件找那个，然后打开替换,使用正则表达式\n\s+进行替换即可。点击Find按钮可以看到匹配的结果。可以看到已经匹配到换行符合多余的空格了，点击ReplaceAll按钮全部替换即可。替换后的效果为：替换后的标签为：12&lt;table&gt;&lt;tr&gt;&lt;th&gt;序号&lt;/th&gt;&lt;th&gt;OSI的体系结构&lt;/th&gt; &lt;th&gt;TCP/IP的体系结构&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;应用层&lt;/td&gt;&lt;td rowspan=&quot;3&quot;&gt;应用层 (各种应用层协议如 TELNET, FTP, SMTP 等)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;表示层&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;会话层&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt; &lt;td&gt;传输层&lt;/td&gt;&lt;td&gt;传输层&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;网络层&lt;/td&gt;&lt;td&gt;互连网络层&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;数据链路层&lt;/td&gt;&lt;td rowspan=&quot;2&quot;&gt;网络接入层&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt; &lt;td&gt;物理层&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;显示效果：序号OSI的体系结构TCP/IP的体系结构7应用层应用层 (各种应用层协议如 TELNET, FTP, SMTP 等)6表示层5会话层4传输层传输层3网络层互连网络层2数据链路层网络接入层1物理层本文链接: markdown表格支持单元格合并]]></content>
      <categories>
        <category>markdown使用</category>
        <category>markdown语法</category>
        <category>使用html标签</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 PrintStream类]]></title>
    <url>%2Fblog%2F82040860%2F</url>
    <content type="text"><![CDATA[继承关系1234java.lang.Object |----&gt; java.io.OutputStream |----&gt; java.io.FilterOutputStream |----&gt; java.io.PrintStreampublic class PrintStream extends FilterOutputStream implements Appendable, CloseablePrintStream 为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。它还提供其他两项功能。与其他输出流不同，PrintStream 永远不会抛出 IOException；而是，异常情况仅设置可通过 checkError 方法测试的内部标志。另外，为了自动刷新，可以创建一个 PrintStream；这意味着可在写入 byte 数组之后自动调用 flush 方法，可调用其中一个 println 方法，或写入一个换行符或字节 (‘\n‘)。PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。构造方法方法描述PrintStream(File file)创建具有指定文件且不带自动行刷新的新打印流。PrintStream(File file, String csn)创建具有指定文件名称和字符集且不带自动行刷新的新打印流。PrintStream(OutputStream out)创建新的打印流。PrintStream(OutputStream out, boolean autoFlush)创建新的打印流。PrintStream(OutputStream out, boolean autoFlush, String encoding)创建新的打印流。PrintStream(String fileName)创建具有指定文件名称且不带自动行刷新的新打印流。PrintStream(String fileName, String csn)创建具有指定文件名称和字符集且不带自动行刷新的新打印流。成员方法write(…)方法方法描述void write(byte[] buf, int off, int len)将 len 字节从指定的初始偏移量为 off 的 byte 数组写入此流。void write(int b)将指定的字节写入此流。write(int b)源码：1234567891011121314151617public void write(int b) &#123; try &#123; synchronized (this) &#123; ensureOpen(); out.write(b); //如果这个字符是换行符,而且开启了自动刷新的话 if ((b == &apos;\n&apos;) &amp;&amp; autoFlush) out.flush();//调用flush()方法 &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true;//设置标志 &#125;&#125;write(int b)详细描述将指定的字节写入此流，如果这个字节是换行符而且开启了自动刷新的话，就会调用flush()方法注意，字节是按给定的方式写入的。 要根据平台的默认字符编码编写一个字符，请使用print(char)或println(char)方法。参数: b 将要写入的字节覆盖：类 FilterOutputStream 中的 write关于自动刷新所以如果开启了自动刷新，write(int b)方法在写入回车符的时候会调用flush()方法write(byte buf[], int off, int len)源码12345678910111213141516public void write(byte buf[], int off, int len) &#123; try &#123; synchronized (this) &#123; ensureOpen(); out.write(buf, off, len); if (autoFlush) out.flush(); &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125;&#125;write(byte buf[], int off, int len)详细描述将 len 字节从指定的初始偏移量为 off 的 byte 数组写入此流。如果启用自动刷新，则调用 flush 方法。注意，字节将按给定的方式写入；要根据平台的默认字符编码来写入，请使用print(char)或println(char)方法。参数: buf 字节数组参数: off 相对于字节数组开始位置的偏移量参数: len 需要写入的字节数print(char c)方法源码123public void print(char c) &#123; write(String.valueOf(c));&#125;print(char c)方法详细描述打印一个字符，根据平台默认字符编码把这个字符转换为一个或者多个字节,然后这些字节完全以write(int)方法的方式进行写入。print(int i)方法源码123public void print(int i) &#123; write(String.valueOf(i));&#125;print(int i)方法详细描述打印整数。按照平台的默认字节编码将 String.valueOf(i) 生成的字符串转换为字节，并完全以 write(int) 方法的方式写入这些字节。参数：i - 要打印的 intprint(long l)方法源码123public void print(long l) &#123; write(String.valueOf(l));&#125;打印long整数，按照平台默认字节编码将String.valueOf(l)生成的字符串转换为字节，并完全以write(int)方法的方式写入这些字节123public void print(float f) &#123; write(String.valueOf(f));&#125;其他print(…)方法源码123456789101112131415public void print(double d) &#123; write(String.valueOf(d));&#125;public void print(char s[]) &#123; write(s);&#125;public void print(String s) &#123; if (s == null) &#123; s = &quot;null&quot;; &#125; write(s);&#125;public void print(Object obj) &#123; write(String.valueOf(obj));&#125;println(…)方法方法描述void println()通过写入行分隔符字符串终止当前行。void println(boolean x)打印 boolean 值，然后终止行。void println(char x)打印字符，然后终止该行。void println(char[] x)打印字符数组，然后终止该行。void println(double x)打印 double，然后终止该行。void println(float x)打印 float，然后终止该行。void println(int x)打印整数，然后终止该行。void println(long x)打印 long，然后终止该行。void println(Object x)打印 Object，然后终止该行。void println(String x)打印 String，然后终止该行。println(…)方法源码12345/* Methods that do terminate lines */public void println() &#123; newLine();&#125;通过写入行分隔符字符串终止当前行。行分隔符字符串由系统属性line.separator 定义，不一定是单个换行符 (‘\n‘)。123456public void println(boolean x) &#123; synchronized (this) &#123; print(x); newLine(); &#125;&#125;打印 boolean 值，然后终止行。此方法的行为就像先调用 print(boolean) 然后调用 println() 一样。参数：x - 要打印的 boolean123456public void println(char x) &#123; synchronized (this) &#123; print(x); newLine(); &#125;&#125;打印字符，然后终止该行。此方法的行为就像先调用 print(char) 然后调用 println() 一样。参数：x - 要打印的 char。123456public void println(int x) &#123; synchronized (this) &#123; print(x); newLine(); &#125;&#125;打印整数，然后终止该行。此方法的行为就像先调用 print(int) 然后调用 println() 一样。参数：x - 要打印的 int。123456public void println(long x) &#123; synchronized (this) &#123; print(x); newLine(); &#125;&#125;打印 long，然后终止该行。此方法的行为就像先调用 print(long) 然后调用 println() 一样。参数：x - 要打印的 long。123456public void println(float x) &#123; synchronized (this) &#123; print(x); newLine(); &#125;&#125;打印 float，然后终止该行。此方法的行为就像先调用 print(float) 然后调用 println() 一样。参数：x - 要打印的 float。123456public void println(double x) &#123; synchronized (this) &#123; print(x); newLine(); &#125;&#125;打印 double，然后终止该行。此方法的行为就像先调用 print(double) 然后调用 println() 一样。参数：x - 要打印的 double。123456public void println(char x[]) &#123; synchronized (this) &#123; print(x); newLine(); &#125;&#125;打印字符数组，然后终止该行。此方法的行为就像先调用 print(char[]) 然后调用 println() 一样。参数：x - 要打印的字符数组。123456public void println(String x) &#123; synchronized (this) &#123; print(x); newLine(); &#125;&#125;打印 String，然后终止该行。此方法的行为就像先调用 print(String) 然后调用 println() 一样。参数：x - 要打印的 String。1234567public void println(Object x) &#123; String s = String.valueOf(x); synchronized (this) &#123; print(s); newLine(); &#125;&#125;打印 Object，然后终止该行。此方法首先调用 String.valueOf(x) 获取打印对象的字符串值，然后的行为如同先调用 print(String) 再调用 println() 一样。参数：x - 要打印的 Object。format(…)方法方法描述PrintStream format(Locale l, String format, Object... args)使用指定格式字符串和参数将格式化字符串写入此输出流中。PrintStream format(String format, Object... args)使用指定格式字符串和参数将格式化字符串写入此输出流中。PrintStream printf(Locale l, String format, Object... args)使用指定格式字符串和参数将格式化的字符串写入此输出流的便捷方法。PrintStream printf(String format, Object... args)使用指定格式字符串和参数将格式化的字符串写入此输出流的便捷方法。format(…)方法源码12345678910111213141516public PrintStream format(String format, Object ... args) &#123; try &#123; synchronized (this) &#123; ensureOpen(); if ((formatter == null) || (formatter.locale() != Locale.getDefault())) formatter = new Formatter((Appendable) this); formatter.format(Locale.getDefault(), format, args); &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125; return this;&#125;使用指定格式字符串和参数将格式化字符串写入此输出流中。始终使用的语言环境是由 Locale.getDefault() 返回的语言环境，不管以前在此对象上调用了其他什么样的格式化方法。12345678910111213141516public PrintStream format(Locale l, String format, Object ... args) &#123; try &#123; synchronized (this) &#123; ensureOpen(); if ((formatter == null) || (formatter.locale() != l)) formatter = new Formatter(this, l); formatter.format(l, format, args); &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125; return this;&#125;使用指定格式字符串和参数将格式化字符串写入此输出流中。参数：l 格式化过程中应用的 locale。如果 l 为 null，则不应用本地化。format 在格式字符串的语法中描述的格式字符串args 格式字符串中的格式说明符引用的参数。如果参数多于格式说明符，则忽略额外的参数。参数的数量是可变的，并且可以为零。参数的最大数量受到 Java Virtual Machine Specification 定义的 Java 数组的最大维数的限制。针对 null 参数的行为依赖于 conversion。返回： 此输出流抛出：IllegalFormatException 如果格式字符串包含非法语法、与给定参数不兼容的格式说明符、对给定格式字符串而言不够充足的参数或其他非法条件。有关所有可能的格式错误的规范，请参阅 formatter 类规范的详细信息部分。NullPointerException 如果 format 为 null从以下版本开始：1.5append(…)方法方法描述PrintStream append(char c)将指定字符添加到此输出流。PrintStream append(CharSequence csq)将指定字符序列添加到此输出流。PrintStream append(CharSequence csq, int start, int end)将指定字符序列的子序列添加到此输出流。12345public PrintStream append(CharSequence csq, int start, int end) &#123; CharSequence cs = (csq == null ? &quot;null&quot; : csq); write(cs.subSequence(start, end).toString()); return this;&#125;将指定字符序列添加到此输出流。此方法调用 out.append(csq) 的行为与调用下列方法完全相同：12&gt; out.print(csq.toString()) &gt;可能不添加整个序列，也可能添加，具体取决于字符序列 csq 的 toString 规范。例如，调用一个字符缓冲区的 toString 方法将返回一个子序列，其内容取决于缓冲区的位置和限制。指定者：接口 Appendable 中的 append参数：csq - 要添加的字符序列。如果 csq 为 null，则向此输出流添加四个字符 “null”。返回：此输出流从以下版本开始： 1.51234567891011121314151617181920/** * Appends the specified character to this output stream. * * &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(c)&lt;/tt&gt; * behaves in exactly the same way as the invocation * * &lt;pre&gt; * out.print(c) &lt;/pre&gt; * * @param c * The 16-bit character to append * * @return This output stream * * @since 1.5 */public PrintStream append(char c) &#123; print(c); return this;&#125;错误相关方法方法描述boolean checkError()刷新流并检查其错误状态。protected void clearError()清除此流的内部错误状态。void close()关闭流。void flush()刷新该流的缓冲。protected void setError()将该流的错误状态设置为 true。本文链接: Java IO流 PrintStream类]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[README_AddHTMLComments类说明]]></title>
    <url>%2Fblog%2F2e8beac0%2F</url>
    <content type="text"><![CDATA[AddHTMLComments这个类把剪贴板中的内容加上html注释本文链接: README_AddHTMLComments类说明]]></content>
      <categories>
        <category>我的软件</category>
        <category>自己写的工具说明</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 PrintWriter类]]></title>
    <url>%2Fblog%2F492ea8e8%2F</url>
    <content type="text"><![CDATA[继承关系123java.lang.Object |----&gt; java.io.Writer |----&gt; java.io.PrintWriterpublic class PrintWriter extends Writer向文本输出流打印对象的格式化表示形式。此类实现在 PrintStream 中的所有 print 方法。它不包含用于写入原始字节的方法，对于这些字节，程序应该使用未编码的字节流进行写入。与 PrintStream 类不同，如果启用了自动刷新，则只有在调用 println、printf 或 format 的其中一个方法时才可能完成此操作，而不是每当正好输出换行符时才完成。这些方法使用平台自有的行分隔符概念，而不是换行符。此类中的方法不会抛出 I/O 异常，尽管其某些构造方法可能抛出异常。客户端可能会查询调用 checkError() 是否出现错误。构造函数方法描述PrintWriter(File file)打印到文件中,不自动刷新PrintWriter(File file, String csn)打印到文件中，指定字符集，自动刷新PrintWriter(OutputStream out)打印到OutputStream中，不自动刷新PrintWriter(OutputStream out, boolean autoFlush)打印到输出流中,autoFlush为true就自动刷新PrintWriter(String fileName)打印到文件名为fileName的文件中PrintWriter(String fileName, String csn)打印到文件名为fileName的文件中，指定字符编码PrintWriter(Writer out)打印到字符输出流中PrintWriter(Writer out, boolean autoFlush)打印到字符输出流中,autoFlush为true时自动刷新成员方法这个方法有点多，分开写比较好。可以自动刷新的方法注意了，只有下表的方法可以自动刷新，其他方法是不会自动刷新的。自动刷新的情况：调用println()方法调用printf()方法调用format()方法方法描述PrintWriter format(Locale l, String format, Object... args)使用指定格式字符串和参数将一个格式化字符串写入此 writer 中。PrintWriter format(String format, Object... args)使用指定格式字符串和参数将一个格式化字符串写入此 writer 中。PrintWriter printf(Locale l, String format, Object... args)使用指定格式字符串和参数将格式化的字符串写入此 writer 的便捷方法。PrintWriter printf(String format, Object... args)使用指定格式字符串和参数将格式化的字符串写入此 writer 的便捷方法。void println()通过写入行分隔符字符串终止当前行。void println(boolean x)打印 boolean 值，然后终止该行。void println(char x)打印字符，然后终止该行。void println(char[] x)打印字符数组，然后终止该行。void println(double x)打印双精度浮点数，然后终止该行。void println(float x)打印浮点数，然后终止该行。void println(int x)打印整数，然后终止该行。void println(long x)打印 long 整数，然后终止该行。void println(Object x)打印 Object，然后终止该行。void println(String x)打印 String，然后终止该行。追加方法方法描述PrintWriter append(char c)将指定字符添加到此 writer。PrintWriter append(CharSequence csq)将指定的字符序列添加到此 writer。PrintWriter append(CharSequence csq, int start, int end)将指定字符序列的子序列添加到此 writer。print(…)方法方法描述void print(boolean b)打印 boolean 值。void print(char c)打印字符。void print(char[] s)打印字符数组。void print(double d)打印 double 精度浮点数。void print(float f)打印一个浮点数。void print(int i)打印整数。void print(long l)打印 long 整数。void print(Object obj)打印对象。void print(String s)打印字符串。write(…)方法方法描述void write(char[] buf)写入字符数组。void write(char[] buf, int off, int len)写入字符数组的某一部分。void write(int c)写入单个字符。void write(String s)写入字符串。void write(String s, int off, int len)写入字符串的某一部分。错误相关方法方法描述boolean checkError()如果流没有关闭，则刷新流且检查其错误状态。protected void clearError()清除此流的错误状态。protected void setError()指示已发生错误。刷新方法方法描述void close()关闭该流并释放与之关联的所有系统资源。void flush()刷新该流的缓冲。实例不自动刷新的例子来看一个不自动刷新的例子12345public static void main(String[] args) throws IOException&#123; BufferedWriter writer=new BufferedWriter(new FileWriter(&quot;xiaoming.txt&quot;)); writer.write(&quot;小明&quot;);&#125;这样会不会在xiaoming.txt文件中写入“小明”这个字符串呢？答案是不会，因为，现在写的这个小明保存在BufferedWriter的内部字符数组中，并没有写到本地，想写到本地的话需要调用flush()方法刷新内部字符数组，把放在内部字符数组中的“小明”这个字符串写到本地中去。BufferedWriter内部缓存放满了，或者放不下了，会自动把内部缓存刷到本地中去。或者调用close()方法的时候也会刷新一下内部缓存。现在小明两个字符没有充满内部缓存，BufferedWriter不会自动刷新内部缓存。而我们没有调用flush()方法，也没有关闭BufferdWriter。所以文件不会写入数据,main()方法结束后数据丢失。PrintWriter自动刷新实例使用PrintWriter并使用自动刷新刷新：123456789public static void main(String[] args) throws IOException&#123; //自动刷新到文件xiaoming.txt中 PrintWriter writer=new PrintWriter(new FileWriter("xiaoming.txt"),true); //使用下面三个方法会自动刷新 writer.println("小明"); writer.printf("%-10s#\n","小明"); writer.format("%-10d#", 12345);&#125;运行结果，xiaoming.txt文件中的内容：123小明小明 #12345 #PrintWriter不会自动刷新的方法PrintWriter的其他不会自动刷新的方法：write()方法print()方法append()方法12345678910public static void main(String[] args) throws IOException&#123; PrintWriter writer=new PrintWriter(new FileWriter("xiaoming.txt"),true); writer.println("小明"); writer.printf("%-10s#\n","小明"); writer.format("%-10d#\n", 12345); writer.write("我是不会写到文件中去的"); writer.print("我也不会自动写到文件中去的"); writer.append("我也一样不会写到文件中去的");&#125;运行后，xiaoming.txt中的内容如下：123小明小明 #12345 #可以看到这三个方法是不会自动刷新的，需要显示调用flush()方法进行写入,或者在写文件最后调用close()写入文件。这里调用close()方法在最后关闭文件，close()方法会把缓存的字符刷新到文件中去。1234567891011public static void main(String[] args) throws IOException&#123; PrintWriter writer=new PrintWriter(new FileWriter("xiaoming.txt"),true); writer.println("小明"); writer.printf("%-10s#\n","小明"); writer.format("%-10d#\n", 12345); writer.write("我是不会写到文件中去的\n"); writer.print("我也不会自动写到文件中去的\n"); writer.append("我也一样不会写到文件中去的\n"); writer.close();&#125;运行上面代码后，xiaoming.txt文件中的内容如下123456小明小明 #12345 #我是不会写到文件中去的我也不会自动写到文件中去的我也一样不会写到文件中去的疑惑的地方write()方法和print(...)方法append()方法的区别？write()方法和print(...)方法的区别共同点：两者都不刷新页面，只在原来的页面写数据.最终都是重写了抽象类Writer里面的write方法.不同点：print方法可以将各种类型的数据转换成字符串的形式输出。重载的write方法只能输出字符、字符数组、字符串等与字符相关的数据。这些疑惑看下面的源码就知道了。看源码字段123456protected Writer out;//字符输出流private final boolean autoFlush;//自动刷新private boolean trouble = false;private Formatter formatter;private PrintStream psOut = null;private final String lineSeparator;//换行符构造方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public PrintWriter (Writer out) &#123; //调用另一个:PrintWriter(Writer out, boolean autoFlush) this(out, false);&#125;public PrintWriter(Writer out, boolean autoFlush) &#123; super(out); //设置字符输出流 this.out = out; //设置自动刷新标志 this.autoFlush = autoFlush; //设置换行符 lineSeparator = java.security.AccessController.doPrivileged( new sun.security.action.GetPropertyAction("line.separator"));&#125;public PrintWriter(OutputStream out) &#123; //调用另一个构造方法:PrintWriter(OutputStream out, boolean autoFlush) this(out, false);&#125;public PrintWriter(OutputStream out, boolean autoFlush) &#123; //把字节流封装成字符流：BufferedWriter后, //调用:PrintWriter(OutputStream out, boolean autoFlush) this(new BufferedWriter(new OutputStreamWriter(out)), autoFlush); // save print stream for error propagation if (out instanceof java.io.PrintStream) &#123; psOut = (PrintStream) out; &#125;&#125;public PrintWriter(String fileName) throws FileNotFoundException &#123; //包装后调用：PrintWriter(OutputStream out, boolean autoFlush) this(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName))), false);&#125;//搞不懂为什么这里要颠倒一下参数的顺序?private PrintWriter(Charset charset, File file) throws FileNotFoundException&#123; //包装后调用:PrintWriter(OutputStream out, boolean autoFlush) this(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), charset)), false);&#125;public PrintWriter(String fileName, String csn) throws FileNotFoundException, UnsupportedEncodingException&#123; //调用:PrintWriter(Charset charset, File file) this(toCharset(csn), new File(fileName));&#125;public PrintWriter(File file) throws FileNotFoundException &#123; //调用：PrintWriter(OutputStream out, boolean autoFlush) this(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file))), false);&#125;public PrintWriter(File file, String csn) throws FileNotFoundException, UnsupportedEncodingException&#123; //调用：PrintWriter(Charset charset, File file) this(toCharset(csn), file);&#125;看源码就知道了：print(…)方法源码123456789101112131415161718192021222324252627282930public void print(boolean b) &#123; write(b ? "true" : "false");&#125;public void print(char c) &#123; write(c);&#125;public void print(int i) &#123; write(String.valueOf(i));&#125;public void print(long l) &#123; write(String.valueOf(l));&#125;public void print(float f) &#123; write(String.valueOf(f));&#125;public void print(double d) &#123; write(String.valueOf(d));&#125;public void print(char s[]) &#123; write(s);&#125;public void print(String s) &#123; if (s == null) &#123; s = "null"; &#125; write(s);&#125;public void print(Object obj) &#123; write(String.valueOf(obj));&#125;write(…)方法源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354protected Writer out;public void write(int c) &#123; try &#123; synchronized (lock) &#123; ensureOpen(); //调用低层Writer的write(int)方法 out.write(c); &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125;&#125;public void write(char buf[], int off, int len) &#123; try &#123; synchronized (lock) &#123; ensureOpen(); //调用低层writer的写字符数组方法 out.write(buf, off, len); &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125;&#125;public void write(char buf[]) &#123; //调用自己的write(char buf[], int off, int len) write(buf, 0, buf.length);&#125;public void write(String s, int off, int len) &#123; try &#123; synchronized (lock) &#123; ensureOpen(); //调用低层得写字符串方法 out.write(s, off, len); &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125;&#125;public void write(String s) &#123; //调用自己的写字符串方法 write(s, 0, s.length());&#125;可以看到PrintWriter的writer(…)方法最终调用低层流的writer(..)来实现的。append(…)方法源码12345678910111213141516public PrintWriter append(CharSequence csq) &#123; if (csq == null) write("null"); else write(csq.toString()); return this;&#125;public PrintWriter append(CharSequence csq, int start, int end) &#123; CharSequence cs = (csq == null ? "null" : csq); write(cs.subSequence(start, end).toString()); return this;&#125;public PrintWriter append(char c) &#123; write(c); return this;&#125;我们可以看到append方法最终也是调用PrintWriter的write()方法来实现的，write()方法和append方法不同的地方在于返回值吧，append返回值为PrintWriter,而write()返回值为voidprint()方法和append()方法相同的地方是它们都通过write()方法实现。println(…)方法源码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374private void newLine() &#123; try &#123; synchronized (lock) &#123; ensureOpen(); out.write(lineSeparator); if (autoFlush) out.flush(); &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125;&#125;public void println() &#123; newLine();&#125;public void println(boolean x) &#123; synchronized (lock) &#123; print(x); println(); &#125;&#125;public void println(char x) &#123; synchronized (lock) &#123; print(x); println(); &#125;&#125;public void println(int x) &#123; synchronized (lock) &#123; print(x); println(); &#125;&#125;public void println(long x) &#123; synchronized (lock) &#123; print(x); println(); &#125;&#125;public void println(float x) &#123; synchronized (lock) &#123; print(x); println(); &#125;&#125;public void println(double x) &#123; synchronized (lock) &#123; print(x); println(); &#125;&#125;public void println(char x[]) &#123; synchronized (lock) &#123; print(x); println(); &#125;&#125;public void println(String x) &#123; synchronized (lock) &#123; print(x); println(); &#125;&#125;public void println(Object x) &#123; String s = String.valueOf(x); synchronized (lock) &#123; print(s); println(); &#125;&#125;我们看到println(…)最终调用print(…)和println()方法事项，print(…)方法前面已经说了。而println()方法，调用newLine()这私有的方法来进行换行和刷新操作：1234567891011121314151617private void newLine() &#123; try &#123; synchronized (lock) &#123; ensureOpen(); //写换行符 out.write(lineSeparator); if (autoFlush) out.flush();//刷新缓存 &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125;&#125;因为println()方法提供和换行和自动刷新功能，所以其他println(…)调用了该方法也就能实现自动刷新的功能了。format()方法源码1234567891011121314151617181920212223242526272829303132333435363738//格式化类：java.util.Formatterprivate Formatter formatter;......public PrintWriter format(String format, Object ... args) &#123; try &#123; synchronized (lock) &#123; ensureOpen(); if ((formatter == null) || (formatter.locale() != Locale.getDefault())) formatter = new Formatter(this); formatter.format(Locale.getDefault(), format, args); if (autoFlush) out.flush(); &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125; return this;&#125;public PrintWriter format(Locale l, String format, Object ... args) &#123; try &#123; synchronized (lock) &#123; ensureOpen(); if ((formatter == null) || (formatter.locale() != l)) formatter = new Formatter(this, l); formatter.format(l, format, args); if (autoFlush) out.flush(); &#125; &#125; catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt(); &#125; catch (IOException x) &#123; trouble = true; &#125; return this;&#125;这里的format()方法其实就java.util.Formatter类的format()方法实现的。而且format()方法调用了out.flush()来实现自动刷新。printf()方法源码123456public PrintWriter printf(String format, Object ... args) &#123; return format(format, args);&#125;public PrintWriter printf(Locale l, String format, Object ... args) &#123; return format(l, format, args);&#125;可以看到这里的printf()方法最终是调用了format(`..)方法来实现的。因为format()方法中调用了out.flush()来自动刷新,所以printf()`方法也就跟着实现了自动刷新功能。这些自动刷新功能说的很玄乎,其实不过就是下面两句话：1234...... if (autoFlush) out.flush();//刷新缓存......其他方法如write()方法，print()方法，append()方法没有上面这句话所以就没了自动刷新功能。就这样吧本文链接: Java IO流 PrintWriter类]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 接口]]></title>
    <url>%2Fblog%2Fdf6c2340%2F</url>
    <content type="text"><![CDATA[Java IO流 接口Closeable接口public interface CloseableCloseable是可以关闭的数据源或目标。调用 close 方法可释放对象保存的资源（如打开文件）。Closeable接口void close() throws IOException关闭此流,并释放与此流关联的所有系统资源。如果已经关闭该流，则调用此方法无效。抛出：&emsp;&emsp;&emsp;&emsp;IOException - 如果发生 I/O 错误Flushable接口public interface FlushableFlushable是可刷新数据的目标地。调用 flush 方法将所有已缓冲输出写入底层流。方法详细信息void flush() throws IOException通过将所有已缓冲输出写入底层流来刷新此流。抛出：&emsp;&emsp;&emsp;&emsp; IOException - 如果发生 I/O 错误Appendable接口public interface Appendable能够被添加 char 序列和值的对象。如果某个类的实例打算接收取自 Formatter 的格式化输出，那么该类必须实现 Appendable 接口。要添加的字符应该是有效的 Unicode 字符，正如 Unicode Character Representation 中描述的那样。注意，增补字符可能由多个 16 位 char 值组成。Appendable 对于多线程访问而言没必要是安全的。线程安全由扩展和实现此接口的类负责。由于此接口可能由具有不同的错误处理风格的现有类实现，所以无法保证错误不会传播给调用者。方法描述Appendable append(char c)向此 Appendable 添加指定字符。Appendable append(CharSequence csq)向此 Appendable 添加指定的字符序列。Appendable append(CharSequence csq, int start, int end)向此 Appendable 添加指定字符序列的子序列。本文链接: Java IO流 接口]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[新文档]]></title>
    <url>%2Fblog%2Fddc6695c%2F</url>
    <content type="text"><![CDATA[本文链接: 新文档]]></content>
      <categories>
        <category>Java</category>
        <category>java_util</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java_util_Formatter类]]></title>
    <url>%2Fblog%2F7906d867%2F</url>
    <content type="text"><![CDATA[方法描述void close()关闭此 formatter。void flush()刷新此 formatter。Formatter format(Locale l, String format, Object... args)使用指定的语言环境、格式字符串和参数，将一个格式化字符串写入此对象的目标文件中。Formatter format(String format, Object... args)使用指定格式字符串和参数将一个格式化字符串写入此对象的目标文件中。IOException ioException()返回由此 formatter 的 Appendable 方法上次抛出的 IOException 异常。Locale locale()返回构造此 formatter 时设置的语言环境。Appendable out()返回输出的目标文件。String toString()返回对输出的目标文件调用 toString() 的结果。Formatter是广泛被用到的格式化方法，它能让一些东西变得更加有规范，例如：超市小票，信息单，用这个方法来格式化就显得很不错。参考：https://blog.csdn.net/ouyang_peng/article/details/16355237有时会想把数字，日期，字符串按照给定规则给格式化。SUN JDK为我们提供了这个API，它是java.util.Formatter。Formatter提供了对布局对齐和排列的支持，以及对数值、字符串和日期/时间数据的常规格式和特定于语言环境的输出的支持。格式化规则要想按照自己的想法格式化必须事先编写一个规则。这个规则的语法如下。##常规类型、字符类型和数值类型的格式说明符语法 ##1%[argument_index$][flags][width][.precision]conversion用来表示日期和时间类型的格式说明符语法1%[argument_index$][flags][width]conversion与参数不对应的格式说明符语法1%[flags][width]conversionAPI中有这样三种规则，很显然第一个规则的内容是最全面的。其它规则的内容和第一规则的内容有重复，那单说第一规则内容，其它规则依次类推。注意：规则一中的precision前面要加英文句号“.”语法规则详细说明可选项[argument_index$]可选的 argument_index 是一个十进制整数，用于表明参数在参数列表中的位置。第一个参数由 “1$”引用，第二个参数由”2$”引用，依此类推。argument_index很好理解，就是一参数占位符，用来表示要被格式化的参数。12345String str1=&quot;hello&quot;;String str2=&quot;world&quot;;Formatter formatter=new Formatter();formatter.format(&quot;%2$s,%1$s&quot;, str1,str2);System.out.println(formatter);运行结果：1world,hello上面的%2$s,中的s表示这个参数字符串。详细往后看必选项conversion注意：conversion和前面的%是格式化规则中必须要有的,这两者是必选项。其他的都是可以选项。conversion 是一个表明应该如何格式化参数的字符。用这个来确定被格式内容的类型，如果类型不匹配会报错。conversion分类：常规-可应用于任何参数类型字符-可应用于表示Unicode字符的基本类型：char、Character、byte、Byte、short和Short。当Character.isValidCodePoint(int) 返回 true时，可将此转换应用于 int和Integer 类型数值整数-可应用于Java的整数类型：byte、Byte、short、Short、int、Integer、long、Long 和 BigInteger浮点数-可用于Java的浮点数类型：float、Float、double、Double 和 BigDecimal日期/时间-可应用于Java的、能够对日期或时间进行编码的类型：long、Long、Calendar 和 Date。百分比-产生字面值’%’ (‘\u0025’)行分隔符-产生特定于平台的行分隔符常规格式符常规格式符描述B b格式化为布尔字符串，如果参数arg 为 null，则结果为 “false”。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 “true”。H h格式化为哈希码，如果参数arg 为 null，则结果为 “null”。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。S s格式化为字符串，如果参数arg 为 null，则结果为 “null”。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。实例：123456789101112131415161718192021222324252627282930313233343536373839404142public static void test_conversion_s()&#123; Formatter formatter=new Formatter(); String name = "World"; formatter.format("Hello %s !", name); System.out.println(formatter.toString());&#125;public static void test_conversion_S()&#123; Formatter formatter=new Formatter(); String name = "World"; formatter.format("Hello %S !", name); System.out.println(formatter.toString());&#125;public static void test_conversion_b()&#123; Formatter formatter=new Formatter(); String name = "World"; formatter.format("Hello %b !", name); System.out.println(formatter.toString());&#125;public static void test_conversion_B()&#123; Formatter formatter=new Formatter(); String name = "World"; formatter.format("Hello %B !", name); System.out.println(formatter.toString());&#125;public static void test_conversion_h()&#123; Formatter formatter=new Formatter(); String name = "World"; formatter.format("Hello %h !", name); System.out.println(formatter.toString());&#125;public static void test_conversion_H()&#123; Formatter formatter=new Formatter(); String name = "World"; formatter.format("Hello %H !", name); System.out.println(formatter.toString());&#125;运行结果：123456Hello World !Hello WORLD !Hello true !Hello TRUE !Hello 4fe2b72 !Hello 4FE2B72 !从结果中我们可以看出：大写%S就会格式化为大写的字符串，小写的%s就会格式化成小写的字符串。大写的%B就会格式化为大写的布尔字符串，小写的%b就格式化为小写的。%H格式化为大写的哈希码，%h格式化为小写的哈希码Unicode字符字符格式符描述C c结果是一个 Unicode字符实例：中文对应的Unicode字符(Utf-16be)为\u4E2D\u6587123456789public static void test_conversion_c(Formatter formatter)&#123; char[] chs=&#123;'\u4E2D','\u6587'&#125;; for (char c : chs) &#123; formatter.format("%c", c); &#125; System.out.println(formatter);&#125;运行结果为：1中文这里提一下，中文转为Unicode字符这个我还没去研究，暂时想到下面这种方式实现：1234567891011String str = "中文";try&#123; String encodeStr = URLEncoder.encode(str, "utf-16be"); encodeStr = encodeStr.replaceAll("%(.&#123;2&#125;)%(.&#123;2&#125;)", "\\\\u$1$2"); System.out.println(encodeStr);&#125; catch (UnsupportedEncodingException e)&#123; // TODO Auto-generated catch block e.printStackTrace();&#125;运行结果:1\u4E2D\u6587整数格式符整数格式符描述d结果被格式化为十进制整数o结果被格式化为八进制整数X x结果被格式化为十六进制整数实例：1234567Formatter formatter=new Formatter();int value=233;formatter.format(&quot;十进制:%d\n&quot;, value);formatter.format(&quot;八进制:%o\n&quot;, value);formatter.format(&quot;小写十六进制:%x\n&quot;, value);formatter.format(&quot;大写十六进制:%X\n&quot;, value);System.out.println(formatter);运行结果:1234十进制:233八进制:351小写十六进制:e9大写十六进制:E9浮点数格式符描述f结果被格式化为十进制数E e结果被格式化为用计算机科学记数法表示的十进制数G g根据精度和舍入运算后的值，使用计算机科学记数形式或十进制格式对结果进行格式化。A a结果被格式化为带有效位数和指数的十六进制浮点数实例：12345678910111213Formatter formatter=new Formatter();double value=1230000.45678;formatter.format(&quot;十进制浮点数:%f\n&quot;, value);formatter.format(&quot;科学计数法十进制浮点数:%e\n&quot;, value);formatter.format(&quot;科学计数法十进制浮点数:%E\n&quot;, value);formatter.format(&quot;根据精度和舍入运算后的值:%g\n&quot;, value);formatter.format(&quot;根据进度和舍入运算后的值:%G\n&quot;, value);value=12345.456789;formatter.format(&quot;根据精度和舍入运算后的值:%g\n&quot;, value);formatter.format(&quot;根据进度和舍入运算后的值:%G\n&quot;, value);formatter.format(&quot;带有效位数和指数的十六进制浮点数:%a\n&quot;, value);formatter.format(&quot;带有效位数和指数的十六进制浮点数:%A\n&quot;, value);System.out.println(formatter);运行结果：123456789十进制浮点数:1230000.456780科学计数法十进制浮点数:1.230000e+06科学计数法十进制浮点数:1.230000E+06根据精度和舍入运算后的值:1.23000e+06根据进度和舍入运算后的值:1.23000E+06根据精度和舍入运算后的值:12345.5根据进度和舍入运算后的值:12345.5带有效位数和指数的十六进制浮点数:0x1.81cba780fdc16p13带有效位数和指数的十六进制浮点数:0X1.81CBA780FDC16P13日期/时间转换前缀日期格式符描述T t日期和时间转换字符的前缀注意这里的t/T只是一个缀，它必须加上后缀才起作用。日期/时间转换后缀后缀如下以下日期和时间转换的后缀字符是为 ‘t’ 和 ‘T’ 转换定义的。这些类型相似于但不完全等同于那些由 GNU date 和 POSIX strftime(3c) 定义的类型。提供其他转换类型是为了访问特定于 Java 的功能（如将 ‘L’ 用作秒中的毫秒）。格式化时间后缀以下转换字符用来格式化时间：时间后缀描述‘H‘24 小时制的小时，被格式化为必要时带前导零的两位数，即 00 - 23。‘I‘12 小时制的小时，被格式化为必要时带前导零的两位数，即 01 - 12。‘k‘24 小时制的小时，即 0 - 23。‘l‘12 小时制的小时，即 1 - 12。‘M‘`小时中的分钟，被格式化为必要时带前导零的两位数`，即 00 - 59。‘S‘分钟中的秒，被格式化为必要时带前导零的两位数，即 00 - 60 （”60” 是支持闰秒所需的一个特殊值）。‘L‘秒中的毫秒，被格式化为必要时带前导零的三位数，即 000 - 999。‘N‘秒中的毫微秒，被格式化为必要时带前导零的九位数，即 000000000 - 999999999。‘p‘特定于语言环境的 上午或下午 标记以小写形式表示，例如 “am” 或 “pm”。使用转换前缀 ‘T’ 可以强行将此输出转换为大写形式。‘z‘相对于 GMT 的 RFC 822 格式的数字时区偏移量，例如 -0800。‘Z‘表示时区缩写形式的字符串。Formatter 的语言环境将取代参数的语言环境（如果有）。‘s‘自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的秒数，即 Long.MIN_VALUE/1000 与 Long.MAX_VALUE/1000 之间的差值。‘Q‘自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的毫秒数，即 Long.MIN_VALUE 与 Long.MAX_VALUE 之间的差值。格式化日期后缀以下转换字符用来格式化日期：大写表示全称，小写表示简称日期后缀描述‘B‘特定于语言环境的月份全称，例如 “January” 和 “February”。‘b‘特定于语言环境的月份简称，例如 “Jan” 和 “Feb”。‘h‘与 ‘b‘ 相同。也就是月份的简称‘A‘特定于语言环境的星期几全称，例如 “Sunday” 和 “Monday”‘a‘特定于语言环境的星期几简称，例如 “Sun” 和 “Mon”‘C‘除以 100 的四位数表示的年份，被格式化为必要时带前导零的两位数，即 00 - 99‘Y‘年份，被格式化为必要时带前导零的四位数（至少），例如，0092 等于格里高利历的 92 CE。‘y‘年份的最后两位数，被格式化为必要时带前导零的两位数，即 00 - 99。‘j‘一年中的天数，被格式化为必要时带前导零的三位数，例如，对于格里高利历是 001 - 366。‘m‘月份，被格式化为必要时带前导零的两位数，即 01 - 13。‘d‘一个月中的天数，被格式化为必要时带前导零两位数，即 01 - 31‘e‘一个月中的天数，被格式化为两位数，即 1 - 31。常见的日期/时间组合简写以下转换字符用于格式化常见的日期/时间组合。日期/时间组合描述‘R‘24 小时制的时间，被格式化为 “%tH:%tM“‘T‘24 小时制的时间，被格式化为 “%tH:%tM:%tS“。‘r‘12 小时制的时间，被格式化为 “%tI:%tM:%tS %Tp“。上午或下午标记 (‘%Tp’) 的位置可能与语言环境有关。‘D‘日期，被格式化为 “%tm/%td/%ty“。‘F‘ISO 8601 格式的完整日期，被格式化为 “%tY-%tm-%td“。‘c‘日期和时间，被格式化为 “%ta %tb %td %tT %tZ %tY“，例如 “Sun Jul 20 16:17:00 EDT 1969“。任何未明确定义为转换的字符都是非法字符，并且都被保留，以供将来扩展使用。实例：12345678910Formatter formatter = new Formatter();Date date = new Date();formatter.format(&quot;年月日:%1$tY-%1$tm-%1$td\n&quot;, date);formatter.format(&quot;时分秒:%1$tH:%1$tM:%1$tS\n&quot;, date);formatter.format(&quot;月份 :%1$tB 星期:%1$tA\n&quot;, date);formatter.format(&quot;年月日时分秒:%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS\n&quot;, date);formatter.format(&quot;日期年份 :%1$tc\n&quot;, date);formatter.format(&quot;年月日时分 简写:%1$tF %1$tR\n&quot;, date);formatter.format(&quot;年月日时分秒简写:%1$tF %1$tT\n&quot;, date);System.out.println(formatter);运行结果：1234567年月日:2018-08-12时分秒:19:02:20月份 :八月 星期:星期日年月日时分秒:2018-08-12 19:02:20日期年份 :星期日 八月 12 19:02:20 CST 2018年月日时分 简写:2018-08-12 19:02年月日时分秒简写:2018-08-12 19:02:20格式化百分号百分号描述%结果为字面值 ‘%‘这是因为%在格式语法中是必选项，%有特殊含义所以在格式的时候，使用%%来表示%这个符号本身。实例：1234567public static void testFormatPercent()&#123; Formatter formatter = new Formatter(); String string=&quot;Hello World!&quot;; formatter.format(&quot;%% %s %%&quot;, string); System.out.println(formatter);&#125;运行结果：1% Hello World! %格式化行分隔符行分隔符描述n结果为特定于平台的行分隔符实例：1234Formatter formatter = new Formatter();String string=&quot;Hello%nWorld!&quot;;formatter.format(string);System.out.println(formatter);运行结果：12HelloWorld!可选项[width]可选项width 是一个非负十进制整数，表明要向输出中写入的最少字符width 就表示一最少字符数，被格式化参数字符个数如果小于width ，则补上字符让字符宽度等于width 。如果被格式化字符宽度大于width则不用补齐，width不起作用。所以width 的作用就是为少补齐实例：12345678public static void testWidth()&#123; int value = 123; Formatter formatter = new Formatter(); formatter.format(&quot;%4d%6d%10d\n&quot;, value,value,value); formatter.format(&quot;%1$4d%1$6d%1$10d&quot;, value); System.out.println(formatter);&#125;运行结果：12123 123 123123 123 123可选项[.precision]可选 precision 是一个非负十进制整数，通常用来限制字符数。特定行为取决于转换类型。precision 是一个截取器，用于截取被格式化参数。被格式化参数用precision 截取器截取后与width 相比，实例：12345double value=321.123456789;Formatter formatter=new Formatter();formatter.format(&quot;只精确到小数点后三位:%1$.3f\n&quot;, value);formatter.format(&quot;总共占10位,只精确到小数点后三位:%10.3f\n&quot;, value);System.out.println(formatter);运行结果：12只精确到小数点后三位:321.123总共占10位,只精确到小数点后三位: 321.123要注意的是[width]选项掌管的是整个格式化字符串的宽度，[.precision]设置的是小数点后面能显示几位。小数点和小数点后面的宽度都在都包含在width宽度之内，例如上面的321.123占7个字符，而%10.3f表示整个占10个字符，这十个字符里面小数点后面占3位，所以会在321.123前面补上三个空格占满10个字符。如果设置为%6.3f则真正的宽度为7大于6，width属性失效。可选项[flags]可选项flags 是修改输出格式的字符集。有效标志集取决于转换类型。标记含义示例-结果将是左对齐的。%-4d 宽度最小为四位并且左对齐0结果将用零来填充%010d 所有宽度不满10位的数字填充前导0#如果是浮点数则结果加小数点，十六进制和八进制分别加0x和0%#x 最后输出结果变为16进制并且加0x,结果将包括特定于语言环境的组分隔符%，d 每三位数字来个逗号，看起来清晰+正数数字会额外显示一个+号%+d 结果如果是正数则显示＋号一个空格对于正值，结果中将包括一个前导空格% d 如果结果是正数则在前面加个空格(结果将是用圆括号括起来的负数%（d 如果结果是负数，不写符号而是用（）括起来注意支持的类型：下表总结了受支持的标志。y 表示该标志受指示参数类型支持。标志常规字符整数浮点日期/时间说明‘-‘yyyyy结果将是左对齐的。‘#‘y1-y3y-结果应该使用依赖于转换类型的替换形式‘+‘--y4y-结果总是包括一个符号‘‘--y4y-对于正值，结果中将包括一个前导空格‘0‘--yy-结果将用零来填充‘,‘--y2y5-结果将包括特定于语言环境的组分隔符‘(‘--y4y5-结果将是用圆括号括起来的负数设置左右对齐,0补齐标记含义示例-结果将是左对齐的。%-4d 宽度最小为四位并且左对齐0结果将用零来填充%010d 所有宽度不满10位的数字填充前导0实例：123456789public static void testAlign()&#123; double value=321.123456789; Formatter formatter=new Formatter(); formatter.format(&quot;总共占10位,只精确到小数点后三位:%10.3f##\n&quot;, value); formatter.format(&quot;左对齐,总共占10位,不足0填充,只精确到小数点后三位:%010.3f##\n&quot;, value); formatter.format(&quot;左对齐,总共占10位,只精确到小数点后三位:%-10.3f##\n&quot;, value); System.out.println(formatter);&#125;运行结果：123总共占10位,只精确到小数点后三位: 321.123##左对齐,总共占10位,不足0填充,只精确到小数点后三位:000321.123##左对齐,总共占10位,只精确到小数点后三位:321.123 ##正负数符号表示标记含义示例+正数数字会额外显示一个+号%+d 结果如果是正数则显示＋号一个空格对于正值，结果中将包括一个前导空格% d 如果结果是正数则在前面加个空格(结果将是用圆括号括起来的负数%（d 如果结果是负数，不写符号而是用（）括起来实例：123456789101112131415double value=321.123456789;StringBuilder builder=new StringBuilder();//格式化结果输出到StringBuilder中Formatter formatter = new Formatter(builder);formatter.format(&quot;显示正负号 ,左对齐,总共占10位,只精确到小数点后三位:%+-10.3f##\n&quot;, value);formatter.format(&quot;用空格表示正数,左对齐,总共占10位,只精确到小数点后三位:% -10.3f##\n&quot;, value);formatter.format(&quot;用空格表示正数,左对齐,总共占10位,只精确到小数点后三位:%(-10.3f##\n&quot;, value);value=-value;formatter.format(&quot;显示正负号 ,左对齐,总共占10位,只精确到小数点后三位:%+-10.3f##\n&quot;, value);formatter.format(&quot;用空格表示正数,左对齐,总共占10位,只精确到小数点后三位:% -10.3f##\n&quot;, value);formatter.format(&quot;用空格表示正数,左对齐,总共占10位,只精确到小数点后三位:%(-10.3f##\n&quot;, value);formatter.close();System.out.println(builder);运行结果：加进制标志加小数点标记含义示例#如果是浮点数则结果加小数点，十六进制和八进制分别加0x和0%#x 最后输出结果变为16进制并且加0x先来回顾一下java，二进制，八进制，十六进制整数的静态初始化：123int a=0123;//8进制数int b=0xAA;//16进制数int c=0b1010;//二进制数也可以使用：12//解析16进制数为十进制数int x=Integer.parseInt(&quot;FF&quot;, 16);这种方式来把其他进制转成10进制。实例：12345678910111213141516171819int a = 0123;// 8进制数int b = 0xAA;// 16进制数int c = 0b1010;// 二进制数StringBuilder builder=new StringBuilder();//格式化结果输出到StringBuilder中Formatter formatter = new Formatter(builder);// 解析16进制数为十进制数int x = Integer.parseInt(&quot;FF&quot;, 16);formatter.format(&quot;十进制:%1$-4d 等于%2$-3d进制:%1$#o\n&quot;, a, 8);formatter.format(&quot;十进制:%1$-4d 等于%2$-3d进制:%1$#x\n&quot;, a, 16);formatter.format(&quot;十进制:%1$-4d 等于%2$-3d进制:%1$#o\n&quot;, b, 8);formatter.format(&quot;十进制:%1$-4d 等于%2$-3d进制:%1$#x\n&quot;, b, 16);formatter.format(&quot;十进制:%1$-4d 等于%2$-3d进制:%1$#o\n&quot;, c, 8);formatter.format(&quot;十进制:%1$-4d 等于%2$-3d进制:%1$#x\n&quot;, c, 16);formatter.format(&quot;十进制:%1$-4d 等于%2$-3d进制:%1$#o\n&quot;, x, 8);formatter.format(&quot;十进制:%1$-4d 等于%2$-3d进制:%1$#x\n&quot;, x, 16);// formatter.format(&quot;%#b\n&quot;,c);formatter.close();System.out.println(builder.toString());运行结果：12345678十进制:83 等于8 进制:0123十进制:83 等于16 进制:0x53十进制:170 等于8 进制:0252十进制:170 等于16 进制:0xaa十进制:10 等于8 进制:012十进制:10 等于16 进制:0xa十进制:255 等于8 进制:0377十进制:255 等于16 进制:0xff中英文混合输出的情况下英文应该使用左对齐，这样排列起来才整齐，还有就是使用等宽字体。组分隔符标记含义示例,结果将包括特定于语言环境的组分隔符%，d 每三位数字来个逗号，看起来清晰123456789StringBuilder builder=new StringBuilder();//格式化结果输出到StringBuilder中Formatter formatter = new Formatter(builder);//formatter.close();//System.out.println(builder);int value=123456789;formatter.format(&quot;%,d\n&quot;,value);formatter.close();System.out.println(builder);运行结果：1123,456,789本文链接: java_util_Formatter类]]></content>
      <categories>
        <category>Java</category>
        <category>java_util</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[FormatterAPI介绍]]></title>
    <url>%2Fblog%2Fbac4a0b7%2F</url>
    <content type="text"><![CDATA[public final class Formatter extends Object implements Closeable, Flushableprintf 风格的格式字符串的解释程序。此类提供了对布局对齐和排列的支持，以及对数值、字符串和日期/时间数据的常规格式和特定于语言环境的输出的支持。支持诸如 byte、BigDecimal 和 Calendar 等常见 Java 类型。任意用户类型的受限格式化定制都是通过 Formattable 接口提供的。Formatter 对于多线程访问而言没必要是安全的。线程安全是可选的，它对此类中的方法用户负责。Java 语言的格式化与C语言的区别Java 语言的格式化输出在很大程度上受到 C 语言 printf 的启发。虽然一些格式字符串与 C 类似，但已进行了某些定制，以适应 Java 语言，并且利用了其中一些特性。此外，Java 的格式比 C 的格式更严格；例如，如果转换与标志不兼容，则会抛出异常。在 C 中，不适用的标志会被忽略。这样，便于 C 程序员识别这些格式字符串，而又不必与 C 中的那些标志完全兼容。推荐写法所期望用法的示例：1234567891011StringBuilder sb = new StringBuilder();//把所有的输出结果输出到可以追加的StringBuilder对象中Formatter formatter = new Formatter(sb, Locale.US);//使用参数索引可以对输出顺序进行排列formatter.format(&quot;%4$2s %3$2s %2$2s %1$2s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)// -&quot; d c b a&quot;//可以选择地区作为第一个参数以便使用本地的方式来格式化数字//宽度可以设置这个值占多少个字符//精度可以设置小数点后面显示的精度formatter.format(Locale.FRANCE, &quot;e = %+10.4f&quot;, Math.E);// -&quot;e = +2,7183&quot;常见格式化请求的便捷方法是按照如下调用格式来阐明的：使用System.out.format()1234567// 格式化字符串到System.out。System.out.format(&quot;Local time: %tT&quot;, Calendar.getInstance());// -&gt; &quot;Local time: 13:34:18&quot;//将格式化输出写入Simult.err。System.err.printf(&quot;Unable to open file &apos;%1$s&apos;: %2$s&quot;,fileName, exception.getMessage());// -&gt; &quot;Unable to open file &apos;food&apos;: No such file or directory&quot;使用String.format()方法与 C 语言的 sprintf(3) 类似，可以使用静态方法 String.format(String,Object...)String.format 来格式化 Strings：12345678// 格式化包含日期的字符串。import java.util.Calendar;import java.util.GregorianCalendar;import static java.util.Calendar.*;......Calendar c = new GregorianCalendar(1995, MAY, 23);String s = String.format(&quot;Duke&apos;s Birthday: %1$tm %1$te,%1$tY&quot;, c);// -&gt; s == &quot;Duke&apos;s Birthday: May 23, 1995&quot;规范此规范分为两部分。第一部分是摘要，包括基本的格式概念。这一部分是为那些想要快速入门并熟悉其他编程语言的格式化输出的用户准备的。第二部分是详细信息，包括具体的实现细节。它是为那些需要更精确格式化行为规范的用户准备的。摘要这一部分将提供对格式概念的简单概述。有关精确的行为细节，请参阅详细信息部分。格式字符串语法产生格式化输出的每个方法都需要格式字符串 和参数列表。格式字符串是一个 String，它可以包含固定文本以及一个或多个嵌入的格式说明符。请考虑以下示例：12Calendar c = ...;String s = String.format("Duke's Birthday: %1$tm %1$te,%1$tY", c);格式字符串：此格式字符串是 format 方法的第一个参数。它包含三个格式说明符 “%1$tm“、”%1$te“ 和 “%1$tY“，它们指出应该如何处理参数以及在文本的什么地方插入它们。格式字符串的其余部分是包括 “Dukes Birthday: “ 和其他任何空格或标点符号的固定文本。参数列表参数列表由传递给位于格式字符串之后的方法的所有参数组成。在上述示例中，参数列表的大小为1，由对象 Calendar c 组成。格式说明符语法常规类型、字符类型和数值类型的格式说明符常规类型、字符类型和数值类型的格式说明符的语法如下：1%[argument_index$][flags][width][.precision]conversion可选的argument_index 是一个十进制整数，用于表明参数在参数列表中的位置。第一个参数由 “1$“ 引用，第二个参数由 “2$“ 引用，依此类推。可选 flags 是修改输出格式的字符集。有效标志集取决于转换类型。可选 width 是一个非负十进制整数，表明要向输出中写入的最少字符数。可选 precision 是一个非负十进制整数，通常用来限制字符数。特定行为取决于转换类型。所需 conversion 是一个表明应该如何格式化参数的字符。给定参数的有效转换集取决于参数的数据类型。表示日期和时间类型的格式说明符用来表示日期和时间类型的格式说明符的语法如下：1%[argument_index$][flags][width]conversion可选的 argument_index、flags 和 width 的定义同上。所需的 conversion 是一个由两字符组成的序列。第一个字符是 ‘t‘ 或 ‘T‘。第二个字符表明所使用的格式。这些字符类似于但不完全等同于那些由 GNU date 和 POSIX strftime(3c) 定义的字符。参数不对应的格式说明符与参数不对应的格式说明符的语法如下：1%[flags][width]conversion可选 flags 和 width 的定义同上。所需的 conversion 是一个表明要在输出中所插内容的字符。转换符conversion转换符conversion可分为以下几类：常规 可应用于任何参数类型字符 可应用于表示 Unicode 字符的基本类型：char、Character、byte、Byte、short 和 Short。当 Character.isValidCodePoint(int) 返回 true 时，可将此转换应用于 int 和 Integer 类型数值整数 可应用于 Java 的整数类型：byte、Byte、short、Short、int、Integer、long、Long 和 BigInteger浮点 可用于 Java 的浮点类型：float、Float、double、Double 和 BigDecimal日期/时间 可应用于 Java 的、能够对日期或时间进行编码的类型：long、Long、Calendar 和 Date。百分比 产生字面值 ‘%‘ (‘\u0025‘)行分隔符 产生特定于平台的行分隔符下表总结了受支持的转换。由大写字符（如 ‘B‘、’H‘、’S‘、’C‘、’X‘、’E‘、’G‘、’A‘ 和 ‘T‘）表示的转换与由相应的小写字符的转换等同，根据流行的 Locale 规则将结果转换为大写形式除外。后者等同于 String.toUpperCase() 的以下调用 out.toUpperCase()表在上面了。宽度[width]宽度是将向输出中写入的最少字符数。对于行分隔符转换，不适用宽度，如果提供宽度，则会抛出异常。精度[.precision]对于常规参数类型，精度是将向输出中写入的最多字符数。对于浮点转换 ‘e’、’E’ 和 ‘f’，精度是小数点分隔符后的位数。如果转换是 ‘g’ 或 ‘G’，那么精度是舍入计算后所得数值的所有位数。如果转换是 ‘a’ 或 ‘A’，则不必指定精度。对于字符、整数和日期/时间参数类型转换，以及百分比和行分隔符转换，精度是不适用的；如果提供精度，则会抛出异常。参数索引[argument_index$]参数索引是一个十进制整数，用于表明参数在参数列表中的位置。第一个参数由 “1$” 引用，第二个参数由 “2$” 引用，依此类推。根据位置引用参数的另一种方法是使用 ‘&lt;‘ (‘\u003c‘) 标志，这将会重用以前格式说明符的参数。例如，以下两条语句产生的字符相同：123Calendar c = ...;String s1 = String.format(&quot;Duke&apos;s Birthday: %1$tm %1$te,%1$tY&quot;, c);String s2 = String.format(&quot;Duke&apos;s Birthday: %1$tm %&lt;te,%&lt;tY&quot;, c);%&lt;te中的&lt;重用前面的%1$tm参数，也是1$，也就是参数c详细信息这一部分将提供格式化行为规范方面的细节，其中包括条件和异常、受支持的数据类型、本地化以及标志、转换和数据类型之间的交互。有关格式化概念的概述，请参阅摘要。任何未明确定义为转换、日期/时间转换前缀或标志的字符都是非法字符，并且这些字符都被保留，以供未来扩展使用。在格式字符串中使用这样的字符会导致抛出 UnknownFormatConversionException 或 UnknownFormatFlagsException。如果格式说明符包含带有无效值或不受支持的其他值的宽度或精度，则将分别抛出 IllegalFormatWidthException 或 IllegalFormatPrecisionException。如果格式说明符包含不适用于对应参数的转换字符，则将抛出 IllegalFormatConversionException。所有指定异常都可能被 Formatter 的任何 format 方法以及任何 format 的便捷方法抛出，比如 String.format(String,Object...) 和 java.io.PrintStream.printf(String,Object...)由大写字符（如 ‘B‘、’H‘、’S‘、’C‘、’X‘、’E‘、’G‘、’A‘ 和 ‘T‘）表示的转换与那些相应的小写字符表示的转换相同，根据流行的 Locale 规则将结果转换成大写形式除外。结果等同于 String.toUpperCase() 的以下调用 out.toUpperCase()常规常规转换符说明以下常规转换可应用于任何参数类型：格式符生成结果生成过程‘b‘‘\u0062‘ 将生成 &quot;true&quot; 或 &quot;false&quot;由 Boolean.toString(boolean) 返回。如果参数为 null，则结果为 “false”。如果参数是一个 boolean 值或 Boolean，那么结果是由 String.valueOf() 返回的字符串。否则结果为 “true”。如果给出 ‘#’ 标志，则将抛出 FormatFlagsConversionMismatchException。‘B‘‘\u0042‘ ‘b‘ 的大写形式。同上‘h‘‘\u0068‘ 生成一个表示对象的哈希码值的字符串如果参数 arg 为 null，则结果为 “null”。否则，结果为调用 Integer.toHexString(arg.hashCode()) 得到的结果。如果给出 ‘#’ 标志，则将抛出 FormatFlagsConversionMismatchException。‘H‘‘\u0048‘ ‘h‘ 的大写形式。同上‘s‘‘\u0073‘ 生成一个字符串如果参数为 null，则结果为 “null”。如果参数实现了 Formattable，则调用其 formatTo 方法。否则，结果为调用参数的 toString() 方法得到的结果。如果给出 ‘#’ 标志，且参数不是 Formattable，则将抛出FormatFlagsConversionMismatchException。‘S‘‘\u0053‘ ‘s‘ 的大写形式。同上用于常规转换的标志以下 标志 应用于常规转换：标志对应Unicode值描述‘-‘‘\u002d’将输出左对齐。根据需要在转换值结尾处添加空格 (‘\u0020’)，以满足字段的最小宽度要求。如果没有提供宽度，则将抛出 MissingFormatWidthException。如果没有给出此标志，则输出将是右对齐的。‘#‘‘\u0023’要求输出使用替换形式。此形式的定义通过转换指定。常规下的宽度常规下的宽度 是将向输出中写入的最少字符数。如果转换值的长度小于宽度，则用 ‘‘ (\u0020’) 填充输出，直到字符总数等于宽度为止。默认情况下，是在左边进行填充。如果给出 ‘-‘ 标志，则在右边进行填充。如果没有指定宽度，则没有最小宽度。常规下的精度常规下的精度 是将向输出中写入的最多字符数。精度的应用优先级要高于宽度，因此，即使宽度大于精度，输出也将被截取为 precision个字符。如果没有指定精度，则对字符数没有明确限制。字符此转换可应用于 char 和 Character。它还可应用于类型 byte、Byte、short 和 Short、 int 和 Integer。当 Character.isValidCodePoint(int) 返回 true 时，此转换也可应用于 int 和 Integer。如果返回 false，则将抛出 IllegalFormatCodePointException。字符转换符说明格式符对应Unicode值描述‘c‘‘`u0063`’将参数格式化为 Unicode Character Representation 中描述的 Unicode 字符。在该参数表示增补字符的情况下，它可能是多个 16 位 char。如果给出 ‘#’ 标志，则将抛出 FormatFlagsConversionMismatchException。‘C‘‘\u0043‘结果是使用’c‘的格式化结果的大写形式。字符的标志‘-‘ 标志是为应用常规转换而定义的,不适用与字符转换。如果给出 ‘#‘ 标志，则将抛出 FormatFlagsConversionMismatchException。字符转换符下宽度不适用宽度是为了实现常规转换而定义的。字符转换符下精度不适用精度不适用。如果指定精度，则将抛出 IllegalFormatPrecisionException。数值数值转换分为以下几类：Byte、Short、Integer 和 LongBigIntegerFloat 和 DoubleBigDecimal将根据以下算法对数值类型进行格式化：数字本地化算法在获得数字的整数部分、小数部分和指数（适用于数据类型）之后，将应用以下转换：将字符串中的每个数字字符 d 都替换为特定于语言环境的数字，该数字是相对于当前语言环境的零数字 z 来计算的；即 d ‘0’ + z。如果存在小数点分隔符，则用特定于语言环境的小数点分隔符替换。如果给出 ‘,‘ (‘\u002c’) flag 标志，则插入特定于语言环境的组分隔符，这是通过从最低位到最高位浏览字符串的整数部分并不时插入该语言环境组大小定义的分隔符来实现的。如果给出 ‘0‘ 标志，则在符号字符（如果有的话）之后、第一个非零数字前插入特定于语言环境的零数字，直到字符串长度等于所要求的字段宽度。如果该值为负，并且给出了 ‘(‘ 标志，那么预先考虑 ‘(‘ (‘\u0028’)，并追加一个 ‘)’ (‘\u0029’)。如果该值为负（或者为浮点负零），并且没有给出 ‘(‘ 标志，那么预先考虑 ‘-‘ (‘\u002d’)。如果给出 ‘+‘ 标志，并且该值为正或零（或者为浮点正零），那么将预先考虑 ‘+’ (‘\u002b’)。如果该值为 NaN 或正无穷大，则分别输出文本字符串 “NaN” 或 “Infinity”。如果该值为负无穷大，那么输出将是 “(Infinity)”；否则如果给出 ‘(‘ 标志，那么输出将是 “-Infinity”。这些值都没有被本地化。太多了，限于篇幅，想了解详细的过程的话还是看API吧日期/时间此转换可应用于 long、Long、Calendar 和 Date。前缀字符Unicode值描述‘t‘‘\u0074‘日期和时间转换字符的前缀。‘T‘‘\u0054‘‘t‘ 的大写形式。后缀以下日期和时间转换字符后缀是为 ‘t‘ 和 ‘T‘ 转换定义的。这些类型类似于但不完全等同于 GNU date 和 POSIX strftime(3c) 定义的那些类型。提供其他转换类型是为了访问特定于 Java 的功能（例如，’L‘ 用于秒中的毫秒）。以下转换字符用来格式化时间：格式化时间后缀Unicode值描述‘H‘‘\u0048’24 小时制的小时，被格式化为必要时带前导零的两位数，即 00 - 23。00 对应午夜。‘I‘‘\u0049’12 小时制的小时，被格式化为必要时带前导零的两位数，即 01 - 12。01 对应于 1 点钟（上午或下午）。‘k‘‘\u006b’24 小时制的小时，即 0 - 23。0 对应于午夜。‘l‘‘\u006c’12 小时制的小时，即 1 - 12。1 对应于上午或下午的一点钟。‘M‘‘\u004d’小时中的分钟，被格式化为必要时带前导零的两位数，即 00 - 59。‘S‘‘\u0053’分钟中的秒，被格式化为必要时带前导零的两位数，即 00 - 60（”60” 是支持闰秒所需的一个特殊值）。‘L‘‘\u004c’秒中的毫秒，被格式化为必要时带前导零的三位数，即 000 - 999。‘N‘‘\u004e’秒中的毫微秒，被格式化为必要时带前导零的九位数，即 000000000 - 999999999。此值的精度受底层操作系统或硬件解析的限制。‘p‘‘\u0070’特定于语言环境的上午或下午标记以小写形式表示，例如 “am” 或 “pm”。使用转换前缀 ‘T’ 可以强行将此输出转换为大写形式。（注意，’p’ 产生的输出是小写的。而 GNU date 和 POSIX strftime(3c) 产生的输出是大写的。）‘z‘‘\u007a’相对于 GMT 的 RFC 822 格式的数字时区偏移量，例如 -0800。‘Z‘‘\u005a’表示时区的缩写形式的字符串。‘s‘‘\u0073’自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的秒数，也就是 Long.MIN_VALUE/1000 与 Long.MAX_VALUE/1000 之间的差值。‘Q‘‘\u004f’自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的毫秒数，即 Long.MIN_VALUE 与 Long.MAX_VALUE 之间的差值。此值的精度受底层操作系统或硬件解析的限制。格式化日期以下转换字符用来格式化日期：后缀Unicode值描述‘B‘‘\u0042’特定于语言环境的完整月份名称，例如 “January” 和 “February”。‘b‘‘\u0062’特定于语言环境的月份简称，例如 “Jan” 和 “Feb”。‘h‘‘\u0068’与 ‘b’ 相同。‘A‘‘\u0041’特定于语言环境的星期几的全称，例如 “Sunday” 和 “Monday”‘a‘‘\u0061’特定于语言环境的星期几的简称，例如 “Sun” 和 “Mon”‘C‘‘\u0043’除以 100 的四位数表示的年份，被格式化为必要时带前导零的两位数，即 00 - 99‘Y‘‘\u0059’年份，被格式化为必要时带前导零的四位数（至少），例如 0092 等于格里高利历的 92 CE。‘y‘‘\u0079’年份的最后两位数，被格式化为必要时带前导零的两位数，即 00 - 99。‘j‘‘\u006a’一年中的天数，被格式化为必要时带前导零的三位数，例如，对于格里高利历是 001 - 366。001 对应于一年中的第一天。‘m‘‘\u006d’月份，被格式化为必要时带前导零的两位数，即 01 - 13，其中 “01” 是一年的第一个月，(“13” 是支持阴历所需的一个特殊值）。‘d‘‘\u0064’一个月中的天数，被格式化为必要时带前导零的两位数，即 01 - 31，其中 “01” 是一个月的第一天。‘e‘‘\u0065’一个月中的天数，被格式化为两位数，即 1 - 31，其中 “1” 是一个月中的第一天。日期/时间组合以下转换字符用于格式化常见的日期/时间组合。后缀Unicode值描述‘R‘‘\u0052’24 小时制的时间，被格式化为 “%tH:%tM“‘T‘‘\u0054’24 小时制的时间，被格式化为 “%tH:%tM:%tS“。‘r‘‘\u0072’12 小时制的时间，被格式化为 “%tI:%tM:%tS %Tp“。上午或下午标记 (‘%Tp’) 的位置可能与地区有关。‘D‘‘\u0044’日期，被格式化为 “%tm/%td/%ty“。‘F‘‘\u0046’ISO 8601 格式的完整日期，被格式化为 “%tY-%tm-%td“。‘c‘‘\u0063’日期和时间，被格式化为 “%ta %tb %td %tT %tZ %tY“，例如 “Sun Jul 20 16:17:00 EDT 1969”。对应的标志应用为常规转换而定义的 ‘-‘ 标志。如果给出 ‘#’ 标志，则将抛出 FormatFlagsConversionMismatchException。宽度的要求宽度 是将向输出中写入的最少字符数。如果转换值的长度小于 width，则用空格(‘\u0020’) 来填充输出，直到总字符数等于宽度。默认情况下，在左边进行填充。如果给出 ‘-‘ 标志，则在右边进行填充。如果没有指定宽度，则没有最小宽度。精度不适用精度不适用。如果指定了精度，则将抛出 IllegalFormatPrecisionException。百分比该转换不对应于任何参数。 ‘%‘ 结果是一个字面值 ‘%‘ (‘\u0025’)标志应用为常规转换而定义的 ‘-‘ 标志。如果提供其他任何标志，则将抛出 FormatFlagsConversionMismatchException。宽度宽度 是将向输出中写入的最少字符数，包括 ‘%’。如果转换值的长度小于 width，则用空格 (‘\u0020’) 来填充输出，直到总字符数等于宽度。在左边进行填充。如果没有指定宽度，则只输出 ‘%’。精度不适用精度不适用。如果指定精度，则将抛出 IllegalFormatPrecisionException。行分隔符该转换不对应于任何参数。 ‘n‘ 由 System.getProperty(“line.separator“) 返回的特定于平台的行分隔符。标志，宽度，精度都不可用标志、宽度和精度都不可用。如果提供这三者，则会分别抛出 IllegalFormatFlagsException、IllegalFormatWidthException 和 IllegalFormatPrecisionException。参数索引格式说明符可以通过三种方式引用参数：- 显式索引 是在格式说明符中包含参数索引时使用。参数索引是一个十进制整数，用于指示参数在参数列表中的位置。第一个参数由 “1$“ 引用，第二个参数由 “2$“ 引用，依此类推。可以多次引用任何一个参数。例如：123formatter.format(&quot;%4$s %3$s %2$s %1$s %4$s %3$s %2$s %1$s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)// -&gt; &quot;d c b a d c b a&quot;相对索引 是在格式说明符中包含 ‘&lt;‘ (‘\u003c’) 标志时使用，该标志将导致重用以前格式说明符的参数。如果不存在以前的参数，则抛出 MissingFormatArgumentException。123 formatter.format(&quot;%s %s %&lt;s %&lt;s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)// -&gt; &quot;b a a b&quot; // &quot;c&quot; and &quot;d&quot; are ignored because they are not referenced普通索引 在格式说明符中既不包含参数索引也不包含 ‘&lt;‘ 标志时使用。每个使用普通索引的格式说明符都分配了一个连续隐式索引，分配在独立于显式索引或相对索引使用的参数列表中。12formatter.format(&quot;%s %s %s %s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)// -&gt; &quot;a b c d&quot;混合使用可能有一个使用所有索引形式的格式字符串，例如：123formatter.format(&quot;%2$s %s %&lt;s %s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)// -&gt; &quot;b a a b&quot;// &quot;c&quot; and &quot;d&quot; are ignored because they are not referenced参数的最大数量受到 Java Machine Specification 定义的 Java 数组 的最大维数的限制。如果参数索引与可用参数不对应，则抛出 MissingFormatArgumentException。如果参数多于格式说明符，则忽略额外的参数。除非另行指定，否则向此类中的任何方法或构造方法传递 null 参数都将抛出 NullPointerException。Formatter类方法构造方法方法描述Formatter()构造一个新 formatter。Formatter(Appendable a)构造一个带指定目标文件的新 formatter。Formatter(Appendable a, Locale l)构造一个带指定目标文件和语言环境的新 formatter。Formatter(File file)构造一个带指定文件的新 formatter。Formatter(File file, String csn)构造一个带指定文件和字符集的新 formatter。Formatter(File file, String csn, Locale l)构造一个带指定文件、字符集和语言环境的新 formatter。Formatter(Locale l)构造一个带指定语言环境的新 formatter。Formatter(OutputStream os)构造一个带指定输出流的新 formatter。Formatter(OutputStream os, String csn)构造一个带指定输出流和字符集的新 formatter。Formatter(OutputStream os, String csn, Locale l)构造一个带指定输出流、字符集和语言环境的新 formatter。Formatter(PrintStream ps)构造一个带指定输出流的新 formatter。Formatter(String fileName)构造一个带指定文件名的新 formatter。Formatter(String fileName, String csn)构造一个带指定文件名和字符集的新 formatter。Formatter(String fileName, String csn, Locale l)构造一个带指定文件名、字符集和语言环境的新 formatter。成员方法方法描述void close()关闭此 formatter。void flush()刷新此 formatter。Formatter format(Locale l, String format, Object... args)使用指定的语言环境、格式字符串和参数，将一个格式化字符串写入此对象的目标文件中。Formatter format(String format, Object... args)使用指定格式字符串和参数将一个格式化字符串写入此对象的目标文件中。IOException ioException()返回由此 formatter 的 Appendable 方法上次抛出的 IOException 异常。Locale locale()返回构造此 formatter 时设置的语言环境。Appendable out()返回输出的目标文件。String toString()返回对输出的目标文件调用 toString() 的结果。本文链接: FormatterAPI介绍]]></content>
      <categories>
        <category>Java</category>
        <category>java_util</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正则应用 复制表格按行分隔的]]></title>
    <url>%2Fblog%2F2467f613%2F</url>
    <content type="text"><![CDATA[需求把上面的文字转成markdown表格处理的文本：复制上面的表格中的文字,然后粘贴，看看复制到的文本有什么规律：1234567891011121314B b 如果参数arg 为 null，则结果为 &quot;false&quot;。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 &quot;true&quot;。H h 如果参数arg 为 null，则结果为 &quot;null&quot;。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。S s 如果参数arg 为 null，则结果为 &quot;null&quot;。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。实现过程使用正则表达式删除空白行可以看到复制到的表格是一行一行的，而且还有多个空白行分隔开了，先来去除掉这些空白行：12//删除空白行body=body.replaceAll(&quot;(?m)^\\s*$(\\n|\\r\\n)&quot;, &quot;&quot;);处理后的结果如下：123456B b如果参数arg 为 null，则结果为 &quot;false&quot;。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 &quot;true&quot;。H h如果参数arg 为 null，则结果为 &quot;null&quot;。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。S s如果参数arg 为 null，则结果为 &quot;null&quot;。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。使用正则表达式把两行合并为一行空白行去掉了，来把两行合并为一行：12//两行合并为一行，中间用表格分隔符分隔开body=body.replaceAll(&quot;(.+)\\n(.+)(\\n)?&quot;, &quot;$1|$2\n&quot;);运行结果为：123B b|如果参数arg 为 null，则结果为 &quot;false&quot;。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 &quot;true&quot;。H h|如果参数arg 为 null，则结果为 &quot;null&quot;。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。S s|如果参数arg 为 null，则结果为 &quot;null&quot;。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。使用正则表达式分别在行首和行尾加上分割符然后在每行头尾加上表格分隔符：12//行首和行尾加入结束符body=body.replaceAll(&quot;(?m)(?:^|$)&quot;, &quot;|&quot;);运行结果为：1234|B b|如果参数arg 为 null，则结果为 &quot;false&quot;。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 &quot;true&quot;。||H h|如果参数arg 为 null，则结果为 &quot;null&quot;。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。||S s|如果参数arg 为 null，则结果为 &quot;null&quot;。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。||删除多加入的分割符这里多加上了一个分隔符，删掉这个分隔符：12// 去掉多加入无用的分界符body = body.replaceAll(&quot;(?m)^\\|$&quot;, &quot;&quot;);运行结果：123|B b|如果参数arg 为 null，则结果为 &quot;false&quot;。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 &quot;true&quot;。||H h|如果参数arg 为 null，则结果为 &quot;null&quot;。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。||S s|如果参数arg 为 null，则结果为 &quot;null&quot;。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。|加上表格头部可以看到，到这里表体已经生成完毕，加上表格头就行了。1234// 定义表格头部和对齐方式String head = &quot;|方法|描述|\n|:-|:-|\n&quot;;// 拼接成完整的markdown表格代码body = head + body;运行结果：12345|方法|描述||:-|:-||B b|如果参数arg 为 null，则结果为 &quot;false&quot;。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 &quot;true&quot;。||H h|如果参数arg 为 null，则结果为 &quot;null&quot;。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。||S s|如果参数arg 为 null，则结果为 &quot;null&quot;。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。|可以看到到这里就处理完毕了，把生成的markdown表格粘贴到markdown文档中，就可以显示，显示效果如下:方法描述B b如果参数arg 为 null，则结果为 “false”。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 “true”。H h如果参数arg 为 null，则结果为 “null”。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。S s如果参数arg 为 null，则结果为 “null”。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。表格的每一行的第一个单元格都设置为代码块在表格头定义语句之前加上：12//注意了使用正则表达式匹配|一定要转义啊!,错误的时候对元字符转义一下!body=body.replaceAll(&quot;(?m)^\\|(.+)\\|(.+)\\|$&quot;, &quot;|`$1`|$2|&quot;);运行结果：12345|方法|描述||:-|:-||`B b`|如果参数arg 为 null，则结果为 &quot;false&quot;。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 &quot;true&quot;。||`H h`|如果参数arg 为 null，则结果为 &quot;null&quot;。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。||`S s`|如果参数arg 为 null，则结果为 &quot;null&quot;。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。|显示效果：方法描述B b如果参数arg 为 null，则结果为 “false”。如果arg 是一个 boolean 值或Boolean，则结果为String.valueOf() 返回的字符串。否则结果为 “true”。H h如果参数arg 为 null，则结果为 “null”。否则，结果为调用Integer.toHexString(arg.hashCode()) 得到的结果。S s如果参数arg 为 null，则结果为 “null”。如果arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。完整的代码123456789101112131415161718192021222324252627282930package markdowntools.table;import java.util.regex.Matcher;import java.util.regex.Pattern;import clipboard.util.SysClipboardUtil;public class MDTableCopyByLine&#123; public static void main(String[] args) &#123; String body=SysClipboardUtil.getSysClipboardText(); //删除空白行 body=body.replaceAll("(?m)^\\s*$(\\n|\\r\\n)", ""); //两行合并为一行，中间用表格分隔符分隔开 body=body.replaceAll("(.+)\\n(.+)(\\n)?", "$1|$2\n"); //行首和行尾加入结束符 body=body.replaceAll("(?m)(?:^|$)", "|"); // 去掉多加入无用的分界符 body = body.replaceAll("(?m)^\\|$", ""); //注意了使用正则表达式匹配|一定要转义啊!,错误的时候对元字符转义一下! body=body.replaceAll("(?m)^\\|(.+)\\|(.+)\\|$", "|`$1`|$2|"); // 定义表格头部和对齐方式 String head = "|方法|描述|\n|:-|:-|\n"; // 拼接成完整的markdown表格代码 body = head + body; // 处理好的文本写入剪贴板中 SysClipboardUtil.setSysClipboardText(body); System.out.println(body); &#125;&#125;依赖：clipboard.util.SysClipboardUtil本文链接: 正则应用 复制表格按行分隔的]]></content>
      <categories>
        <category>正则表达式</category>
        <category>实例</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 Console类]]></title>
    <url>%2Fblog%2Feaae884d%2F</url>
    <content type="text"><![CDATA[Console类Java中Console类的用法参考1:https://blog.csdn.net/ChengXuYuanXingCheng/article/details/71430068、参考2：https://www.jb51.net/article/118527.htmjava的Console类的使用方法及实例JDK 6中提供了java.io.Console类专用来访问基于字符的控制台设备。如果你的Java程序要与Windows下的cmd或者Linux下的Terminal交互，就可以用这个Java Console类代劳。由于Scanner类输入是可见的，故Scanner类不适用于从控制台读取密码。从Java se 6开始加入了Console类来解决此问题。要注意的是，以javaw所执行的应用程序，没有主控台（Console），也就取不到Console对象（例如在Eclipse中）。读控制台方法方法描述String readLine()从控制台读取单行文本。String readLine(String fmt, Object... args)提供一个格式化提示，然后从控制台读取单行文本。char[] readPassword()从控制台读取密码，禁用回显。char[] readPassword(String fmt, Object... args)提供一个格式化提示，然后从控制台读取密码，禁用回显。Console类也提供有reader()与writer()方法，可以传回 Reader、 Writer 对象，以便进行其它的IO处理，例如结合Scanner一同使用：Scanner scanner = new Scanner(System.console().reader());实例：读密码不回显12345678910111213141516package study.news;import java.io.Console;public class TestConsole&#123; public static void main(String[] args) &#123; Console console = System.console(); //读入用户名 String username = console.readLine(&quot;User name:&quot;); //读入密码 char[] passwd = console.readPassword(&quot;Password:&quot;); console.printf(&quot;user:&quot; + username + &quot;\n&quot;); console.printf(String.valueOf(passwd)); &#125;&#125;因为Java.io.Console 只能用在标准输入、输出流未被重定向的原始控制台中使用，在 Eclipse 或者其他 IDE 的控制台是用不了的。所以我们到cmd控制台中来编译运行这个实例：编译:javac -d . TestConsole.java运行:study.news.TestConsole输入密码：123456，可以看到密码123456没有显示在控制台上。运行结果：readLine()和readPassword()方法，还可以像c语言中的printf,使用变参和格式符那样打印输出信息。12345Console console = System.console();String username = console.readLine(&quot;%s&quot;, &quot;你是谁:&quot;);char[] password = console.readPassword(&quot;%s!请输入口令:&quot;, username);System.out.println(&quot;username:&quot;+username);System.out.println(&quot;password:&quot;+new String(password));运行结果：1234你是谁:xiaomingxiaoming!请输入口令:username:xiaomingpassword:qunide获取控制台的输入输出流方法描述Reader reader()获取与此控制台关联的唯一 Reader 对象。PrintWriter writer()获取与此控制台关联的唯一 PrintWriter 对象。void flush()刷新控制台，并强制立即写入所有缓冲的输出。获取来自控制台的输入流1234567891011121314151617181920212223242526272829303132public static void testConsoleReader()&#123; Console console = System.console(); if (console != null) &#123; System.out.print("输入以#结束"); Pattern endRegex = Pattern.compile("([^#]*)#"); Matcher isEnd; // 获取控制台的字符输入流,这样可以读取到我们在控制台上打的字 Scanner scan = new Scanner(console.reader()); String str; StringBuilder builder = new StringBuilder(); while (scan.hasNext()) &#123; str = scan.next(); isEnd = endRegex.matcher(str); // matches()会匹配整个字符串匹配后匹配的下表 if (isEnd.matches()) &#123; // 使用group()进行捕获的前提一定要是在匹配的情况下 // 可以在matches(),find(),lonkingAt()返回true的时候调用 builder.append(isEnd.group(1)); break; &#125; builder.append(str); // System.out.println(str); &#125; System.out.println("接收到控制台输入："); System.out.println(builder.toString()); &#125;&#125;运行结果：使用这种方式，可以一次读入多行字符。不过这样其实和new Scanner(System.in)没啥区别了。也可以使用BufferedReader类包装console.reader()123456789101112131415161718192021222324252627282930313233public static void testConsoleReader2() throws IOException&#123; Console console = System.console(); if (console != null) &#123; System.out.print("输入以#结束"); Pattern endRegex = Pattern.compile("([^#]*)#"); Matcher isEnd; // 获取控制台的字符输入流,这样可以读取到我们在控制台上打的字// Scanner scan = new Scanner(console.reader()); BufferedReader reader=new BufferedReader(console.reader()); String line; //设置默认大小为100,面输入字符过多使得StringBuilder频繁扩容,每次扩容的长度是当前长度(length*2+2) StringBuilder builder = new StringBuilder(100); while ((line=reader.readLine())!=null) &#123; isEnd = endRegex.matcher(line); // matches()会匹配整个字符串匹配后匹配的下表 if (isEnd.matches()) &#123; // 使用group()进行捕获的前提一定要是在匹配的情况下 // 可以在matches(),find(),lonkingAt()返回true的时候调用 builder.append(isEnd.group(1)); break; &#125; builder.append(line); &#125; System.out.println("接收到控制台输入："); System.out.println(builder.toString()); reader.close(); &#125;&#125;获取对控制台的输出流console.writer()可以获取对控制台的输出流(PrintWriter)123456789101112131415161718public static void testConsoleWriter()&#123; Console console = null; PrintWriter out = null; try &#123; console = System.console(); if (console != null) &#123; // 获取控制台的PrintWriter实例，也就是对控制台的输出 out = console.writer(); out.println("这句话将输出到控制台中"); &#125; &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125;&#125;运行结果：使用Console类自己的控制台输入和输出方法上面的控制台输出，我们借助于System.out.prinln()方法实现的。既然讲Console类，那就使用Console类自己的方式来进行输入和输出。123456789101112131415161718192021222324public static void testReaderWriter()&#123; Console console =null; console=System.console(); if(console!=null) &#123; PrintWriter consoleOut=console.writer(); BufferedReader consoleIn=new BufferedReader(console.reader()); String line=null; try &#123; while((line=consoleIn.readLine())!=null) &#123; if(line.equals("exit")) break; consoleOut.println("你输入了："+line); &#125; &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;控制台格式化输出方法方法描述Console format(String fmt, Object... args)使用指定格式字符串和参数将格式化字符串写入此控制台的输出流中。Console printf(String format, Object... args)使用指定格式字符串和参数将格式化字符串写入此控制台输出流的便捷方法。printf()源码：1234public Console printf(String format, Object ... args) &#123; return format(format, args);&#125;可以看到printf()方法还是原封不动的调用format方法来实现format源码：1234567private Formatter formatter;......public Console format(String fmt, Object ...args) &#123; formatter.format(fmt, args).flush(); return this;&#125;可以看到这里的format方法是使用Formatter类的formatter方法来实现的。本文链接: Java IO流 Console类]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 File类]]></title>
    <url>%2Fblog%2F833486b4%2F</url>
    <content type="text"><![CDATA[Java IO流 File类File类简介File是java.io包下面的一个类，代表与平台无关的文件或者目录。Java中，无论文件还是目录，都可以看作File类的一个对象。File类能对文件或目录新建，删除，获取属性等操作，但是不能直接操作文件内容（文件内容需要用数据流访问）。也就是File类只用于表示文件(目录)的信息(名称、大小等),不能用于文件内容的访问。JVM默认会将workspace作为相对路径，即user.dir系统变量所指路径, 即如果这样初始化file对象，File file = new File(&quot;.&quot;); 就是获取了user.dir路径。File类方法继承关系12java.lang.Object |----&gt; java.io.File字段方法描述static String pathSeparator与系统有关的路径分隔符，为了方便，它被表示为一个字符串。static char pathSeparatorChar与系统有关的路径分隔符。static String separator与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。static char separatorChar与系统有关的默认名称分隔符。其中常用的是第三个File.separator,这个表示与系统相关的路径分隔符，因为在Windows下的路径分隔符为:\而在Linux下的路径分隔符为:/，所以当直接使用”\“或者”/“时作为路径分隔符时，在跨平台使用时会报No Such file or diretory异常。所以需要跨平台使用时，应该使用File.separator作为路径分隔符。例如window下平常使用路径为：1File file=new File(&quot;.\\test\\demo.txt&quot;);应该改为：1File file = new File(&quot;.&quot;+ File.separator +&quot;demo.txt&quot;);这样编译好的代码可以在linux中正常运行。123456789101112131415package test.before;import java.io.File;import java.io.IOException;public class TestFile&#123; public static void main(String[] args) throws IOException &#123; File file=new File("."+File.separator+"gbk.txt");// File file=new File(".\\gbk.txt"); System.out.println(file.getAbsolutePath()); System.out.println(file.isFile()); &#125;&#125;首先在工程目录下创建以名为gbk.txt的文件Window中的输出结果：12D:\dev\workspace\IO\.\gbk.txttrueLinux中的输出结果：12/home/lan/桌面/java/test/./gbk.txttrue可以看到虽然文件分隔符都不一样的使用了File.separator可以跨平台。如果改成File file=new File(&quot;.\\gbk.txt&quot;);将在Linux中运行出错。12/home/lan/桌面/java/test/.\gbk.txtfalse构造函数方法描述File(String pathname);根据字符串路径来创建File对象File(String parent, String child) ;根据父路径字符串，和文件或者目录名来创建File对象File(File parent, String child);根据父路径的File对象，和子文件(子目录)的名称来创建File对象判断方法方法描述public boolean exists()判断文件或目录是否存在public boolean isFile()判断该File对象是不是一个文件public boolean isDirectory()判断该File对象是不是目录public boolean isAbsolute()判断该File对象是不是绝对路径public boolean canRead()判断程序是否可读该文件public boolean canWrite()判断程序是否可写该文件public boolean isHidden()判断该文件是不是隐藏文件详细说明：public boolean exists()测试此抽象路径名表示的文件或目录是否存在。返回：&emsp;&emsp;&emsp;&emsp;当且仅当此抽象路径名表示的文件或目录存在时，返回 true；否则返回 falsepublic boolean isFile() 测试此抽象路径名表示的文件是否是一个标准文件。如果该文件不是一个目录，并且满足其他与系统有关的标准，那么该文件是标准 文件。由 Java 应用程序创建的所有非目录文件一定是标准文件。返回：&emsp;&emsp;&emsp;&emsp;当且仅当此抽象路径名表示的文件存在且 是一个标准文件时，返回 true；否则返回 false 。public boolean isDirectory() 测试此抽象路径名表示的文件是否是一个目录。返回：&emsp;&emsp;&emsp;&emsp;当且仅当此抽象路径名表示的文件存在且 是一个目录时，返回 true；否则返回 false所以,这三个方法都会去判断文件是否存在，isFile()和isDirectory()会在文件存在的基础之上判断该文件是标准文件还是目录public boolean isAbsolute() 测试此抽象路径名是否为绝对路径名。绝对路径名的定义与系统有关。在 UNIX 系统上，如果路径名的前缀是 “/“，那么该路径名是绝对路径名。在 Microsoft Windows 系统上，如果路径名的前缀是后跟 “\\” 的盘符，或者是 “\\\\”，那么该路径名是绝对路径名。返回：&emsp;&emsp;&emsp;&emsp;如果此抽象路径名是绝对路径名，则返回 true；否则返回 falsepublic boolean canRead() 测试应用程序是否可以读取此抽象路径名表示的文件。返回：&emsp;&emsp;&emsp;&emsp;当且仅当此抽象路径名指定的文件存在且 可被应用程序读取时，返回 true；否则返回 falsepublic boolean isHidden()测试此抽象路径名指定的文件是否是一个隐藏文件。隐藏 的具体定义与系统有关在 UNIX 系统上，如果文件名以句点字符 (‘.’) 开头，则认为该文件被隐藏。在 Microsoft Windows 系统上，如果在文件系统中文件被标记为隐藏，则认为该文件被隐藏。返回：&emsp;&emsp;&emsp;&emsp;当且仅当此抽象路径名表示的文件根据底层平台约定是隐藏文件时，返回 true总结：我还是应该多看看API创建文件或目录方法方法描述boolean createNewFile()当文件不存在的时候创建一个文件。如果指定的文件不存在则创建，则返回 true；如果指定的文件已经存在，则返回 falseboolean mkdir();创建一个该抽象路径对应的目录，如果新建的目录的上级目录不存在则mkdir()回报异常，创建文件夹boolean mkdirs();创建多级目录，创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。注意，此操作失败时也可能已经成功地创建了一部分必需的父目录。实例：当文件不存在时创建该文件12345File file=new File(&quot;file2.txt&quot;);if(!file.exists())&#123; file.createNewFile();&#125;当目录不存在时创建该目录:12345File file=new File(&quot;file2.txt&quot;);if(!file.exists())&#123; file. mkdir();&#125;删除文件或目录方法描述boolean delete();删除此抽象路径名表示的文件或目录。如果此路径名表示一个目录，则该目录必须为空才能删除。获取文件信息方法方法描述public long length()返回文件的大小 以字节为单位；如果文件不存在，则返回 0L。对于表示特定于系统的实体比如设备或管道）的路径名，某些操作系统可能返回0Lpublic String getName()返回由此File对象表示的文件或目录的名称。该名称是路径名名称序列中的最后一个名称。如果路径名名称序列为空，则返回空字符串。public long lastModified()返回文件最后一次被修改的时间,用与时间点（1970 年 1 月 1 日，00:00:00 GMT）之间的毫秒数表示；public boolean renameTo(File dest)重命名该文件为dest.如果文件名为dest的文件不存在路径相关方法方法描述public String getParent()返回父路径名称字符串public File getParentFile()返回父路径的File对象public String getPath();获取相对路径字符串public String getAbsolutePath();获取绝对路径字符串。public String getCanonicalPath();返回规范化路径字符串public File getAbsoluteFile();返回此File对象的副本？等同于new File(this.getAbsolutePath())返回目录列表方法描述public String[] list()获取该目录下的文件或目录名的字符串列表，如果此抽象路径名不表示一个目录，那么此方法将返回 null。否则返回一个字符串数组，每个数组元素对应目录中的每个文件名或目录名public File[] listFiles()获取该目录下面的所有文件或者目录的File对象列表，如果此抽象路径名不表示一个目录，那么此方法将返回 null。否则返回一个File对象数组，每个数组元素对应目录中的每个文件或目录的File对象6.代码实例(1) 构造函数实例：public static void main(String[] args) { //构造函数File（String pathname） File f1 = new File(&quot;D:\\a\\1.txt&quot;); System.out.println(f1); //File(String parent,String child) File f2 = new File(&quot;D:\\a&quot;, &quot;2.txt&quot;); System.out.println(f2); //File(File parent,String child) //File.separactor:表示路径分割符，在Windows系统中是&quot;\&quot;,在Linux系统中是&quot;/&quot; File f3 = new File(&quot;D:&quot;+File.separator+&quot;a&quot;); System.out.println(f3); File f4 = new File(f3,&quot;3.txt&quot;); System.out.println(f4); } 运行结果：D:\a\1.txt D:\a\2.txt D:\a D:\a\3.txt (2) 创建文件或目录实例：public class FileDemo1 { public static void main(String[] args) throws IOException { File file = new File(&quot;D:\\a\\file.txt&quot;); File directory = new File(&quot;D:\\a&quot;); File dir = new File(&quot;D:\\a\\test1\\test2&quot;); if (!directory.exists()) { //创建目录 System.out.println(&quot;创建目录-&quot;+directory); System.out.println(directory.mkdir()); } else { System.out.println(&quot;删除目录-&quot;+dir); System.out.println(directory.delete());//删除目录 //删除此抽象路径名表示的文件或目录。如果此路径名表示一个目录，则该目录必须为空才能删除。 } if (!dir.exists()) { //创建多级目录 System.out.println(&quot;创建多级目录-&quot;+dir); System.out.println(dir.mkdirs()); } else { System.out.println(&quot;删除多级目录-&quot;+dir); System.out.println(dir.delete());// } if (!file.exists()) { //创建文件 System.out.println(&quot;创建文件-&quot;+file); System.out.println(file.createNewFile()); } else { System.out.println(&quot;删除文件-&quot;+file); System.out.println(file.delete());//删除文件 } } } 结果：1) 第一次运行的时候，尚未创建文件或目录。创建目录-D:\a true 创建多级目录-D:\a\test1\test2 true 创建文件-D:\a\file.txt true 分析：全部创建成功2) 第2次运行，文件和目录以及多级目录都创建成功了。删除目录-D:\a\test1\test2 false 删除多级目录-D:\a\test1\test2 true 删除文件-D:\a\file.txt true 分析：文件file可以删除掉,而目录directory(D:\a)不是空目录，无法删除。目录dir(D:\a\test1\test2) test2下面没有目录和文件，可以删除掉目录test2,delete()函数只能删除掉最下面的目录test2,不会删除掉test2的父目录test1.这与mkdirs()函数不是互逆操作。 (3) 判断文件函数：exists(),isFile(),isAbsolute(),isDirectory(),canRead(),canWrite(),isHidden()代码验证：public class FileDemo2 { public static void main(String[] args) { File file=new File(&quot;D:\\a\\file.txt&quot;); File noAbsolute=new File(&quot;我当然不是绝对路径啦&quot;); File dir=new File(&quot;D:\\a&quot;); System.out.println(&quot;file对象是否是文件：&quot;+file.isFile()); System.out.println(&quot;dir对象是否是目录：&quot;+dir.isDirectory()); System.out.println(&quot;file对象的路径是否是绝对路径: &quot;+file.isAbsolute()); System.out.println(&quot;noAbsolute对象的路径是否是绝对路径: &quot;+noAbsolute.isAbsolute()); System.out.println(&quot;file.txt是否存在：&quot;+file.exists()); System.out.println(&quot;file.txt是否可读：&quot;+file.canRead()); System.out.println(&quot;file.txt是否可写：&quot;+file.canWrite()); System.out.println(&quot;file.txt是否是隐藏文件：&quot;+file.isHidden()); } } 运行结果：file对象是否是文件：true dir对象是否是目录：true file对象的路径是否是绝对路径: true noAbsolute对象的路径是否是绝对路径: false file.txt是否存在：true file.txt是否可读：true file.txt是否可写：true file.txt是否是隐藏文件：false (4)获取，操作文件属性函数lastModified(),length()，getName(),getParent(),getPath(),getAbsolutePath():public class FileAPIDemo1 { public static void main(String[] args) { File file=new File(&quot;D:\\a\\file.txt&quot;); System.out.println(&quot;file.txt最后一次修改的时间：&quot;+timeStampToDate(file.lastModified())); System.out.println(&quot;file.txt长度(字节)：&quot;+file.length()+&quot;B&quot;); System.out.println(&quot;file的文件名：&quot;+file.getName()); System.out.println(&quot;file.txt的父路径字符串：&quot;+file.getParent()); File fileParent=file.getParentFile();//获取父路径的File对象。 System.out.println(&quot;父路径File对象fileParent的目录名：&quot;+fileParent.getName()); System.out.println(&quot;file对象的抽象路径字符串：&quot;+file.getPath()); System.out.println(&quot;file对象的绝对路径字符串：&quot;+file.getAbsolutePath()); File AbsolutePathFile=file.getAbsoluteFile();//获取绝对路径的File对象 System.out.println(&quot;AbsolutePathFile的名字：&quot;+file.getName()); System.out.println(&quot;file和AbsolutePathFile引用的是相同的文件？：&quot;+file.equals(AbsolutePathFile)); } //把时间戳转换成格式化时间字符串 static String timeStampToDate(long timeStamp) { Date date =new Date(timeStamp); SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;); return format.format(date); } } 运行结果：file.txt最后一次修改的时间：2018-05-03 16:15:00 file.txt长度(字节)：15B file的文件名：file.txt file.txt的父路径字符串：D:\a 父路径File对象fileParent的目录名：a file对象的抽象路径字符串：D:\a\file.txt file对象的绝对路径字符串：D:\a\file.txt AbsolutePathFile的名字：file.txt file和AbsolutePathFile引用的是相同的文件？：true 7.有些困惑的地方(1)getAbsoluteFile()函数其实就是获取当前File对象的一个副本？(2)规范化路径getCanonicalPath()，相对路径getPath()，绝对路径getAbsolutePath()三者的区别：1)当输入为绝对路径时，3个方法返回的都是绝对路径。2)当输入为相对路径时：getPath() 返回的是File构造方法里的路径getAbsolutePath() 返回的其实是user.dir+getPath()的内容getCanonicalPath() 返回的是去掉多余点号(.)等的规范化路径测试代码：public class FileDemo3 { public static void main(String[] args) throws IOException { // 打印当前工程的父路径 // System.out.println(System.getProperty(&quot;user.dir&quot;)); File file = new File(&quot;D:\\a\\file.txt&quot;); System.out.println(&quot;相对路径 :&quot; + file.getPath()); System.out.println(&quot;绝对路径 :&quot; + file.getAbsolutePath()); System.out.println(&quot;规范化路径 :&quot; + file.getCanonicalPath()); System.out.println(&quot;-----------------------------&quot;); File file2 = new File(&quot;.\\file.txt&quot;); System.out.println(&quot;user.dir:&quot; + System.getProperty(&quot;user.dir&quot;)); System.out.println(&quot;相对路径 :&quot; + file2.getPath()); System.out.println(&quot;绝对路径 :&quot; + file2.getAbsolutePath()); System.out.println(&quot;规范化路径 :&quot; + file2.getCanonicalPath()); // 当输入为绝对路径时，3个方法返回的都是绝对路径。 // 当输入为相对路径时： // getPath()返回的是File构造方法里的路径 // getAbsolutePath()返回的其实是user.dir+getPath()的内容 // getCanonicalPath()返回的就是标准的将符号完全解析的路径 } } (3) list()和listFile()的区别看返回类型就知道了：list()函数获取的是当前目录下的所有文件和目录的名字列表(String数组) listFiles()获取的是当前目录下面的所有文件和目录的File对象列表(File数组)。 测试代码：public class FileAPIDemo2 { public static void main(String[] args) { //工程路径 File dir=new File(System.getProperty(&quot;user.dir&quot;)); String[] list=dir.list();//返回当前目录下的所有文件和目录的名字 for (String string : list) { System.out.println(string); } System.out.println(&quot;--------------------&quot;); File[] fileList=dir.listFiles();//获取当前下所有目录和文件的File对象 for (File file : fileList) { System.out.println(file.getName()); } } } 运行结果:.classpath .project .settings bin demo demo1 src -------------------- .classpath .project .settings bin demo demo1 src (4)使用listFiles()函数,递归遍历所有的目录：public class FileAPIDemo4 { // 递归遍历所有的子目录和文件 static void forEachAllDir(File dir) { if (dir == null) { System.out.println(dir + &quot; 不是File对象&quot;); return; } if (!dir.isDirectory()) { System.out.println(dir + &quot; 不是目录&quot;); } File[] lists = dir.listFiles();// 获取当前目录下子文件和子目录的File对象 for (File file : lists) { if (file.isDirectory())// 如果是目录的话 { System.out.println(file);//输出目录的绝对路径 // 递归调用 forEachAllDir(file);//继续显示子目录 } else//如果是文件的话，就直接输出文件的绝对路径 { System.out.println(file); } } } public static void main(String[] args) { File dir = new File(System.getProperty(&quot;user.dir&quot;)); forEachAllDir(dir); } } 运行结果：D:\dev\workspace\TestLearned\.classpath D:\dev\workspace\TestLearned\.project D:\dev\workspace\TestLearned\.settings D:\dev\workspace\TestLearned\.settings\org.eclipse.jdt.core.prefs D:\dev\workspace\TestLearned\bin D:\dev\workspace\TestLearned\bin\lan D:\dev\workspace\TestLearned\bin\lan\csdn D:\dev\workspace\TestLearned\bin\lan\csdn\c D:\dev\workspace\TestLearned\bin\lan\csdn\c\java D:\dev\workspace\TestLearned\bin\lan\csdn\c\java\Myint.class ...... D:\dev\workspace\TestLearned\src\string D:\dev\workspace\TestLearned\src\string\Test_IndexOf.java D:\dev\workspace\TestLearned\src\string\Test_LastIndexOf.java D:\dev\workspace\TestLearned\src\string\Test_Substring.java 分析：可以看到当前工程下的所有目录中的文件和目录都已经遍历了一遍，通过这样递归遍历整个目录可以用来拷贝整个目录8.文件过滤器FilenameFilter接口看下面的File类的方法：[java] view plain copy&lt;code class=&quot;language-java&quot;&gt;public String[] list(FilenameFilter filter) ; //返回一个字符串数组，这些字符串是目录中满足指定过滤器的文件和目录名字符串。 public File[] listFiles(FilenameFilter filter); //返回File数组，数组中的元素是该目录下的所有满足指定过滤器filter的文件和目录的File对象&lt;/code&gt; 上述方法可以实现文件过滤，返回符合条件的文件，过滤掉不符合条件的文件(不返回)一、FilenameFilter介绍java.io.FilenameFilter是文件名过滤器，用来过滤不符合规格的文件名，并返回合格的文件;一般地：(1)String[] fs = f.list();(2)File[] fs = f.listFiles();这两个方法返回f下的所有文件或目录；FilenameFilter用来返回符合要求的文件或目录,不符合的文件的目录不返回(过滤掉)；因此可以调用：(1)String []fs = f.list(FilenameFilter filter);(2)File[]fs = f.listFiles(FilenameFilter filter);FilenameFilter中有一个方法：boolean accept(File dir,String name); //dir表示文件的当前目录，name表示文件名；实现该方法即可对文件进行过滤：使用方式：(1)使用匿名内部类(2)实现FilenameFilter代码实现：(1)匿名内部类方式实现文件过滤：public static void printAllFile(File dir,final String ends) { String[] listStr=dir.list(new FilenameFilter() { @Override // dir表示文件的当前目录，name表示当前文件的文件名； public boolean accept(File dir, String name) { //该目录是文件，而且文件以.java结尾 return new File(dir, name).isFile() &amp;&amp; name.endsWith(ends); } }); for (String string : listStr) { System.out.println(string); } } (2)实现FilenameFilter方式实现文件过滤：//静态内部类可以直接new不用加上外部类的类名 //实现FilenameFilter static class MyFilenameFilter implements FilenameFilter { String ends; public MyFilenameFilter(){} public MyFilenameFilter(String ends) { this.ends=ends; } @Override public boolean accept(File dir, String name) { return new File(dir, name).isFile() &amp;&amp; name.endsWith(ends); } } public static void printAllFile2(File dir, String ends) { String[] listStr=dir.list(new MyFilenameFilter(ends)); for (String string : listStr) { System.out.println(string); } } 完整代码：import java.io.File; import java.io.FilenameFilter; import java.io.IOException; import com.lan.filepath.FilePath; public class FilenameFilterTest { public static void printAllFile(File dir, final String ends) { String[] listStr = dir.list(new FilenameFilter() { @Override // dir表示文件的当前目录，name表示当前文件的文件名； public boolean accept(File dir, String name) { // 该目录是文件，而且文件以.java结尾 return new File(dir, name).isFile() &amp;&amp; name.endsWith(ends); } }); for (String string : listStr) { System.out.println(string); } } // 静态内部类可以直接new不用加上外部类的类名 // 实现FilenameFilter static class MyFilenameFilter implements FilenameFilter { String ends; public MyFilenameFilter() { } public MyFilenameFilter(String ends) { this.ends = ends; } @Override public boolean accept(File dir, String name) { return new File(dir, name).isFile() &amp;&amp; name.endsWith(ends); } } public static void printAllFile2(File dir, String ends) { String[] listStr = dir.list(new MyFilenameFilter(ends)); for (String string : listStr) { System.out.println(string); } } public static void main(String[] args) throws IOException { // 获得当前的包路径 String packagePath = FilePath .getSrcPackagePath(FilenameFilterTest.class); File dir = new File(packagePath); System.out.println(&quot;当前目录下的所有java文件：&quot;); printAllFile(dir, &quot;.java&quot;); System.out.println(&quot;-----------------------------------------------&quot;); System.out.println(&quot;当前目录下的所有txt文件：&quot;); printAllFile(dir, &quot;.txt&quot;); System.out.println(&quot;-----------------------------------------------&quot;); System.out.println(&quot;当前目录下的所有txt文件：&quot;); printAllFile2(dir, &quot;.txt&quot;); } } 运行结果：当前目录下的所有java文件： FileAPIDemo1.java FileAPIDemo2.java FileAPIDemo4.java FileDemo.java FileDemo1.java FileDemo2.java FileDemo3.java FilenameFilterTest.java TestFile.java TestGBK.java ----------------------------------------------- 当前目录下的所有txt文件： Test.txt ----------------------------------------------- 当前目录下的所有txt文件： Test.txt 可以看到上面两种方式都能实现根据后缀名来过滤目录下面的文件，匿名内部类的方式比较适合于临时使用的情况，实现接口的方式比较适合于多次重复使用的情况。参考：JAVA基础知识之IO-File类FilenameFilter总结本文链接: Java IO流 File类]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux 常用环境变量及作用和环境变量文件的详细介绍及其加载执行顺序]]></title>
    <url>%2Fblog%2F6249459e%2F</url>
    <content type="text"><![CDATA[Linux 常用环境变量及作用和环境变量文件的详细介绍及其加载执行顺序原文：前言：环境变量是操作系统环境设置的变量，适用于整个系统的用户进程；环境变量可以在命令中设置，但是用户注销的时候将会丢失这些设置值；若要重复适用，则最好在.profile中定义；环境变量的使用与本地变量的使用方法相同，但是在使用之前，必须用export命令导出。一、环境变量文件介绍Linux中环境变量包括系统级和用户级。系统级的环境变量是每个登录到系统的用户都要读取的系统变量，而用户级的环境变量则是该用户使用系统时加载的环境变量，所以管理环境变量的文件也分为系统级和用户级的。二、Linux的变量种类按变量的生存周期来划分，Linux变量可分为两类：永久的：需要修改配置文件，变量永久生效临时的：使用export命令声明即可，变量在关闭shell时失效三、Linux 环境变量文件linux变量文件有/etc/environment/etc/profile~/.profile/etc/bash.bashrc~/.bashrc~/.bash_profile(一般是用户在自己目录下新建的）~/.bash_logout.系统级：/etc/environment该文件是系统在登录时读取的第一个文件，该文件设置的是整个系统的环境变量，只要启动系统就会读取该文件，用于为所有进程设置环境变量。系统使用此文件时并不是执行此文件中的命令，而是根据而是根据KEY=VALUE模式的代码，对KEY赋值以VALUE，因此文件中如果要定义PATH环境变量，只需加入一行形如 PATH=$PATH:/xxx/bin的代码即可例如：1PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games&quot;/etc/profile此文件是系统登录时执行的第二个文件。 为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行。并从/etc/profile.d目录的配置文件中搜集shell的设置。/etc/profile可以用于设定针对全系统所有用户的环境变量，环境变量周期是永久性，例如如果需要让所有用户可以使用java,把Java环境变量写在该文件中。/etc/bashrc是针对所有用户的bash初始化文件，在此中设定的环境变量将应用于所有用户的shell中，此文件会在用户每次打开shell时执行一次。即每次新开一个终端，都会执行/etc/bashrc用户级：这些文件处于(Home)家目录下~,用于定制该用户的专属环境变量。~/.profile对应当前登录用户的profile文件，用于定制当前用户的个人工作环境(变量是永久性)，每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。这里是推荐放置个人设置的地方~/.bashrc该文件包含专用于你的bash shell的bash信息，当登录时以及每次打开新的shell时，该文件被读取。(~/.bashrc只针对当前用户，变量的生命周期是永久的)，所以不推荐在这里设置常用的变量，因为每开一个shell，这个文件会读取一次，效率肯定有影响。暂时整理到这里，我看作者写的有点乱。本文链接: Linux 常用环境变量及作用和环境变量文件的详细介绍及其加载执行顺序]]></content>
      <categories>
        <category>Java</category>
        <category>Linux系统上java使用</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux中Java环境变量配置的几种方式]]></title>
    <url>%2Fblog%2F73224a52%2F</url>
    <content type="text"><![CDATA[$vi /etc/profile在/etc/profile文件最后添加下面的内容:1234#set Java environmentexport JAVA_HOME=/usr/lib/java/jdk1.8.0_171export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATH修改文件后如果想马上生效，执行命令：source /etc/profile最后重启：shutdown -r -t 0永久修改，对单一用户有效修改用户目录下的.bash_profile文件12cd ~vi .bash_profile在文件最后添加下面的内容1234#set Java environmentexport JAVA_HOME=/usr/lib/java/jdk1.8.0_171export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATH此时如果想要马上生效执命令：source .bash_profile最后重启：shutdown -r -t 0只对当前bash /shell 生效直接在shell中输入：123export JAVA_HOME=/usr/lib/java/jdk1.8.0_171export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATH这个只对当前shell/bash有效重新打开一个shell就没有用了。参考：https://blog.csdn.net/jillliang/article/details/8216308本文链接: Linux中Java环境变量配置的几种方式]]></content>
      <categories>
        <category>Java</category>
        <category>Linux系统上java使用</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16_04中安装Java配置环境变量]]></title>
    <url>%2Fblog%2F36bd33ee%2F</url>
    <content type="text"><![CDATA[Ubuntu 16.04中安装Java,配置环境变量。参考：https://www.linuxidc.com/Linux/2017-02/140908.htm参考：https://www.linuxidc.com/Linux/2017-06/144732.htm参考：https://www.linuxidc.com/Linux/2017-01/139212.htm下载路径：http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html参考：https://www.linuxidc.com/Linux/2017-02/140908.htm下载Oracle JDK系统版本：Ubuntu 16.04，VMware虚拟机JDK版本：jdk-8u171-linux-x64.tar.gzOracle JDK 下载jdk-8u171-linux-x64.tar.gz下载最新版的就行了，下载后复制粘贴到虚拟机桌面中。粘贴到虚拟机中解压然后登录root用户1$su root新建文件夹：1$mkdir /usr/lib/java把粘贴到虚拟机中jdk-8u171-linux-x64.tar.gz复制到/usr/lib/java中：进入该文件夹：1cd /usr/lib/java然后解压jdk-8u171-linux-x64.tar.gz：1tar -zxvf jdk-8u171-linux-x64.tar.gz解压后的效果如下：配置所有用户的环境变量但是还没有结束！现在我们设置的环境只是在会话里面，退出会话环境变量就没了，所以我们要把环境变量设置到 /etc/profile文件里输入命令：vi /etc/profile，编辑该文件,在文件最后面写入下面的几句话：1234#set Java environmentexport JAVA_HOME=/usr/lib/java/jdk1.8.0_171export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATH保存输入命令source /etc/profile，让设置生效现在输入java -version就可以看到运行效果了。最后重启系统正确切换用户的命令注意：切换用户的时候，要用su -l 用户B进行登录，不然不会切换环境变量这样造成用户B无法使用java错误的切换用户的方式：su root可以看到这样切换用户root用户无法使用java正确的登录方法：su -l root这样其他用户(root)用户就可以使用java了。本文链接: Ubuntu16_04中安装Java配置环境变量]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 目录]]></title>
    <url>%2Fblog%2F49fbaefe%2F</url>
    <content type="text"><![CDATA[各个类介绍java IO流 编码Java IO流 File类JavaIO FilenameFilter接口JavaIO Java IO体系及常用类javaIO RandomAccessFile类随机读写JavaIO RandomAccessFile 借助ArrayList方便的操作文件JavaIO RandomAccessFile乱码问题字节流javaIO FileInputStreamjavaIO FileOutputStreamjavaIO DataOutputStream 读写字符串JavaIO DataOutputStream数据输出流类javaIO BufferedOutputStream和BufferedInputStream字符流JavaIO InputStreamReader和OutputStreamWriter介绍JavaIO FileReader和FileWriterJavaIO BufferedReader和BufferedWriter介绍和实例序列化JavaIO ObjectOutputStream和ObjectInputStream 对象的序列化Java对象序列化详解JavaIO 对象序列化和反序列化其他相关类javaIO 输出重定向应用复制文件JavaIO 使用缓冲字节流和文件字节流拷贝文件复制目录Java IO流 复制一个目录本文链接: Java IO流 目录]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 复制一个目录]]></title>
    <url>%2Fblog%2Fbda55058%2F</url>
    <content type="text"><![CDATA[实现把一个目录中的所有内容复制到一个目录中去实现文件复制因为一个目录下的文件可能是字符文件，也可能是二进制文件，所以使用字节流来进行复制,这样能复制所有类型的文件。1234567891011121314151617181920212223/** * 复制一个文件 * @param srcFile 源文件 * @param destFile 目的文件 * @throws IOException */public static void copyFile(String srcFile, String destFile) throws IOException&#123; FileInputStream in = new FileInputStream(srcFile); FileOutputStream out = new FileOutputStream(destFile); // 2097152(Byte)=2048(KB)=2M byte[] buffer = new byte[2097152]; int size = 0; //每次读取一个字节数组 while ((size = in.read(buffer)) != -1) &#123; //读到多少写入多少 out.write(buffer, 0, size); &#125; in.close(); out.close();&#125;上述方法可以复制一个文件，我们可以在这个方法的基础之上实现目录的复制。复制目录的算法遍历该目录列表，如果列表项是文件就调用上面的copyFile()方法复制该文件如果是该列表项是一个目录的话，就递归调用自己，复制该子目录。复制目录的实现代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * 使用递归复制目录, * @param FromDir 源目录的路径名称 * @param ToDir 目的目录的路径名称 * @throws IOException */public static void copyDir(String FromDir, String ToDir) throws IOException&#123; // 创建目录的File对象 File srcDir = new File(FromDir); // 判断源目录是不是一个目录 if (!srcDir.isDirectory()) &#123; //如果不是目录那就不复制 return; &#125; //创建目的目录的File对象 File destDir = new File(ToDir); // 如果目的目录不存在 if (!destDir.exists()) &#123; // 创建目的目录 destDir.mkdir(); &#125; // 获取源目录下的File对象列表,每一个对象代表一个目录或者文件 File[] srcDirList = srcDir.listFiles(); // 遍历源目录File对象列表 for (int i = 0; i &lt; srcDirList.length; i++) &#123; // 如果是目录的话 if (srcDirList[i].isDirectory()) &#123; // 递归调用复制该目录 copyDir(FromDir + File.separator + srcDirList[i].getName(), ToDir + File.separator + srcDirList[i].getName()); &#125; // 如果是文件的话 if (srcDirList[i].isFile()) &#123; // 调用复制文件的方法 copyFile(FromDir + File.separator + srcDirList[i].getName(), ToDir + File.separator + srcDirList[i].getName()); &#125; &#125;&#125;main方法中调用：1234public static void main(String[] args) throws IOException&#123; copyDir(&quot;FromDir&quot;, &quot;ToDir&quot;);//复制当前工程下的FromDir目录中的内容到ToDir目录中。&#125;当前eclipse中的目录结构如下：运行后的目录结构：可以看到整个目录复制成功了。完整代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091package copy.file;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;public class CopyDir&#123; public static void main(String[] args) throws IOException &#123; copyDir(&quot;FromDir&quot;, &quot;ToDir&quot;); &#125; /** * 使用递归复制目录, * * @param FromDir * 源目录的路径名称 * @param ToDir * 目的目录的路径名称 * @throws IOException */ public static void copyDir(String FromDir, String ToDir) throws IOException &#123; // 创建目录的File对象 File srcDir = new File(FromDir); // 判断源目录是不是一个目录 if (!srcDir.isDirectory()) &#123; // 如果不是目录那就不复制 return; &#125; // 创建目的目录的File对象 File destDir = new File(ToDir); // 如果目的目录不存在 if (!destDir.exists()) &#123; // 创建目的目录 destDir.mkdir(); &#125; // 获取源目录下的File对象列表,每一个对象代表一个目录或者文件 File[] srcDirList = srcDir.listFiles(); // 遍历源目录File对象列表 for (int i = 0; i &lt; srcDirList.length; i++) &#123; // 如果是目录的话 if (srcDirList[i].isDirectory()) &#123; // 递归调用复制该目录 copyDir(FromDir + File.separator + srcDirList[i].getName(), ToDir + File.separator + srcDirList[i].getName()); &#125; // 如果是文件的话 if (srcDirList[i].isFile()) &#123; // 调用复制文件的方法 copyFile(FromDir + File.separator + srcDirList[i].getName(), ToDir + File.separator + srcDirList[i].getName()); &#125; &#125; &#125; /** * 复制一个文件 * * @param srcFile * 源文件 * @param destFile * 目的文件 * @throws IOException */ public static void copyFile(String srcFile, String destFile) throws IOException &#123; FileInputStream in = new FileInputStream(srcFile); FileOutputStream out = new FileOutputStream(destFile); // 2097152(Byte)=2048(KB)=2M byte[] buffer = new byte[2097152]; int size = 0; // 每次读取一个字节数组 while ((size = in.read(buffer)) != -1) &#123; // 读到多少写入多少 out.write(buffer, 0, size); &#125; in.close(); out.close(); &#125;&#125;本文链接: Java IO流 复制一个目录]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Editplus格式化html代码]]></title>
    <url>%2Fblog%2Fd80a89a8%2F</url>
    <content type="text"><![CDATA[格式化代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package regex.tools;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.util.regex.Matcher;import java.util.regex.Pattern;public class HTMLFormat2&#123; public static void main(String[] args) throws IOException &#123; //如果收到1个以上的明令行参数,而且是以.html结尾,或者.htm结尾 if (args.length &gt;= 1&amp;&amp;args[0].matches(".*\\.html?")) &#123; //定义一个缩进是4个空格 final String TAB = " "; //存放缩进 StringBuilder tabBuilder = new StringBuilder(); //匹配html开始标签 String addTab = "(?:&lt;html&gt;|&lt;head&gt;|&lt;body&gt;|&lt;script[^&gt;]*&gt;)"; Pattern addTabPattern = Pattern.compile(addTab); Matcher matcherAdd; //匹配结束标签 String MinusTab = "(?:&lt;/html&gt;|&lt;/head&gt;|&lt;/body&gt;|&lt;/script&gt;)"; Pattern MinusTabPattern = Pattern.compile(MinusTab); Matcher matcherMinusTab; //读取该文件,html文件默认以utf-8处理 BufferedReader reader = new BufferedReader(new InputStreamReader( new FileInputStream(args[0]), "utf-8")); String line = null; StringBuilder result = new StringBuilder(); // 读取一行字符 while ((line = reader.readLine()) != null) &#123; //测试正则表达式 matcherAdd = addTabPattern.matcher(line); matcherMinusTab = MinusTabPattern.matcher(line); // 匹配到标签开始 if (matcherAdd.matches()) &#123; // 原样输出 // System.out.print(tabBuilder.toString()); // System.out.println(line);// result.append(tabBuilder.toString() + line + "\n"); result.append(tabBuilder.toString()); result.append(line); result.append("\n"); // 让后面的代码加一个缩进 tabBuilder.append(TAB); &#125; else if (matcherMinusTab.matches()) &#123; // 匹配到结束标签 // 删除缩进，对其前面的开头标签 tabBuilder.delete(0, 4); // System.out.print(tabBuilder.toString()); // System.out.println(line);// result.append(tabBuilder.toString() + line + "\n"); result.append(tabBuilder.toString()); result.append(line); result.append("\n"); &#125; else &#123; // 其他代码 // System.out.print(tabBuilder.toString()); // System.out.println(line);// result.append(tabBuilder.toString() + line + "\n"); result.append(tabBuilder.toString()); result.append(line); result.append("\n"); &#125; &#125; // while结束 //关闭文件 reader.close();// System.out// .println("###############################################");// System.out.println(result.toString());// System.out// .println("###############################################"); BufferedWriter writer = new BufferedWriter(new OutputStreamWriter( new FileOutputStream(args[0]), "utf-8")); writer.write(result.toString(),0,result.length()); writer.close(); &#125; &#125;&#125;导出成克可执行jar包：HTMLFormat.jar，然后创建bat文件：HTMLFormat.batHTMLFormat.bat中的内容写下：123@echo offjava -jar D:\dev\java\my\runable\codeformat\HTMLFormat.jar %1exitHTMLFormat.jar的路径(D:\dev\java\my\runable\codeformat\HTMLFormat.jar)是你导出的jar包存放的路径，以你导出的为准。然后在editplus中配置如下：然后打开一个没有格式化的html代码，按下ctrl+1调用该工具即可格式化html代码。本文链接: Editplus格式化html代码]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaIO BufferedReader和BufferedWriter]]></title>
    <url>%2Fblog%2F3f2a064c%2F</url>
    <content type="text"><![CDATA[为了提高字符流读写的效率，引入了缓冲机制，进行字符批量的读写，提高了单个字符读写的效率。BufferedReader用于加快读取字符的速度，BufferedWriter用于加快写入的速度怎样读写：(出处：Java中，BufferedReader类的介绍及作用)BufferedReader和BufferedWriter类各拥有8192个字符的缓冲区。当BufferedReader在读取文本文件时，会先尽量从文件中读入字符数据并放满缓冲区，而之后若使用read()方法，会先从缓冲区中进行读取。如果缓冲区数据不足，才会再从文件中读取，使用BufferedWriter时，写入的数据并不会先输出到目的地，而是先存储至缓冲区中。如果缓冲区中的数据满了，才会一次对目的地进行写出。BufferedReaderBufferedReader是为了提供读的效率而设计的一个包装类，它可以包装字符流。可以从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。继承关系123java.lang.Object |----&gt; java.io.Reader |----&gt; java.io.BufferedReader构造方法方法描述BufferedReader(Reader in)创建一个使用默认大小输入缓冲区的缓冲字符输入流。BufferedReader(Reader in, int sz)创建一个使用指定大小输入缓冲区的缓冲字符输入流。成员方法方法描述int read()读取单个字符。int read(char[] cbuf, int off, int len)将字符读入数组的某一部分。String readLine()读取一个文本行。long skip(long n)跳过字符。boolean ready()判断此流是否已准备好被读取。void close()关闭该流并释放与之关联的所有资源。void mark(int readAheadLimit)标记流中的当前位置。boolean markSupported()判断此流是否支持 mark() 操作（它一定支持）。void reset()将流重置到最新的标记。读取文件实例读取文件: 一个字符一个字符的读取int read()方法,每次可以读取到一个字符(以int 类型表示)，不过因为返回的是int类型的，所以要强制类型转换成char类型才能打印该字符。123456789101112131415161718public static void printByFileReader(String filePath) throws IOException&#123; BufferedReader reader=new BufferedReader( new FileReader(filePath) ); if(!reader.ready()) &#123; System.out.println("文件流暂时无法读取"); return; &#125; int result=0; while((result=reader.read())!=-1) &#123; //因为读取到的是int类型的，所以要强制类型转换 System.out.print((char)result); &#125; reader.close();&#125;读取文件:一个数组一个数组的读取int read(char[] cbuf, int off, int len)方法，每次读取len个字符放到字符数组cbuf中,从数组cbuf的下表off开始放,返回的是每次读取的字符个数。123456789101112131415161718public static void printByFileReaderChars(String filePath) throws IOException&#123; BufferedReader reader=new BufferedReader( new FileReader(filePath) ); if(!reader.ready()) &#123; System.out.println(&quot;文件流暂时无法读取&quot;); return; &#125; int size=0; char[] cbuf=new char[20]; while((size=reader.read(cbuf, 0, cbuf.length))!=-1) &#123; System.out.print(new String(cbuf,0,size)); &#125; reader.close();&#125;读取文件:一行一行的读取String readLine()这个方法一次可以读取一个文本行,返回的直接就是这一行的字符串,如果读到行尾了就返回null。123456789101112131415161718public static void printByFileReaderLine(String filePath) throws IOException&#123; BufferedReader reader=new BufferedReader( new FileReader(filePath) ); if(!reader.ready()) &#123; System.out.println(&quot;文件流暂时无法读取&quot;); return; &#125; int size=0; String line; while((line=reader.readLine())!=null) &#123; System.out.print(line+&quot;\n&quot;); &#125; reader.close();&#125;需要注意的是：reader.readLine()方法返回的一行字符中不包含换行符,所以输出的时候要自己加上换行符。BufferedReader比FileReader高级的地方在于这个，FileReader能一次读取一个字符，或者一个字符数组。而BufferedReader也可以，同时BufferedReader还能一次读取一行字符串。同时,BufferedReader带缓冲，会比FileReader快很多。但是FileReader使用项目的编码来读取解析字符，不能指定编码，可能会出现编码问题，如果要指定编码可以使用包装InputStreamReader的BufferedReader。这样兼顾效率和编码。测试上述方法：12345678910111213141516171819202122public static void main(String[] args) throws IOException&#123; String fileutf8=&quot;utf8.txt&quot;; String filegbk=&quot;gbk.txt&quot;; //一个字符一个字符的读取 printByFileReader(filegbk); System.out.println(&quot;\n---------------------------------------&quot;); //一个字符数组一个字符数组的读取 printByFileReaderChars(filegbk); System.out.println(&quot;\n---------------------------------------&quot;); //一行一行的读取 printByFileReaderLine(filegbk); System.out.println(&quot;#########################################&quot;); //一个字符一个字符的读取 printByFileReader(fileutf8); System.out.println(&quot;\n---------------------------------------&quot;); //一个数组一个数组的读取 printByFileReaderChars(fileutf8); System.out.println(&quot;\n---------------------------------------&quot;); //一行一行的读取 printByFileReaderLine(fileutf8);&#125;运行结果：1234567891011121314151617gbk file这里是一句中文---------------------------------------gbk file这里是一句中文---------------------------------------gbk file这里是一句中文#########################################utf-8 file杩欓噷鏄竴鍙ヤ腑鏂?---------------------------------------utf-8 file杩欓噷鏄竴鍙ヤ腑鏂?---------------------------------------utf-8 file杩欓噷鏄竴鍙ヤ腑鏂?可以看到包装FileReader的BufferedReader在读取文件时候如果文件的编码和项目的编码不一样的时候，会出现乱。乱码问题使用包装InputStreamReader的BufferedReader读取文件123456789String file = &quot;utf8.txt&quot;;BufferedReader reader = new BufferedReader( new InputStreamReader(new FileInputStream(file), &quot;utf-8&quot;));char[] cbuf=new char[20];int size;while((size=reader.read(cbuf, 0, cbuf.length))!=-1)&#123; System.out.println(new String(cbuf,0,size));&#125;运行结果：12utf-8 file这里是一句中文这里要弄清楚的是BufferedReader只负责读到它的内部缓冲区中，而解码的工作是InputStreamReader完成的。BufferedWriterBufferedWriter的API：继承关系123java.lang.Object |----&gt; java.io.Writer |----&gt; java.io.BufferedWriter构造函数：方法描述BufferedWriter(Writer out)创建一个缓冲字符输出流,使用默认大小的输出缓冲区BufferedWriter(Writer out, int sz)创建一个缓冲字符输出流,使用给定大小的输出缓冲区成员方法方法描述void write(int c)写入单个字符。void write(char[] cbuf, int off, int len)写入字符数组的某一部分。void write(String s, int off, int len)写入字符串的某一部分。void newLine()写入一个行分隔符。void close()关闭此流，但要先刷新它。void flush()刷新该流的缓冲。写文件实例使用上述三个写方法写文件：一个字符一个字符的复制文件123456789101112131415161718public static void main(String[] args) throws IOException&#123; BufferedWriter writer=new BufferedWriter(new FileWriter("静夜思.txt")); char ch='床'; //写入一个字符 writer.write(ch); String next="前明月光,"; char[] nexts=next.toCharArray(); //写入一个字符数组 writer.write(nexts,0,nexts.length); //写入换行符 writer.newLine();//写入换行符 String nextLine="疑是地上霜。"; //写入一个字符串。 writer.write(nextLine); //关闭流 writer.close();&#125;运行结果,静夜思.txt：12床前明月光,疑是地上霜。应用：复制文本文件逐个字符复制文件1234567891011121314static void copyByChar(String srcFile, String destFile) throws IOException&#123; BufferedReader reader = new BufferedReader(new FileReader(srcFile)); BufferedWriter writer = new BufferedWriter(new FileWriter(destFile)); int ch=0; //读取一个字符 while ((ch = reader.read()) != -1) &#123; //写入一个字符 writer.write(ch); &#125; reader.close(); writer.close();&#125;逐个字符数组复制文件123456789101112131415static void copyByCharArray(String srcFile, String destFile) throws IOException&#123; BufferedReader reader = new BufferedReader(new FileReader(srcFile)); BufferedWriter writer = new BufferedWriter(new FileWriter(destFile)); int size=0; char[] cbuf=new char[20]; //读取一个字符数组 while ((size = reader.read(cbuf)) != -1) &#123; //读入多少写入多少 writer.write(cbuf,0,size); &#125; reader.close(); writer.close();&#125;按行复制文件123456789101112131415static void copyByLine(String srcFile,String destFile) throws IOException&#123; BufferedReader reader=new BufferedReader(new FileReader(srcFile)); BufferedWriter writer=new BufferedWriter(new FileWriter(destFile)); String line; //BufferedReader读取一行的时候返回的字符串中不包括换行符 //如果有一行字符就返回该行字符串，没有就返回null while((line=reader.readLine())!=null) &#123; writer.write(line); writer.newLine();//写换行符 &#125; reader.close(); writer.close();&#125;需要注意的是,BufferedReader的readLine()读取一行的时候返回的字符串没有换行符，所以，复制的时候写文件是我们好多写入一个换行符，使用writer.newLine()方法即可。测试：12345678910public static void main(String[] args) throws IOException&#123; String from = &quot;gbk.txt&quot;; String to = &quot;gbk_copy.txt&quot;; String to1 = &quot;gbk_copy1.txt&quot;; String to2 = &quot;gbk_copy2.txt&quot;; copyByChar(from, to); copyByCharArray(from, to1); copyByLine(from, to2);&#125;源文件gbk.txt:运行结果：gbk_copy.txt12gbk file这里是一句中文gbk_copy1.txt12gbk file这里是一句中文gbk_copy2.txtgbk file 这里是一句中文 bug:按行复制的时候多写换行符细心的朋友可能发现，按行复制的时候，复制的文件会莫名其妙的在文件后面多了一个换行符。这是因为我们每次都在读到的字符串后面写一个换行符。解决办法：在读到的字符串前面写换行符，这样出现新的问题,就是在文件开头多出了一个空行，所以加入控制语句，在第一行不写入换行符，第二行后再写。12345678910111213141516171819202122232425static void copyByLine(String srcFile,String destFile) throws IOException&#123; BufferedReader reader=new BufferedReader(new FileReader(srcFile)); BufferedWriter writer=new BufferedWriter(new FileWriter(destFile)); String line; //BufferedReader读取一行的时候返回的字符串中不包括换行符 //如果有一行字符就返回该行字符串，没有就返回null boolean flag=false; while((line=reader.readLine())!=null) &#123; if(!flag) &#123; flag=true; writer.write(line); &#125; else &#123; writer.newLine();//写换行符 writer.write(line); &#125; &#125; reader.close(); writer.close();&#125;这样复制的文件就不会多谢换行符了，保证复制的文件和源文件是一模一样的。bug:乱码问题因为我们使用的是包装FileReader的BufferedReader，包装FileWriter的BufferedWriter。所以读字符，写字符的时候使用的是默认的字符编码读写的。所以读写文件的时候会出现乱码，可以使用包装InputStreamReader的BufferedReader,包装OutputStreamWriter的BufferedWriter来复制文件，这样就可以支持各种字符编码。实例：gbk编码的文件复制到utf8编码的文件中：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748static void copyByLineEncoding(String srcFile, String srcEncoding, String destFile, String destEncoding)&#123; BufferedReader reader = null; BufferedWriter writer = null; try &#123; reader = new BufferedReader(new InputStreamReader( new FileInputStream(srcFile), srcEncoding)); writer = new BufferedWriter(new OutputStreamWriter( new FileOutputStream(destFile), destEncoding)); char[] charArray = new char[512]; int size; while ((size = reader.read(charArray, 0, charArray.length)) != -1) &#123; writer.write(charArray, 0, size); &#125; &#125; catch (UnsupportedEncodingException | FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (writer != null) &#123; try &#123; writer.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (reader != null) &#123; try &#123; reader.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;main方法：123456public static void main(String[] args) throws IOException&#123; String from = "gbk.txt"; String to = "copyto_utf8.txt"; copyByLineEncoding(from,"gbk",to,"utf-8");&#125;源文件gbk.txt(gbk编码)：12gbk file这里是一句中文目标文件copyto_utf8.txt：12utf-8 file杩欓噷鏄竴鍙ヤ腑鏂�乱码是正常的，因为我们的工程目录用的gbk编码，把copyto_utf8.txt编码显示就好了：12utf-8 file这里是一句中文所以使用包装InputStreamReader的BufferedReader,包装OutputStreamWriter的BufferedWriter来复制文件的好处就是可以指定复制文件的时候使用的字符编码，例如上面的复制操作，从gbk编码的文件中读取，然后写入到utf8编码的文件中去。本文链接: JavaIO BufferedReader和BufferedWriter]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流 FileReader和FileWriter]]></title>
    <url>%2Fblog%2Ff1ceb471%2F</url>
    <content type="text"><![CDATA[FileReader类FileReader类能按字符读取流中数据继承关系1Object---&gt;Reader---&gt;InputSteamReader---&gt;FileReader构造方法：方法描述FileReader(File file)使用File对象创建一个新 FileReader。FileReader(FileDescriptor fd)使用FileDescriptor对象创建一个新 FileReader。FileReader(String fileName)使用文件名创建一个新 FileReader。读操作方法FileReader操作文件的方法全部都是从它的父类InputStreamReader继承的来的。从InputStreamReader类继承的方法：方法描述boolean ready()判断此流是否已经准备好用于读取。int read()读取单个字符。int read(char[] cbuf, int offset, int length)将字符读入数组中的某一部分。String getEncoding()返回此流使用的字符编码的名称。void close()关闭该流并释放与之关联的所有资源。FileReader和InputStreamReader的区别参考：https://www.jb51.net/article/76773.htmFileReader与它的父类InputStreamReader的主要区别在于构造函数。InputStreamReader的构造函数：方法描述InputStreamReader(InputStream in)创建一个使用默认字符集的 InputStreamReader。InputStreamReader(InputStream in, Charset cs)创建使用给定字符集的 InputStreamReader。InputStreamReader(InputStream in, CharsetDecoder dec)创建使用给定字符集解码器的 InputStreamReader。InputStreamReader(InputStream in, String charsetName)创建使用指定字符集的 InputStreamReader。从InputStreamReader的构造函数中看到，第一个参数统一为InputStream，第二个参数可以是编码方式或解码器，所以，当要指定编码方式时，必须使用InputStreamReader类；而FileReader构造函数的参数是File,String,FileDescriptor类型的,不是InputStream，在读操作的使用FileReader会使用默认的编码进行读取。所以，在使用默认编码的情况下，当要根据File对象或者String 文件名来读取一个文件时，用FileReader；读文件实例逐个字符读取123456789101112131415161718192021222324252627282930313233343536/** * 打印文件中的内容. * @param fileName 文件路径 */ public static void readByChar(String fileName)&#123; FileReader reader=null; try &#123; reader = new FileReader(fileName); int ch; while((ch=reader.read())!=-1) &#123; System.out.print((char)ch); &#125; &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; if(reader!=null) try &#123; reader.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;按数组读取1234567891011121314151617181920212223242526272829303132333435/** * @param fileName */ public static void readByCharArray(String fileName)&#123; FileReader reader=null; try &#123; reader=new FileReader(fileName); int size; char[] cbuf=new char[128]; while((size=reader.read(cbuf, 0, cbuf.length))!=-1) &#123; System.out.print(new String(cbuf,0,size)); &#125; &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;finally &#123; if(reader!=null) try &#123; reader.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;main方法中调用1234567public static void main(String[] args)&#123; String fileName="gbk.txt"; readByChar(fileName); System.out.println("\n------------------------------"); readByCharArray(fileName);&#125;测试文件：12gbk file这里是一句中文运行结果：12345gbk file这里是一句中文------------------------------gbk file这里是一句中文FileWriter类FileWriter类可以把字符直接写入流中,FileWriter继承与OutputStreamWriter,它的所有方法也都继承于OutputStreamWriter。继承关系1234java.lang.Object |----&gt; java.io.Writer |----&gt; java.io.OutputStreamWriter |----&gt; java.io.FileWriter构造方法：方法描述FileWriter(File file)根据给定的 File 对象构造一个 FileWriter 对象。FileWriter(File file, boolean append)根据给定的 File 对象构造一个 FileWriter 对象。是否追加写入FileWriter(FileDescriptor fd)构造与某个文件描述符相关联的 FileWriter 对象。FileWriter(String fileName)根据给定的文件名构造一个 FileWriter 对象。FileWriter(String fileName, boolean append)根据给定的文件名以及指示是否追加加写入数据的 boolean 值来构造 FileWriter 对象。读操作方法从OutputStreamWriter继承的方法：方法描述void write(int c)写入单个字符。void write(char[] cbuf, int off, int len)写入字符数组的某一部分。void write(String str, int off, int len)写入字符串的某一部分。String getEncoding()返回此流使用的字符编码的名称。void flush()刷新该流的缓冲。void close()关闭此流，但要先刷新它。FileWriter类和OutputStreamWriter类的区别还是和上面的一样，区别主要在构造方法上。OutputStream类的构造方法：方法描述OutputStreamWriter(OutputStream out)创建使用默认字符编码的 OutputStreamWriter。OutputStreamWriter(OutputStream out, Charset cs)创建使用给定字符集的 OutputStreamWriter。OutputStreamWriter(OutputStream out, CharsetEncoder enc)创建使用给定字符集编码器的 OutputStreamWriter。OutputStreamWriter(OutputStream out, String charsetName)创建使用指定字符集的 OutputStreamWriter。从OutputStreamWriter的构造方法中可看出，第一个参数为OutputStream，第二个参数可以是字符编码或者编码器。所以写操作时需要指定字符编码的时候必须使用OutputStreamWriter而 FileWriter的构造方法中第一个参数为File,String,FileDescriptor对象，第二个参数表示可以是否追加写入。FileWriter会使用默认的编码来进行写操作。所以使用File类或String文件名来进行写操作是使用FileWriter,要求追加写入文件时也要使用FileWriter。读写实例:复制文件使用FileReader和FileWriter复制文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** * 从名字为from的源文件复制到名字为to的目的文件中。 * @param from 源文件 * @param to 目的文件 */ public static void copyByFileReader_Writer(String from, String to)&#123; FileReader reader = null; FileWriter writer = null; try &#123; reader = new FileReader(from); writer = new FileWriter(to); char[] cbuf = new char[128]; int size = 0; while ((size = reader.read(cbuf, 0, cbuf.length)) != -1) &#123; writer.write(cbuf, 0, size); &#125; &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; if (reader != null) try &#123; reader.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; if (writer != null) try &#123; writer.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;main方法中调用：123456public static void main(String[] args)&#123; String from = "gbk.txt"; String to = "gbk_copy.txt"; copyByFileReader_Writer(from, to);&#125;源文件gbk.txt:12gbk file这里是一句中文复制要的目的文件gbk_copy.txt：12gbk file这里是一句中文编码问题使用FileReader和FileWriter使用默认的编码来读文件，写文件。这样容易出现问题。现在项目的编码是gbk的，但是此时用来复制utf-8编码的文件就会出现问题。源文件utf8.txt(utf-8编码)：12utf-8 file这里是一句中文main方法：123456public static void main(String[] args)&#123; String from = "utf8.txt"; String to = "utf8_copy.txt"; copyByFileReader_Writer(from, to);&#125;运行结果，复制好的utf8_copy.txt中的内容:12utf-8 file杩欓噷鏄竴鍙ヤ腑鏂�出现这样的乱码是因为，我们现在是以默认的编码(gbk)打开的，现在改成以utf-8编码打开看看：12utf-8 file这里是一句中�?可以看到虽然已经以utf-8编码打开了，但是还是显示乱码。所以遇到需要处理字符编码的时候要使用InputStreamReader和OutputStreamWriter来操作。本文链接: Java IO流 FileReader和FileWriter]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PrintWriter类--向文本输出流打印格式化表示形式]]></title>
    <url>%2Fblog%2Fc2200ab8%2F</url>
    <content type="text"><![CDATA[PrintWriter类–向文本输出流打印格式化表示形式PintWriter是一种过滤流，也叫处理流。使用PrintWriter能方便的打印各种数据的表示形式。PrintWriter有一系列的print方法和println方法，可以写入基本类型（转换为字符串）、字符串和对象（使用toString方法）。这些打印方法可以保证数值的表现形式不变。写的是什么样子，目的地就是什么样子。同时PrintWriter有缓冲区功能，需要及时关闭或者flush().PrintWriter和BufferedWriter的区别PrintWriter相对于BufferedWriter的好处在于，如果PrintWriter开启了自动刷新，那么当PrintWriter调用println，prinlf或format方法时，输出流中的数据就会自动刷新出去。PrintWriter不但能接收字符流，也能接收字节流。PrintWriter的print、println方法可以接受任意类型的参数，而BufferedWriter的write方法只能接受字符、字符数组和字符串；PrintWriter的println方法自动添加换行，BufferedWriter需要显示调用newLine方法；PrintWriter的方法不会抛异常，若关心异常，需要调用checkError方法看是否有异常发生；PrintWriter构造方法可指定参数，实现自动刷新缓存（autoflush）；PrintWriter的构造方法更广。PrintWriter和BufferedWriter都是继承java.io.Writer，所以很多功能都一样。不过PrintWriter提供println()方法可以写不同平台的换行符，而BufferedWriter可以任意设定缓冲大小。不过PrintWriter的底层还是由BufferedWriter、BufferedStreamWriter实现的。注意：(1)PrintWriter只有输出写入功能，而没有读取功能顺带比较一下PrintStream和PrintWriter的区别首先PrintWriter 是字符输出，PrintStream 是字符输出PrintStream和PrintWriter的API几乎相同，都能输出各种形式的数据，构造方法也几乎相同区别：1.PrintStream能做的PrintWriter也都能实现，并且PrintWriter的功能更为强大。但是由于PrintWriter出现的比较晚，较早的System.out使用的是PrintStream来实现的，所以为了兼容就没有废弃PrintStream。2.两个个类最大的差别是，PrintStream在输出字符，将字符转换为字节时采用的是系统默认的编码格式，这样当数据传输另一个平台，而另一个平台使用另外一个编码格式解码时就会出现问题，存在不可控因素。而PrintWriter可以在传入Writer时可由程序员指定字符转换为字节时的编码格式，这样兼容性和可控性会更好。1.构造函数：PrintWriter(File file) 创建PrintWriter，不自动行刷新 PrintWriter(File file, String csn) 创建PrintWriter，使用指定文件file和字符集csn，不自动刷行 PrintWriter(OutputStream out) 以OutputStream创建PrintWriter，不自动行刷新 。 PrintWriter(OutputStream out, boolean autoFlush) 以OutputStream 创建新的 PrintWriter。autoFlush为true的话自动刷新 PrintWriter(String fileName) 以指定文件名称创建 PrintWriter。不自动行刷新 PrintWriter(String fileName, String csn) 以指定文件名称和字符集创建且不带PrintWriter，不自动刷新 PrintWriter(Writer out) 创建PrintWriter,不自动行刷新 PrintWriter(Writer out, boolean autoFlush) 创建新 PrintWriter 如果autoFlush为true则自动刷新 2.格式化打印方法：1.print()方法：打印基本数据类型(byte类型没有)，打印对象，打印字符串void print(int i) 打印整数。 void print(long l) 打印 long 整数 void print(float f) 打印一个浮点数。 void print(double d) 打印 double 精度浮点数。 void print(char c) 打印字符。 void print(char[] s) 打印字符数组。 void print(boolean b) 打印 boolean 值。 void print(Object obj) 打印对象。 void print(String s) 打印字符串 2.printf()方法PrintWriter printf(Locale l, String format, Object... args) 使用指定格式字符串和参数将格式化的字符串写入此 writer 的便捷方法。 PrintWriter printf(String format, Object... args) 使用指定格式字符串和参数将格式化的字符串写入此 writer 的便捷 3.println()方法void println() 通过写入行分隔符字符串终止当前行。 void println(int x) 打印整数，然后终止该行。 void println(long x) 打印 long 整数，然后终止该行。 void println(char x) 打印字符，然后终止该行。 void println(char[] x) 打印字符数组，然后终止该行。 void println(float x) 打印浮点数，然后终止该行。 void println(double x) 打印双精度浮点数，然后终止该行。 void println(boolean x) 打印 boolean 值，然后终止该行。 void println(Object x) 打印 Object，然后终止该行。 void println(String x) 打印 String，然后终止该行。 4.write方法void write(char[] buf) 写入字符数组。 void write(char[] buf, int off, int len) 写入字符数组的某一部分。 void write(int c) 写入单个字符。 void write(String s) 写入字符串。 void write(String s, int off, int len) 写入字符串的某一部分。 5.format()方法PrintWriter format(Locale l, String format, Object... args) 使用指定格式字符串和参数将一个格式化字符串写入此 writer 中。 PrintWriter format(String format, Object... args) 使用指定格式字符串和参数将一个格式化字符串写入此 writer 中。 6.append()方法PrintWriter append(char c) 将指定字符添加到此 writer。 PrintWriter append(CharSequence csq) 将指定的字符序列添加到此 writer。 PrintWriter append(CharSequence csq, int start, int end) 将指定字符序列的子序列添加到此 writer 错误方法boolean checkError()如果流没有关闭，则刷新流且检查其错误状态。 protected void clearError()清除此流的错误状态。 protected void setError()指示已发生错误。 8.关闭刷新方法void close() 关闭该流并释放与之关联的所有系统资源。 void flush() 刷新该流的缓冲。 这里有好多个写方法，来比较一下区别：PrintWriter中write与println方法的区别共同点：两者都不刷新页面，只在原来的页面写数据.最终都是重写了抽象类Writer里面的write方法.print方法可以将各种类型的数据转换成字符串的形式输出。重载的write方法只能输出字符、字符数组、字符串等与字符相关的数据。write()方法不会写入换行符，如果用write()在一端写入了信息，在另一端如果用readLine()方法。由于读不到换行符，意味中读不到结束标记，然后由于IO流是阻塞式的，所以程序就是一直卡在那里不动了。原因即为缺少回车标识。如果在写入的时候加上“\r\n”,就可以解决这个问题了。而println()就自动加上了换行符了。OutputStreamWriter、PrintWriter和BufferedWriter区别PrintWriter无追加模式，若写入已有文件，将清空原文件，重新写入；其println自动换行；OutputStreamWriter与BufferedWriter有追加模式，append设置为true时，在已有文件末尾追加；append=false时，从已有文件第一行开始覆盖写入，若写入内容比原有文件短，则只覆盖部分内容；BufferedWriter需手动换行，bw.newLine();OutputStreamWriter和BufferedWriter的缺省buffersize,OutputStreamWriter是8k bytes，BufferedWriter是8k chars。OutputStreamWriter，PrintWriter能控制编码，BufferedWriter不能。BufferedWriter封装的是writer，也就是当buffer满了让别的writer去处理输出。而OutputStreamWriter封装的事数据流(OutputStream)，它是让数据流去处理输出。stream和writer的不同不用说，一个是二进制数据，一个是字符数据，这两个根本就不一样了。实例：使用BufferReader和PrintWriter复制文本文件public static void copy(String srcPath,String destPath) throws IOException { BufferedReader reader=new BufferedReader( new FileReader(srcPath) ); //不带自动刷新的字符打印流 PrintWriter writer=new PrintWriter(destPath); String line; while((line=reader.readLine())!=null) { writer.println(line); writer.flush();//手动刷新 } reader.close(); writer.close(); } 测试：public static void main(String[] args) throws IOException { String packagePath=FilePath.getSrcPackagePath(TestPrintWriter.class); String srcFile=packagePath+&quot;fileGbk.txt&quot;; String destFile=packagePath+&quot;副本.txt&quot;; copy(srcFile,destFile); } fileGbk.txt:静夜思 作者：李白 床前明月光，疑是地上霜。 举头望明月，低头思故乡。 运行后：副本.txt静夜思 作者：李白 床前明月光，疑是地上霜。 举头望明月，低头思故乡。 使用PrintWriter来写文本文件十分的简介方便。平时使用时可考虑BufferReader和PrintWriter搭配使用。参考：PrintWriter中write与println方法的区别PrintWriter和BufferedWriter的使用区别OutputStreamWriter、PrintWriter和BufferedWriter区别本文链接: PrintWriter类–向文本输出流打印格式化表示形式]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[格式化html代码]]></title>
    <url>%2Fblog%2Ffc82c7ea%2F</url>
    <content type="text"><![CDATA[最近在看看html相关的代码，也会从网上复制一些。但是复制过来的代码没有格式化阅读起来不方便，所以我写了点代码来格式化html代码。当然这个其实就是个自娱自乐的工具，粘贴到IDE中，使用IDE来格式化可能更方便，但，可能我想自己找麻烦吧，自己来写写看。需求：处理的文本把下面的代码格式化1234567891011121314151617&lt;html&gt;&lt;head&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $(this).hide();&#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;button type=&quot;button&quot;&gt;Click me&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;处理后的效果格式化后的效果为：1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $(this).hide(); &#125;); &#125;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button type=&quot;button&quot;&gt;Click me&lt;/button&gt; &lt;/body&gt; &lt;/html&gt;实现先来实现一个最简单的情况，把处理文本处理成下面的形式。在&lt;html&gt;和&lt;/html&gt;标签之间加上缩进。1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $(this).hide(); &#125;); &#125;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button type=&quot;button&quot;&gt;Click me&lt;/button&gt; &lt;/body&gt; &lt;/html&gt;思路：使用一个StringBuider存储缩进，缩进设置为四个空格。一行一行的读取代码，然后使用正则表达式匹配该行代码当匹配到&lt;html&gt;这一行的时候，原样输出该行&lt;html&gt;，然后在StringBuider中加入一个缩进。当匹配不到&lt;html&gt;这行的时候，先在前面输出StringBuilder中的内容，也就是输出缩进，然后在输出该行代码本省。当匹配到&lt;/html&gt;这行是，删除存放在StringBuilder中的缩进，然后输出StringBuider中的内容，然后输出该行代码。中间的代码比开始标签前面多了一个缩进，而结束标签要与开始标签对齐，也就是说结束标签要比中间的代码少一个缩颈。关键代码如下：123456789101112131415161718192021//匹配到标签开始if (匹配到开始标签)&#123; //原样输出 System.out.print(builder.toString()); System.out.println(line); //让后面的代码加一个缩进 builder.append(TAB);&#125; else if (匹配到结束标签)&#123; // 删除缩进，这样就和开始标签对齐，而中间的其他代码多了一个缩进 builder.delete(0, 4); //输出缩进和该行代码 System.out.print(builder.toString()); System.out.println(line);&#125; else&#123; //中间代码 System.out.print(builder.toString()); System.out.println(line);&#125;同理，&lt;head&gt;和&lt;/head&gt;之间，&lt;body&gt;和&lt;/body&gt;之间，&lt;script type=&quot;text/javascript&quot;&gt;和&lt;script&gt;之间也要有缩进。完整的代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package regex.tools;import java.util.Scanner;import java.util.regex.Matcher;import java.util.regex.Pattern;import clipboard.util.SysClipboardUtil;public class ReplaceJquerySrc&#123; public static void main(String[] args) &#123; String code = SysClipboardUtil.getSysClipboardText(); final String TAB = " "; StringBuilder builder = new StringBuilder(); String addTab = "(?:&lt;html&gt;|&lt;head&gt;|&lt;body&gt;|&lt;script[^&gt;]*&gt;)"; Pattern addTabPattern = Pattern.compile(addTab); Matcher matcherAdd; String MinusTab = "(?:&lt;/html&gt;|&lt;/head&gt;|&lt;/body&gt;|&lt;/script&gt;)"; Pattern MinusTabPattern = Pattern.compile(MinusTab); Matcher matcherMinusTab; Scanner scanner = new Scanner(code); String line = null; while (scanner.hasNextLine()) &#123; line = scanner.nextLine(); matcherAdd = addTabPattern.matcher(line); matcherMinusTab = MinusTabPattern.matcher(line); //匹配到标签开始 if (matcherAdd.matches()) &#123; //原样输出 System.out.print(builder.toString()); System.out.println(line); //让后面的代码加一个缩进 builder.append(TAB); &#125; else if (matcherMinusTab.matches()) &#123; //匹配到结束标签 // 删除缩进，对其前面的开头标签 builder.delete(0, 4); System.out.print(builder.toString()); System.out.println(line); &#125; else &#123; //其他代码 System.out.print(builder.toString()); System.out.println(line); &#125; &#125; &#125;&#125;复制处理的文本，然后运行上面的程序，控制台输出如下。1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $(this).hide(); &#125;); &#125;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button type=&quot;button&quot;&gt;Click me&lt;/button&gt; &lt;/body&gt; &lt;/html&gt;好的这就格式化挺不错的，后续如果还想对其他的代码块之间进行格式化，只要两个在正则表达式中多加上一个分支就行了。12String addTab = &quot;(?:&lt;html&gt;|&lt;head&gt;|&lt;body&gt;|&lt;script[^&gt;]*&gt;)&quot;;String MinusTab = &quot;(?:&lt;/html&gt;|&lt;/head&gt;|&lt;/body&gt;|&lt;/script&gt;)&quot;;&lt;script[^&gt;]*&gt;这个正则表达式是为了匹配&lt;script type=&quot;text/javascript&quot;&gt;而不匹配&lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt;，因为这句话中间就没有其他代码，不需要设置缩进。如果使用&lt;script.*&gt;这个正则表达式就会匹配到这种特殊的&lt;script....&gt;和&lt;/script&gt;在同一行的情况。需求2:替换jquery库的路径因为从其他网站上复制的代码，jquery路径(或者其他库的路径)和我们本机的路径肯定不一样，而且版本也可能不一样。jquery我已经下载好了，放在当前目录下。所以要求在格式化的时候把 src=&quot;/jquery/jquery.js&quot;，替换成我们自己的路径： src=&quot;jquery-3.3.1.js。处理文本：1&lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt;要求处理后为：1&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-3.3.1.js&quot;&gt;&lt;/script&gt;实现使用替换就行了：1code = code.replaceAll(&quot;src=\&quot;/.*jquery.js*\&quot;&quot;, &quot;src=\&quot;jquery-3.3.1.js\&quot;&quot;);完整代码：完整的代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package regex.tools;import java.util.Scanner;import java.util.regex.Matcher;import java.util.regex.Pattern;import clipboard.util.SysClipboardUtil;public class ReplaceJquerySrc&#123; public static void main(String[] args) &#123; String code = SysClipboardUtil.getSysClipboardText(); // src=&quot;/jquery/jquery.js&quot; code = code.replaceAll(&quot;src=\&quot;/.*jquery.js*\&quot;&quot;, &quot;src=\&quot;jquery-3.3.1.js\&quot;&quot;); final String TAB = &quot; &quot;; StringBuilder builder = new StringBuilder(); String addTab = &quot;(?:&lt;html&gt;|&lt;head&gt;|&lt;body&gt;|&lt;script[^&gt;]*&gt;)&quot;; Pattern addTabPattern = Pattern.compile(addTab); Matcher matcherAdd; String MinusTab = &quot;(?:&lt;/html&gt;|&lt;/head&gt;|&lt;/body&gt;|&lt;/script&gt;)&quot;; Pattern MinusTabPattern = Pattern.compile(MinusTab); Matcher matcherMinusTab; Scanner scanner = new Scanner(code); String line = null; while (scanner.hasNextLine()) &#123; line = scanner.nextLine(); matcherAdd = addTabPattern.matcher(line); matcherMinusTab = MinusTabPattern.matcher(line); // 匹配到标签开始 if (matcherAdd.matches()) &#123; // 原样输出 System.out.print(builder.toString()); System.out.println(line); // 让后面的代码加一个缩进 builder.append(TAB); &#125; else if (matcherMinusTab.matches()) &#123; // 匹配到结束标签 // 删除缩进，对其前面的开头标签 builder.delete(0, 4); System.out.print(builder.toString()); System.out.println(line); &#125; else &#123; // 其他代码 System.out.print(builder.toString()); System.out.println(line); &#125; &#125; // System.out.println(code); // SysClipboardUtil.setSysClipboardText(code); &#125;&#125;运行结果：1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery-3.3.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $(this).hide(); &#125;); &#125;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button type=&quot;button&quot;&gt;Click me&lt;/button&gt; &lt;/body&gt; &lt;/html&gt;把运行结果保存在当前路径(放jquery的路径)下，然用浏览器打开就可看到运行效果了。然后点击按钮：可看到，按钮消失了，这说明我们替换后的jquery路径时没有问题的。而代码格式化是给人看的。本文链接: 格式化html代码]]></content>
      <categories>
        <category>我的软件</category>
        <category>使用正则表达式的工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Jquery简介]]></title>
    <url>%2Fblog%2Ff58374be%2F</url>
    <content type="text"><![CDATA[jQuery 语法是为 HTML 元素的选取编制的，可以对元素执行某些操作。基础语法是：$(selector).action()美元符号定义 jQuery选择符（selector）“查询”和“查找” HTML 元素jQuery 的 action() 执行对元素的操作jQuery 语法实例方法描述$(this).hide()隐藏当前的 HTML 元素。$(&quot;#test&quot;).hide()隐藏 id=&quot;test&quot;的元素。$(&quot;p&quot;).hide()隐藏所有 &lt;p&gt; 元素。$(&quot;.test&quot;).hide()隐藏所有 class=&quot;test&quot; 的元素。本文链接: Jquery简介]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Java Web从入门到精通</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaIO InputStreamReader和OutputStreamWriter]]></title>
    <url>%2Fblog%2Fa5e554af%2F</url>
    <content type="text"><![CDATA[InputStreamReader将一个InputStream转换成Reader；OutputStreamWriter将一个OutputStream转换成Writer。InputStreamReader(Reader 的子类）和 OutputStreamWriter(Writer 的子类）是用于处理字符流的最基本的类，用来在字节流和字符流之间的中介。InputStream 此抽象类是表示字节输入流的所有类的超类InputStreamReader能将字节流转换为字符流,是字节流通向字符流的桥梁：它读取字节并将其解码为使用指定的字符集的字符。InputStreamReader封裝了InputStream在里头, 它能以较高级的方式,一次读取一个字符InputSteamReader 的方法：构造方法方法描述InputStreamReader(InputStream in)创建一个使用默认字符集的 InputStreamReader。InputStreamReader(InputStream in, Charset cs)创建使用给定字符集的 InputStreamReader。InputStreamReader(InputStream in, CharsetDecoder dec)创建使用给定字符集解码器的 InputStreamReader。InputStreamReader(InputStream in, String charsetName)创建使用指定字符集的 InputStreamReader。其他方法方法描述int read()读取单个字符。int read(char[] cbuf, int offset, int length)将字符读入字符数组中的某一部分。boolean ready()判断此流是否已经准备好用于读取。String getEncoding()返回此流使用的字符编码的名称。void close()关闭该流并释放与之关联的所有资源。实例使用read()方法读取文件这个方法每次读取一个字符,并返回读取到的字符(int表示)，如果读取完毕就返回-1.因为返回的是int类型，我们打印字符的时候，要强制类型转换为char类型。实例：按字符读取文件12345678910111213141516public static void main(String[] args) throws IOException&#123; InputStreamReader inReader = new InputStreamReader( new FileInputStream("utf8.txt"), "utf-8"); //先判断能不能读取 if (!inReader.ready()) &#123; System.out.println("无法读取此文件！"); return; &#125; int read = 0; while ((read = inReader.read()) != -1) &#123; System.out.print((char) read); &#125;&#125;测试文件utf8.txt:12utf-8 file这里是一句中文运行结果：12utf-8 file这里是一句中文这里以字节的方式从源文件utf8.txt中读取一个个字节。InputStreamReader的read()方法根据给定的编码将这些读取到的字节解码成一个个的字符返回,不过因为是int类型表示的字符，在打印的时候我们需要强制类型转换外char类型读字符数组方法int read(char[] cbuf, int offset, int length)这个方法可以把一批字符读取到字符数组中，每次读length个字符放到数组cbuf中，放的时候从字符数组的offset下标开始放。返回读取到的字节数，如果读取完毕后就返回-1表示读取结束。实例：按字符数组读取文件123456789101112131415161718InputStreamReader inReader = new InputStreamReader( new FileInputStream("utf8.txt"), "utf-8");//先判断能不能读取if (!inReader.ready())&#123; System.out.println("无法读取此文件！"); return;&#125;int size = 0;char[] cbuf = new char[10];// 每次读取一个数组while ((size = inReader.read(cbuf, 0, cbuf.length)) != -1)&#123; // 错误的写法 System.out.print(new String(cbuf)); // 注意读到多少个字符就转换多少个字符,不要转换整个字符 // System.out.print(new String(cbuf, 0, size));&#125;这里要注意写法，因为有的时候并不能读慢整个字符数组cbuf，所以我们输出的时候，读取到多少个字符就输出多少个，System.out.print(new String(cbuf, 0, size));，而不是输出整个数组 System.out.print(new String(cbuf));测试文件utf8.txt：12utf-8 file这里是一句中文运行结果：12utf-8 file这里是一句中文如果使用的是System.out.print(new String(cbuf));进行输出，结果如下。12utf-8 file这里是一句中文e可以看到平白无故多输出了一个字符e，还是一句话，读到多少输出多少。OutputStreamWriter 类OutputStreamWriter能将字符流转换为字节流,是字符流通向字节流的桥梁。它使用的字符集可以指定，否则将使用平台默认的字符，wirte()也就是把代有编码的一个字符，转换成字节序列写流中。OutputStreamWriter的API：构造方法方法描述OutputStreamWriter(OutputStream out)创建使用默认字符编码的 OutputStreamWriter对象。OutputStreamWriter(OutputStream out, Charset cs)创建使用给定字符集的 OutputStreamWriter对象。OutputStreamWriter(OutputStream out, CharsetEncoder enc)创建使用给定字符集编码器的 OutputStreamWriter对象。OutputStreamWriter(OutputStream out, String charsetName)创建使用指定字符集的 OutputStreamWriter对象。其他方法：方法描述void write(int c)写入单个字符。void write(char[] cbuf, int off, int len)写入字符数组的某一部分。void write(String str, int off, int len)写入字符串的某一部分。void close()关闭此流，但要先刷新它。void flush()刷新该流的缓冲。String getEncoding()返回此流使用的字符编码的名称。对比这两个类可看到OutputStreamWriter和InputStreamReader这两个类中的方法并不是对称的。两个类都有的方法：close() 关闭流getEncoding()返回使用的字符编码对称的读写方法：int read()/void write(int c) 读/写一个字节int read(char[] cbuf,int off,int len)/void write(char[] cbuf,int off,int len) 读/写一个数组InputStreamReader独有的方法：boolean ready() ,判断此流是否已经准备好用于读取。OutputStreamWriter独有的方法：void write(String str,int off,int len), 从字符串str中的off位置开始写len个字符。void flush(),刷新该流的缓冲实例：使用上面三种方法写文件123456789101112131415161718public static void writeByOutputStreamWriter(String fileName) throws FileNotFoundException, IOException&#123; OutputStreamWriter out = new OutputStreamWriter( new FileOutputStream(fileName)); char c = &apos;I&apos;; // 写入单个字符 out.write(c); String str = &quot;am groot\n&quot;; // 字符串转换为字符数组 char[] cbuf = str.toCharArray(); // 写入字符数组 out.write(cbuf, 0, cbuf.length); String str2 = &quot;I am groot!&quot;; // 写入整个字符串 out.write(str2, 0, str2.length());// 写入字符串 out.close();&#125;运用上面的InputStreamReader的知识,写两个方法来读取写入的内容按字符读取：123456789101112public static void readByInputStreamReader(String fileName) throws FileNotFoundException, IOException&#123; InputStreamReader in = new InputStreamReader( new FileInputStream(fileName)); int ch; while ((ch = in.read()) != -1) &#123; System.out.print((char) ch); &#125; in.close();&#125;按字符数组读取：12345678910111213public static void readByInputStreamReaderCharArr(String fileName) throws FileNotFoundException, IOException &#123; InputStreamReader in = new InputStreamReader( new FileInputStream(fileName)); int size; char[] array = new char[10]; while ((size = in.read(array, 0, array.length)) != -1) &#123; System.out.print(new String(array, 0, size)); &#125; in.close(); &#125;main方法：1234567891011public static void main(String[] args) throws IOException&#123; String fileName = &quot;test.txt&quot;; System.out.println(&quot;写文件结束...&quot;); writeByOutputStreamWriter(fileName); System.out.println(&quot;写文件结束...&quot;); // System.out.println(c+new String(cbuf)+str2); System.out.println(&quot;--------------读字符：-------------------&quot;); // readByInputStreamReader(fileName); readByInputStreamReaderCharArr(fileName);&#125;运行结果：12345写文件结束...写文件结束...--------------读字符：-------------------I am grootI am groot!test.txt文件中的内容：12I am grootI am groot!需要注意的是，写文件的时候test.txt文件可以不存在，OutputStreamWriter会自动创建这文件，然后写入该文件中。但前提是可以找到test.txt这个文件的父路径。如果父路径不存在，会抛出异常：FileNotFoundException。例如把上面main中的代码改为：1234String fileName = &quot;\\new1\\test222.txt&quot;;System.out.println(&quot;写文件结束...&quot;);writeByOutputStreamWriter(fileName);System.out.println(&quot;写文件结束...&quot;);因为当前工作目录下没有new1这个文件夹,所以无法在new1目录下创建test222.txt这个文件。运行部分结果入下：1Exception in thread &quot;main&quot; java.io.FileNotFoundException: \new1\test222.txt (系统找不到指定的路径。)应用：复制字符文件我们可以从一个文件中读取字符，然后再把这些字符写入到另一个文件中，然后再读，再写，一直循环知道读取结束。从而实现文件的复制操作。但是只能复制存放字符的文件(.txt,.c,.java等)，不能复制二进制文件(如音频，视屏，音乐)关键代码：12345while((size=in.read(cbuf, 0, cbuf.length))!=-1)&#123; //然后把数字中读取到的字符写入到输出流中，注意读多少写多好，不要整个数组都写进去 out.write(cbuf, 0, size);&#125;完整的代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546public static void copy(String from, String to)&#123; InputStreamReader in=null; OutputStreamWriter out=null; try &#123; in = new InputStreamReader(new FileInputStream(from),&quot;gbk&quot;); //如果可以读了 if(in.ready()) &#123; out=new OutputStreamWriter(new FileOutputStream(to), &quot;gbk&quot;); //缓存字符数组 char[] cbuf=new char[20]; int size; //从输入流中读取一个数组的字符到数组中 while((size=in.read(cbuf, 0, cbuf.length))!=-1) &#123; //然后把数字中读取到的字符写入到输出流中，注意读多少写多好，不要整个数组都写进去 out.write(cbuf, 0, size); &#125; &#125; &#125; catch (UnsupportedEncodingException | FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; if(in!=null) &#123; try&#123;in.close();&#125; catch (IOException e) &#123;e.printStackTrace();&#125; &#125; if(out!=null) &#123; try&#123;out.close();&#125; catch (IOException e) &#123;e.printStackTrace();&#125; &#125; &#125;&#125;源文件：12I am grootI am groot!测试：123String from = &quot;test.txt&quot;;String to = &quot;copy.txt&quot;;copy(from, to);运行后，当前工程目录下创建了一个copy.txt文件，文件中的内容如下：12I am grootI am groot!本文链接: JavaIO InputStreamReader和OutputStreamWriter]]></content>
      <categories>
        <category>Java</category>
        <category>Java IO流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[TL-WR802N如何设置Mini路由器]]></title>
    <url>%2Fblog%2Fcbad161%2F</url>
    <content type="text"><![CDATA[TL-WR802N提供多种工作模式，可以满足多种网络应用需求，本文指导针对您的不同需求如何选择需要的模式，并指导对应设置方法。 在家里，您使用宽带账号密码，在公司，您使用静态IP地址（绑定MAC地址），在酒店，您使用动态IP地址（认证上网）。需要连接Mini路由器实现共享上网，选择路由模式，通过简单设置即可满足您的需求。Router模式应用拓扑注意：以上拓扑中省去Modem，具体连接拓扑，需参考Router模式设置文档。点击参考如何设置：在办公区域或酒店，仅提供有线接口，要实现无线终端接入网络，需要有无线热点。Mini路由器的AP模式相当于“无线交换机”，可以实现有线转换为无线，提供无线热点。AP模式应用拓扑注意：如果酒店、公司网络限制接入终端数量或者仅提供一个ID认证或IP地址，则推荐使用Router模式。点击参考如何设置：家里已经有无线路由器，但是书房信号较弱，卧室搜不到信号，需要增强无线信号并且扩大覆盖范围。使用Mini路由器的Repeater模式，进行中继放大。 Repeater模式应用拓扑点击参考如何设置： 台式机需要接入无线网络，但是没有无线网卡。Mini路由器工作在Client模式下相当于无线网卡，可以帮助台式机接入网络。 Client模式应用拓扑点击参考如何设置： 如果部分办公室不方便拉网线接入公司网络，但是无线网络已经覆盖。那么使用Mini路由器的Bridge模式连接到无线网络，并设置属于办公室的无线网络。 Bridge模式应用拓扑注意：该模式并不局限于办公室应用。点击参考设置方法：如果上述需求均不符合您的需求，请了解不同模式的功能和作用，选择对应的模式，参考设置方法：工作模式介绍Router（路由模式）：接入宽带线路，为局域网无线终端提供无线接入，共享宽带上网。AP（接入点模式）：将有线转换为无线，提供无线热点，当作“无线交换机”使用。Repeater（中继模式）：中继放大已有的无线信号，从而扩大无线覆盖范围。Client（客户端模式）：相当于无线网卡，连接已有的无线网络，有线连接在Mini路由器下的电脑可以接入网络。Bridge（桥接模式）：通过无线方式将两个无线网络连接，合并为同一个局域网。您也可以将需求详细描述，发送至fae@tp-link.com.cn，我们会针对您的需求，指导应用设置方法。本文链接: TL-WR802N如何设置Mini路由器]]></content>
      <categories>
        <category>我的软件</category>
        <category>自己写的工具说明</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正则应用 自动复制Java API方法摘要中的表格]]></title>
    <url>%2Fblog%2F8b1861fc%2F</url>
    <content type="text"><![CDATA[前言写博客的时候经常需要复制API，我之前是一条一条的复制，现在看来太low了,所以写个工具来一下子复制整个方法摘要中的表格。完整代码直达需求复制javaAPI中文档方法摘要中的方法，然后根据复制的文本生成表格。复制好的文本如下需要处理的文本：123456789101112131415161718void close() 关闭该流并释放与之关联的所有资源。 void mark(int readAheadLimit) 标记流中的当前位置。 boolean markSupported() 判断此流是否支持 mark() 操作（它一定支持）。 int read() 读取单个字符。 int read(char[] cbuf, int off, int len) 将字符读入数组的某一部分。 String readLine() 读取一个文本行。 boolean ready() 判断此流是否已准备好被读取。 void reset() 将流重置到最新的标记。 long skip(long n) 跳过字符。希望处理后的文本为1234567891011|方法|描述||:-|:-||void close() |关闭该流并释放与之关联的所有资源。 ||void mark(int readAheadLimit) |标记流中的当前位置。 ||boolean markSupported() |判断此流是否支持 mark() 操作（它一定支持）。 ||int read() |读取单个字符。 ||int read(char[] cbuf, int off, int len) |将字符读入数组的某一部分。 ||String readLine() |读取一个文本行。 ||boolean ready() |判断此流是否已准备好被读取。 ||void reset() |将流重置到最新的标记。 ||long skip(long n) |跳过字符。 |在markdown文档中显示效果：方法描述void close()关闭该流并释放与之关联的所有资源。void mark(int readAheadLimit)标记流中的当前位置。boolean markSupported()判断此流是否支持 mark() 操作（它一定支持）。int read()读取单个字符。int read(char[] cbuf, int off, int len)将字符读入数组的某一部分。String readLine()读取一个文本行。boolean ready()判断此流是否已准备好被读取。void reset()将流重置到最新的标记。long skip(long n)跳过字符。实现过程步骤：在方法和解释之间加入分界符，使两者合并到同一行中可以看到，的顺序是：一行方法，然后下一行是解释。我希望处理后方法和解释在同一行中。例如：12void close() 关闭该流并释放与之关联的所有资源。对于这个方法，在方法和解释之间加上一个|将方法和解释分开。形成：1void close()|关闭该流并释放与之关联的所有资源。这样的形式，那怎么做呢，观察这个文本。我们发现，方法和注释之间，有一个换行符，和多个空格。所以，使用body=body.replaceAll(&quot;\\n\\s{2,}&quot;, &quot;|&quot;);这句话来吧换行符合多个空格换成”|“。代码：12345//从剪贴板中获取文本String body=SysClipboardUtil.getSysClipboardText();//方法和解释之间加入分界符&quot;|&quot;body=body.replaceAll(&quot;\\n\\s&#123;2,&#125;&quot;, &quot;|&quot;);System.out.println(body);此时运行效果如下。123456789void close() |关闭该流并释放与之关联的所有资源。 void mark(int readAheadLimit) |标记流中的当前位置。 boolean markSupported() |判断此流是否支持 mark() 操作（它一定支持）。 int read() |读取单个字符。 int read(char[] cbuf, int off, int len) |将字符读入数组的某一部分。 String readLine() |读取一个文本行。 boolean ready() |判断此流是否已准备好被读取。 void reset() |将流重置到最新的标记。 long skip(long n) |跳过字符。在行首行尾之间加入分界符可以看到我们已经在方法和解释之间成功加入了分界符了，现在还有行首,以及行尾的分界符没有加上，在输出语句前面加上这句body=body.replaceAll(&quot;(?m)(^\\s{0,1}|$)&quot;, &quot;|&quot;);。此时的代码为：123456//从剪贴板中获取文本String body=SysClipboardUtil.getSysClipboardText();//方法和解释之间加入分界符&quot;|&quot;body=body.replaceAll(&quot;\\n\\s&#123;2,&#125;&quot;, &quot;|&quot;);body=body.replaceAll(&quot;(?m)(^\\s?|$)&quot;, &quot;|&quot;);System.out.println(body);运行结果:12345678910|void close() |关闭该流并释放与之关联的所有资源。 ||void mark(int readAheadLimit) |标记流中的当前位置。 ||boolean markSupported() |判断此流是否支持 mark() 操作（它一定支持）。 ||int read() |读取单个字符。 ||int read(char[] cbuf, int off, int len) |将字符读入数组的某一部分。 ||String readLine() |读取一个文本行。 ||boolean ready() |判断此流是否已准备好被读取。 ||void reset() |将流重置到最新的标记。 ||long skip(long n) |跳过字符。 ||删除多加入的无用分界符可以看到，行首和行尾都加上了分界符，并且删除掉了行首多余的空白符了。但是又在最后面的一行了一个|这个是我们不需要的，应该删掉，body=body.replaceAll(&quot;(?m)^\\|$&quot;,&quot;&quot;);修改后的程序：1234567//从剪贴板中获取文本String body=SysClipboardUtil.getSysClipboardText();//方法和解释之间加入分界符&quot;|&quot;body=body.replaceAll(&quot;\\n\\s&#123;2,&#125;&quot;, &quot;|&quot;);body=body.replaceAll(&quot;(?m)(^\\s?|$)&quot;, &quot;|&quot;);body=body.replaceAll(&quot;(?m)^\\|$&quot;,&quot;&quot;);System.out.println(body);运行结果：123456789|void close() |关闭该流并释放与之关联的所有资源。 ||void mark(int readAheadLimit) |标记流中的当前位置。 ||boolean markSupported() |判断此流是否支持 mark() 操作（它一定支持）。 ||int read() |读取单个字符。 ||int read(char[] cbuf, int off, int len) |将字符读入数组的某一部分。 ||String readLine() |读取一个文本行。 ||boolean ready() |判断此流是否已准备好被读取。 ||void reset() |将流重置到最新的标记。 ||long skip(long n) |跳过字符。 |现在表格体已经构建好了，还缺表格头，这个就简单了，不再需要使用正则表达式，定义表格头String head=&quot;|方法|描述|\n|:-|:-|\n&quot;;,然后head+body加上表格头就行了，完整版关键代码12345678910//从剪贴板中获取文本String body=SysClipboardUtil.getSysClipboardText();//方法和解释之间加入分界符&quot;|&quot;body=body.replaceAll(&quot;\\n\\s&#123;2,&#125;&quot;, &quot;|&quot;);//在行首和行尾加上分界符插入一个|body=body.replaceAll(&quot;(?m)(^\\s?|$)&quot;, &quot;|&quot;);body=body.replaceAll(&quot;(?m)^\\|$&quot;,&quot;&quot;);String head=&quot;|方法|描述|\n|:-|:-|\n&quot;;body=head+body;System.out.println(body);运行结果：1234567891011|方法|描述||:-|:-||void close() |关闭该流并释放与之关联的所有资源。 ||void mark(int readAheadLimit) |标记流中的当前位置。 ||boolean markSupported() |判断此流是否支持 mark() 操作（它一定支持）。 ||int read() |读取单个字符。 ||int read(char[] cbuf, int off, int len) |将字符读入数组的某一部分。 ||String readLine() |读取一个文本行。 ||boolean ready() |判断此流是否已准备好被读取。 ||void reset() |将流重置到最新的标记。 ||long skip(long n) |跳过字符。 |复制上面的运行结果，粘贴到markdown文档中，显示效果如下。方法描述void close()关闭该流并释放与之关联的所有资源。void mark(int readAheadLimit)标记流中的当前位置。boolean markSupported()判断此流是否支持 mark() 操作（它一定支持）。int read()读取单个字符。int read(char[] cbuf, int off, int len)将字符读入数组的某一部分。String readLine()读取一个文本行。boolean ready()判断此流是否已准备好被读取。void reset()将流重置到最新的标记。long skip(long n)跳过字符。吃惊！正则表达式是果然很强大。完成的代码：12345678910111213141516171819202122232425package markdowntools.table;import clipboard.util.SysClipboardUtil;public class TableCopyFromAPI&#123; public static void main(String[] args) &#123; //从剪贴板中获取文本 String body=SysClipboardUtil.getSysClipboardText(); //方法和解释之间加入分界符"|" body=body.replaceAll("\\n\\s&#123;2,&#125;", "|"); //在行首和行尾加上分界符插入一个| body=body.replaceAll("(?m)(^\\s?|$)", "|"); //去掉多加入无用的分界符 body=body.replaceAll("(?m)^\\|$",""); //定义表格头部和对齐方式 String head="|方法|描述|\n|:-|:-|\n"; //拼接成完整的markdown表格代码 body=head+body; //输出到控制台中// System.out.println(body);// 处理好的文本写入剪贴板中 SysClipboardUtil.setSysClipboardText(body); &#125;&#125;依赖：clipboard.util.SysClipboardUtil不足的地方，因为是使用String操作，但是总共产生了6个String对象。应该还能再优化优化，以后哪天再说啦。优化优化1：合并正则表达式来看下面这两句替换语句：1234//方法和解释之间加入分界符"|"body=body.replaceAll("\\n\\s&#123;2,&#125;", "|");//在行首和行尾加上分界符插入一个|body=body.replaceAll("(?m)(^\\s?|$)", "|");我发现这两个都是加入分割符到原来的文本中，利用多选节后可以把上面的两条正则表达式语句合并成一条语句：(\\n\\s{2,}|(?m)(^\\s*|$))，同时我们也不需要捕获文本，所以使用非捕获括号进行限定：(?:\\n\\s{2,}|(?m)(?:^\\s*|$))，这样减少捕获的操作以提高效率。1body = body.replaceAll("(?:\\n\\s&#123;2,&#125;|(?m)(?:^\\s*|$))", "|");这样的好处就是少生成一个String对象减少内存占用吧。关键代码如下：123456789101112131415// 从剪贴板中获取文本String body = SysClipboardUtil.getSysClipboardText();// 方法和解释之间加入分界符"|"// 在行首和行尾加上分界符插入一个|body = body.replaceAll("(?:\\n\\s&#123;2,&#125;|(?m)(?:^\\s*|$))", "|");// 去掉多加入无用的分界符body = body.replaceAll("(?m)^\\|$", "");// 定义表格头部和对齐方式String head = "|方法|描述|\n|:-|:-|\n";// 拼接成完整的markdown表格代码body = head + body;// 输出到控制台中_调试的时候用//System.out.println(body);// 处理好的文本写入剪贴板中SysClipboardUtil.setSysClipboardText(body);本文链接: 正则应用 自动复制Java API方法摘要中的表格]]></content>
      <categories>
        <category>正则表达式</category>
        <category>实例</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JAVA 正则表达式 (超详细)]]></title>
    <url>%2Fblog%2Fcf4d6a6e%2F</url>
    <content type="text"><![CDATA[原文：https://www.cnblogs.com/xyou/p/7427779.htmljava.util.regex包说明在regex包中，包括了两个类，Pattern(模式类)和Matcher(匹配器类)。Pattern类是用来表达和陈述所要搜索模式的对象，Matcher类是真正影响搜索的对象。另加一个新的例外类，PatternSyntaxException，当遇到不合法的搜索模式时，会抛出例外。即使对正则表达式很熟悉，你会发现，通过java使用正则表达式也相当简单。要说明的一点是，对那些被Perl的单行匹配所宠坏的Perl狂热爱好者来说，在使用java的regex包进行替换操作时，会比他们所以前常用的方法费事些。本文的局限之处，它不是一篇正则表达式用法的完全教程。如果读者要对正则表达进一步了解的话，推荐阅读Jeffrey Frieldl的Mastering Regular Expressions，该书由O’Reilly出版社出版。我下面就举一些例子来教读者如何使用正则表达式，以及如何更简单地去使用它。匹配任何格式的电话号码设计一个简单的表达式来匹配任何电话号码数字可能是比较复杂的事情，原因在于电话号码格式有很多种情况。所有必须选择一个比较有效的模式。比如:(212) 555-1212， 212-555-1212和212 555 1212，某些人会认为它们都是等价的。首先让我们构成一个正则表达式。为简单起见，先构成一个正则表达式来识别下面格式的电话号码数字:(nnn)nnn-nnnn。第一步，创建一个pattern对象来匹配上面的子字符串。一旦程序运行后，如果需要的话，可以让这个对象一般化。匹配上面格式的正则表达可以这样构成:(\d{3})\s\d{3}-\d{4}，其中\d单字符类型用来匹配从0到9的任何数字，另外{3}用来表示正好有3个连续的数字位，也等效于(\d\d\d)。\s也另外一个比较有用的单字符类型，用来匹配空白符，比如Space键，tab键和换行符。空白符有哪些,\s 匹配什么正则表达式描述\s匹配任何空白字符，包括空格、制表符、换页符等。与[ \f\n\r\t\v] 等效。由\s的定义可以看出，\s能匹配空格、换页符(\f)，换行符(\n)、回车(\r)、水平制表符(\t)、垂直制表符(\v)这六种中的任意一个，所以学习正则表达式应该多看看这些字符的定义。转义字符有哪些：转义字符意义ASCII码值（十进制）\a响铃(BEL)007\b退格(BS) ，将当前位置移到前一列008\f换页(FF)，将当前位置移到下页开头012\n换行(LF) ，将当前位置移到下一行开头010\r回车(CR) ，将当前位置移到本行开头013\t水平制表(HT) （跳到下一个TAB位置）009\v垂直制表(VT)011\\代表一个反斜线字符’’\’092\’代表一个单引号（撇号）字符039\”代表一个双引号字符034\?代表一个问号063\0空字符(NULL)000\ddd1到3位八进制数所代表的任意字符三位八进制\xhh1到2位十六进制所代表的任意字符二位十六进制是不是很简单?但是，如果把这个正则表达式的模式用在java程序中，还要做两件事。对java的解释器来说，在反斜线字符(\)前的字符有特殊的含义。在java中，与regex有关的包，并不都能理解和识别反斜线字符(\)，尽管可以试试看。但为避免这一点，即为了让反斜线字符(\)在模式对象中被完全地传递，应该用双反斜线字符(\)。此外圆括号在正则表达中两层含义，如果想让它解释为字面上意思(即圆括号)，也需要在它前面用双反斜线字符(\)。也就是像下面的一样:12&gt; \\(\\d&#123;3&#125;\\)\\s\\d&#123;3&#125;-\\d&#123;4&#125;&gt;现在介绍怎样在java代码中实现刚才所讲的正则表达式。要记住的事，在用正则表达式的包时，在你所定义的类前需要包含该包，也就是这样的一行:12&gt; import java.util.regex.*;&gt;下面的一段代码实现的功能是，从一个文本文件逐行读入，并逐行搜索电话号码数字，一旦找到所匹配的，然后输出在控制台。1234567891011121314151617181920212223242526&gt; import java.io.BufferedReader;&gt; import java.io.FileReader;&gt; import java.io.IOException;&gt; import java.util.regex.Matcher;&gt; import java.util.regex.Pattern;&gt; &gt; public class Example2&gt; &#123;&gt; public static void main(String[] args) throws IOException&gt; &#123;&gt; BufferedReader in;&gt; Pattern pattern = Pattern.compile(&quot;\\(\\d&#123;3&#125;\\)\\s\\d&#123;3&#125;-\\d&#123;4&#125;&quot;);&gt; in = new BufferedReader(new FileReader(&quot;phoneNum.txt&quot;));&gt; String s;&gt; while ((s = in.readLine()) != null)&gt; &#123;&gt; Matcher matcher = pattern.matcher(s);&gt; if (matcher.find())&gt; &#123;&gt; System.out.println(matcher.group());&gt; &#125;&gt; &#125;&gt; in.close();&gt; &#125;&gt; &#125;&gt;phoneNum.txt:1234&gt; (212) 555-1212&gt; 212-555-1212&gt; 212 555 1212&gt;运行结果:12&gt; (212) 555-1212&gt;好久没有碰IO流了，既然这里看到了，那就来复习一下IO流。BufferedReadervoid close()关闭该流并释放与之关联的所有资源。void mark(int readAheadLimit)标记流中的当前位置。boolean markSupported()判断此流是否支持 mark() 操作（它一定支持）。int read()读取单个字符。int read(char[] cbuf, int off, int len)将字符读入数组的某一部分。String readLine()读取一个文本行。boolean ready()判断此流是否已准备好被读取。void reset()将流重置到最新的标记。long skip(long n)跳过字符。本文链接: JAVA 正则表达式 (超详细)]]></content>
      <categories>
        <category>Java</category>
        <category>Java 正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[String tirm()方法去不掉的空格]]></title>
    <url>%2Fblog%2F9712edd%2F</url>
    <content type="text"><![CDATA[需求移除掉下面代码中的空白行。移除每行前面的多余空白符要处理的文本:12345678910111213141516171819202122232425 BufferedReader in; Pattern pattern = Pattern.compile(&quot;//(//d&#123;3&#125;//)//s//d&#123;3&#125;-//d&#123;4&#125;&quot;); in = new BufferedReader(new FileReader(&quot;phone&quot;)); String s; while ((s = in.readLine()) != null) &#123; Matcher matcher = pattern.matcher(s); if (matcher.find()) &#123; System.out.println(matcher.group()); &#125; &#125; in.close();移除空白行:使用正则表达式使用String类的replaceAll()方法可以移除空白行，只要我用正则表达式匹配到这些空白行，然后把这些空白行替换为空字符串就行了。1text = text.replaceAll(&quot;(?m)^\\s*$(\\n|\\r\\n)&quot;, &quot;&quot;);(?m)表示开启多行匹配模式，^匹配行开头,\\s*0个或多个空白符,$匹配行结尾，(\\n|\\r\\n)匹配字符串中的换行符。测试代码如下：1234String text = SysClipboardUtil.getSysClipboardText();System.out.println(&quot;去除无意义空白行后：&quot;);text = text.replaceAll(&quot;(?m)^\\s*$(\\n|\\r\\n)&quot;, &quot;&quot;);System.out.println(text);依赖：SysClipboardUtil.getSysClipboardText();运行结果：123456789101112131415去除无意义空白行后： BufferedReader in; Pattern pattern = Pattern.compile(&quot;//(//d&#123;3&#125;//)//s//d&#123;3&#125;-//d&#123;4&#125;&quot;); in = new BufferedReader(new FileReader(&quot;phone&quot;)); String s; while ((s = in.readLine()) != null) &#123; Matcher matcher = pattern.matcher(s); if (matcher.find()) &#123; System.out.println(matcher.group()); &#125; &#125; in.close();____________________________________好的，第一个需求做到了。移除每行前面的多余空白符String.trim()方法删除不掉该空格符现在text字符串中，每一行的前面有两个空白符:，因为这些空白符在行尾，很自然想到使用text.trim()方法取出掉该空白符，但是奇怪的是根本就去不掉。之所以去不掉是因为这个空格不简单啊，不是普通那种空格，这里称为bug空格。bug空格：普通空格：、可以看到这个bug空格比普通的空格的宽度要宽。不过也不是没有办法。思路1：用该空格自己匹配来自己，进行替换删除不过既然这个bug空格可以复制粘贴，那我就直接粘贴到程序中，用它自己来匹配自己，这样使用text.replaceAll(&quot;[ ]+&quot;,&quot;&quot;)就可以把这个bug空格&quot; &quot;全部替换成空白字符串&quot;&quot;，就相当于删除掉该字符串了。代码如下：12345678910String text = SysClipboardUtil.getSysClipboardText();//删除文本中的空白行text=text.replaceAll("(?m)^\\s*$(\\n|\\r\\n)", "");System.out.println("删除空白行之后的文本:");System.out.println(text);//直接粘贴这个空格到字符组中,text=text.replaceAll("[ ]+", "");System.out.println("_______________________________");System.out.println("去除中文全角空格后:");System.out.println(text);复制需要处理的文本,然后运行上面的代码。运行结果如下。1234567891011121314151617181920212223242526272829删除空白行之后的文本: BufferedReader in; Pattern pattern = Pattern.compile(&quot;//(//d&#123;3&#125;//)//s//d&#123;3&#125;-//d&#123;4&#125;&quot;); in = new BufferedReader(new FileReader(&quot;phone&quot;)); String s; while ((s = in.readLine()) != null) &#123; Matcher matcher = pattern.matcher(s); if (matcher.find()) &#123; System.out.println(matcher.group()); &#125; &#125; in.close();_______________________________去除中文全角空格后:BufferedReader in;Pattern pattern = Pattern.compile(&quot;//(//d&#123;3&#125;//)//s//d&#123;3&#125;-//d&#123;4&#125;&quot;);in = new BufferedReader(new FileReader(&quot;phone&quot;));String s;while ((s = in.readLine()) != null)&#123;Matcher matcher = pattern.matcher(s);if (matcher.find())&#123;System.out.println(matcher.group());&#125;&#125;in.close();可以看到用了这种傻瓜式的操作就可以完成任务了。不过还是有点心有不甘，因为不知道这个bug空格是什么东西，下面来看看这个bug空格到底是什么东西。思路2：转成Unicode码然后查码表看看是什么东西查了一下，其实这个空格叫做中文(全角)空格，我怎么知道的呢。先把这个空格转换成Unicode字符就知道了。代码如下123String chinese_full_width_space=&quot; &quot;;//中文全角空格String urlEncoderUnicode = URLEncoder.encode(chinese_full_width_space,&quot;utf-16be&quot;);//java中的字符都用utf-16be进行编码，所以转码为utf-16be我们就知道了这个奇怪的字符在java里的编码。这样方便后面查找。System.out.println(urlEncoderUnicode);运行结果：1%30%00%30%00转换成平常表示的java中的Unicode编码就是\u3000,然后再到网上查一下看看这个\u3000是什么：嗯，原来这个bug空格叫做中文全角空格好的，既然我们知道了这个奇怪的空格是中文全角空格，也知道对应的Unicode码为\u3000,java中正则表达式支持Unicode码，所以可以使用text=text.replaceAll(&quot;\u3000+&quot;, &quot;&quot;);把所以的中文全角空格替换成空字符，也就是移除掉所有的中文全角空格了。123456789101112 String text = SysClipboardUtil.getSysClipboardText(); //删除文本中的空白行 text=text.replaceAll(&quot;(?m)^\\s*$(\\n|\\r\\n)&quot;, &quot;&quot;); System.out.println(&quot;删除空白行之后的文本:&quot;); System.out.println(text); //直接粘贴这个空格到字符组中,// text=text.replaceAll(&quot;[ ]+&quot;, &quot;&quot;);// 使用Unicode码匹配中文全角空格 text=text.replaceAll(&quot;\u3000+&quot;, &quot;&quot;); System.out.println(&quot;_______________________________&quot;); System.out.println(&quot;去除中文全角空格后:&quot;); System.out.println(text);运行结果：1234567891011121314151617181920212223242526272829删除空白行之后的文本: BufferedReader in; Pattern pattern = Pattern.compile(&quot;//(//d&#123;3&#125;//)//s//d&#123;3&#125;-//d&#123;4&#125;&quot;); in = new BufferedReader(new FileReader(&quot;phone&quot;)); String s; while ((s = in.readLine()) != null) &#123; Matcher matcher = pattern.matcher(s); if (matcher.find()) &#123; System.out.println(matcher.group()); &#125; &#125; in.close();_______________________________去除中文全角空格后:BufferedReader in;Pattern pattern = Pattern.compile(&quot;//(//d&#123;3&#125;//)//s//d&#123;3&#125;-//d&#123;4&#125;&quot;);in = new BufferedReader(new FileReader(&quot;phone&quot;));String s;while ((s = in.readLine()) != null)&#123;Matcher matcher = pattern.matcher(s);if (matcher.find())&#123;System.out.println(matcher.group());&#125;&#125;in.close();启发遇到一个不懂的字符的时候可以先把它转为Unicode码，然再查码表,或者网上查。本文链接: String tirm()方法去不掉的空格]]></content>
      <categories>
        <category>Java</category>
        <category>Java 正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java使用正则表达式是删除空行，空行可能有多个空格]]></title>
    <url>%2Fblog%2F51e02fda%2F</url>
    <content type="text"><![CDATA[1string.replaceAll(&quot;(?m)^\\s*$(\\n|\\r\\n)&quot;, &quot;&quot;);(?m)表示开启多行匹配模式，^是行开始，\\s*代表任意个空格，$代表行结束。所以这句话的意思是:&emsp;&emsp;&emsp;&emsp;所有空行(包括有任意空格的行)都会被替换为空字符串，即空行被从字符串中移除。移除多余的连续空格，只留下一个空格。1string.replaceAll(&quot;[ ]+&quot;, &quot; &quot;);[ ]+表示一个或多个空格，&quot; &quot;表示一个空格。这句话的意思就是把多个空格替换为一个空格。原文:https://blog.csdn.net/kaukiyou/article/details/46829375本文链接: Java使用正则表达式是删除空行，空行可能有多个空格]]></content>
      <categories>
        <category>Java</category>
        <category>Java 正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[String类中的正则表达式]]></title>
    <url>%2Fblog%2F12fb64fe%2F</url>
    <content type="text"><![CDATA[String支持正则表达式是的方法String 有 4 个方法用到了正则表达式 : matches()，split(), replaceFirst(), replaceAll( ),如下表所示。序号方法描述1boolean matches(String regex)告知此字符串是否匹配给定的正则表达式。2String[] split(String regex)根据给定正则表达式的匹配拆分此字符串。3String[] split(String regex, int limit)根据匹配给定的正则表达式来拆分此字符串。4String replaceFirst(String regex, String replacement)使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。5String replaceAll(String regex, String replacement)使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。matches()方法public boolean matches(String regex)告知此字符串是否匹配给定的正则表达式。调用此方法的 str.matches(regex) 形式与以下表达式产生的结果完全相同：&emsp;&emsp;&emsp;&emsp;Pattern.matches(regex, str)参数：&emsp;&emsp;&emsp;&emsp;regex - 用来匹配此字符串的正则表达式返回：&emsp;&emsp;&emsp;&emsp;当且仅当此字符串匹配给定的正则表达式时，返回 true抛出：&emsp;&emsp;&emsp;&emsp;PatternSyntaxException - 如果正则表达式的语法无效实例：1234567public static void main(String[] args)&#123; String text="I keep saying no\n"+ "This can't be the way we're supposed to be"; System.out.println(text.matches(".*saying.*")); System.out.println(text.matches(".*saying.*\n.*"));&#125;运行结果：12falsetrue拓展：点号.能匹配\r\n之外的任意字符你如果奇怪为什么text.matches(&quot;.*saying.*&quot;)不返回true，而是返回flase。那你就误解了点号.的意思了，点号.匹配任意字符是没错，但是这个任意字符不包括换行符\n，回车符\r。所以点号.匹配的是一个除了换行符\n,回车符\r之外的其他字符。实例：1234567891011121314151617181920212223242526272829public static void testMatchersSpecialCharacter()&#123;//字符串中的转义字符有：\b \t \n \f \r \&quot; \&apos; \\ String text; //回车符 text=&quot;I keep saying no\r&quot;; System.out.println(text.matches(&quot;.*saying.*&quot;)); //换行符 text=&quot;I keep saying no\n&quot;; System.out.println(text.matches(&quot;.*saying.*&quot;)); //\b退格符 text=&quot;I keep saying no\b&quot;; System.out.println(text.matches(&quot;.*saying.*&quot;)); //\t水平制表符 text=&quot;I keep saying no\t&quot;; System.out.println(text.matches(&quot;.*saying.*&quot;)); //\f走页符 text=&quot;I keep saying no\f&quot;; System.out.println(text.matches(&quot;.*saying.*&quot;)); //\&quot;双引号 text=&quot;I keep saying no\&quot;&quot;; System.out.println(text.matches(&quot;.*saying.*&quot;)); //\&apos;单引号 text=&quot;I keep saying no\&apos;&quot;; System.out.println(text.matches(&quot;.*saying.*&quot;)); //\\反斜线 text=&quot;I keep saying no\\&quot;; System.out.println(text.matches(&quot;.*saying.*&quot;));&#125;运行结果：12345678falsefalsetruetruetruetruetruetrue从运行结果中看，点号.可以匹配除了\r,\n之外的其他任意转义字符。扯远了，回来继续说String.matchers(regex)方法，源码如下。1234public boolean matches(String regex) &#123; return Pattern.matches(regex, this);&#125;所以前面说，调用此方法的 str.matches(regex) 形式与调用Pattern.matches(regex, str)方法产生的结果完全相同,是因为低层还是调用了Pattern.matches(regex, str)方法实现的，也就少传个参数吧。split()方法看源码：1234public String[] split(String regex) &#123; return split(regex, 0);&#125;可以看到split(regex)方法还是直接调用split(regex, 0);来实现的。##split(String regex, int limit)方法##源码：12345public String[] split(String regex, int limit) &#123; ...... return Pattern.compile(regex).split(this, limit);&#125;可以看到String.split(regex)方法最终调用了Pattern.compile(regex).split(this, limit);方法(这样说有点不准确)，源码太长了，先不看，去看API吧。public String[] split(String regex,int limit)&emsp;&emsp;&emsp;&emsp;&emsp;根据匹配给定的正则表达式来拆分此字符串。从API中看出：返回结果此方法返回一个String数组数组中的内容是，该字符串的子字符串.数组中的子串按什么分割呢？按另一个匹配正则表达式的子串(A)分割。返回的子串的顺序：按子串在要分割子串中的顺序排列如果正则表达式匹配不到任何子串,也就是说找不到作为分割的子串。那就不分割，返回要分割的字符串本身，也就是数组中只有一个元素。limit参数：limit 参数控制正则表达式进行匹配的次数，因此影响所得数组的长度。如果该限制 n 大于 0，则模式将被最多应用 n - 1 次，数组的长度将不会大于 n，而且数组的最后一项将包含所有超出最后匹配的定界符(匹配正则作为分割的子串)的输入。如果 n 为小于0，那么模式将被应用尽可能多的次数，而且返回的数组可以是任何长度。如果 n 为 0，那么模式将被应用尽可能多的次数，返回的数组可以是任何长度，并且结尾空字符串将被丢弃。调用此方法的 str.split(regex, n) 形式与以下表达式产生的结果完全相同：Pattern.compile(regex).split(str, n)例如，字符串 “boo:and:foo” 使用这些参数可生成以下结果：RegexLimit结果:2{ &quot;boo&quot;, &quot;and:foo&quot; }:-2{ &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; }:0{ &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; }o2{ &quot;b&quot;, &quot;o:and:foo&quot; }o-2{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot;, &quot;&quot;, &quot;&quot; }o0{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot; }下面写代码验证上面的结果，分为下面两种情况。分割符不相邻的情况：123456789101112131415161718192021222324252627282930313233public static void testSplitLimitGreaterThan0()&#123; String text=&quot;boo:and:foo&quot;; //n=2,最多分割n-1=1次 String[] arr=text.split(&quot;:&quot;,2); for (String string : arr) &#123; System.out.println(string); &#125; System.out.println(&quot;-------------------&quot;);&#125;public static void testSplitLimitLessThan0()&#123; String text=&quot;boo:and:foo&quot;; //n=2,分割尽可能多次 String[] arr=text.split(&quot;:&quot;,-2); for (String string : arr) &#123; System.out.println(string); &#125; System.out.println(&quot;------------------------------&quot;);&#125;public static void testSplitLimitEqualTo0()&#123; String text=&quot;boo:and:foo&quot;; //n=2,分割尽可能多次 String[] arr=text.split(&quot;:&quot;,0); for (String string : arr) &#123; System.out.println(string); &#125; System.out.println(&quot;------------------------------&quot;);&#125;运行结果：1234567891011booand:foo-------------------booandfoo------------------------------booandfoo------------------------------实例1分隔符相邻的情况:o:12345678910111213141516171819202122232425262728293031323334public static void testSplitLimitGreaterThan0Adjacent()&#123; String text=&quot;boo:and:foo&quot;; //n=2,最多分割n-1=1次 String[] arr=text.split(&quot;o&quot;,2); for (int i=0;i&lt;arr.length;i++) &#123; System.out.println(i+&quot;--&gt;&quot;+arr[i]); &#125; System.out.println(&quot;-------------------&quot;);&#125;public static void testSplitLimitLessThan0Adjacent()&#123; String text=&quot;boo:and:foo&quot;; //n=2,分割尽可能多次 String[] arr=text.split(&quot;o&quot;,-2); for (int i=0;i&lt;arr.length;i++) &#123; System.out.println(i+&quot;--&gt;&quot;+arr[i]); &#125; System.out.println(&quot;------------------------------&quot;);&#125;public static void testSplitLimitEqualTo0Adjacent()&#123; String text=&quot;boo:and:foo&quot;; //n=2,分割尽可能多次 String[] arr=text.split(&quot;o&quot;,0); for (int i=0;i&lt;arr.length;i++) &#123; System.out.println(i+&quot;--&gt;&quot;+arr[i]); &#125; System.out.println(&quot;------------------------------&quot;);&#125;运行结果：123456789101112130--&gt;b1--&gt;o:and:foo-------------------0--&gt;b1--&gt;2--&gt;:and:f3--&gt;4--&gt;------------------------------0--&gt;b1--&gt;2--&gt;:and:f------------------------------分析，因为第一个limit参数n=2,最多分割n-1=2-1=1次，所以遇到第一个o分割成：b,o:and:foo就停止分割了。返回数组为{“b”,”o:and:foo”}第二个方法limit参数是n=-2,小于0，将尽可能多的分割下去。“boo:and:foo”中遇到第一个o的时候，分割为b和o:and:foo。此时结果为{&quot;b&quot;}。然后接着在后面的子串o:and:foo继续匹配分割，匹配到第二个o的时候o:and:foo,由于前面没有子串，所以用空字符串&quot;&quot;代替,也就是分割为&quot;&quot;和:and:foo这两个字符串。此时结果为{&quot;b&quot;,&quot;&quot;}。然后在后面的子串:and:foo中继续匹配分割，匹配到o,”&#58;and&#58;foo”,然后分割为”:and:f“,和o。此时结果为{&quot;b&quot;,&quot;&quot;,&quot;:and:f&quot;}.然后继续在剩下的子串”o“中匹配,正则表达式o,匹配到o,把它分割为“”和“”。此时没有待匹配的子串了，结束匹配，所以结果为{&quot;b&quot;,&quot;&quot;,&quot;:and:f&quot;,&quot;&quot;,&quot;&quot;}。第三个方法，limit参数n=0,尽可能多的分割下去，前面三步和上面的三步一样，但是到最后一步的时候不一样。在剩下的子串”o“中匹配,正则表达式o,匹配到o,把它分割为“”和“”，此时没有待匹配的子串了，结束匹配。因为这是最后一次分割，最后分割的到的这两个字符串是空字符串，就把这两个空字符串丢弃,而不是放入数组中。，所以结果为{&quot;b&quot;,&quot;&quot;,&quot;:and:f&quot;}。小结：如果作为分割的子串相邻，就会生成空字符串。例如上面的boo:and,如果用o分割，就会在第二个o匹配的时候，因为o:and中分割点o前面没有子串，所以分割出空字符串&quot;&quot;,和&quot;:and:&quot;split(String regex, int limit)方法用法区别在limit的设置上如果limit&gt;0，则最多分割limit-1次如果limit&lt;0，则尽可能的分割下去，如果结尾的子串正好匹配正则表达式，作为分割符，这样就会被分割成多个空字符串，这些无意义的空字符串同样会放入到数组中返回。如果limit=0，则尽可能的分割下去，如果结尾的子串正好匹配正则表达式，作为分割符，这样会分割为空字符串，对于这些结尾生成的空字符串，就会丢弃掉，不放入数组中返回。我们可以夸张一点，把”boo:and:foo“改成boo:and:fooooo看看你运行结果就可以很清楚的看到limit&lt;0和limit=0的区别,代码就不贴了，运行结果如下：123456789101112130--&gt;b1--&gt;2--&gt;:and:f3--&gt;4--&gt;5--&gt;6--&gt;7--&gt;------------------------------0--&gt;b1--&gt;2--&gt;:and:f------------------------------所以平常使用的时候为了不分割到空字符串，还是设置limit=0比较好，可以就是直接调用String.split(regex)就行了。replaceFirst()方法String replaceFirst(String regex, String replacement)&emsp;&emsp;&emsp;&emsp;使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。 调用此方法的 str.replaceFirst(regex, repl) 形式与以下表达式产生的结果完全相同：&emsp;&emsp;&emsp;&emsp;Pattern.compile(regex).matcher(str).replaceFirst(repl)源码如下：1234public String replaceFirst(String regex, String replacement) &#123; return Pattern.compile(regex).matcher(this).replaceFirst(replacement);&#125;这个方法简直人如其名，我不知道该怎么详细些了。实例12String text="aaa:hahaha...";System.out.println(text.replaceFirst("aaa", "I am groot"));运行结果：1I am groot:hahaha...replaceAll()方法public String replaceAll(String regex,String replacement)使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。调用此方法的 str.replaceAll(regex, repl) 形式与以下表达式产生的结果完全相同： &emsp;&emsp;&emsp;&emsp;Pattern.compile(regex).matcher(str).replaceAll(repl)源码：1234public String replaceAll(String regex, String replacement) &#123; return Pattern.compile(regex).matcher(this).replaceAll(replacement);&#125;实例123String text="A:你好\nGtoot:_\nA:额，听不懂\nGroot:_\nA:。。。";text=text.replaceAll("A", "Tony Stark");System.out.println(text.replaceAll("_", "I am groot"));运行结果：12345Tony Stark:你好Gtoot:I am grootTony Stark:额，听不懂Groot:I am grootTony Stark:。。。本文链接: String类中的正则表达式]]></content>
      <categories>
        <category>Java</category>
        <category>Java 正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java正则表达式]]></title>
    <url>%2Fblog%2F4ea1809c%2F</url>
    <content type="text"><![CDATA[正则表达式定义了字符串的模式。正则表达式可以用来搜索、编辑或处理文本。正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。一些正则表达式的实例及描述Java 正则表达式和 Perl 的是最为相似的。一个字符串其实就是一个简单的正则表达式，例如 Hello World 正则表达式匹配 “Hello World“ 字符串。.（点号）也是一个正则表达式，它匹配任何一个字符如：”a“ 或 “1“。下表列出了一些正则表达式的实例及描述：序号正则表达式描述1this is text匹配字符串 “this is text“，字符串只能匹配它自己，如果有任何一个字符不匹配都会失败，例如不能匹配这个中间有多个空白符的情况字符串”this&emsp;&emsp;&emsp;&emsp;is&emsp;&emsp;&emsp;&emsp; text”2this\s+is\s+text注意字符串中的 \s+。匹配单词 “this“ 之后，然后后面的 \s+ 可以匹配多个空格，之后匹配 is字符串，再之后 \s+ 匹配多个空格然后再跟上 text 字符串。可以匹配这个实例：this is text，也可以匹配字符串”this&emsp;&emsp;&emsp;&emsp;is&emsp;&emsp;&emsp;&emsp; text”3^\d+(\.\d+)?^ 定义了该字符串以什么开始\d+匹配一个或多个数字? 设置括号内的选项是可选的(可以匹配一次或者多次)\.匹配 “.“可以匹配的实例：”5“, “1.5“ 和 “2.21“。正则表达式语法在其他语言中，\\ 表示：我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。在 Java 中，\\表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。所以，在其他的语言中（如Perl），一个反斜杠 \就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个\\代表其他语言中的一个 \，这也就是为什么表示一位数字的正则表达式是\\d，而表示一个普通的反斜杠是\\\\。正则表达式的特殊字符字符序列如下匹配位置序号字符描述1^匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与”\n“或”\r“之后的位置匹配。2$匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与”\n“或”\r“之前的位置匹配。3\b匹配一个字边界，即字与空格间的位置。例如，”er\b“匹配”never“中的”er“，但不匹配”verb“中的”er“。匹配单个字符序号匹配单个字符描述1.匹配除”\r\n“之外的任何单个字符。若要匹配包括”\r\n“在内的任意字符，请使用诸如”[\s\S]”之类的模式。2[xyz]字符集。匹配括号里包含的任意一个字符。例如，”[abc]”匹配”plain“中的”a“。3[^xyz]反向字符集。匹配括号里未包含的任何一个字符。例如，”[^abc]“匹配”plain“中”p“，”l“，”i“，”n“，但不会匹配a4[a-z]范围字符集。匹配指定范围内的任何一个字符。例如，”[a-z]“匹配”a“到”z“范围内的任何一个小写字母。5[^a-z]反向范围字符集。匹配不在指定的范围内的任何一个字符。例如，”[^a-z]“匹配任何不在”a“到”z“范围内的任何字符。量词序号量词描述1?匹配前面的子符或子表达1次或者0次，例如 zo?匹配z或者zo。? 等效于 {0,1}。2*匹配前面的字符或子表达式0次或者多次。例如，zo* 匹配”z“,”zoo“,”zooo“,...。* 等效于 {0,}。3+匹配前面的字符或子表达式1次或多次。例如，”zo+“与”zo“和”zoo“匹配，但与”z“不匹配。+等效于 {1,}。4{n}n 是非负整数。正好匹配 n 次。例如，”o{2}“与”Bob“中的”o“不匹配，但与”food“中的两个”o“匹配。5{n,}n 是非负整数。至少匹配 n 次。例如，”o{2,}“不匹配”Bob“中的”o“，而匹配”foooood“中的所有 o。”o{1,}”等效于”o+“。”o{0,}“等效于”o*“。6{n,m}m 和 n 是非负整数，其中 n &lt;= m。匹配至少 n 次，至多 m 次。例如，”o{1,3}“匹配”fooooood“中的头三个 o。’o{0,1}‘ 等效于 ‘o?‘。注意：您不能将空格插入逗号和数字之间。7?当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是”非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo“中，”o+?“只匹配单个”o“，而”o+”匹配所有”o“。懒惰匹配参考：http://deerchao.net/tutorials/regex/regex.htm解释一下上表的最后一个?的作用，这个?在上面其他量词后面，让原来的量词从尽可能匹配更多的字符，编程尽可能匹配更少的字符。也就是从贪婪的编程懒惰的。当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。所以，在上面的量词后面都加上问号?，就可以懒惰匹配量词表，如下所示。懒惰匹配量词说明*?重复任意次，但尽可能少重复+?重复1次或更多次，但尽可能少重复??重复0次或1次，但尽可能少重复{n,m}?重复n到m次，但尽可能少重复{n,}?重复n次以上，但尽可能少重复反向引用序号反向引用描述1\num匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用。例如，”(.)\1“匹配两个连续的相同字符。”(a).+\1“匹配axa,abbba等等2\n标识一个八进制转义码或反向引用。如果 \n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n是八进制转义码。转义字符字符组简写形式序号字符组简写形式描述1\d数字字符匹配。等效于 [0-9]。2\D非数字字符匹配。等效于 [^0-9]。3\s匹配任何空白字符，包括空格、制表符、换页符等。与[ \f\n\r\t\v] 等效。4\S匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。5\w匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]“等效。6\W与任何非单词字符匹配。与”[^A-Za-z0-9_]“等效。不可见字符序号转义字符描述1\将下一字符标记为特殊字符、文本、向引用或反八进制转义符。例如，”n“匹配字符”n“,而”\n“匹配换行符。序列”\\\\“匹配”\\“，”\\(“匹配”(“。2\b匹配一个字边界，即字与空格间的位置。例如，”er\b“匹配”never“中的”er“，但不匹配”verb“中的”er“。3\B非字边界匹配。”er\B“匹配”verb“中的”er“，但不匹配”never“中的”er“。10\t制表符匹配。与 \x09 和 \cI 等效。11\v垂直制表符匹配。与 \x0b 和 \cK 等效。12\r匹配一个回车符。等效于 \x0d 和 \cM。13\n换行符匹配。等效于 \x0a 和 \cJ。14\f换页符匹配。等效于 \x0c 和 \cL。15\cx匹配 x 指示的控制字符。例如，\cM 匹配Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c“字符本身。进制相关序号带进制的转义符描述1\xn匹配 n，此处的 n 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，”\x41“匹配”A“。”\x041“与”\x04“&amp;“1“等效。允许在正则表达式中使用 ASCII 代码。2\n标识一个八进制转义码或反向引用。如果 \n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n 是八进制转义码。3\un匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。例如，\u00A9 匹配版权符号 (©)。java 使用正则表达式步骤参考:https://www.cnblogs.com/haodawang/p/5967219.htmljava的regex库常用类java里提供了一个java.util.regex库，方便于我们在java里操作正则表达式，或者用它来匹配字符串。常用类：Pattern和Matcher其中比较常用的类有 Pattern 和 Matcher ,Pattern是一个编译好的正则表达式，而Mather是一个正则表达式适配器，Mather的功能很强大，所以我们一般用pattern 来获取一个Matcher对象，然后用Matcher来操作正则表达式。Pattern 类和Matcher 类的关系首先一个Pattern实例订制了一个所用语法与PERL的类似的正则表达式经编译后的模式，然后一个Matcher实例在这个给定的Pattern实例的模式控制下进行字符串的匹配工作。PatternSyntaxException 类PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。通常使用步骤创建Pattern对象创建pattern的对象是很简单的，但是由于pattern的构造方法是用private声明的，所以我们仅能通过工厂模式的compile()方法来返回一个Pattern的对象,compile可以接收一个正则表达式作为参数。1Pattern pattern = Pattern.compile(&quot;[abc]&quot;);创建Matcher对象接下来我们创建一个Matcher对象。Matcher的构造方法也是一个private方法，但是我们可以通过Pattern的Matcher方法来返回一个Matcher对象。1Matcher matcher = pattern.matcher(&quot;hello abc&quot;);这里matcher可以接收一个字符串作为参数，准确的说这里所接收的参数类型是CharSequences接口类型的参数，String、StringBuffer、StringBuilder还有CharBuffer都实现了CharSequence接口，因此这四种类型的对象都可以传入。简便用法与此同时Pattern还提供了一个matches 静态方法(Pattern.matches(regex, input))，它允许我们传入一个String类型的正则表达式和一个String类型的需要匹配的字符串，并返回一个boolean类型的值，这个方法的好处在于我们可以不用创建pattern对象和matcher对象就可以知道所传入的正则表达式能不能匹配所传入的字符串。####实例####使用了正则表达式 .*groot.*判断字符串中是否包了 groot 这个子串：123456789101112import java.util.regex.*;class RegexExample1&#123; public static void main(String args[]) &#123; String content = "I am groot"; String pattern = ".*groot.*"; boolean isMatch = Pattern.matches(pattern, content); System.out.println("字符串中是否包含了 'groot' 子字符串? " + isMatch); &#125;&#125;实例输出结果为：1字符串中是否包含了 &apos;groot&apos; 子字符串? true创建Matcher类对象后就可使用Matcher类许多强大的方法了。Matcher 类的主要方法介绍常用方法说到Matcher,这个东西就很强大了，我们比较常用的方法有:find();group();(1)先来说一下find()和group这两个方法。find有点像一个迭代器，它能通过正则表达式向前迭代。而group()方法返回0号分组，也就是整个正则表达式匹配的文本。下来看一个例子1234567891011public static void testFindGroup()&#123; Pattern pattern = Pattern.compile("\\d+"); Matcher matcher = pattern.matcher("aaa 111 bbbb 222 333 ccc"); //find向前迭代,查找匹配的字符串 while(matcher.find()) &#123; //获取匹配正则表达式的子串 System.out.println(matcher.group()); &#125;&#125;运行结果：123111222333可以看到这和Matcher.find()和Scanner.hasnext()方法类似，而Matcher.group()和Scanner.next()方法类似。捕获组捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。例如，正则表达式 (dog) 创建了单一分组，组里包含”d”，”o”，和”g”。捕获组是通过从左至右计算其开括号来编号。例如，在表达式((A)(B(C))），有四个这样的组：((A)(B(C)))(A)(B(C))(C)可以通过调用 matcher 对象的 groupCount()方法来查看表达式有多少个分组。groupCount() 方法返回一个 int 值，表示matcher对象当前有多个捕获组。还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。序号方法描述1public int groupCount()返回此匹配器模式中的捕获组数。根据惯例，零组表示整个模式。它不包括在此计数中。2String group()返回0号捕获组，也就是整个表达式匹配的字符串3String group(int group)返回指定捕获组捕获到的子串捕获组实例查看正则表达式中有多到个捕获组int groupCount()方法：返回此匹配器模式中的捕获组数.不包括0捕获组123456public static void testGroupCount()&#123; Pattern pattern = Pattern.compile("(\\w+)(\\s+)([0-9]+)"); Matcher matcher = pattern.matcher("aaa 111 bbbb 222 333 ccc"); System.out.println(pattern.toString()+"这个正则表达式捕获组数目:"+matcher.groupCount());&#125;运行结果：1(\w+)(\s+)([0-9]+)这个正则表达式捕获组数目:3捕获方法group()和group(int group)实例下面的例子说明如何从一个给定的字符串中捕获数字串：123456789101112131415161718192021222324252627282930package java1.regex.test;import java.util.regex.Matcher;import java.util.regex.Pattern;public class RegexMatches&#123; public static void main(String args[]) &#123; // 按指定模式在字符串查找 String line = &quot;I hope that 2018 is also a year full of hope.&quot;; String pattern = &quot;(\\D*)(\\d+)(.*)&quot;; // 创建 Pattern 对象 Pattern r = Pattern.compile(pattern); // 现在创建 matcher 对象 Matcher m = r.matcher(line); if (m.find()) &#123; //默认匹配捕获整个表达式-调用m.group(0); System.out.println(m.group()); System.out.println(&quot;第0个分组: &quot; + m.group(0)); System.out.println(&quot;第1个分组: &quot; + m.group(1)); System.out.println(&quot;第2个分组: &quot; + m.group(2)); System.out.println(&quot;第3个分组: &quot; + m.group(3)); &#125; else &#123; System.out.println(&quot;NO MATCH&quot;); &#125; &#125;&#125;以上实例编译运行结果如下：1234第0个分组: I hope that 2018 is also a year full of hope.第1个分组: I hope that 第2个分组: 2018第3个分组: is also a year full of hope.这里要注意的是第0个分组捕获的是整个正则表达式匹配到的字符串，而子字符串的捕获是从第1个分组开始的。使用无参的捕获函数group()默认捕获0号分组，看源码就知道了：123public String group() &#123; return group(0);&#125;索引方法索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：序号索引方法描述1public int start()返回匹配子序列在原序列的起始下标2public int start(int group)返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引3public int end()返回匹配子序列在原序列的结束下标4public int end(int group)返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏移量。start 和 end 方法start()是返回匹配成功的子串的第一个字母的索引而end()是返回子串最后一个索引的位置+1。123456789public static void testStartEnd1()&#123; String input = "hello_World"; Matcher matcher = Pattern.compile("\\w+_").matcher(input); matcher.find(); System.out.println(input.charAt(matcher.start())); System.out.println(input.charAt(matcher.end())); System.out.println(input.charAt(matcher.end()-1));&#125;运行结果：123hW_从运行中可以看到，end方法返回的是最后匹配的字符_后面的字符W，而不是该字符_本身。实例：统计一个单词出现的次数下面统计单词 “groot“ 在输入字符串中出现的次数123456789101112131415161718192021public static void testStartEnd()&#123; final String regex = "\\bgroot\\b"; final String text = "I am groot!I am groot!I am groot!I am groot!!!";// 编译表示的正则表达式 Pattern p = Pattern.compile(regex);// 获取 matcher 对象 Matcher m = p.matcher(text); int count = 0;// boolean find()// 尝试查找与该模式匹配的输入序列的下一个子序列。// 尝试查找与正则表达式匹配的下一个字序列 while (m.find()) &#123; count++; System.out.println("子序列起始下标:--&gt;" + m.start()); System.out.println("成功匹配子序列:" + m.group()); System.out.println("子序列结束下标:&lt;--" + m.end()); &#125; System.out.println("总共匹配次数:" + count);&#125;以上实例编译运行结果如下：12345678910111213子序列起始下标:--&gt;5成功匹配子序列:groot子序列结束下标:&lt;--10子序列起始下标:--&gt;16成功匹配子序列:groot子序列结束下标:&lt;--21子序列起始下标:--&gt;27成功匹配子序列:groot子序列结束下标:&lt;--32子序列起始下标:--&gt;38成功匹配子序列:groot子序列结束下标:&lt;--43总共匹配次数:4这个例子中使用单词边界，以确保匹配的字符序列是 “g“ ,”r“,”o“,”o“,”t“ 而不会匹配到一个较长的字符串的子串(如 gggroottttt)。而统计功能是我们通过计数器count实现的。小结出处：https://zhidao.baidu.com/question/443782938.htmlMathcer.start()/ Matcher.end()/ Matcher.group() 这三个方法必须是在有字符匹配到的条件下才能够调用，否则会报错。start()返回匹配到的子串在字符串中的索引位置end()返回匹配到的子串的最后一个字符在字符串中的索引位置+1group()返回匹配到的子字符串。start(),end(),group()均有一个重载方法它们是start(int i),end(int i),group(int i)专用于分组操作,Mathcer类还有一个groupCount()用于返回有多少组。判断方法判断方法用来检查字符串并返回一个布尔值，表示是否匹配该正则表达式：序号判断方法描述1public boolean matches()只有整个字符序列完全匹配成功才返回true2public boolean lookingAt()总是从第一个字符进行匹配,匹配成功了不再继续匹配，匹配失败了,也不继续匹配。3public boolean find()尝试查找与该模式匹配的输入序列的下一个子序列。4public boolean find(int start）重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。java matcher 中find,matches,lookingAt三个方法的区别出处：https://www.cnblogs.com/wangjunxiao/p/7115559.html在Matcher类中有find都是匹配目标的方法，但容易混淆，整理它们的区别如下：matches():整个匹配，matches 要求整个序列，只有整个字符序列完全匹配成功，才返回True，否则返回False。但如果前部分匹配成功，将移动下次匹配的位置。lookingAt():部分匹配，总是从第一个字符进行匹配,匹配成功了不再继续匹配，匹配失败了,也不继续匹配。find():部分匹配，从当前位置开始匹配，找到一个匹配的子串，将移动下次匹配的位置。reset():给当前的Matcher对象设置新的位置，位置是就该方法的参数；如果不给参数，reset会把Matcher设到当前字符串的开始处。验证代码如下：1234567891011121314151617181920212223242526272829public static void testFindLookingAtMatcher()&#123; Pattern pattern = Pattern.compile("\\d&#123;3,5&#125;"); String charSequence = "123-34345-234-00"; Matcher matcher = pattern.matcher(charSequence); System.out.println("待匹配字符序列:"+charSequence); System.out.println("正则表达式:"+pattern.toString()); //虽然匹配失败，但由于charSequence里面的"123"和pattern是匹配的,所以下次的匹配从位置4开始 System.out.println("matcher.matches()返回:"+matcher.matches()); //查找匹配位置 matcher.find(); System.out.println("当前位置:"+matcher.start()); //使用reset方法重置匹配位置 matcher.reset(); //第一次find匹配以及匹配的目标和匹配的起始位置 System.out.println("matcher.find()返回:"+matcher.find()); System.out.println("捕获所有匹配的到子串:"+matcher.group()+",位置:"+matcher.start()); //第二次find匹配以及匹配的目标和匹配的起始位置 System.out.println("matcher.find()返回:"+matcher.find()); System.out.println("捕获到子串:"+matcher.group()+",位置:"+matcher.start()); System.out.println("#####################################################"); //第一次lookingAt匹配以及匹配的目标和匹配的起始位置 System.out.println("matcher.lookingAt()返回:"+matcher.lookingAt()); System.out.println("捕获所有匹配的子串:"+matcher.group()+",位置:"+matcher.start()); //第二次lookingAt匹配以及匹配的目标和匹配的起始位置 System.out.println("matcher.lookingAt()返回:"+matcher.lookingAt()); System.out.println("捕获所有匹配的子串:"+matcher.group()+",位置:"+matcher.start());&#125;测试结果：12345678910111213待匹配字符序列:123-34345-234-00正则表达式:\d&#123;3,5&#125;matcher.matches()返回:false当前位置:4matcher.find()返回:true捕获所有匹配的到子串:123,位置:0matcher.find()返回:true捕获到子串:34345,位置:4#####################################################matcher.lookingAt()返回:true捕获所有匹配的子串:123,位置:0matcher.lookingAt()返回:true捕获所有匹配的子串:123,位置:0替换方法api看的我有点晕头转向，个人总结如下。|序号|方法|描述||-|-|-||1|public String replaceAll(String replacement)|用replacement替换正则表达式匹配到的所有子串||2|public String replaceFirst(String replacement)|用replacement替换正则表达式匹配到的第一个子串||3|public Matcher appendReplacement(StringBuffer sb, String replacement)|实现非终端添加和替换步骤。||4|public StringBuffer appendTail(StringBuffer sb)|实现终端添加和替换步骤。||5|public static String quoteReplacement(String s)|返回指定字符串的字面替换字符串。这个方法返回一个字符串，就像传递给Matcher类的appendReplacement 方法一个字面字符串一样工作。|replaceFirst 和 replaceAll 方法replaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配的子串，replaceAll 替换所有匹配的子串。看下面的例子：1234567891011public static void testReplaceAll()&#123; String regex = "dog"; String input = "The dog says meow. " + "All dogs say meow."; String replace = "cat"; Pattern p = Pattern.compile(regex);// get a matcher object Matcher m = p.matcher(input); input = m.replaceAll(replace); System.out.println(input);&#125;运行结果：1The cat says meow. All cats say meow.appendReplacement 和 appendTail 方法参考：https://blog.csdn.net/key_xyes/article/details/78705181appendReplacement(sb,replacement)方法中：sb是一个StringBuffer，replacement用于替换的字符串，这个方法会把匹配到的子串替换为replacement，并且把从上次替换的位置到这次替换位置之间的字符串也拿到，然后，加上这次替换后的结果一起追加到StringBuffer里（假如这次替换是第一次替换，那就是只追加替换后的字符串啦）。1public Matcher appendReplacement(StringBuffer sb,String replacement)appendTail(StringBuffer sb)方法:这个方法是把原来文本中最后一次匹配到的内容之后的字符串追加到StringBuffer中。两个方法一起使用就可以达到所有替换或者替换第一个：全部替换：123456789//find()方法向前查找匹配的子串while(m.find())&#123; //获取位置在匹配子串之前的文本strbefore，获取匹配的子串strmacther，然后把匹配的子串strmacther替换为replacement， //然后(strbefore+replacement)追加到StringBuffer中 m.appendReplacement(sb,replacement);&#125;//把文本中没有匹配的剩下的文本也加入到StringBuffer中m.appendTail(sb);替换第一个：12345if (matcher.find())&#123; matcher.appendReplacement(sb, replacement);&#125;matcher.appendTail(sb);实例1：全部替换1234567891011121314151617181920212223public static void testAppendReplace_Tail()&#123; Pattern p = Pattern.compile("a"); String text="before_ONEa_TWOa_THREEa_End"; Matcher m = p.matcher(text); StringBuffer sb = new StringBuffer(); while (m.find()) &#123;// 获取位置在匹配子串之前的文本strbefore，获取匹配的子串strmacther，然后把匹配的子串strmacther替换为replacement，// 然后之前的文本和替换文本一起(strbefore+replacement)追加到StringBuffer中 System.out.println("替换之前StringBuffer中的内容--&gt;" + sb); m.appendReplacement(sb, "A"); System.out.println("替换之后StringBuffer中的内容--&gt;" + sb); System.out.println("---------------------------------------------"); &#125; //原来文本中把上次匹配结束位置之后剩下的字符串也写到StringBuffer中 System.out.println("#######################################"); System.out.println("替换之前StringBuffer中的内容--&gt;" + sb); m.appendTail(sb); System.out.println("替换之后StringBuffer中的内容--&gt;" + sb); System.out.println("替换之前的文本:"+text); System.out.println("全部替换之后的:" + sb);&#125;运行结果：1234567891011121314替换之前StringBuffer中的内容--&gt;替换之后StringBuffer中的内容--&gt;before_ONEA---------------------------------------------替换之前StringBuffer中的内容--&gt;before_ONEA替换之后StringBuffer中的内容--&gt;before_ONEA_TWOA---------------------------------------------替换之前StringBuffer中的内容--&gt;before_ONEA_TWOA替换之后StringBuffer中的内容--&gt;before_ONEA_TWOA_THREEA---------------------------------------------#######################################替换之前StringBuffer中的内容--&gt;before_ONEA_TWOA_THREEA替换之后StringBuffer中的内容--&gt;before_ONEA_TWOA_THREEA_End替换之前的文本:before_ONEa_TWOa_THREEa_End全部替换之后的:before_ONEA_TWOA_THREEA_End分析：while语句：第一次替换:sb中是没有内容的，find()方法匹配到before_ONEa_TWOa_THREEa_End,这个时候，获取匹配文本前面的字符串before_NO，然后把匹配文本a替换成A,前面的字符串before_NO和替换文本A组成before_NOA追加到StringBuffer中。第二次替换:sb中的内容为before_NOA,find()方法匹配到before_ONEa_TWOa_THREEa_End，同样获取前面没有匹配的文本_TWO(做法是获取从find()方法上次结束的位置,到这次find()方法开始位置之间的字符串：before_ONEa_TWOa_THREEa_End),然后把a替换成A,这样组成新的文本呢_TWOA,追加到StringBuffer中，这样就形成before_NOA_TWOAfind()方法会一直向前匹配子串，然后替换,如此类推，直到所有的替换完成因为原来文本中还有剩下的没有匹配的内容，before_ONEa_TWOa_THREEa_End，使用m.appendTail(sb);把这剩下的内容_End也追加到StringBuffer中，这样就实现全部替换了。实例2：替换第一次1234567891011121314151617181920212223public static void testAppendReplace_TailFrist()&#123; Pattern p = Pattern.compile("a"); String text="before_ONEa_TWOa_THREEa_End"; Matcher m = p.matcher(text); StringBuffer sb = new StringBuffer(); if(m.find()) &#123;// 获取匹配子串之前的文本strbefore，获取匹配的子串strmacther，然后把匹配的子串strmacther替换为replacement，// 然后(strbefore+replacement)追加到StringBuffer中 System.out.println("替换之前StringBuffer中的内容--&gt;" + sb); m.appendReplacement(sb, "A"); System.out.println("替换之后StringBuffer中的内容--&gt;" + sb); System.out.println("---------------------------------------------"); &#125; //原来文本中把上次匹配结束位置之后剩下的字符串也写到StringBuffer中 System.out.println("#######################################"); System.out.println("上述替换完成后StringBuffer中的内容------&gt;" + sb); m.appendTail(sb); System.out.println("加上文本中剩余子串后StringBuffer中的内容--&gt;" + sb); System.out.println("替换之前的文本:"+text); System.out.println("全部替换之后的:" + sb);&#125;运行结果：12345678替换之前StringBuffer中的内容--&gt;替换之后StringBuffer中的内容--&gt;before_ONEA---------------------------------------------#######################################上述替换完成后StringBuffer中的内容------&gt;before_ONEA加上文本中剩余子串后StringBuffer中的内容--&gt;before_ONEA_TWOa_THREEa_End替换之前的文本:before_ONEa_TWOa_THREEa_End全部替换之后的:before_ONEA_TWOa_THREEa_End这里我们只替换了第一次，before_ONEa_TWOa_THREEa_End,然后StringBuffer中处理完毕的文本为before_ONEA，未处理的文本为_TWOa_THREEa_End，最后调用m.appendTail(sb);把未处理的文本也追加入到StringBuffer中，处理完毕的文本为:before_ONEA_TWOa_THREEa_End小结：find()方法匹配子串的时候都会记下本次成功匹配子串的开始位置和结束位置appendReplacement(sb,replacement)方法先获取所有从上次结束位置，到本次结束位置的所有字符串，然后替换其中匹配的部分，最后追加到sb中。appendReplacement(sb)方法把结束位置到文本结尾的所有字符追加到sb中。使用appendReplace()和appendTail()方法可以更加灵活的进行替换操作，注意要结合find()方法使用。本文链接: Java正则表达式]]></content>
      <categories>
        <category>Java</category>
        <category>Java 正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java正则表达式应用]]></title>
    <url>%2Fblog%2Faa025735%2F</url>
    <content type="text"><![CDATA[参考：https://www.cnblogs.com/lzq198754/p/5780340.html匹配验证-验证Email是否正确12345678910111213141516public static void testEmail() &#123; // 要验证的字符串 String str = "service@xsoftlab.net"; // 邮箱验证规则// String regEx = "[a-zA-Z_]&#123;1,&#125;[0-9]&#123;0,&#125;@(([a-zA-z0-9]-*)&#123;1,&#125;\\.)&#123;1,3&#125;[a-zA-z\\-]&#123;1,&#125;"; String regEx = "[a-zA-Z_]+[0-9]*@(\\w*\\.)&#123;1,3&#125;[a-zA-z\\-]&#123;1,&#125;"; // 编译正则表达式 Pattern pattern = Pattern.compile(regEx); // 忽略大小写的写法 // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE); Matcher matcher = pattern.matcher(str); // 字符串是否与正则表达式相匹配 boolean rs = matcher.matches(); System.out.println(rs);&#125;运行结果：1true在字符串中查询字符或者字符串123456789101112131415public static void testFind()&#123; // 要验证的字符串 String str = &quot;baike.xsoftlab.net&quot;; // 正则表达式规则 String regEx = &quot;Baike.*&quot;; // 编译正则表达式// Pattern pattern = Pattern.compile(regEx); // 编译正则表达式忽略大小写的 Pattern pattern = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE); Matcher matcher = pattern.matcher(str); // 查找字符串中是否有匹配正则表达式的字符/字符串 boolean rs = matcher.find(); System.out.println(rs);&#125;运行结果1true3常用正则表达式规则正则表达式语法一个或多个汉字^[\u0391-\uFFE5]+$邮政编码^[1-9]\d{5}$QQ号码^[1-9]\d{4,10}$邮箱^[a-zA-Z_]{1,}[0-9]{0,}@(([a-zA-z0-9]-*){1,}.){1,3}[a-zA-z-]{1,}$用户名（字母开头 + 数字/字母/下划线）^[A-Za-z][A-Za-z1-9_-]+$手机号码^1[3&#124;4&#124;5&#124;8][0-9]\d{8}$URL^((http&#124;https)://)?([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$18位身份证号^(\d{6})(18&#124;19&#124;20)?(\d{2})([01]\d)([0123]\d)(\d{3})(\d&#124;X&#124;x)?$表格中如何加入竖线JAVA正则表达式练习题（IP地址排序、检验email地址）原文：https://blog.csdn.net/sinat_36713319/article/details/53463120删除重复字符1、需求： 将“我我我、、、我我、、我要、我要要、、、要要要、、要要、、学学学、、、、学学编、、、学编编编、、编编编程、、程程”还原成：我要学编程12345678public static void testRaplaceDuplicateWord()&#123; String temp = "我我我、、、我我、、我要、要要、、、要要要、、要要、、学学学、、、、学学编、、、编编编、、编编编程、、程程"; temp = temp.replaceAll("(、+)", ""); System.out.println(temp); temp = temp.replaceAll("(.)\\1+", "$1"); System.out.print(temp);&#125;来解释一下这个(.)\\1+正则表达还是的意思，(.):捕获一个任意字符\1反向引用,表示前面捕获的字符+表示前面的字符出现1此或多次这句话的意思就是,匹配两个或者两个以上的重复的字符然后$1表示第一个捕获组中的内容，也就是捕获到的这个字符。所以temp.replaceAll(&quot;(.)\\1+&quot;, &quot;$1&quot;);这句话的意思就是，把temp字符串中两个或者两个以上的重复字符替换成该字符本身，换句话说就是删除所有重复到的字符。对IP地址进行排序123456789101112131415161718192021222324public static void sortIPAddress()&#123; String temp = &quot;192.168.1.200 10.10.10.10 10.10.10.11 11.10.10.10 3.3.50.3 127.0.0.1&quot;; // 对所有的数字全部都在前面补上两个0 temp = temp.replaceAll(&quot;(\\d+)&quot;, &quot;00$1&quot;); System.out.println(&quot;ip地址:--&gt;&quot;+temp); // 因为ip地址占3位(\d&#123;3&#125;)捕获后三位, // 把多余的0删除掉 temp = temp.replaceAll(&quot;0+(\\d&#123;3&#125;)&quot;, &quot;$1&quot;);// 将ip地址补成同样位数 System.out.println(&quot;ip地址:--&gt;&quot;+temp); // 用空格割 String[] str = temp.split(&quot; +&quot;); // 排序从大到小排序 Arrays.sort(str); System.out.println(&quot;从小到大排序:&quot;); for (String string : str) &#123; System.out.println(string); &#125; System.out.println(&quot;去掉加上的辅助0&quot;); for (String ips : str) //删除多余的0 System.out.println(ips.replaceAll(&quot;0+(\\d+)&quot;, &quot;$1&quot;));&#125;运行结果：12345678910111213141516ip地址:--&gt;00192.00168.001.00200 0010.0010.0010.0010 0010.0010.0010.0011 0011.0010.0010.0010 003.003.0050.003 00127.000.000.001ip地址:--&gt;192.168.001.200 010.010.010.010 010.010.010.011 011.010.010.010 003.003.050.003 127.000.000.001从小到大排序:003.003.050.003010.010.010.010010.010.010.011011.010.010.010127.000.000.001192.168.001.200去掉加上的辅助03.3.50.310.10.10.1010.10.10.1111.10.10.10127.0.0.1192.168.1.20首先来看temp.replaceAll(&quot;(\\d+)&quot;, &quot;00$1&quot;);这句，(\\d+)将捕获到ip地址中除了点号之外的所有数字串，因为ip地址每一位可以是1位数，2位数，3位数，这里先不管使用00$1进行替换，这样每一位就是3位数到5位数。temp.replaceAll(&quot;0+(\\d{3})&quot;, &quot;$1&quot;);这句，首先\d{3}表示正好匹配3位数，0+一个或者多个0，0+(\\d{3})这个表达式的意思就是，匹配多个0开头，然后后面正好有3位数，把这3位数捕获出来，temp.replaceAll(&quot;0+(\\d{3})&quot;, &quot;$1&quot;);这句话的意思就是捕获最后的3位数，然后用这3位数，替换掉原来的3到5位的数经过上面两步之后，所有的ip地址都会变成3位数表示的，不足的前面会补0，这样转换的好处就是可以方便的使用Array.sort()方法对这些字符串进行排序。注意排序后的字符，都是我们高位补0后的ip地址这与平时的ip地址表示方式不同所以，要把高位的0去掉。ips.replaceAll(&quot;0+(\\d+)&quot;, &quot;$1&quot;)这句话实现去掉高位的0,高位的0不会被捕获到，高位的0不包含在捕获组$1,这样在进行替换的时候就等于删除了高位的0小结使用替换进行删除或添加元素，就是拿出来又放回去，如果少放了就相当于删除一部分了，如果多方了就是新增了一部分。替换删除，以少换多：我们匹配较多的字符，然后只捕获其中较少的一部分，再用捕获到的少量字符替换匹配的较多的字符，这样就等同于删除掉那些没有捕获的部分。这就好比从果篮里拿出几个水果，例如拿出苹果和香蕉，然后我再把苹果放回去，香蕉丢掉。这样果篮里的香蕉就没有了，相当于被删除掉了。替换添加，以多换少：我么匹配较少的字符,并且捕获这些字符，然后捕获到的字符加上一些新的字符替换回去。这样等效于添加了字符。例如我现在只拿出雪梨，然后我变出一个芒果，然后雪梨和芒果一起放回果篮里，这样果篮里就多出了一个芒果，而雪梨还是原来的雪梨。本文链接: Java正则表达式应用]]></content>
      <categories>
        <category>Java</category>
        <category>Java 正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[从网页上复制表格生产markdown表格]]></title>
    <url>%2Fblog%2Fa84bbd3e%2F</url>
    <content type="text"><![CDATA[需求分析例如我这里有一个表格：表格里的文本是可复制的，复制下来的文本如下。12345序号 方法 描述1 public URL(String spec) throws MalformedURLException 根据 String 表示形式的地址创建 URL 对象。2 public URL(String protocol,String host,int port,String file) throws MalformedURLException 创建URL对象，并指定协议protocol，主机host，端口名称port，资源文件名file3 public URLConnection openConnection() throws IOException 返回一个 URLConnection 对象，它表示到 URL 所引用的远程对象的连接。4 public final InputStream openStream() throws IOException 打开到此 URL 的连接并返回一个用于从该连接读入的 InputStream现在需要，把这个复制下来的文本生成markdown表格。基本实现观察这个文本，我发现，每个单元格之间不多不少刚好有两个空白符，所以，只要发现有两个空白符的地方我就认为表格中单元格之间的边界。代码如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243package regex.tools;import java.util.Scanner;import clipboard.util.SysClipboardUtil;public class MDtable&#123; public static void main(String[] args) &#123; String text=SysClipboardUtil.getSysClipboardText(); System.out.println(text); Scanner scanner=new Scanner(text); String line; String[] fragments; System.out.println(&quot;-------------------------------------------&quot;); boolean flag=true; while(scanner.hasNextLine()) &#123; line=scanner.nextLine(); //刚好两个的地方分割 fragments=line.split(&quot;\\s&#123;2&#125;&quot;);// System.out.println(&quot;line:---&gt;&quot;);// System.out.println(&quot;fragments:&quot;); System.out.print(&quot;|&quot;); for (String string : fragments) &#123; System.out.print(string+&quot;|&quot;); &#125; System.out.println(); //打印表格对其方式,使用默认对齐方式 if(flag) &#123; System.out.print(&quot;|&quot;); for(int i=0;i&lt;fragments.length;i++) &#123; System.out.print(&quot;-|&quot;); &#125; System.out.println(); flag=false; &#125; &#125; &#125;&#125;测试复制表格中的文字然后运行上面的代码，运行结果如下。123456789101112序号 方法 描述1 public URL(String spec) throws MalformedURLException 根据 String 表示形式的地址创建 URL 对象。2 public URL(String protocol,String host,int port,String file) throws MalformedURLException 创建URL对象，并指定协议protocol，主机host，端口名称port，资源文件名file3 public URLConnection openConnection() throws IOException 返回一个 URLConnection 对象，它表示到 URL 所引用的远程对象的连接。4 public final InputStream openStream() throws IOException 打开到此 URL 的连接并返回一个用于从该连接读入的 InputStream-------------------------------------------|序号|方法|描述||-|-|-||1|public URL(String spec) throws MalformedURLException|根据 String 表示形式的地址创建 URL 对象。||2|public URL(String protocol,String host,int port,String file) throws MalformedURLException|创建URL对象，并指定协议protocol，主机host，端口名称port，资源文件名file||3|public URLConnection openConnection() throws IOException|返回一个 URLConnection 对象，它表示到 URL 所引用的远程对象的连接。||4|public final InputStream openStream() throws IOException|打开到此 URL 的连接并返回一个用于从该连接读入的 InputStream|效果把markdown表格代码粘贴到markdown文档中，效果如下。序号方法描述1public URL(String spec) throws MalformedURLException根据 String 表示形式的地址创建 URL 对象。2public URL(String protocol,String host,int port,String file) throws MalformedURLException创建URL对象，并指定协议protocol，主机host，端口名称port，资源文件名file3public URLConnection openConnection() throws IOException返回一个 URLConnection 对象，它表示到 URL 所引用的远程对象的连接。4public final InputStream openStream() throws IOException打开到此 URL 的连接并返回一个用于从该连接读入的 InputStream可以看到这样就很容易的复制一个表格了。代码优化Java复制网上表格的方法把上面的代码封装成方法：12345678910111213141516171819202122232425262728293031323334353637383940414243/** * 生成markdown表格。 * @param text 复制的表格文字 * @return markdown表格代码 */public static String toMarkdownTable(String text)&#123; StringBuilder sBuider=new StringBuilder(); Scanner scanner=new Scanner(text); String line; String[] fragments; boolean flag=true; while(scanner.hasNextLine()) &#123; line=scanner.nextLine(); //刚好两个的地方分割 fragments=line.split(&quot;\\s&#123;2&#125;&quot;);// System.out.print(&quot;|&quot;); sBuider.append(&quot;|&quot;); for (String string : fragments) &#123;// System.out.print(string+&quot;|&quot;); sBuider.append(string+&quot;|&quot;); &#125;// System.out.println(); sBuider.append(&quot;\n&quot;); //打印表格对其方式,使用默认对齐方式 if(flag) &#123;// System.out.print(&quot;|&quot;); sBuider.append(&quot;|&quot;); for(int i=0;i&lt;fragments.length;i++) &#123;// System.out.print(&quot;-|&quot;); sBuider.append(&quot;-|&quot;); &#125;// System.out.println(); sBuider.append(&quot;\n&quot;); flag=false; &#125; &#125; return sBuider.toString();&#125;调用方式调用：1234567public static void main(String[] args)&#123; //从剪贴板获取文本 String text=SysClipboardUtil.getSysClipboardText(); //写回剪贴板 SysClipboardUtil.setSysClipboardText(toMarkdownTable(text));&#125;运行结果控制台没有输出，markdown表格代码已经写到剪贴板中去了，不再粘贴，效果和上面的一致。依赖类：依赖类：clipboard.util.SysClipboardUtil完整的代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package regex.tools;import java.util.Scanner;import clipboard.util.SysClipboardUtil;public class MDtable&#123; public static void main(String[] args) &#123; // 从剪贴板获取文本 String text = SysClipboardUtil.getSysClipboardText(); // 写回剪贴板 SysClipboardUtil.setSysClipboardText(toMarkdownTable(text)); &#125; /** * 生成markdown表格。 * * @param text * 复制的表格文字 * @return markdown表格代码 */ public static String toMarkdownTable(String text) &#123; StringBuilder sBuider = new StringBuilder(); Scanner scanner = new Scanner(text); String line; String[] fragments; // System.out.println(&quot;-------------------------------------------&quot;); boolean flag = true; while (scanner.hasNextLine()) &#123; line = scanner.nextLine(); // 刚好两个的地方分割 fragments = line.split(&quot;\\s&#123;2&#125;&quot;); // System.out.println(&quot;line:---&gt;&quot;); // System.out.println(&quot;fragments:&quot;); // System.out.print(&quot;|&quot;); sBuider.append(&quot;|&quot;); for (String string : fragments) &#123; // System.out.print(string+&quot;|&quot;); sBuider.append(string + &quot;|&quot;); &#125; // System.out.println(); sBuider.append(&quot;\n&quot;); // 打印表格对其方式,使用默认对齐方式 if (flag) &#123; // System.out.print(&quot;|&quot;); sBuider.append(&quot;|&quot;); for (int i = 0; i &lt; fragments.length; i++) &#123; // System.out.print(&quot;-|&quot;); sBuider.append(&quot;-|&quot;); &#125; // System.out.println(); sBuider.append(&quot;\n&quot;); flag = false; &#125; &#125; return sBuider.toString(); &#125;&#125;本文链接: 从网页上复制表格生产markdown表格]]></content>
      <categories>
        <category>Java</category>
        <category>Java 正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MarkdownPad 导出html带侧边栏目录]]></title>
    <url>%2Fblog%2F728ca7fc%2F</url>
    <content type="text"><![CDATA[参考：https://blog.csdn.net/zwx_lucky/article/details/53998930原文给的代码如下：个人觉得不足的地方是没有自动编号，虽然使用了缩进但是父子标题看起来不是很明显，我在此基础加上了点代码实现在标题前面自动编号。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!--bookmark --&gt;&lt;script src=&quot;http://code.jquery.com/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;http://yandex.st/highlightjs/6.2/highlight.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function()&#123; $(&quot;h1,h2,h3,h4,h5,h6&quot;).each(function(i,item)&#123; var tag = $(item).get(0).localName; $(item).attr(&quot;id&quot;,&quot;wow&quot;+i); $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(this).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); $(&quot;.newh1&quot;).css(&quot;margin-left&quot;,0); $(&quot;.newh2&quot;).css(&quot;margin-left&quot;,20); $(&quot;.newh3&quot;).css(&quot;margin-left&quot;,40); $(&quot;.newh4&quot;).css(&quot;margin-left&quot;,60); $(&quot;.newh5&quot;).css(&quot;margin-left&quot;,80); $(&quot;.newh6&quot;).css(&quot;margin-left&quot;,100); &#125;); $(&quot;.book-body&quot;).html($(&quot;.book-body&quot;).nextAll()) &#125;);&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;@media (max-width: 1600px) &#123; .book-body &#123; padding-left:200px; &#125;&#125;@media (max-width: 1400px) &#123; .book-body &#123; padding-left:200px; &#125;&#125;@media (max-width: 1200px) &#123; .book-body &#123; padding-left:300px; &#125;&#125;@media (max-width: 700px) &#123; .book-body &#123; padding-left:0px; &#125;&#125;@media (min-width: 600px) &#123; #category&#123; position: fixed; left: 20px; top:0; height: 100%; overflow-y: scroll; &#125;&#125;@media (-webkit-max-device-pixel-ratio: 1) &#123; ::-webkit-scrollbar-track-piece &#123; background-color:#FFF &#125; ::-webkit-scrollbar &#123; width: 6px; height: 6px &#125; ::-webkit-scrollbar-thumb &#123; background-color: #c2c2c2; background-clip: padding-box; min-height: 28px &#125; ::-webkit-scrollbar-thumb:hover &#123; background-color: #A0A0A0 &#125;&#125;&lt;/style&gt;&lt;a href=&quot;javascript:scroll(0,0)&quot; style=&quot;position:fixed;float:right;right:32px;top:70%&quot;&gt;返回顶部&lt;/a&gt; &lt;div style=&quot;width:20%;&quot; id=&quot;category&quot; class=&quot;book-summary&quot;&gt;&lt;/div&gt;&lt;div class=&quot;book-body&quot;&gt;&lt;/div&gt;实现方式2：缺点是书签在顶部，不好快速跳转123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137&lt;script type=&quot;text/javascript&quot;&gt; document.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123; var div1 = document.createElement(&quot;div&quot;); div1.style.cssText = &quot;clear:both&quot;; // 生成目录列表 var outline = document.createElement(&quot;div&quot;); outline.setAttribute(&quot;id&quot;, &quot;outline-list&quot;); outline.style.cssText = &quot;border:solid 1px #ccc; background:#eee; min-width:200px;padding:4px 10px;&quot;; var ele_p = document.createElement(&quot;p&quot;); ele_p.style.cssText = &quot;text-align: left; margin: 0;&quot;; outline.appendChild(ele_p); var ele_span = document.createElement(&quot;span&quot;); // ele_span.style.cssText = &quot;float: left;&quot;; var ele_text=document.createTextNode(&quot;目录&quot;); ele_span.appendChild(ele_text); var ele_a = document.createElement(&quot;a&quot;); ele_a.appendChild(document.createTextNode(&quot;[+]&quot;)); ele_a.setAttribute(&quot;href&quot;, &quot;#&quot;); ele_a.setAttribute(&quot;onclick&quot;, &quot;javascript:return openct(this);&quot;); ele_a.setAttribute(&quot;title&quot;, &quot;点击打开目录&quot;); ele_span.appendChild(ele_a); ele_p.appendChild(ele_span); var ele_ol = document.createElement(&quot;ol&quot;); ele_ol.style.cssText = &quot;display:none;margin-left:14px;padding-left:14px;line-height:160%;&quot;; ele_ol.setAttribute(&quot;id&quot;, &quot;outline_ol&quot;); outline.appendChild(ele_ol); var div1 = document.createElement(&quot;div&quot;); div1.style.cssText = &quot;clear:both&quot;; document.body.insertBefore(outline, document.body.childNodes[0]); // 获取所有标题 var headers = document.querySelectorAll(&apos;h1,h2,h3,h4,h5,h6&apos;); if (headers.length &lt; 2) return; // ----- var old_h = 0, ol_cnt = 0; // ----- for (var i = 0; i &lt; headers.length; i++) &#123; var ele_ols = null; // 找出它是H几，为后面的有序列表做准备 var header = headers[i]; header.setAttribute(&quot;id&quot;, &quot;t&quot; + i + header.tagName); var h = parseInt(header.tagName.substr(1), 10); // ----- if (!old_h)&#123; old_h = h; &#125; if (h &gt; old_h) &#123; ele_ols = document.createElement(&quot;ol&quot;); var ele_Current = ele_ol; if(ele_Current &amp;&amp; ol_cnt &gt; 0)&#123; var temp = ol_cnt; while(temp &gt; 0)&#123; ele_Current = ele_Current.lastChild; temp--; &#125; &#125; ele_Current.lastChild.appendChild(ele_ols); ol_cnt++; &#125; else if (h &lt; old_h &amp;&amp; ol_cnt &gt; 0) &#123; if (h == 1) &#123; while (ol_cnt &gt; 0) &#123; ol_cnt--; &#125; &#125; else &#123; ele_ols = document.createElement(&quot;ol&quot;); var ele_Current = ele_ol; if(ele_Current &amp;&amp; ol_cnt &gt; 0)&#123; var temp = ol_cnt; while(temp &gt; 1)&#123; ele_Current = ele_Current.lastChild; temp--; &#125; &#125; ele_Current.appendChild(ele_ols); ol_cnt--; &#125; &#125; if (h == 1) &#123; while (ol_cnt &gt; 0) &#123; ol_cnt--; &#125; &#125; old_h = h; // ----- if (ele_ols)&#123; ele_li = document.createElement(&quot;li&quot;) ele_ols.appendChild(ele_li); &#125; else &#123; ele_li = document.createElement(&quot;li&quot;) ele_ol.appendChild(ele_li); &#125; var a = document.createElement(&quot;a&quot;); // 为目录项设置链接 a.setAttribute(&quot;href&quot;, &quot;#t&quot; + i + header.tagName); // 目录项文本 a.innerHTML = header.textContent; ele_li.appendChild(a); &#125; // ----- while (ol_cnt &gt; 0) &#123; ol_cnt--; &#125; // ----- &#125;);// 代开和关闭目录的函数function openct(e) &#123; if (e.innerHTML == &apos;[+]&apos;) &#123; // createTextNode e.setAttribute(&apos;title&apos;, &apos;收起&apos;); e.innerHTML = &apos;[-]&apos;; var element = document.getElementById(&quot;outline_ol&quot;); element.style.cssText = &quot;margin-left:14px;padding-left:14px;line-height:160%;&quot;; &#125; else &#123; e.setAttribute(&apos;title&apos;, &apos;展开&apos;); e.innerHTML = &apos;[+]&apos;; var element = document.getElementById(&quot;outline_ol&quot;); element.style.cssText = &quot;display:none;margin-left:14px;padding-left:14px;line-height:160%;&quot;; &#125; e.blur(); return false;&#125;&lt;/script&gt;具体实现的步骤，和改进js忘光了，先用最弱智的方法来实现吧。关键代码：这个代码有点脑残的。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114var h1Count=1,h1Addflag=0;var h2Count=1,h2Addflag=0;var h3Count=1,h3Addflag=0;var h4Count=1,h4Addflag=0;var h5Count=1,h5Addflag=0;var h6Count=1,h6Addflag=0;$(document).ready(function()&#123; $(&quot;h1,h2,h3,h4,h5,h6&quot;).each(function(i,item) &#123; //获取标签的名字,h1,还是h2 var tag = $(item).get(0).localName; if(tag===&quot;h1&quot;) &#123; if(h1Addflag===1) &#123; h1Count++; &#125; h1Addflag=1; //初始化子节点 h2Count=1;h3Count=1;h4Count=1;h5Count=1;h6Count=1; //初始化子节点标志刚开始不要加1 h2Addflag=0;h3Addflag=0;h4Addflag=0;h5Addflag=0;h6Addflag=0; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot; &quot;+text; &#125; if(tag===&quot;h2&quot;) &#123; if(h2Addflag===1) &#123; h2Count++; &#125; h2Addflag=1; //初始化子节点 h3Count=1;h4Count=1;h5Count=1;h6Count=1; //初始化子节点标志刚开始不要加1 h3Addflag=0;h4Addflag=0;h5Addflag=0;h6Addflag=0; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot; &quot;+text; &#125; if(tag===&quot;h3&quot;) &#123; if(h3Addflag===1) &#123; h3Count++; &#125; h3Addflag=1; //初始化子节点 h4Count=1;h5Count=1;h6Count=1; //初始化子节点标志刚开始不要加1 h4Addflag=0;h5Addflag=0;h6Addflag=0; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot; &quot;+text; &#125; if(tag===&quot;h4&quot;) &#123; if(h4Addflag===1) &#123; h4Count++; &#125; h4Addflag=1; //初始化子节点 h5Count=1;h6Count=1; //初始化子节点标志刚开始不要加1 h5Addflag=0;h6Addflag=0; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot; &quot;+text; &#125; if(tag===&quot;h5&quot;) &#123; if(h5Addflag===1) &#123; h5Count++; &#125; h5Addflag=1; //初始化子节点 h6Count=1; console.log(&quot;捕获到标签:%s&quot;,tag); //初始化子节点标志刚开始不要加1 h6Addflag=0; var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot;.&quot;+(h5Count)+&quot; &quot;+text; &#125; if(tag===&quot;h6&quot;) &#123; if(h6Addflag===1) &#123; h6Count++; &#125; h6Addflag=1; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot;.&quot;+(h5Count)+&quot;.&quot;+(h6Count)+&quot; &quot;+text; &#125; //为该标签设置id属性 $(item).attr(&quot;id&quot;,&quot;wow&quot;+i); //添加一个超链接 $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(this).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); //为每一个标题超链接的class属性设置左边距 $(&quot;.newh1&quot;).css(&quot;margin-left&quot;,0); $(&quot;.newh2&quot;).css(&quot;margin-left&quot;,20); $(&quot;.newh3&quot;).css(&quot;margin-left&quot;,40); $(&quot;.newh4&quot;).css(&quot;margin-left&quot;,60); $(&quot;.newh5&quot;).css(&quot;margin-left&quot;,80); $(&quot;.newh6&quot;).css(&quot;margin-left&quot;,100); &#125;); //设置class选择器为.book-body的html内容 $(&quot;.book-body&quot;).html($(&quot;.book-body&quot;).nextAll())&#125;);上面通过6个计数器来完成的，和六个标志来完成的，js没学好，代码都很烂。不过幸运的是可以跑起来，下面来改进改进：把上面的计数器用数组实现，然后从0开始计数，减少标志位的使用。关键代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;!--重要代码--&gt;//标题序号计数器var hCount=[0,0,0,0,0,0];//设置计数器function setHCount(number)&#123; //当前计数器加一 hCount[number-1]++; for(var i=number,length=hCount.length;i&lt;length;i++) &#123; //子目录计数器全部置零 hCount[i]=0; &#125;&#125;//重命名目录名称function setHTagValue(item,number)&#123; //获取标题名 var text=$(item).get(0).innerHTML; //初始化空字符串 var before=&quot;&quot;; //生成序号 for(var i=0,length=hCount.length;i&lt;number;i++) &#123; if(i&lt;number-1) before+=hCount[i]+&quot;.&quot;; else before+=hCount[i]+&quot; &quot;; &#125;// $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot;.&quot;+(h5Count)+&quot;.&quot;+(h6Count)+&quot; &quot;+text; //在标题前面加上序号 $(item).get(0).innerHTML=before+text;&#125;function renameHTag(item)&#123; var tag = $(item).get(0).localName; if(tag===&quot;h1&quot;) &#123; setHCount(1); setHTagValue(item,1); &#125; if(tag===&quot;h2&quot;) &#123; setHCount(2); setHTagValue(item,2); &#125; if(tag===&quot;h3&quot;) &#123; setHCount(3); setHTagValue(item,3); &#125; if(tag===&quot;h4&quot;) &#123; setHCount(4); setHTagValue(item,4); &#125; if(tag===&quot;h5&quot;) &#123; setHCount(5); setHTagValue(item,5); &#125; if(tag===&quot;h6&quot;) &#123; setHCount(6); setHTagValue(item,6) &#125;&#125;$(document).ready(function()&#123; $(&quot;h1,h2,h3,h4,h5,h6&quot;).each(function(i,item) &#123; //给&lt;H&gt;类标签编号 renameHTag(item); //获取标签的名字,h1,还是h2 var tag = $(item).get(0).localName; //为该标签设置id属性 $(item).attr(&quot;id&quot;,&quot;wow&quot;+i); //添加一个页内超链接,并设置class选择器// $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(this).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(item).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); //为每一个标题超链接的class属性设置左边距 $(&quot;.newh1&quot;).css(&quot;margin-left&quot;,0); $(&quot;.newh2&quot;).css(&quot;margin-left&quot;,20); $(&quot;.newh3&quot;).css(&quot;margin-left&quot;,40); $(&quot;.newh4&quot;).css(&quot;margin-left&quot;,60); $(&quot;.newh5&quot;).css(&quot;margin-left&quot;,80); $(&quot;.newh6&quot;).css(&quot;margin-left&quot;,100); &#125;); //设置class选择器为.book-body的html内容 $(&quot;.book-body&quot;).html($(&quot;.book-body&quot;).nextAll())&#125;);实现在标题前面自动编号：改进：把上面的代码用函数封装好，这样阅读起来方便点，不至于一个函数很长。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172&lt;script src=&quot;http://code.jquery.com/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;http://yandex.st/highlightjs/6.2/highlight.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;!--重要代码--&gt;&lt;script&gt;&lt;!--重要代码--&gt;&lt;!--重要代码--&gt;//标题序号计数器var hCount=[0,0,0,0,0,0];//设置计数器function setHCount(number)&#123; //当前计数器加一 hCount[number-1]++; for(var i=number,length=hCount.length;i&lt;length;i++) &#123; //子目录计数器全部置零 hCount[i]=0; &#125;&#125;//重命名目录名称function setHTagValue(item,number)&#123; //获取标题名 var text=$(item).get(0).innerHTML; //初始化空字符串 var before=&quot;&quot;; //生成序号 for(var i=0,length=hCount.length;i&lt;number;i++) &#123; if(i&lt;number-1) before+=hCount[i]+&quot;.&quot;; else before+=hCount[i]+&quot; &quot;; &#125;// $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot;.&quot;+(h5Count)+&quot;.&quot;+(h6Count)+&quot; &quot;+text; //在标题前面加上序号 $(item).get(0).innerHTML=before+text;&#125;function renameHTag(item)&#123; var tag = $(item).get(0).localName; if(tag===&quot;h1&quot;) &#123; setHCount(1); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,1); &#125; if(tag===&quot;h2&quot;) &#123; setHCount(2); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,2); &#125; if(tag===&quot;h3&quot;) &#123; setHCount(3); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,3); &#125; if(tag===&quot;h4&quot;) &#123; setHCount(4); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,4); &#125; if(tag===&quot;h5&quot;) &#123; setHCount(5); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,5); &#125; if(tag===&quot;h6&quot;) &#123; setHCount(6); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,6) &#125;&#125;$(document).ready(function()&#123; $(&quot;h1,h2,h3,h4,h5,h6&quot;).each(function(i,item) &#123; //给&lt;H&gt;类标签编号 renameHTag(item); //获取标签的名字,h1,还是h2 var tag = $(item).get(0).localName; //为该标签设置id属性 $(item).attr(&quot;id&quot;,&quot;wow&quot;+i); //添加一个页内超链接,并设置class选择器// $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(this).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(item).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); //为每一个标题超链接的class属性设置左边距 $(&quot;.newh1&quot;).css(&quot;margin-left&quot;,0); $(&quot;.newh2&quot;).css(&quot;margin-left&quot;,20); $(&quot;.newh3&quot;).css(&quot;margin-left&quot;,40); $(&quot;.newh4&quot;).css(&quot;margin-left&quot;,60); $(&quot;.newh5&quot;).css(&quot;margin-left&quot;,80); $(&quot;.newh6&quot;).css(&quot;margin-left&quot;,100); &#125;); //设置class选择器为.book-body的html内容 $(&quot;.book-body&quot;).html($(&quot;.book-body&quot;).nextAll())&#125;);&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;@media (max-width: 1600px) &#123; .book-body &#123; padding-left:200px; &#125;&#125;@media (max-width: 1400px) &#123; .book-body &#123; padding-left:200px; &#125;&#125;@media (max-width: 1200px) &#123; .book-body &#123; padding-left:300px; &#125;&#125;@media (max-width: 700px) &#123; .book-body &#123; padding-left:0px; &#125;&#125;@media (min-width: 600px) &#123; #category&#123; position: fixed; left: 20px; top:0; height: 100%; overflow-y: scroll; &#125;&#125;@media (-webkit-max-device-pixel-ratio: 1) &#123; ::-webkit-scrollbar-track-piece &#123; background-color:#FFF &#125; ::-webkit-scrollbar &#123; width: 6px; height: 6px &#125; ::-webkit-scrollbar-thumb &#123; background-color: #c2c2c2; background-clip: padding-box; min-height: 28px &#125; ::-webkit-scrollbar-thumb:hover &#123; background-color: #A0A0A0 &#125;&#125;&lt;/style&gt;&lt;!--返回顶部--&gt;&lt;a href=&quot;javascript:scroll(0,0)&quot; style=&quot;position:fixed;float:right;right:32px;top:70%&quot;&gt;返回顶部&lt;/a&gt; &lt;!--目录栏，设置占用宽度为20%可以根据实际情况设置--&gt;&lt;div style=&quot;width:20%;&quot; id=&quot;category&quot; class=&quot;book-summary&quot;&gt;&lt;/div&gt;&lt;!--文章主体部分--&gt;&lt;div class=&quot;book-body&quot;&gt;&lt;/div&gt;MarkdownPad2中的设置复制上面的代码，然后打开MarkDownPad2，在MarkdownPad2中点击工具--&gt;选项--&gt;高级--&gt;HTML Head编辑器，然后粘贴上面代码，然后保存并关闭即可。导出HTML然后来导出HTML，这样才能看见侧目录。选择文件--&gt;导出--&gt;导出 HTML,然后保存到本地即可。然后就可看到效果了本文链接: MarkdownPad 导出html带侧边栏目录]]></content>
      <categories>
        <category>markdown使用</category>
        <category>markdown编辑器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[带书签JS设置1]]></title>
    <url>%2Fblog%2F59af15ef%2F</url>
    <content type="text"><![CDATA[参考：https://blog.csdn.net/zwx_lucky/article/details/53998930原文给的代码如下：个人觉得不足的地方是没有自动编号，虽然使用了缩进但是父子标题看起来不是很明显，我在此基础加上了点代码实现在标题前面自动编号。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!--bookmark --&gt;&lt;script src=&quot;http://code.jquery.com/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;http://yandex.st/highlightjs/6.2/highlight.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function()&#123; $(&quot;h1,h2,h3,h4,h5,h6&quot;).each(function(i,item)&#123; var tag = $(item).get(0).localName; $(item).attr(&quot;id&quot;,&quot;wow&quot;+i); $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(this).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); $(&quot;.newh1&quot;).css(&quot;margin-left&quot;,0); $(&quot;.newh2&quot;).css(&quot;margin-left&quot;,20); $(&quot;.newh3&quot;).css(&quot;margin-left&quot;,40); $(&quot;.newh4&quot;).css(&quot;margin-left&quot;,60); $(&quot;.newh5&quot;).css(&quot;margin-left&quot;,80); $(&quot;.newh6&quot;).css(&quot;margin-left&quot;,100); &#125;); $(&quot;.book-body&quot;).html($(&quot;.book-body&quot;).nextAll()) &#125;);&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;@media (max-width: 1600px) &#123; .book-body &#123; padding-left:200px; &#125;&#125;@media (max-width: 1400px) &#123; .book-body &#123; padding-left:200px; &#125;&#125;@media (max-width: 1200px) &#123; .book-body &#123; padding-left:300px; &#125;&#125;@media (max-width: 700px) &#123; .book-body &#123; padding-left:0px; &#125;&#125;@media (min-width: 600px) &#123; #category&#123; position: fixed; left: 20px; top:0; height: 100%; overflow-y: scroll; &#125;&#125;@media (-webkit-max-device-pixel-ratio: 1) &#123; ::-webkit-scrollbar-track-piece &#123; background-color:#FFF &#125; ::-webkit-scrollbar &#123; width: 6px; height: 6px &#125; ::-webkit-scrollbar-thumb &#123; background-color: #c2c2c2; background-clip: padding-box; min-height: 28px &#125; ::-webkit-scrollbar-thumb:hover &#123; background-color: #A0A0A0 &#125;&#125;&lt;/style&gt;&lt;a href=&quot;javascript:scroll(0,0)&quot; style=&quot;position:fixed;float:right;right:32px;top:70%&quot;&gt;返回顶部&lt;/a&gt; &lt;div style=&quot;width:20%;&quot; id=&quot;category&quot; class=&quot;book-summary&quot;&gt;&lt;/div&gt;&lt;div class=&quot;book-body&quot;&gt;&lt;/div&gt;实现方式2：缺点是书签在顶部，不好快速跳转123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137&lt;script type=&quot;text/javascript&quot;&gt; document.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123; var div1 = document.createElement(&quot;div&quot;); div1.style.cssText = &quot;clear:both&quot;; // 生成目录列表 var outline = document.createElement(&quot;div&quot;); outline.setAttribute(&quot;id&quot;, &quot;outline-list&quot;); outline.style.cssText = &quot;border:solid 1px #ccc; background:#eee; min-width:200px;padding:4px 10px;&quot;; var ele_p = document.createElement(&quot;p&quot;); ele_p.style.cssText = &quot;text-align: left; margin: 0;&quot;; outline.appendChild(ele_p); var ele_span = document.createElement(&quot;span&quot;); // ele_span.style.cssText = &quot;float: left;&quot;; var ele_text=document.createTextNode(&quot;目录&quot;); ele_span.appendChild(ele_text); var ele_a = document.createElement(&quot;a&quot;); ele_a.appendChild(document.createTextNode(&quot;[+]&quot;)); ele_a.setAttribute(&quot;href&quot;, &quot;#&quot;); ele_a.setAttribute(&quot;onclick&quot;, &quot;javascript:return openct(this);&quot;); ele_a.setAttribute(&quot;title&quot;, &quot;点击打开目录&quot;); ele_span.appendChild(ele_a); ele_p.appendChild(ele_span); var ele_ol = document.createElement(&quot;ol&quot;); ele_ol.style.cssText = &quot;display:none;margin-left:14px;padding-left:14px;line-height:160%;&quot;; ele_ol.setAttribute(&quot;id&quot;, &quot;outline_ol&quot;); outline.appendChild(ele_ol); var div1 = document.createElement(&quot;div&quot;); div1.style.cssText = &quot;clear:both&quot;; document.body.insertBefore(outline, document.body.childNodes[0]); // 获取所有标题 var headers = document.querySelectorAll(&apos;h1,h2,h3,h4,h5,h6&apos;); if (headers.length &lt; 2) return; // ----- var old_h = 0, ol_cnt = 0; // ----- for (var i = 0; i &lt; headers.length; i++) &#123; var ele_ols = null; // 找出它是H几，为后面的有序列表做准备 var header = headers[i]; header.setAttribute(&quot;id&quot;, &quot;t&quot; + i + header.tagName); var h = parseInt(header.tagName.substr(1), 10); // ----- if (!old_h)&#123; old_h = h; &#125; if (h &gt; old_h) &#123; ele_ols = document.createElement(&quot;ol&quot;); var ele_Current = ele_ol; if(ele_Current &amp;&amp; ol_cnt &gt; 0)&#123; var temp = ol_cnt; while(temp &gt; 0)&#123; ele_Current = ele_Current.lastChild; temp--; &#125; &#125; ele_Current.lastChild.appendChild(ele_ols); ol_cnt++; &#125; else if (h &lt; old_h &amp;&amp; ol_cnt &gt; 0) &#123; if (h == 1) &#123; while (ol_cnt &gt; 0) &#123; ol_cnt--; &#125; &#125; else &#123; ele_ols = document.createElement(&quot;ol&quot;); var ele_Current = ele_ol; if(ele_Current &amp;&amp; ol_cnt &gt; 0)&#123; var temp = ol_cnt; while(temp &gt; 1)&#123; ele_Current = ele_Current.lastChild; temp--; &#125; &#125; ele_Current.appendChild(ele_ols); ol_cnt--; &#125; &#125; if (h == 1) &#123; while (ol_cnt &gt; 0) &#123; ol_cnt--; &#125; &#125; old_h = h; // ----- if (ele_ols)&#123; ele_li = document.createElement(&quot;li&quot;) ele_ols.appendChild(ele_li); &#125; else &#123; ele_li = document.createElement(&quot;li&quot;) ele_ol.appendChild(ele_li); &#125; var a = document.createElement(&quot;a&quot;); // 为目录项设置链接 a.setAttribute(&quot;href&quot;, &quot;#t&quot; + i + header.tagName); // 目录项文本 a.innerHTML = header.textContent; ele_li.appendChild(a); &#125; // ----- while (ol_cnt &gt; 0) &#123; ol_cnt--; &#125; // ----- &#125;);// 代开和关闭目录的函数function openct(e) &#123; if (e.innerHTML == &apos;[+]&apos;) &#123; // createTextNode e.setAttribute(&apos;title&apos;, &apos;收起&apos;); e.innerHTML = &apos;[-]&apos;; var element = document.getElementById(&quot;outline_ol&quot;); element.style.cssText = &quot;margin-left:14px;padding-left:14px;line-height:160%;&quot;; &#125; else &#123; e.setAttribute(&apos;title&apos;, &apos;展开&apos;); e.innerHTML = &apos;[+]&apos;; var element = document.getElementById(&quot;outline_ol&quot;); element.style.cssText = &quot;display:none;margin-left:14px;padding-left:14px;line-height:160%;&quot;; &#125; e.blur(); return false;&#125;&lt;/script&gt;具体实现的步骤，和改进js忘光了，先用最弱智的方法来实现吧。关键代码：这个代码有点脑残的。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114var h1Count=1,h1Addflag=0;var h2Count=1,h2Addflag=0;var h3Count=1,h3Addflag=0;var h4Count=1,h4Addflag=0;var h5Count=1,h5Addflag=0;var h6Count=1,h6Addflag=0;$(document).ready(function()&#123; $(&quot;h1,h2,h3,h4,h5,h6&quot;).each(function(i,item) &#123; //获取标签的名字,h1,还是h2 var tag = $(item).get(0).localName; if(tag===&quot;h1&quot;) &#123; if(h1Addflag===1) &#123; h1Count++; &#125; h1Addflag=1; //初始化子节点 h2Count=1;h3Count=1;h4Count=1;h5Count=1;h6Count=1; //初始化子节点标志刚开始不要加1 h2Addflag=0;h3Addflag=0;h4Addflag=0;h5Addflag=0;h6Addflag=0; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot; &quot;+text; &#125; if(tag===&quot;h2&quot;) &#123; if(h2Addflag===1) &#123; h2Count++; &#125; h2Addflag=1; //初始化子节点 h3Count=1;h4Count=1;h5Count=1;h6Count=1; //初始化子节点标志刚开始不要加1 h3Addflag=0;h4Addflag=0;h5Addflag=0;h6Addflag=0; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot; &quot;+text; &#125; if(tag===&quot;h3&quot;) &#123; if(h3Addflag===1) &#123; h3Count++; &#125; h3Addflag=1; //初始化子节点 h4Count=1;h5Count=1;h6Count=1; //初始化子节点标志刚开始不要加1 h4Addflag=0;h5Addflag=0;h6Addflag=0; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot; &quot;+text; &#125; if(tag===&quot;h4&quot;) &#123; if(h4Addflag===1) &#123; h4Count++; &#125; h4Addflag=1; //初始化子节点 h5Count=1;h6Count=1; //初始化子节点标志刚开始不要加1 h5Addflag=0;h6Addflag=0; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot; &quot;+text; &#125; if(tag===&quot;h5&quot;) &#123; if(h5Addflag===1) &#123; h5Count++; &#125; h5Addflag=1; //初始化子节点 h6Count=1; console.log(&quot;捕获到标签:%s&quot;,tag); //初始化子节点标志刚开始不要加1 h6Addflag=0; var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot;.&quot;+(h5Count)+&quot; &quot;+text; &#125; if(tag===&quot;h6&quot;) &#123; if(h6Addflag===1) &#123; h6Count++; &#125; h6Addflag=1; console.log(&quot;捕获到标签:%s&quot;,tag); var text=$(item).get(0).innerHTML; $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot;.&quot;+(h5Count)+&quot;.&quot;+(h6Count)+&quot; &quot;+text; &#125; //为该标签设置id属性 $(item).attr(&quot;id&quot;,&quot;wow&quot;+i); //添加一个超链接 $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(this).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); //为每一个标题超链接的class属性设置左边距 $(&quot;.newh1&quot;).css(&quot;margin-left&quot;,0); $(&quot;.newh2&quot;).css(&quot;margin-left&quot;,20); $(&quot;.newh3&quot;).css(&quot;margin-left&quot;,40); $(&quot;.newh4&quot;).css(&quot;margin-left&quot;,60); $(&quot;.newh5&quot;).css(&quot;margin-left&quot;,80); $(&quot;.newh6&quot;).css(&quot;margin-left&quot;,100); &#125;); //设置class选择器为.book-body的html内容 $(&quot;.book-body&quot;).html($(&quot;.book-body&quot;).nextAll())&#125;);上面通过6个计数器来完成的，和六个标志来完成的，js没学好，代码都很烂。不过幸运的是可以跑起来，下面来改进改进：把上面的计数器用数组实现，然后从0开始计数，减少标志位的使用。关键代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;!--重要代码--&gt;//标题序号计数器var hCount=[0,0,0,0,0,0];//设置计数器function setHCount(number)&#123; //当前计数器加一 hCount[number-1]++; for(var i=number,length=hCount.length;i&lt;length;i++) &#123; //子目录计数器全部置零 hCount[i]=0; &#125;&#125;//重命名目录名称function setHTagValue(item,number)&#123; //获取标题名 var text=$(item).get(0).innerHTML; //初始化空字符串 var before=&quot;&quot;; //生成序号 for(var i=0,length=hCount.length;i&lt;number;i++) &#123; if(i&lt;number-1) before+=hCount[i]+&quot;.&quot;; else before+=hCount[i]+&quot; &quot;; &#125;// $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot;.&quot;+(h5Count)+&quot;.&quot;+(h6Count)+&quot; &quot;+text; //在标题前面加上序号 $(item).get(0).innerHTML=before+text;&#125;function renameHTag(item)&#123; var tag = $(item).get(0).localName; if(tag===&quot;h1&quot;) &#123; setHCount(1); setHTagValue(item,1); &#125; if(tag===&quot;h2&quot;) &#123; setHCount(2); setHTagValue(item,2); &#125; if(tag===&quot;h3&quot;) &#123; setHCount(3); setHTagValue(item,3); &#125; if(tag===&quot;h4&quot;) &#123; setHCount(4); setHTagValue(item,4); &#125; if(tag===&quot;h5&quot;) &#123; setHCount(5); setHTagValue(item,5); &#125; if(tag===&quot;h6&quot;) &#123; setHCount(6); setHTagValue(item,6) &#125;&#125;$(document).ready(function()&#123; $(&quot;h1,h2,h3,h4,h5,h6&quot;).each(function(i,item) &#123; //给&lt;H&gt;类标签编号 renameHTag(item); //获取标签的名字,h1,还是h2 var tag = $(item).get(0).localName; //为该标签设置id属性 $(item).attr(&quot;id&quot;,&quot;wow&quot;+i); //添加一个页内超链接,并设置class选择器// $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(this).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(item).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); //为每一个标题超链接的class属性设置左边距 $(&quot;.newh1&quot;).css(&quot;margin-left&quot;,0); $(&quot;.newh2&quot;).css(&quot;margin-left&quot;,20); $(&quot;.newh3&quot;).css(&quot;margin-left&quot;,40); $(&quot;.newh4&quot;).css(&quot;margin-left&quot;,60); $(&quot;.newh5&quot;).css(&quot;margin-left&quot;,80); $(&quot;.newh6&quot;).css(&quot;margin-left&quot;,100); &#125;); //设置class选择器为.book-body的html内容 $(&quot;.book-body&quot;).html($(&quot;.book-body&quot;).nextAll())&#125;);实现在标题前面自动编号：改进：把上面的代码用函数封装好，这样阅读起来方便点，不至于一个函数很长。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172&lt;script src=&quot;http://code.jquery.com/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;http://yandex.st/highlightjs/6.2/highlight.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;!--重要代码--&gt;&lt;script&gt;&lt;!--重要代码--&gt;&lt;!--重要代码--&gt;//标题序号计数器var hCount=[0,0,0,0,0,0];//设置计数器function setHCount(number)&#123; //当前计数器加一 hCount[number-1]++; for(var i=number,length=hCount.length;i&lt;length;i++) &#123; //子目录计数器全部置零 hCount[i]=0; &#125;&#125;//重命名目录名称function setHTagValue(item,number)&#123; //获取标题名 var text=$(item).get(0).innerHTML; //初始化空字符串 var before=&quot;&quot;; //生成序号 for(var i=0,length=hCount.length;i&lt;number;i++) &#123; if(i&lt;number-1) before+=hCount[i]+&quot;.&quot;; else before+=hCount[i]+&quot; &quot;; &#125;// $(item).get(0).innerHTML=(h1Count)+&quot;.&quot;+(h2Count)+&quot;.&quot;+(h3Count)+&quot;.&quot;+(h4Count)+&quot;.&quot;+(h5Count)+&quot;.&quot;+(h6Count)+&quot; &quot;+text; //在标题前面加上序号 $(item).get(0).innerHTML=before+text;&#125;function renameHTag(item)&#123; var tag = $(item).get(0).localName; if(tag===&quot;h1&quot;) &#123; setHCount(1); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,1); &#125; if(tag===&quot;h2&quot;) &#123; setHCount(2); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,2); &#125; if(tag===&quot;h3&quot;) &#123; setHCount(3); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,3); &#125; if(tag===&quot;h4&quot;) &#123; setHCount(4); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,4); &#125; if(tag===&quot;h5&quot;) &#123; setHCount(5); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,5); &#125; if(tag===&quot;h6&quot;) &#123; setHCount(6); console.log(&quot;捕获到标签:%s&quot;,tag); setHTagValue(item,6) &#125;&#125;$(document).ready(function()&#123; $(&quot;h1,h2,h3,h4,h5,h6&quot;).each(function(i,item) &#123; //给&lt;H&gt;类标签编号 renameHTag(item); //获取标签的名字,h1,还是h2 var tag = $(item).get(0).localName; //为该标签设置id属性 $(item).attr(&quot;id&quot;,&quot;wow&quot;+i); //添加一个页内超链接,并设置class选择器// $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(this).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); $(&quot;#category&quot;).append(&apos;&lt;a class=&quot;new&apos;+tag+&apos;&quot; href=&quot;#wow&apos;+i+&apos;&quot;&gt;&apos;+$(item).text()+&apos;&lt;/a&gt;&lt;/br&gt;&apos;); //为每一个标题超链接的class属性设置左边距 $(&quot;.newh1&quot;).css(&quot;margin-left&quot;,0); $(&quot;.newh2&quot;).css(&quot;margin-left&quot;,20); $(&quot;.newh3&quot;).css(&quot;margin-left&quot;,40); $(&quot;.newh4&quot;).css(&quot;margin-left&quot;,60); $(&quot;.newh5&quot;).css(&quot;margin-left&quot;,80); $(&quot;.newh6&quot;).css(&quot;margin-left&quot;,100); &#125;); //设置class选择器为.book-body的html内容 $(&quot;.book-body&quot;).html($(&quot;.book-body&quot;).nextAll())&#125;);&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;@media (max-width: 1600px) &#123; .book-body &#123; padding-left:200px; &#125;&#125;@media (max-width: 1400px) &#123; .book-body &#123; padding-left:200px; &#125;&#125;@media (max-width: 1200px) &#123; .book-body &#123; padding-left:300px; &#125;&#125;@media (max-width: 700px) &#123; .book-body &#123; padding-left:0px; &#125;&#125;@media (min-width: 600px) &#123; #category&#123; position: fixed; left: 20px; top:0; height: 100%; overflow-y: scroll; &#125;&#125;@media (-webkit-max-device-pixel-ratio: 1) &#123; ::-webkit-scrollbar-track-piece &#123; background-color:#FFF &#125; ::-webkit-scrollbar &#123; width: 6px; height: 6px &#125; ::-webkit-scrollbar-thumb &#123; background-color: #c2c2c2; background-clip: padding-box; min-height: 28px &#125; ::-webkit-scrollbar-thumb:hover &#123; background-color: #A0A0A0 &#125;&#125;&lt;/style&gt;&lt;!--返回顶部--&gt;&lt;a href=&quot;javascript:scroll(0,0)&quot; style=&quot;position:fixed;float:right;right:32px;top:70%&quot;&gt;返回顶部&lt;/a&gt; &lt;!--目录栏，设置占用宽度为20%可以根据实际情况设置--&gt;&lt;div style=&quot;width:20%;&quot; id=&quot;category&quot; class=&quot;book-summary&quot;&gt;&lt;/div&gt;&lt;!--文章主体部分--&gt;&lt;div class=&quot;book-body&quot;&gt;&lt;/div&gt;MarkdownPad2中的设置复制上面的代码，然后打开MarkDownPad2，在MarkdownPad2中点击工具--&gt;选项--&gt;高级--&gt;HTML Head编辑器，然后粘贴上面代码，然后保存并关闭即可。导出HTML然后来导出HTML，这样才能看见侧目录。选择文件--&gt;导出--&gt;导出 HTML,然后保存到本地即可。然后就可看到效果了本文链接: 带书签JS设置1]]></content>
      <categories>
        <category>Java</category>
        <category>Java 正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[小技巧-cmd常用命令之创建文件]]></title>
    <url>%2Fblog%2F6aff1849%2F</url>
    <content type="text"><![CDATA[一、建立空文件的几种方法1、cd.&gt;a.txtcd.表示改变当前目录为当前目录，即等于没改变；而且cd命令不会有输出。“&gt;”表示把命令输出写入到文件。后面跟着a.txt，就表示写入到a.txt。而此例中命令不会有输出，所以就创建了没有内容的空文件。当然不用写地址也是可以的，也就是说cd &gt;1.txt也是可以的。2、copy nul a.txtnul表示空设备，从概念上讲，它不可见，存在于每个目录中，可以把它看成一个特殊的“文件”，它没有内容；一般可把输出写入到nul，来达到屏蔽输出的目的，如pause&gt;nul，此命令执行效果是暂停，并且不会显示“请按任意键继续…”。此例子表示将空设备复制到a.txt，同样创建了没有内容的空文件。3、type nul&gt;a.txt此例子表示显示空设备的内容，并写入到a.txt。空目录没有内容，所以也就是创建了一个空文件。4、echo a 2&gt;a.txt“2”表示错误输出的句柄，此例中没有错误输出，所以创建了没有内容的空文件。其实&gt;默认都是重定向了句柄1，即标准输出句柄。比如cd.&gt;a.txt，其实就是cd. 1&gt;a.txt。同样，句柄3到9也可以使用在本例中，它们是未经定义的句柄，也不会有输出，如echo a 3&gt;a.txt。5、fsutil file createnew d:\a.txt 0使用fsutil创建了一个空文件。6、其他命令只要没有输出，并重定向到文件就可以了二、建立非空文件的几种方法1、echo a&gt;a.txt最常用的是echo命令，此例子表示把字母a和回车换行覆盖输出到a.txt（如果a.txt原来已有内容则覆盖掉原来的内容），如果追加内容，可以使用&gt;&gt;，如echo b&gt;&gt;a.txt，表示把b和回车换行追加到文件末尾。2、其他命令的重定向输出，如type a.txt &gt; b.txtcopy a.txt b.txtfsutil file createnew d:\a.txt 1转载自百度知道-cmd 如何新建文件本文链接: 小技巧-cmd常用命令之创建文件]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用git上传本地项目到GitHub上和更新]]></title>
    <url>%2Fblog%2F39d991de%2F</url>
    <content type="text"><![CDATA[使用git上传本地项目到GitHub上和更新最近在玩GitHub这个基友平台，在这里做个总结，方便以后查阅，也可以给网友们做个参考。一：注册GitHub账号和下载git。二：在GitHub上新建个仓库，点+号再点击New repository，给你的仓库起个名字，我的是test。三：安装git，我安装的是win64版本，直接解压安装就好。在本地磁盘找一个文件夹作为本地仓库，选择Git Bash Here，切换到/e/te 目录下，输入git init初始化，发现目录下多了一个.git文件夹。四：配置ssh key值在git命令行中对git进行全局设置，12git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub邮箱地址&quot;在git命令行中，输入命令： cd ~/.ssh，来检测是否生成过key,没有生成过key，会有相关信息提示；然后输入命令： ssh-keygen -t rsa -C “邮箱地址”，按下回车键；然后根据返回的信息，找到.ssh目录下的两个文件；在github网站上点击“setting”，找到添加SSH key的菜单，然后新增SSH key；把文件id_rsa.pub 里面的内容全部复制到 key编辑框中，Title可以随便命名，保存完毕；在git-bash中命令行输入：ssh -T git@github.com；这里会要求你输入SSH key密码，如果刚才生成SSH key时未输入密码，密码就为空；然后看到信息：ERROR: Hi 用户名! You’ve successfully authenticated，but GitHub does not provide shell access.；说明配置成功；登陆到github上查看刚刚输入的SSH key，现在图标的颜色变为绿色，说明密钥配置有效；现在可以在git命令行上进行git操作了；五：上传本地项目到仓库（1）远程仓库1$ git remote add origin git@github.com:用户名/项目名（2）添加你要上传的文件，1git add ..代表上传目录下所有文件，可以在git add后面加上你要添加的特定文件，比如git add aa.html(3)提交项目，输入1git commit -a -m &quot;提交说明&quot;(4)推送到GitHub上的master分支再输入1git push origin master大功告成，可以在GitHub查看项目更新项目更新项目，先添加文件(git add .)，再提交git commit -m &quot;说明&quot;，更新前最好用git pull origin master更新一下你的本地项目，因为可能有别人做了更新。最后再推送到远程仓库git push origin master就行了。本文链接: 使用git上传本地项目到GitHub上和更新]]></content>
      <categories>
        <category>git教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[上传本地代码及更新代码到GitHub教程]]></title>
    <url>%2Fblog%2Fafb052f3%2F</url>
    <content type="text"><![CDATA[上传本地代码第一步：去github上创建自己的Repository，创建页面如下图所示：红框为新建的仓库的https地址第二步：打开你的工程目录我这里没有是个空目录，所以先来创建一个文件，在工程目录(Test)下新建一个文件README.md1echo &quot;# Test&quot; &gt;&gt; README.md第三步：建立git仓库1git init第四步：将项目的所有文件添加到仓库中1git add .第五步：提交到仓库1git commit -m &quot;提交说明&quot;第六步：将本地的仓库关联到GitHub后面的https改成刚刚自己的地址，上面的红框处1git remote add origin https://github.com/zlxzlxzlx/Test.git第七步：上传代码到GitHub远程仓库因为这里是第一次上传，所以需要加上-u，参数，后面上传就不用加-u参数了直接使用git push origin master推送到主分支上就行了1git push -u origin master中间可能会让你输入Username和Password，你只要输入github的账号和密码就行了。执行完后，如果没有异常，等待执行完就上传成功了。更新代码第一步：查看当前的git仓库状态，可以使用git status1git status第二步：更新全部1git add *第三步：接着输入git commit -m “更新说明”1git commit -m &quot;更新说明&quot;第四步：先git pull,拉取当前分支最新代码1git pull第五步：push到远程master分支上1git push origin master不出意外，打开GitHub已经同步了本文参考：https://www.cnblogs.com/zlxbky/p/7727895.html本文链接: 上传本地代码及更新代码到GitHub教程]]></content>
      <categories>
        <category>git教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[git上传项目全部流程]]></title>
    <url>%2Fblog%2Fbe26f7a6%2F</url>
    <content type="text"><![CDATA[一、下载git进入网址：https://git-scm.com/downloads；点击中的Download 2.16.0 for Windows;在中选择蓝色字段点击，根据电脑64或32位选择适合的下载，点击即可进行下载，下载完成后傻瓜式安装，一直点击下一步即可完成安装；安装完成后，鼠标右击桌面，会发现：“Git Bash Here”,选择进入git命令行二、在github上新建个远程厂库在此页面进行注册，注册完了在右上角有个：“Sign in”,点击进入进行登录；登录成功后，在右下方寻找，点击New repository，然后在此处填写你新建的厂库名，这里用“fire”作为示例，填完点击下方绿色框内的“Create repository”即可完成厂库的新建三、利用git命令行连接github在连接远程厂库前，必须确保电脑连接了自己的GitHub1、配置秘钥1$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;此处的”`your_email@youremail.com&quot;改为你自己的邮箱，回车之后一直回车就行，结束后你会在C:\Users\Administrator.ssh目录下看到“id_rsa.pub”，使用记事本打开，然后复制里面的内容，然后打开你的github账号，找到这个页面选择Settings，点击进入在左边出现的目录中有：“SSH and GPG keys”,选择它会在右上角出现一个绿色框，里面有文字：“New SSH key”,点击然后在&quot;Key&quot;中把你刚刚复制的粘贴上去，“Title`”可以随便填，没什么用。2、验证连接是否成功1$ ssh -T git@github.com如果回车看到：You&#39;ve successfully authenticated,but GitHub dose not provide shell access,表示已经成功连上github。3、设置username和email123$ git config --global user.name &quot;your name&quot;$ git config --global user.name &quot;your_email@youremail.com&quot;在项目每次上传的时候每次commit都会记录你的username和email，所以要设置四、连接远程厂库基本配置完成，接下来就是上传你要上传的项目了。1、初始化git进入你要上传的项目的文件夹，在文件夹内鼠标右击，选择“Git Bash Here”打开git命令行，输入：1$ git init目的是初始化git，并且会创建个“.git”文件夹，里面有个“config”就是用来保存远程厂库路径地址的，如果想更换厂库可直接在里面对路径进行修改2、添加远程厂库1$ git remote add origin git@github.com:tt-wedos/fire.git这里的“tt-wedos”是我github上的用户名，你们要改成自己的，“fire”是我刚刚创建的厂库名字，你们也要对应改成自己新建的厂库名字3.添加项目并上传1$ git add .注意这里的add后面还有个“.”，小点的意识是选择所有文件进行上传，不能忽略1$ git commit -m &apos;my projest push&apos;引号内的内容可以随便填写，目的是描述记录每次上的内容是什么第一次推送master分支的所有内容：1$ git push -u origin master第一次要加上-u参数，如果不加的话会推送失败，后面就不需要再加-u参数了。此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改高GitHub中push内容到github上面，如果你的厂库不是新建的，里面以前已经有内容，你再次上传新内容想覆盖，就要在后面加“-f”,代码如下：$ git push origin master -f本文链接: git上传项目全部流程]]></content>
      <categories>
        <category>git教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[文件流和缓冲流的比较_输出缓冲流源码详解]]></title>
    <url>%2Fblog%2Fd2ebfe94%2F</url>
    <content type="text"><![CDATA[我们知道使用FileInputStream和FileOutputStream可以实现文件复制，有两种复制方法，一种是读一个字节，写一个字节。方法如下:1234567891011121314151617181920212223242526/*** 使用FileInputStream和FileOutputSteam来复制文件。** @param fromPath 源文件* @param toPath 目的文件* @throws FileNotFoundException* @throws IOException*/public static void copyByFileStreamOneByOne(String fromPath, String toPath)throws FileNotFoundException, IOException&#123; InputStream in = new FileInputStream(fromPath); OutputStream out = new FileOutputStream(toPath); int readNum = 0; // 每次从输入流读取一个字节到readNum中 while ((readNum = in.read()) != -1) &#123; // System.out.println(a++); // 把放在readNum中读到的字节写入到输出流中 out.write(readNum); &#125; in.close(); out.close();&#125;当然一个字节一个字节的读取时很慢的，所以可以每次读入一个字节数组，然后写入一个字节数组，这样比上面块一点，如下所示。1234567891011121314151617181920212223242526272829/*** 使用FileInputStream和FileOutputSteam来复制文件。** @param fromPath* @param toPath* @throws FileNotFoundException* @throws IOException*/public static void copyByFileStream(String fromPath, String toPath)throws FileNotFoundException, IOException&#123; InputStream in = new FileInputStream(fromPath); OutputStream out = new FileOutputStream(toPath); // 缓冲数组 byte[] buffer = new byte[1024*10]; int readLength = 0; int a = 0; // 每次从输入流读取一个数字 while ((readLength = in.read(buffer)) != -1) &#123; // System.out.println(a++); // 写入到输出流中 out.write(buffer, 0, readLength); &#125; in.close(); out.close();&#125;java.io包中还提供了带缓冲的字节流，BufferedInputStream和BufferedOutputStream,这两个字节流可以分别包装上面的FileInputSteam和FileOutpuStream。带缓冲的字节类内部提供了缓冲，BufferedInputStream先读取比请求更多的数据到缓冲区(内部字节数字)，当调用read时如果数据已经在缓存区，则直接从缓冲区返回对应数据不做IO操作。缓冲中的数据实际上是保存在内存中，而原始数据可能是保存在硬盘或NandFlash等存储介质中；而我们知道，从内存中读取数据的速度比从硬盘读取数据的速度至少快10倍以上。使用BufferedOutput的write()方法进行写入的时候，write()方法会先写到BuffredOutputStream的内部字节数组中。当内部缓冲写满后，BufferedOutputStream会自动把内部的字节数组写入到文件中。使用带缓冲的字节流进行复制文件如下所示，虽然看起来是一个字节一个字节的读写，但是由于使用缓冲了，这种方式比FileInputStream和FileOutputSteam方式一个字节一个字节的读写方式要快很多很多。12345678910111213141516171819202122232425262728/*** 使用BufferedInputStream和BufferOutputStream进行文件复制.** @param fromPath* @param toPath* @throws FileNotFoundException* @throws IOException*/public static void copyByBufferedStreamOneByOne(String fromPath, String toPath)throws FileNotFoundException, IOException&#123; BufferedOutputStream buffOut = new BufferedOutputStream( new FileOutputStream(toPath),1024*10); BufferedInputStream buffIn = new BufferedInputStream( new FileInputStream(fromPath),1024*10); int count = 0; int len = 0; // byte[] buf = new byte[1024*10]; while ((len = buffIn.read()) != -1) &#123; // System.out.println(count++); buffOut.write(len); &#125; buffOut.close(); buffIn.close();&#125;当然BufferedInputStream和BufferedOutputStream也可以提供一次读取一个数字和一次写入一个数字的方法，方法如下所示。1234567891011121314151617181920212223242526/*** 使用BufferedInputStream和BufferOutputStream进行文件复制.** @param fromPath* @param toPath* @throws FileNotFoundException* @throws IOException*/public static void copyByBufferedStream(String fromPath, String toPath) throws FileNotFoundException, IOException&#123; BufferedOutputStream buffOut = new BufferedOutputStream( new FileOutputStream(toPath)); BufferedInputStream buffIn = new BufferedInputStream( new FileInputStream(fromPath)); int count = 0; int len = 0; byte[] buf = new byte[1024*10]; while ((len = buffIn.read(buf)) != -1) &#123; // System.out.println(count++); buffOut.write(buf,0,len); &#125; buffOut.close(); buffIn.close();&#125;这四种方法复制文件比较：123456789101112131415161718192021222324252627282930313233343536public static void main(String[] args) throws IOException&#123; String fromPath = "C:\\Users\\lan\\Desktop\\副本.png"; String toPath = "C:\\Users\\lan\\Desktop\\副本的副本.png"; long start=System.currentTimeMillis(); for(int i=0;i&lt;1000*10;i++) &#123; copyByFileStream(fromPath, toPath); &#125; long end=System.currentTimeMillis(); System.out.println("使用FileInputStream和FileOutputStream复制文件用时:"+(end-start)); start=System.currentTimeMillis(); for(int i=0;i&lt;1000*10;i++) &#123; copyByBufferedStream(fromPath, toPath); &#125; end=System.currentTimeMillis(); System.out.println("使用BufferdInputStream和BufferedOutputStream复制文件用时:"+(end-start)); start=System.currentTimeMillis(); for(int i=0;i&lt;1000*10;i++) &#123; copyByBufferedStreamOneByOne(fromPath, toPath); &#125; end=System.currentTimeMillis(); System.out.println("使用BufferdInputStream和BufferedOutputStream逐个字节复制文件用时:"+(end-start)); start=System.currentTimeMillis(); for(int i=0;i&lt;100;i++) &#123; copyByFileStreamOneByOne(fromPath, toPath); &#125; end=System.currentTimeMillis(); System.out.println("使用FileInputStream和FileOutputStream逐个字节复制文件用时:"+(end-start));&#125;运行结果：1234使用FileInputStream和FileOutputStream复制文件用时:17499使用BufferdInputStream和BufferedOutputStream复制文件用时:16165使用BufferdInputStream和BufferedOutputStream逐个字节复制文件用时:32333使用FileInputStream和FileOutputStream逐个字节复制文件用时:40719先来看按数组读取的情况：可以看到，使用FileInputStream和FileOutputStream每次读写1024*10个字节的数组，与使用BufferInputStream和BufferOutputStream每次读取1024*10个字节的数组。速度差不多，可能使用缓冲方式会快一点。按字节逐个字节读写的情况：可以发现使用缓冲流逐个字节读取的情况还是挺快的，使用缓冲流逐个字节读写方式，复制一个文件1000*10次的事件为32333，而使用文件流读写100次就用时40719。这两个简直一个天上一个地下。所以说如果是逐个字符方式进行读写的话，使用缓冲流效率更好。BufferedOutputStream源码分析要介绍BufferedOutputStream，我们先了解一下OutputStream类抽象类OutputStream类有三个write方法OutputStream源码：参考文章：BufferedOutputStream的缓存功能解析（源码阅读）1234567891011121314151617181920212223242526package java.io;public abstract class OutputStream implements Closeable, Flushable&#123; public abstract void write(int b) throws IOException; public void write(byte b[]) throws IOException &#123; write(b, 0, b.length); &#125; public void write(byte b[], int off, int len) throws IOException &#123; if (b == null) &#123; throw new NullPointerException(); &#125; else if ((off &lt; 0) || (off &gt; b.length) || (len &lt; 0) || ((off + len) &gt; b.length) || ((off + len) &lt; 0)) &#123; throw new IndexOutOfBoundsException(); &#125; else if (len == 0) &#123; return; &#125; for (int i = 0 ; i &lt; len ; i++) &#123; write(b[off + i]); &#125; &#125; public void flush() throws IOException &#123;&#125; public void close() throws IOException &#123;&#125;&#125;可以看到OutputStream一共定义了以上5个方法。有三个write()方法，一个flush()方法，一个close()方法。现在主要来看着三个write()方法123public abstract void write(int b)public void write(byte b[])public void write(byte b[], int off, int len)第一个方法public abstract void write(int b)使用abstract修饰，所以第一个方法明显是让子类去覆盖的,第二个方法源码如下。1234public void write(byte b[]) throws IOException &#123; write(b, 0, b.length);&#125;可以看到，这个写整个数组的方法还是调用第三个方法去实现的，第三个方法的源码如下123456789101112131415public void write(byte b[], int off, int len) throws IOException &#123; if (b == null) &#123; throw new NullPointerException(); &#125; else if ((off &lt; 0) || (off &gt; b.length) || (len &lt; 0) || ((off + len) &gt; b.length) || ((off + len) &lt; 0)) &#123; throw new IndexOutOfBoundsException(); &#125; else if (len == 0) &#123; return; &#125; for (int i = 0 ; i &lt; len ; i++) &#123; //调用前面的抽象方法write（int b）同时进行类型转换 write(b[off + i]); &#125;&#125;问题我们先不看抽象方法是如何实现的，也就是说OutputStream也具有缓存器功能，不过这个缓冲器(byte数组)要我们自己提供，然后我们可以将要写入到流中的数据写到这个byte数组中，然后调用write(byte b[])或者write(byte b[], int off, int len)就可以吧缓存在数组中的数据写入输出流中。那为什么还要BufferedInputStream类干什么呢，他们有什么区别呢。同时我们知道BufferedInputStream类中还有一个flush()方法，在OutputStream流中没有flush()方法，这又是为什么呢？flush()是不是必须的呢，接下来看一下BufferedOutputStream的源码。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package java.io;public class BufferedOutputStream extends FilterOutputStream &#123; //内部缓存数组 protected byte buf[]; //记录内部缓存数组内已经放了多少个字节 protected int count; //默认构造函数 public BufferedOutputStream(OutputStream out) &#123; this(out, 8192);//调用带参构造函数，设置默认缓存数组大小为8192 &#125; //带参构造函数，设置缓存区大小 public BufferedOutputStream(OutputStream out, int size) &#123; super(out); if (size &lt;= 0) &#123; throw new IllegalArgumentException("Buffer size &lt;= 0"); &#125; buf = new byte[size]; &#125; //刷新缓存写入文件 private void flushBuffer() throws IOException &#123; //计数器大于0，表示内部缓存中有字节 if (count &gt; 0) &#123; //调用低层低级流的写数组方法，内部缓存 out.write(buf, 0, count); //计数器重新置零 count = 0; &#125; &#125; //写字节方法 public synchronized void write(int b) throws IOException &#123; //如果count长度大于内部缓存的大小 if (count &gt;= buf.length) &#123; //就刷新内部缓存 flushBuffer(); &#125; //把这个字节放到内部缓存中(写到内部缓存中，而不是写文件) buf[count++] = (byte)b; &#125; //写数组方法 public synchronized void write(byte b[], int off, int len) throws IOException &#123; //如果数组的长度大于或等于内部缓存的长度，那是没办法放入缓存中的 if (len &gt;= buf.length) &#123; //先把之前读取到缓存中的数据写入低层 flushBuffer(); //然后直接调用out(低级流如FileOutputStream out)的写数组方法把这次读取到的数据写入低层中 out.write(b, off, len); return; &#125; //如果传入的数组，长度小于内部缓存的长度 //说明内部缓存剩余位置不够放， if (len &gt; buf.length - count) &#123; //先把内部缓存写文件，这样才能挪出位置放下这个数组 flushBuffer(); &#125; //把这个数字复制到内部缓存中 System.arraycopy(b, off, buf, count, len); //更新计数器 count += len; &#125; //强制写文件 public synchronized void flush() throws IOException &#123; //写入内部缓存到文件中 flushBuffer(); //调用低层低级流的刷新方法，这个out是继承来的 out.flush(); &#125;&#125;结论：OutputStream的缓存器（自定义数组）与BufferedOutputStream中类的缓存器（内部数组）本质是一样的，只是BufferedOutputStream类中将要写入到底层io流中的数据先放到内部数字中去凑个整，然后再一起写入底层io流中。区别在于OutputStream写数组的时候，数组中有多好字节就写多少字节，BufferedOutputStream写数组的时候，如果这个数组能放到内部缓存中就放到内部缓存中，如果不能就写入这个数组。这样就是使用BufferedOutputStream可能会少写几次数组，从而提高效率。这样也出现了一个问题，假设向硬盘中写入一个文件，文件最后读到的数据比BufferedOutputSteam内部缓存长度要小，则BufferOutputStream就不会将这些数据写入底层io流中，这样造成文件缺失，因此就需要在close()前调用flush（）方法，强制将还没有装满buf数组的数据写入底层io中。12345678@SuppressWarnings("try")public void close() throws IOException &#123; try (OutputStream ostream = out) &#123; flush(); &#125;&#125;对比三个读写数组的方式方式1：使用FileInputStream和FileOutputStream复制文件，每次读写10240个字节12345678910111213141516171819public static void copyByFileStream(File fromPath, File toFile) throws FileNotFoundException, IOException&#123; InputStream in = new FileInputStream(fromPath); OutputStream out = new FileOutputStream(toFile);// 缓冲数组 byte[] buffer = new byte[10240]; int readLength = 0; int a = 0;// 每次从输入流读取一个数字 while ((readLength = in.read(buffer)) != -1) &#123;// System.out.println(a++);// 写入到输出流中 out.write(buffer, 0, readLength); &#125; in.close(); out.close();&#125;方式二：使用默认长度(8192)的BufferedInputStream和BufferedOutputStream复制文件，同样每次读写10240字节12345678910111213141516171819public static void copyByBufferedStream(File fromPath, File toPath) throws FileNotFoundException, IOException&#123; BufferedOutputStream buffOut = new BufferedOutputStream( new FileOutputStream(toPath)); BufferedInputStream buffIn = new BufferedInputStream( new FileInputStream(fromPath)); int count = 0; int len = 0; //这个数组长度比8192大，内部缓存放不下，会把缓存中的数据写入文件，然后写入读入的这个数组 byte[] buf = new byte[10240]; while ((len = buffIn.read(buf)) != -1) &#123;// System.out.println(count++); buffOut.write(buf, 0, len); &#125; buffOut.close(); buffIn.close();&#125;第三种方式：使用长度为102400的内部缓存的BufferedInputStream和BufferedOutputStream复制文件，同样每次读写10240字节1234567891011121314151617181920public static void copyByBufferedStream2(File fromPath, File toPath) throws FileNotFoundException, IOException&#123; BufferedOutputStream buffOut = new BufferedOutputStream( new FileOutputStream(toPath),102400); BufferedInputStream buffIn = new BufferedInputStream( new FileInputStream(fromPath),102400); int count = 0; int len = 0; //这个数组比内部数组长度要小，所以读取的时候会先放入到内部缓存中，缓存满了会下文件， //或者而缓存没满，但放不下新数据，则内部缓存先写入文件，再拷贝新数据到缓存中 byte[] buf = new byte[10240]; while ((len = buffIn.read(buf)) != -1) &#123;// System.out.println(count++); buffOut.write(buf, 0, len); &#125; buffOut.close(); buffIn.close();&#125;测试，main方法：12345678910111213141516171819202122232425262728293031323334public static void main(String[] args) throws FileNotFoundException, IOException&#123; String fromPath = "C:\\Users\\lan\\Desktop\\副本.png"; String toPath = "C:\\Users\\lan\\Desktop\\副本的副本.png"; File fromeFile=new File(fromPath); File toFile=new File(toPath); //源文件不存在就退出程序，不然后面这么多次循环，会把电脑搞崩溃的，又没有进行一场处理。 if(!fromeFile.exists()) &#123; return; &#125; long start=System.currentTimeMillis(); for(int i=0;i&lt;1000*10;i++) &#123; copyByFileStream(fromeFile, toFile); &#125; long end=System.currentTimeMillis(); System.out.println("使用FileInputStream和FileOutputStream逐个数组复制文件用时:"+(end-start)); start=System.currentTimeMillis(); for(int i=0;i&lt;1000*10;i++) &#123; copyByBufferedStream(fromeFile, toFile); &#125; end=System.currentTimeMillis(); System.out.println("使用BufferdInputStream和BufferedOutputStream逐个数组复制文件用(数组长度比内部缓存大)时:"+(end-start)); start=System.currentTimeMillis(); for(int i=0;i&lt;1000*10;i++) &#123; copyByBufferedStream2(fromeFile, toFile); &#125; end=System.currentTimeMillis(); System.out.println("使用BufferdInputStream和BufferedOutputStream逐个数组复制文件用(数组长度比内部缓存小)时:"+(end-start));&#125;运行结果：123使用FileInputStream和FileOutputStream逐个数组复制文件用时:15744使用BufferdInputStream和BufferedOutputStream逐个数组复制文件用(数组长度比内部缓存大)时:14805使用BufferdInputStream和BufferedOutputStream逐个数组复制文件用(数组长度比内部缓存小)时:13605可以看到虽然每次读取量为10240字节时，使用默认长度的缓冲流，还是比直接使用文件流要快。(如果每次读写的都是10240个字节的话，他们应该一样快才是)而缓存大的比缓存小的读写块(这很明显)缓存大于读写量的效率比，缓存小于读写量的好(因为有时放不到缓存中，这跟使用第一个方法效果一样)总结不管是一个字节一个字节的读写，还是一个数组一个数组的读写，使用缓冲流(BufferedInputStream/BufferedOutputSteam)都比使用文件流(FileInputStream/FileOutputStream)效率要好。还有就是应该使得缓冲区的长度比每次读写的数组长度大,这样效率比较好。本文链接: 文件流和缓冲流的比较_输出缓冲流源码详解]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[测试格式化]]></title>
    <url>%2Fblog%2F1ae845fa%2F</url>
    <content type="text"><![CDATA[支持：throws.*这种单起一行的语句–&gt;缩进四个空格支持：单行注释的缩进修复：遇到仅仅一行{的时候多打换行的bug说明：上面只对，VC样式的代码进行优化。代码如下：CodeFormat.java:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137package code.format;import java.util.Scanner;import java.util.regex.Matcher;import java.util.regex.Pattern;//import clipboard.util.SysClipboardUtil;import clipboard.util.SysClipboardUtil;public class CodeFormat&#123; public static void main(String[] args) &#123; String text = SysClipboardUtil.getSysClipboardText(); System.out.println("接收到的文本:"); System.out.println("------------------------------------"); System.out.println(text); System.out.println("------------------------------------"); System.out.println("java方式的格式化："); System.out.println("------------------------------------"); System.out.println(formatLikeJava(text)); System.out.println("------------------------------------"); System.out.println("VC方式的格式化："); System.out.println("------------------------------------"); System.out.println(formatLikeVC(text)); System.out.println("------------------------------------"); &#125;// main结束 /** * @param unformattedCode */ public static String formatLikeJava(String unformattedCode) &#123; //tab键：4个空格 final String Tab = " "; StringBuilder TabBuider = new StringBuilder(); StringBuilder formatedCode=new StringBuilder(); Scanner scanner = new Scanner(unformattedCode); String line = null; while (scanner.hasNextLine()) &#123; line = scanner.nextLine().trim(); if (line.matches(".*\\&#125;.*$")) &#123; TabBuider.delete(0, 4);// System.out.println(TabBuider.toString() + line); formatedCode.append(TabBuider.toString() + line+"\n"); &#125; else if (line.matches(".*\\&#123;.*$")) &#123; //vs样式的格式化：// System.out.println(TabBuider.toString() + line.substring(0,line.lastIndexOf('&#123;')));// System.out.println(TabBuider.toString()+line.substring(line.lastIndexOf('&#123;'))); //Java样式的格式化：// System.out.println(TabBuider.toString()+line); formatedCode.append(TabBuider.toString()+line+"\n"); TabBuider.append(Tab); &#125; else if(line.matches("^throws.*$")) &#123; formatedCode.append(Tab + line+"\n"); &#125; else &#123;// System.out.println(TabBuider.toString() + line); formatedCode.append(TabBuider.toString() + line+"\n"); &#125; &#125; scanner.close(); return formatedCode.toString(); &#125; /** * @param unformattedCode */ public static String formatLikeVC(String unformattedCode) &#123; final String Tab = " "; StringBuilder TabBuider = new StringBuilder(); StringBuilder formatedCode=new StringBuilder(); Scanner scanner = new Scanner(unformattedCode); String line = null; while (scanner.hasNextLine()) &#123; line = scanner.nextLine().trim();// System.out.println("--&gt;"+line); if (line.matches(".*\\&#125;.*$")) &#123; TabBuider.delete(0, 4);// System.out.println(TabBuider.toString() + line); formatedCode.append(TabBuider.toString() + line+"\n"); &#125; //如果这一行只有一个开括号，就不用再分割了 else if(line.matches("\\&#123;")) &#123; formatedCode.append(TabBuider.toString() + line+"\n"); TabBuider.append(Tab); &#125; else if (line.matches(".*\\&#123;.*$")) &#123; //vs样式的格式化：// System.out.println(TabBuider.toString() + line.substring(0,line.lastIndexOf('&#123;')));// System.out.println(TabBuider.toString()+line.substring(line.lastIndexOf('&#123;'))); formatedCode.append(TabBuider.toString() + line.substring(0,line.lastIndexOf('&#123;'))+"\n"); formatedCode.append(TabBuider.toString()+line.substring(line.lastIndexOf('&#123;'))+"\n");// //Java样式的格式化：// System.out.println(TabBuider.toString()+line); TabBuider.append(Tab); &#125; else if(line.matches("^throws.*$"))//匹配抛出异常语句 &#123; formatedCode.append(Tab + line+"\n"); &#125;// else if(line.matches("^//(\\s+).*$"))//匹配行注释,替换其中的空白符 else if(line.matches("^//(\\s+).*$"))//匹配行注释,替换其中的空白符 &#123; //总感觉这里应该怎么优化一下，匹配两次正则 Pattern pattern=Pattern.compile("^//(\\s+).*$"); Matcher matcher = pattern.matcher(line);// System.out.println(matcher.matches());// Pattern.compile("^//(\\s+).*$").matcher(line).matches(); matcher.find();//查找捕获组 //使用缩进替换空白符,因为注释符本省占两个字节，所以缩进空格少打两个 line=line.replaceAll("\\s+", TabBuider.toString().substring(2));// System.out.println("#---&gt;"+line); formatedCode.append(line+"\n"); &#125; else &#123;// System.out.println(TabBuider.toString() + line); formatedCode.append(TabBuider.toString() + line+"\n"); &#125; &#125; scanner.close(); return formatedCode.toString(); &#125;&#125;参考文章：正则表达式的捕获组(capture group)在Java中的使用本文链接: 测试格式化]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java IO流操作二 缓冲流]]></title>
    <url>%2Fblog%2Fb72cf8a8%2F</url>
    <content type="text"><![CDATA[IO的缓冲区的存在就是为了提高效率,把要操作的数据放进缓冲区,然后一次性把缓冲区的内容写到目的地,而不是写一次就往目的地写一次.在这里要注意的是当我们关闭了缓冲区对象实际也关闭了与缓冲区关联的流对象.BufferWriter类1234567891011121314FileWriter fw =null;try &#123; fw =new FileWriter("test.txt"); //使用缓冲区必须要与一个流对象相关联 BufferedWriter bw =new BufferedWriter(fw); //写入缓冲 bw.write("hello world!"); //使用缓冲区的时候要注意刷新 bw.flush(); //关闭缓冲区的对象,实际上是关闭与它关联的流对象最好放在finally执行 bw.close();&#125; catch (IOException e) &#123;e.printStackTrace();&#125;其实BufferReader也是差不多的,这里就不多讲12345678FileReader fr =new FileReader("test.txt");BufferedReader br =new BufferedReader(fr);String line =null;//注意readLine方法读取的内容不包括换行符while((line=br.readLine())!=null)&#123; System.out.println(line);&#125;readLine原理:无论是读一行,获取多个字符,最终都是在硬盘上一个一个读取,所以最终使用的还是read方法一次读一个的方法.装饰模式:12345678910111213141516171819202122class Person&#123; public void eat() &#123; System.out.println("吃饭"); &#125; &#125; public class PersonEnhance&#123; private Person p; //把需要增强 的类传进去初始化 public PersonEnhance(Person p) &#123; this.p=p; &#125; public void enhanceEat() &#123; System.out.println("开胃酒"); p.eat(); System.out.println("甜点"); &#125;&#125;装饰模式就是在原有类的基础上把某个方法增强功能但是这让我想到了java 的动态代理,他也是在某个方法的基础上增加额外的功能,那么她们有什么区别呢?装饰模式和动态代理的区别装饰类和被装饰的类是应该继承或实现相同的接口,而java的动态代理不是,还有一个不同点就是动态代理可以横切多个面,也就是同时对多个方法进行增强.通过装饰模式和继承的区别发现了程序设计之美,虽然继承也可以增强某个方法,但是它使得类的体系很臃肿,并且可扩展性不好因为装饰模式中,我们可以把被装饰类的父类当作参数传进装饰类的构造方法内,那么你这一个装饰类就可以应用于这个体系的了,这也是java多态性的好处.相比较之下使用装饰模式降低了类之间的关系.装饰类是因为增强了已有的对象,具有的功能和已有的是相同的,是不过提供了更强的功能,所以装饰类和被装饰类通常属于一个体系中的.在API中可以看到BufferedReader类还有一个子类LineNumberReader通过API对得知,这是一个字符缓冲输出流,该类保持对行号的跟踪,可以通过该类的setLineNumber(int) 和 getLineNumber() 方法分别设置获取行号例如程序:12345678910111213141516171819package lan.base;import java.io.FileReader;import java.io.IOException;import java.io.LineNumberReader;public class TestLineNumberReader&#123; public static void main(String[] args)throws IOException &#123; FileReader fr =new FileReader(".\\src\\lan\\base\\TestLineNumberReader.java"); LineNumberReader lnr =new LineNumberReader(fr); String line =null; while((line=lnr.readLine())!=null) &#123; System.out.println(lnr.getLineNumber()+":"+line); &#125; &#125;&#125;控制台输出:123456789101112131415161718191:package lan.base;2:3:import java.io.FileReader;4:import java.io.IOException;5:import java.io.LineNumberReader;6:7:public class TestLineNumberReader8:&#123;9: public static void main(String[] args)throws IOException10: &#123;11: FileReader fr =new FileReader(&quot;.\\src\\lan\\base\\TestLineNumberReader.java&quot;);12: LineNumberReader lnr =new LineNumberReader(fr);13: String line =null;14: while((line=lnr.readLine())!=null)15: &#123;16: System.out.println(lnr.getLineNumber()+&quot;:&quot;+line);17: &#125;18: &#125;19:&#125;但是我们也可以改变行号的开始值123456789101112public static void main(String[] args)throws IOException&#123; FileReader fr =new FileReader(".\\src\\lan\\base\\TestLineNumberReader.java"); LineNumberReader lnr =new LineNumberReader(fr); String num =null; //设置行号的开始值为100 lnr.setLineNumber(100); while((num=lnr.readLine())!=null) &#123; System.out.println(lnr.getLineNumber()+":"+num); &#125;&#125;输出结果为:12345678910111213141516171819202122101:package lan.base;102:103:import java.io.FileReader;104:import java.io.IOException;105:import java.io.LineNumberReader;106:107:public class TestLineNumberReader108:&#123;109: public static void main(String[] args) throws IOException110: &#123;111: FileReader fr = new FileReader(112: &quot;.\\src\\lan\\base\\TestLineNumberReader.java&quot;);113: LineNumberReader lnr = new LineNumberReader(fr);114: String line = null;115: // 设置行号的开始值为100116: lnr.setLineNumber(100);117: while ((line = lnr.readLine()) != null)118: &#123;119: System.out.println(lnr.getLineNumber() + &quot;:&quot; + line);120: &#125;121: &#125;122:&#125;字节流下面开始学习字节流通过API文档字节流的顶级类为InputStream和OutputStream首先来看一下FileOutputStream和FileInputStream使用FileOutStrem写文件12345public static void writeData()throws Exception&#123; OutputStream out =new FileOutputStream("D:\\test2.txt"); out.write("hello inputStream!".getBytes());&#125;执行上面代码后,发现在D盘创建了test2.txt文件并且内容是hello inputStream!从上面可以看出这和字符流是有区别的,因为当我们在使用字符流的时候,如果没有刷新并且没有关闭那么文件内容是空的,而这里刚好相反.但是最好我们还是调用close方法,关闭资源.提高性能.使用FileInputStream读文件下面实现读取操作123456789public static void readData() throws Exception &#123; InputStream is = new FileInputStream("D:\\test2.txt"); int num = 0; while ((num = is.read()) != -1) &#123; System.out.print((char) num); &#125;&#125;输出结果：1hello inputStream!但是这样效率比较低,因为读取一次写一次。我们可以一次读取一个字节数组。1234567891011public static void readData2()throws IOException &#123; InputStream is =new FileInputStream("D:\\test2.txt"); int num = 0; byte[] buffer =new byte[1024]; //把读取到的数据放进字节数组里面 while ((num = is.read(buffer)) != -1) &#123; System.out.println(new String(buffer, 0, num)); &#125;&#125;##获取文件的长度在InputStream类中有这样一个方法available(),该方法的作用是返回文件内容的长度。那么我们就可以把字节数组的长度定义成文件长度,则这个数组就刚好装下这个文件的所有字节。这样读取数据就不需要使用while循环了12345678910publicstaticvoid readData3()throws IOException &#123; InputStream is =new FileInputStream("D:\\test2.txt"); //返回文件的长度 int num = is.available(); //把字节数组的长度定义成文件长度,那么这个数组就刚好装下这个文件了 byte[] buffer =newbyte[num]; is.read(buffer); System.out.println(new String(buffer));&#125;但是这样有一个缺陷,如果一个文件非常大,该文件的长度(字节数)超出了int的最大表示范围(2.147483647GB)，就会出现内存溢出了.这样获取的文件长度不对，所以这个方法只能用于操作小型的文件.使用FileInputSteam和FileOutputStream复制文件123456789101112131415161718192021 /** * @throws FileNotFoundException * @throws IOException */ public static void copyByFileStream(String fromPath,String toPath) throws FileNotFoundException, IOException &#123; InputStream is = new FileInputStream(fromPath); OutputStream os = new FileOutputStream(toPath); //缓冲数组 byte[] buffer = new byte[1024]; int readNum = 0; int a=0; //每次从输入流读取一个数字 while((readNum=is.read(buffer))!=-1) &#123;// System.out.println(a++); //写入到输出流中 os.write(buffer, 0, readNum); &#125; &#125;使用java缓冲输出流123456789BufferedOutputStream buffOs =new BufferedOutputStream(new FileOutputStream("F:\\KuGou\\baby2 - baby one more time.mp3"));BufferedInputStream buffIs =new BufferedInputStream(new FileInputStream("F:\\KuGou\\baby - baby one more time.mp3"));int len = 0;while((len=buffIs.read())!=-1)&#123; buffOs.write(len);&#125;buffOs.close();buffIs.close();获取键盘录入:System.out对应的是标准的输出设备一般指控制台System.in对应的是标准输入设备:键盘下面模拟一个键盘录入的功能:publicstaticvoid main(String[] args)throws IOException {InputStream is = System.in;StringBuilder buffer =new StringBuilder();int i = 0;while (true) {i = is.read();if (‘\r’ == i)continue;if (‘\n’ == i) {String value = buffer.toString();//如果录入的是over那么则退出if (“over”.equals(buffer.toString()))break;System.out.println(value);//清空缓冲区 以免下次录入时不会和前面录入的汇合buffer.delete(0, buffer.length());}else {buffer.append((char)i);}}}注意在输入流在读取数据的时候连回车也会读取的.在windows中\r\n代表换行 例如下面简单的程序InputStream is = System.in;System.out.println(is.read());System.out.println(is.read());控制台输出:1310对于键盘录入功能我们可以使用更加简单的方式:因为他这个功能实际上就是读取一行 的操作:那么就可以考虑使用readLine方法,然后该方法是字符六BufferedReader的方法然而InputStream又是字节流.那么怎么办呢?我们可以使用InputStreamReader类,这个类是字节流到字符流的桥梁,publicstaticvoid main(String[] args)throws IOException {InputStream is = System.in;InputStreamReader isr =new InputStreamReader(is);BufferedReader br =new BufferedReader(isr);String line =null;while((line=br.readLine())!=null){if(line.equals(“over”)){break;}System.out.println(line.toUpperCase());}}对应的OutputStreamWriter是字符流向字节流转换的桥梁 也就是读进来的是字符,写进去的是字节,在上面的基础上我们可以这样改写:publicstaticvoid main(String[] args)throws IOException {InputStream is = System.in;InputStreamReader isr =new InputStreamReader(is);BufferedReader br =new BufferedReader(isr);OutputStreamWriter osw =new OutputStreamWriter(System.out);BufferedWriter bw =new BufferedWriter(osw);String line =null;while((line=br.readLine())!=null){if(line.equals(“over”)){break;}bw.write(line);//注意使用字符流要注意flushbw.flush();//System.out.println(line.toUpperCase());}}但是控制台输出为:发现输出的数据没有换行当然我们可以在line后面加上\r\n但是这是不跨品台的我们可以这样解决:我们可以使用BufferedWriter 的newLine方法在bw.write(line);后面加上bw.newLine(); 即可总结: 下面总结一下IO的操作规律:1,明确源和目的:源 :输入流,InputStream Reader目的: 输入流 OutpuStream Writer3当明确体系后,在明确使用哪个具体的对象通过设备来进行区分:源设备: 存 硬盘 键盘目的设备: 内存 硬盘 控制台转载请注明 出处: http://blog.csdn.net/johnny901114/article/details/8710403本文链接: Java IO流操作二 缓冲流]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java获取文件大小的方法]]></title>
    <url>%2Fblog%2Faa316c45%2F</url>
    <content type="text"><![CDATA[本文转自：https://www.cnblogs.com/hellowhy/p/7238570.htmljava获取文件大小的方法目前Java获取文件大小的方法有两种：1、通过file的length()方法获取；2、通过流式方法获取；通过流式方法又有两种，分别是旧的java.io.*中FileInputStream的available()方法和新的java.nio.*中的FileChannel下面依次介绍这几种方法：首先选择一个文件并查看这个文件在windows中显示的大小，为了测试准确性，我这里选取了一个大文件（超过2GB）查看这个文件在windows中显示的大小：可以看出这个文件的实际大小是2588266496Byte(2527604KB)，下面通过代码来获取文件大小，并进行比较：一、通过File类的length()方法获取文件的大小1、创建一个文件：1File bigFile=new File("F:\\软件\\安装包_office2016\\Office2016.iso");2、获取文件大小：File.length()方法可以获取文件的大小(占用的字节数)123456789101112/*** 获取文件长度* @param file*/public static void getFileSize1(File file) &#123; if (file.exists() &amp;&amp; file.isFile()) &#123; System.out.println("文件"+file.getName()+"的大小是："+file.length()\1024+"KB"); &#125;&#125;3.运行结果：1文件Office2016.iso的大小是：2588266496(Byte)=2527604(KB)可见，使用length方法获取的文件大小与windows中显示的大小一致！二、通过file.io.*中的流式方法获取使用FileInputStream.available方法获取：123456789101112131415161718192021222324/** * 根据java.io.*的流获取文件大小 * @param file */public static void getFileSize2(File file)&#123; FileInputStream fis = null; try &#123; if(file.exists() &amp;&amp; file.isFile())&#123; String fileName = file.getName(); fis = new FileInputStream(file); System.out.println("文件"+fileName+"的大小是："+fis.available()+"(Byte)="+fis.available()/1024+"(KB)"); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally&#123; if(null!=fis)&#123; try &#123; fis.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;3、查看结果：1文件Office2016.iso的大小是：2147483647(Byte)=2097151(KB)通过这种方法获取的文件大小是2147483647(Byte)，很明显，这是int类型所能表示的最大值(2^31-1)=2147483647，究其原因是因为文件的大小超过了int所能表示的最大值！！！而上面file.length()方法计算没有问题是因为，file.length()方法返回的是long,而available()方法返回的类型是int类型。三、通过file.nio.*中的FileChannel工具来获取文件大小：使用FileChannel获取文件大小：12345678910111213141516171819202122232425/** * 根据java.nio.*的流获取文件大小 * @param file */ public static void getFileSize3(File file)&#123; FileChannel fc = null; try &#123; if(file.exists() &amp;&amp; file.isFile())&#123; String fileName = file.getName(); FileInputStream fis = new FileInputStream(file); fc = fis.getChannel(); System.out.println("文件"+fileName+"的大小是："+fc.size()+"\n"); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally&#123; if(null!=fc)&#123; try &#123; fc.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;该方法运行结果。1文件Office2016.iso的大小是：2588266496(Byte)=2527604KB这里的size()方法的返回值类型也是long,通过这种方法获取的文件大小和第一种一样，都能获取文件实际大小。四、使用小文件测试以上三种方法：以上情况中文件大小超过了available()返回类型int的最大值，下面使用一个没有超过int最大值的文件测试，来验证通过这三种方法获取的大小是否和windows中显示的一致：1、获取文件，查看其在windows中的大小：可见该文件总共有1345个字节。3、查看通过三种方法获取的结果：1234文件CodeFormat.jar的大小是：1345(Byte)=1(KB)文件CodeFormat.jar的大小是：1345(Byte)=1(KB)最大的int值=2147483647文件CodeFormat.jar的大小是：1345(Byte)=1KBjava获取文件大小总结1、三种方法获取小文件(小于int能表示的最大范围:2147483647(Byte)=2097151(KB))时结果一样。2、获取大文件时，为避免文件长度大于方法返回值类型的最大值，尽量使用File.length()或FileChannel.size()方法获取；最大的long值=9223372036854775807，9223372036854775807(Byte)转换为TB大小如下图，我想没有这么大的文件吧。使用long表示绝对是够了。完整的代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package lan.base;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.nio.channels.FileChannel;public class GetFileLength&#123; public static void getFileSize1(File file) &#123; if (file.exists() &amp;&amp; file.isFile()) &#123; System.out.println("文件"+file.getName()+"的大小是："+file.length()+"(Byte)="+file.length()/1024+"(KB)"); &#125; &#125; /** * 根据java.io.*的流获取文件大小 * @param file */ public static void getFileSize2(File file)&#123; FileInputStream fis = null; try &#123; if(file.exists() &amp;&amp; file.isFile())&#123; String fileName = file.getName(); fis = new FileInputStream(file); System.out.println("文件"+fileName+"的大小是："+fis.available()+"(Byte)="+fis.available()/1024+"(KB)"); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally&#123; if(null!=fis)&#123; try &#123; fis.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; /** * 根据java.nio.*的流获取文件大小 * @param file */ public static void getFileSize3(File file)&#123; FileChannel fc = null; try &#123; if(file.exists() &amp;&amp; file.isFile())&#123; String fileName = file.getName(); FileInputStream fis = new FileInputStream(file); fc = fis.getChannel(); System.out.println("文件"+fileName+"的大小是："+fc.size()+"(Byte)="+fc.size()/1024+"KB"); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally&#123; if(null!=fc)&#123; try &#123; fc.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; File bigFile=new File("F:\\软件\\安装包_office2016\\Office2016.iso");// File smallFile=new File("D:\\dev\\java\\my\\tools\\CodeFormat.jar"); getFileSize1(bigFile); getFileSize2(bigFile); System.out.println("最大的int值="+Integer.MAX_VALUE); getFileSize3(bigFile); &#125;&#125;本文链接: java获取文件大小的方法]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java IO流之三 使用缓冲流来读写文件]]></title>
    <url>%2Fblog%2F8d787bfe%2F</url>
    <content type="text"><![CDATA[java IO流之三 使用缓冲流来读写文件http://blog.csdn.net/a107494639/article/details/7586689一、通过BufferedReader和BufferedWriter来读写文件使用缓冲流的好处是，能够更高效的读写信息，原理是将数据先缓冲起来，然后一起写入或者读取出来。经常使用的是readLine()方法，表示一次读取一行数据。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package org.example.io; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; public class TestBufferedWriter &#123; public static void main(String[] args) throws Exception &#123; write(); read(); &#125; /** * DOC 读取信息. * * @throws FileNotFoundException * @throws IOException */ private static void read() throws FileNotFoundException, IOException &#123; File file = new File("E:\\a.txt");// 指定要读取的文件 // 获得该文件的缓冲输入流 BufferedReader bufferedReader = new BufferedReader(new FileReader(file)); String line = "";// 用来保存每次读取一行的内容 while ((line = bufferedReader.readLine()) != null) &#123; System.out.println(line); &#125; bufferedReader.close();// 关闭输入流 &#125; /** * DOC 写入信息. * * @throws IOException */ private static void write() throws IOException &#123; File file = new File("E:\\a.txt");// 指定要写入的文件 if (!file.exists()) &#123;// 如果文件不存在则创建 file.createNewFile(); &#125; // 获取该文件的缓冲输出流 BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file)); // 写入信息 bufferedWriter.write("你好世界"); bufferedWriter.newLine();// 表示换行 bufferedWriter.write("hello world"); //上面的都是写到缓冲区中的，刷新才会真正写入磁盘中的文件里 bufferedWriter.flush();// 清空缓冲区 bufferedWriter.close();// 关闭输出流 &#125; &#125;二、使用BufferedInputStream和BufferedOuputStream读写图片使用方式和FileInputStrem和FileOutputStream基本一致：123456789101112131415161718192021222324252627282930package org.example.io; import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; public class TestBufferedString &#123; public static void main(String[] args) throws Exception &#123; // 指定要读取文件的缓冲输入字节流 BufferedInputStream in = new BufferedInputStream(new FileInputStream("F:\\test.jpg")); File file = new File("E:\\test.jpg"); if (file != null) &#123; file.createNewFile(); &#125; // 指定要写入文件的缓冲输出字节流 BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file)); byte[] bb = new byte[1024];// 用来存储每次读取到的字节数组 int n;// 每次读取到的字节数组的长度 while ((n = in.read(bb)) != -1) &#123; out.write(bb, 0, n);// 写入到输出流 &#125; out.close();// 关闭流 in.close(); &#125; &#125;本文链接: java IO流之三 使用缓冲流来读写文件]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JAVA优化建议]]></title>
    <url>%2Fblog%2F3bbde7b0%2F</url>
    <content type="text"><![CDATA[代码优化的目标是：1、减小代码的体积2、提高代码运行的效率代码优化细节###1、尽量指定类、方法的final修饰符###带有final修饰符的类是不可派生的。在Java核心API中，有许多应用final的例子，例如java.lang.String，整个类都是final的。为类指定final修饰符可以让类不可以被继承，为方法指定final修饰符可以让方法不可以被重写。如果指定了一个类为final，则该类所有的方法都是final的。Java编译器会寻找机会内联所有的final方法，内联对于提升Java运行效率作用重大，具体参见Java运行期优化。此举能够使性能平均提高50%。###2、尽量重用对象###特别是String对象的使用，出现大量字符串连接时应该使用StringBuilder/StringBuffer代替。由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。###3、尽可能使用局部变量###调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中,栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收，所以创建速度较快。其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢。###4、及时关闭流###Java编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，及时关闭以释放资源。因为对这些大对象的操作会造成系统大的开销，稍有不慎，将会导致严重的后果。###5、尽量减少对变量的重复计算###明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的，包括创建栈帧、调用方法时保护现场、调用方法完毕时恢复现场等。所以例如下面的操作：12for (int i = 0; i &lt; list.size(); i++)&#123;...&#125;建议替换为：12for (int i = 0, int length = list.size(); i &lt; length; i++)&#123;...&#125;这样，在list.size()很大的时候，就减少了很多的消耗###6、尽量采用懒加载的策略，即在需要的时候才创建###例如：1234String str = "aaa";if (i == 1)&#123; list.add(str);&#125;建议替换为：12345if (i == 1)&#123; String str = "aaa"; list.add(str);&#125;###7、慎用异常###异常对性能不利。抛出异常首先要创建一个新的对象，Throwable接口的构造函数调用名为fillInStackTrace()的本地同步方法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，Java虚拟机就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。异常只能用于错误处理，不应该用来控制程序流程。###8、不要在循环中使用try…catch…，应该把其放在最外层###除非不得已。如果毫无理由地这么写了，只要你的领导资深一点、有强迫症一点，八成就要骂你为什么写出这种垃圾代码来了###9、如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度###比如ArrayList、LinkedLlist、StringBuilder、StringBuffer、HashMap、HashSet等等，以StringBuilder为例：（1）StringBuilder() // 默认分配16个字符的空间（2）StringBuilder(int size) // 默认分配size个字符的空间（3）StringBuilder(String str) // 默认分配16个字符+str.length()个字符空间可以通过类（这里指的不仅仅是上面的StringBuilder）的来设定它的初始化容量，这样可以明显地提升性能。比如StringBuilder吧，length表示当前的StringBuilder能保持的字符数量。因为当StringBuilder达到最大容量的时候，它会将自身容量增加到当前的2倍再加2，无论何时只要StringBuilder达到它的最大容量，它就不得不创建一个新的字符数组然后将旧的字符数组内容拷贝到新字符数组中—-这是十分耗费性能的一个操作。试想，如果能预估到字符数组中大概要存放5000个字符而不指定长度，最接近5000的2次幂是4096，每次扩容加的2不管，那么：（1）在4096 的基础上，再申请8194个大小的字符数组，加起来相当于一次申请了12290个大小的字符数组，如果一开始能指定5000个大小的字符数组，就节省了一倍以上的空间（2）把原来的4096个字符拷贝到新的的字符数组中去这样，既浪费内存空间又降低代码运行效率。所以，给底层以数组实现的集合、工具类设置一个合理的初始化容量是错不了的，这会带来立竿见影的效果。但是，注意，像HashMap这种是以数组+链表实现的集合，别把初始大小和你估计的大小设置得一样，因为一个table上只连接一个对象的可能性几乎为0。初始大小建议设置为2的N次幂，如果能估计到有2000个元素，设置成new HashMap(128)、new HashMap(256)都可以。###10、当复制大量数据时，使用System.arraycopy()命令######11、乘法和除法使用移位操作###例如：12345for (val = 0; val &lt; 100000; val += 5)&#123; a = val * 8; b = val / 2;&#125;用移位操作可以极大地提高性能，因为在计算机底层，对位的操作是最方便、最快的，因此建议修改为：12345for (val = 0; val &lt; 100000; val += 5)&#123; a = val &lt;&lt; 3; b = val &gt;&gt; 1;&#125;移位操作虽然快，但是可能会使代码不太好理解，因此最好加上相应的注释。###12、循环内不要不断创建对象引用###例如：1234for (int i = 1; i &lt;= count; i++)&#123; Object obj = new Object();&#125;这种做法会导致内存中有count份Object对象引用存在，count很大的话，就耗费内存了，建议为改为：12345Object obj = null;for (int i = 0; i &lt;= count; i++)&#123; obj = new Object(); &#125;这样的话，内存中只有一份Object对象引用，每次new Object()的时候，Object对象引用指向不同的Object罢了。内存中只有一份引用，这样就大大节省了内存空间了。###13、基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList######14、尽量使用HashMap、ArrayList、StringBuilder###除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销###15、不要将数组声明为public static final###因为这毫无意义，这样只是定义了引用为static final，数组的内容还是可以随意改变的，将数组声明为public更是一个安全漏洞，这意味着这个数组可以被外部类所改变###16、尽量在合适的场合使用单例###使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：（1）控制资源的使用，通过线程同步来控制资源的并发访问（2）控制实例的产生，以达到节约资源的目的（3）控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信###17、尽量避免随意使用静态变量###要知道，当某个对象被定义为static的变量所引用，那么gc通常是不会回收这个对象所占有的堆内存的，如：1234public class A&#123; private static B b = new B();&#125;此时静态变量b的生命周期与A类相同，如果A类不被卸载，那么引用B指向的B对象会常驻内存，直到程序终止###18、及时清除不再需要的会话###为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多的会话时，如果内存不足，那么操作系统会把部分数据转移到磁盘，应用服务器也可能根据MRU（最近最频繁使用）算法把部分不活跃的会话转储到磁盘，甚至可能抛出内存不足的异常。如果会话要被转储到磁盘，那么必须要先被序列化，在大规模集群中，对对象进行序列化的代价是很昂贵的。因此，当会话不再需要时，应当及时调用HttpSession的invalidate()方法清除会话。###19、实现RandomAccess接口的集合比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历###这是JDK推荐给用户的。JDK API对于RandomAccess接口的解释是：实现RandomAccess接口用来表明其支持快速随机访问，此接口的主要目的是允许一般的算法更改其行为，从而将其应用到随机或连续访问列表时能提供良好的性能。实际经验表明，实现RandomAccess接口的类实例，假如是随机访问的，使用普通for循环效率将高于使用foreach循环；反过来，如果是顺序访问的，则使用Iterator会效率更高。可以使用类似如下的代码作判断：1234567891011if (list instanceof RandomAccess)&#123; for (int i = 0; i &lt; list.size(); i++)&#123;&#125;&#125;else&#123; Iterator&lt;?&gt; iterator = list.iterable(); while (iterator.hasNext()) &#123; iterator.next() &#125;&#125;foreach循环的底层实现原理就是迭代器Iterator，参见Java语法糖1：可变长度参数以及foreach循环原理。所以后半句”反过来，如果是顺序访问的，则使用Iterator会效率更高”的意思就是顺序访问的那些类实例，使用foreach循环去遍历。###20、使用同步代码块替代同步方法###这点在多线程模块中的synchronized锁方法块一文中已经讲得很清楚了，除非能确定一整个方法都是需要进行同步的，否则尽量使用同步代码块，避免对那些不需要进行同步的代码也进行了同步，影响了代码执行效率。###21、将常量声明为static final，并以大写命名###这样在编译期间就可以把这些内容放入常量池中，避免运行期间计算生成常量的值。另外，将常量的名字以大写命名也可以方便区分出常量与变量###22、不要创建一些不使用的对象，不要导入一些不使用的类###这毫无意义，如果代码中出现”The value of the local variable i is not used”、”The import java.util is never used”，那么请删除这些无用的内容###23、程序运行过程中避免使用反射###关于，请参见反射。反射是Java提供给用户一个很强大的功能，功能强大往往意味着效率不高。不建议在程序运行过程中使用尤其是频繁使用反射机制，特别是Method的invoke方法，如果确实有必要，一种建议性的做法是将那些需要通过反射加载的类在项目启动的时候通过反射实例化出一个对象并放入内存—-用户只关心和对端交互的时候获取最快的响应速度，并不关心对端的项目启动花多久时间。###24、使用数据库连接池和线程池###这两个池都是用于重用对象的，前者可以避免频繁地打开和关闭连接，后者可以避免频繁地创建和销毁线程###25、使用带缓冲的输入输出流进行IO操作###带缓冲的输入输出流，即BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream，这可以极大地提升IO效率。###26、顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList###这个，理解ArrayList和LinkedList的原理就知道了###27、不要让public方法中有太多的形参###public方法即对外提供的方法，如果给这些方法太多形参的话主要有两点坏处：1、违反了面向对象的编程思想，Java讲求一切都是对象，太多的形参，和面向对象的编程思想并不契合2、参数太多势必导致方法调用的出错概率增加至于这个”太多”指的是多少个，3、4个吧。比如我们用JDBC写一个insertStudentInfo方法，有10个学生信息字段要插如Student表中，可以把这10个参数封装在一个实体类中，作为insert方法的形参###28、字符串变量和字符串常量equals的时候将字符串常量写在前面###这是一个比较常见的小技巧了，如果有以下代码：12345String str = "123";if (str.equals("123")) &#123;...&#125;建议修改为：12345String str = "123";if ("123".equals(str))&#123;...&#125;这么做主要是可以避免空指针异常29、请知道，在java中if (i == 1)和if (1 == i)是没有区别的，但从阅读习惯上讲，建议使用前者平时有人问，”if (i == 1)”和”if (1== i)”有没有区别，这就要从C/C++讲起。在C/C++中，”if (i == 1)”判断条件成立，是以0与非0为基准的，0表示false，非0表示true，如果有这么一段代码：12345678int i = 2;if (i == 1)&#123; ...&#125;else&#123; ...&#125;C/C++判断”i==1″不成立，所以以0表示，即false。但是如果：1int i = 2;if (i = 1) &#123; ... &#125;else&#123; ... &#125;万一程序员一个不小心，把”if (i == 1)”写成”if (i = 1)”，这样就有问题了。在if之内将i赋值为1，if判断里面的内容非0，返回的就是true了，但是明明i为2，比较的值是1，应该返回的false。这种情况在C/C++的开发中是很可能发生的并且会导致一些难以理解的错误产生，所以，为了避免开发者在if语句中不正确的赋值操作，建议将if语句写为：1int i = 2;if (1 == i) &#123; ... &#125;else&#123; ... &#125;这样，即使开发者不小心写成了”1 = i”，C/C++编译器也可以第一时间检查出来，因为我们可以对一个变量赋值i为1，但是不能对一个常量赋值1为i。但是，在Java中，C/C++这种”if (i = 1)”的语法是不可能出现的，因为一旦写了这种语法，Java就会编译报错”Type mismatch: cannot convert from int to boolean”。但是，尽管Java的”if (i == 1)”和”if (1 == i)”在语义上没有任何区别，但是从阅读习惯上讲，建议使用前者会更好些。###30、不要对数组使用toString()方法###看一下对数组使用toString()打印出来的是什么：12345public static void main(String[] args)&#123; int[] is = new int[]&#123;1, 2, 3&#125;; System.out.println(is.toString());&#125;结果是：1[I@18a992f本意是想打印出数组内容，却有可能因为数组引用is为空而导致空指针异常。不过虽然对数组toString()没有意义，但是对集合toString()是可以打印出集合里面的内容的，因为集合的父类AbstractCollections重写了Object的toString()方法。###31、不要对超出范围的基本数据类型做向下强制转型###这绝不会得到想要的结果：123456public static void main(String[] args)&#123; long l = 12345678901234L; int i = (int)l; System.out.println(i);&#125;我们可能期望得到其中的某几位，但是结果却是：11942892530解释一下。Java中long是8个字节64位的，所以12345678901234在计算机中的表示应该是：10000 0000 0000 0000 0000 1011 0011 1010 0111 0011 1100 1110 0010 1111 1111 0010一个int型数据是4个字节32位的，从低位取出上面这串二进制数据的前32位是：10111 0011 1100 1110 0010 1111 1111 0010这串二进制表示为十进制1942892530，所以就是我们上面的控制台上输出的内容。从这个例子上还能顺便得到两个结论：1、整型默认的数据类型是int，long l = 12345678901234L，这个数字已经超出了int的范围了，所以最后有一个L，表示这是一个long型数。顺便，浮点型的默认类型是double，所以定义float的时候要写成””float f = 3.5f”2、接下来再写一句”int i i = l + i;”会报错，因为long + int是一个long，不能赋值给int###32、公用的集合类中不使用的数据一定要及时remove掉###如果一个集合类是公用的（也就是说不是方法里面的属性），那么这个集合里面的元素是不会自动释放的，因为始终有引用指向它们。所以，如果公用集合里面的某些数据不使用而不去remove掉它们，那么将会造成这个公用集合不断增大，使得系统有内存泄露的隐患。###33、把一个基本数据类型转为字符串，基本数据类型的包装类.toString()是最快的方式、String.valueOf(数据)次之、数据+””最慢###把一个基本数据类型转为字符串一般有三种方式，我有一个Integer型数据i，可以使用i.toString()、String.valueOf(i)、i+””三种方式，三种方式的效率如何，看一个测试：123456789101112131415161718192021222324public static void main(String[] args)&#123; int loopTime = 50000; Integer i = 0; long startTime = System.currentTimeMillis(); for (int j = 0; j &lt; loopTime; j++) &#123; String str = String.valueOf(i); &#125; System.out.println("String.valueOf()：" + (System.currentTimeMillis() - startTime) + "ms"); startTime = System.currentTimeMillis(); for (int j = 0; j &lt; loopTime; j++) &#123; String str = i.toString(); &#125; System.out.println("Integer.toString()：" + (System.currentTimeMillis() - startTime) + "ms"); startTime = System.currentTimeMillis(); for (int j = 0; j &lt; loopTime; j++) &#123; String str = i + ""; &#125; System.out.println("i + \"\"：" + (System.currentTimeMillis() - startTime) + "ms");&#125;运行结果为：1String.valueOf()：11ms Integer.toString()：5ms i + ""：25ms所以以后遇到把一个基本数据类型转为String的时候，优先考虑使用包装类.toString()方法。至于为什么，很简单：1、String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断,存在多余的操作。2、Integer.toString()方法就不说了，直接调用了3、i + “”底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串三者对比下来，明显是2最快、1次之、3最慢###34、使用最有效率的方式去遍历Map###遍历Map的方式有很多，通常场景下我们需要的是遍历Map中的Key和Value，那么推荐使用的、效率最高的方式是：123456789101112public static void main(String[] args)&#123; HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;(); hm.put("111", "222"); Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = hm.entrySet(); Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iter = entrySet.iterator(); while (iter.hasNext()) &#123; Map.Entry&lt;String, String&gt; entry = iter.next(); System.out.println(entry.getKey() + "\t" + entry.getValue()); &#125;&#125;如果你只是想遍历一下这个Map的key值，那用”Set keySet = hm.keySet();”会比较合适一些###35、对资源的close()建议分开操作###意思是，比如我有这么一段代码：12345678try&#123; XXX.close(); YYY.close();&#125;catch (Exception e)&#123; ...&#125;建议修改为：12try&#123; XXX.close(); &#125;catch (Exception e) &#123; ... &#125;try&#123; YYY.close(); &#125;catch (Exception e) &#123; ... &#125;虽然有些麻烦，却能避免资源泄露。我们想，如果没有修改过的代码，万一XXX.close()抛异常了，那么就进入了cath块中了，YYY.close()不会执行，YYY这块资源就不会回收了，一直占用着，这样的代码一多，是可能引起资源句柄泄露的。而改为下面的写法之后，就保证了无论如何XXX和YYY都会被close掉。参考文献本文转自：java优化建议本文链接: JAVA优化建议]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用java给Hexo博客内文章生成HexoFrontMatter]]></title>
    <url>%2Fblog%2Fc91be9a9%2F</url>
    <content type="text"><![CDATA[文章正文……1234## 需求 ##使用java为Hexo博客所有文章添加font-matter,要求如下：- 使用文件名作为标题即，`title: 文件名`- 使用多级子目录作为多级分类，例如`&quot;D:\Blog\bolg5\source\_posts\MyApplications\HexoTools\java自动生成HexoFontMatter.md&quot;`文章根目录为`D:\Blog\bolg5\source\_posts`，则多级分类为：categories:MyApplicationsHexoTools123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307- 使用文章最后修改的时间做我时间标记Date,即`Date: 文章最后修改的时间`&lt;!--more--&gt;## 实现 ##之前我代码已经写好了一部分，当时好像没有写文档。代码如下：```javapackage front.matter.tools;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FilenameFilter;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.regex.Matcher;import java.util.regex.Pattern;import clipboard.util.SysClipboardUtil;public class HexoAddFrontMatterAllInDir&#123; public static void main(String[] args) &#123; String dirPath=SysClipboardUtil.getSysClipboardText(); dealDir(dirPath); System.out.println(&quot;遍历结束&quot;); &#125; /** * 对该目录下的所有markdown文档加Front-matter首部 * * @param dirpath */ public static void dealDir(String dirpath) &#123; File dirFile = new File(dirpath); // 如果是文件夹的话 if (dirFile.isDirectory()) &#123; // 获取md文件，或者是目录的列表 File[] fileList = dirFile.listFiles(new FilenameFilter() &#123; @Override public boolean accept(File dir, String name) &#123; // 如果是markdown文件的话 if (name.endsWith(&quot;.md&quot;)) return true; // 如果是一个目录的话 else if (new File(dir, name).isDirectory()) return true; // 其他不相关的文件不返回 return false; &#125; &#125;); try &#123; for (File file : fileList) &#123; // 输出正在处理的文件名 // System.out.println(file.getAbsolutePath()); // 如果是文件的话 if (file.isFile()) &#123; // 在文章首部添加文件首部 addIfHasNotFrontMatter(file); //更新文章首部，使用最近修改的时间作为文章的创建时间// updateIfHasFrontMatter(file); &#125; else // 递归调用下层目录 dealDir(file.getAbsolutePath()); &#125; &#125; catch (UnsupportedEncodingException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; // 如果是markdown文件的话也可以直接使用进行首部追加 else if (dirFile.isFile() &amp;&amp; dirFile.getAbsolutePath().endsWith(&quot;.md&quot;)) &#123; // 在文章首部添加文件首部 try &#123; addIfHasNotFrontMatter(dirFile); &#125; catch (UnsupportedEncodingException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; /** * @param file * @throws IOException * @throws FileNotFoundException * @throws UnsupportedEncodingException */ private static void addIfHasNotFrontMatter(File file) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; // TODO Auto-generated method stub addIfHasNotFrontMatter(file.getAbsolutePath()); &#125; /** * @param path * @throws UnsupportedEncodingException * @throws FileNotFoundException * @throws IOException */ public static void addIfHasNotFrontMatter(String path) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; File file = new File(path); // 如果是markdown文档 if (file.isFile() &amp;&amp; path.endsWith(&quot;.md&quot;)) &#123; // 读取文件到文章缓冲article中 StringBuilder article = readFile(file); // 如果在文章中没有发现首部存在 if (!hasFrontMatter(article)) &#123; // 就添加首部 StringBuilder frontmatter = createFrontMatter(file); // 然后在正文前面首部 article.insert(0, frontmatter); // 处理结果写回该文件 writeFile(file, article); System.out.println(&quot;处理完成:&quot;+path); &#125; else &#123; System.out.println(&quot;已经存在首部了，不再重复加入&quot;); &#125; &#125; &#125; /** * @param file * @throws IOException * @throws FileNotFoundException * @throws UnsupportedEncodingException */ private static void updateIfHasFrontMatter(File file) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; // TODO Auto-generated method stub updateIfHasFrontMatter(file.getAbsolutePath()); &#125; /** * @param path * @throws UnsupportedEncodingException * @throws FileNotFoundException * @throws IOException */ public static void updateIfHasFrontMatter(String path) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; File file = new File(path); // 如果是markdown文档 if (file.isFile() &amp;&amp; path.endsWith(&quot;.md&quot;)) &#123; // 读取文件到文章缓冲article中 StringBuilder article = readFile(file); // 从文章中移除原来的首部 removeOldFrontMatter(article); // 根据文件名生成新的首部 StringBuilder frontmatter = createFrontMatter(file); // 然后在正文前面首部 article.insert(0, frontmatter); // 处理结果写回该文件 writeFile(file, article); System.out.println(&quot;更新首部：&quot;+path); &#125; &#125; /** * @param file * @param article * @throws UnsupportedEncodingException * @throws FileNotFoundException * @throws IOException */ public static void writeFile(File file, StringBuilder article) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; BufferedWriter writer = new BufferedWriter( new OutputStreamWriter(new FileOutputStream(file), &quot;utf-8&quot;)); writer.write(article.toString()); writer.close(); &#125; /** * @param path * @param file * @return */ public static StringBuilder createFrontMatter(File file) &#123; String path = file.getAbsolutePath(); // 生成首部 StringBuilder frontmatter = new StringBuilder(); String filename = file.getName(); // 获取不含后缀的文件名,作为未标题 String title = filename.substring(0, filename.length() - 3); frontmatter.append(&quot;title: &quot; + title); // 获取子目录列表 int categoriesStart = path.indexOf(&quot;\\source\\_posts&quot;) + &quot;\\source\\_posts&quot;.length(); int categoriesEnd = path.indexOf(filename) - 1; String categoriesStr = path.substring(categoriesStart, categoriesEnd); categoriesStr = categoriesStr.replaceAll(&quot;\\\\&quot;, &quot;\n- &quot;); frontmatter.append(&quot;\ncategories: &quot; + categoriesStr); // 生成时间项 SimpleDateFormat dateFormat = new SimpleDateFormat( &quot;yyyy-MM-dd HH:mm:ss&quot;);// 使用24小时制 Date date = new Date(file.lastModified()); frontmatter.append(&quot;\ndate: &quot; + dateFormat.format(date)); frontmatter.append(&quot;\n---\n&quot;);// 加入frontmatter首部 return frontmatter; &#125; /** * @param builder */ public static void removeOldFrontMatter(StringBuilder builder) &#123; // 检查文章中是否有首部 Pattern hasFrontMatter = Pattern.compile(&quot;(?:---\\n)?(?:.*\\n)+---\\n&quot;); // System.out.println(&quot;使用的正则表达式:&quot; + hasFrontMatter); Matcher matcherFrontMatter = hasFrontMatter.matcher(builder); int start = 0, end = 0; // 从文章首部开始匹配，匹配到了就不再匹配 if (matcherFrontMatter.lookingAt()) &#123; start = matcherFrontMatter.start(); end = matcherFrontMatter.end(); // 移除首部 builder.delete(start, end); &#125; &#125; /** * @param builder */ public static boolean hasFrontMatter(StringBuilder builder) &#123; // 检查文章中是否有首部 Pattern hasFrontMatter = Pattern.compile(&quot;(?:---\\n)?(?:.*\\n)+---\\n&quot;); Matcher matcherFrontMatter = hasFrontMatter.matcher(builder); return matcherFrontMatter.lookingAt(); &#125; /** * @param file * @param builder * @throws UnsupportedEncodingException * @throws FileNotFoundException * @throws IOException */ public static StringBuilder readFile(File file) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; StringBuilder builder = new StringBuilder(5000); // 先把文章读入缓冲中 BufferedReader reader = new BufferedReader( new InputStreamReader(new FileInputStream(file), &quot;utf-8&quot;)); String line = null; // 一行一行的读取 while ((line = reader.readLine()) != null) &#123; builder.append(line + &quot;\n&quot;);// 添加到缓冲中 &#125; reader.close();// 关闭文件 return builder; &#125;&#125;上面的代码已经完成了功能，但是在使用的过程中还是有一些问题的，先来看主函数：123456public static void main(String[] args)&#123; String dirPath=SysClipboardUtil.getSysClipboardText(); dealDir(dirPath); System.out.println("遍历结束");&#125;这里的需要从剪贴板获取需要处理文章的绝对路径，或者是所在的目录。如果是文章，就直接对该文章中添加front-matter,添加的算法是，生成front-matter到一个字符缓冲中，然后把文章也读入，追加到缓冲中，然后把文章缓冲覆盖写入到文件中。如果是目录则递归遍历整个目录，检查文章是否已经有了front-matter,如果没有就添加，如果有了就不做处理。我现在要做的就是修改主方法，因为我不想每次传递路径到程序中，我的博客路径搭建之后就固定为D:\Blog\bolg5\source\_posts，我只需要递归遍历这个目录即可。虽然这样需要处理博客中的所有文章，空间和时间消耗可能大点。但是无所谓，我就是懒得传递路径到程序，因为我需要先要复制文章的路径到剪贴板，然后在调用程序。而修改后我可以直接调用就行。少了一个步骤。修改后的主函数为：1234567891011121314151617181920public static void main(String[] args)&#123; String dirPath = SysClipboardUtil.getSysClipboardText(); // 如果剪贴板中有东西 if (!"".equals(dirPath)) &#123; dealDir(dirPath); System.out.println("遍历结束"); &#125; //如果剪贴板没有东西就默认对所有的文章进行处理 else &#123; // 默认的博客文章地址 String defaultPath = "D:\\Blog\\bolg5\\source\\_posts"; dealDir(dirPath); System.out.println("处理所有文章结束"); &#125;&#125;运行后我发现问题了，剪贴板中可能随时有东西。这些信息不一定是路径，这样就会进入第一个分支，从而运行错误。解决方法：方案1：不再使用剪贴板传递参数，而是使用命令行参数，Windows运行框是可以传入命令行参数的，到时候修改一下bat文件把命令行参数传入java程序。方案2：继续修改主代码，先检查参数是不是路径，如果是，dealDir()方法就使用该路径，如果不是dealDir()方法就使用默认路径。方案2修改代码为：1234567891011121314151617public static void main(String[] args)&#123; String dirPath = SysClipboardUtil.getSysClipboardText(); File file=new File(dirPath); if(file.isDirectory()||file.isFile()) &#123; dealDir(dirPath); System.out.println("遍历结束"); &#125; //如果剪贴板没有东西就默认对所有的文章进行处理 else &#123; // 默认的博客文章地址 String defaultPath = "D:\\Blog\\bolg5\\source\\_posts"; dealDir(defaultPath); System.out.println("处理所有文章结束"); &#125;这样就可以了，程序输出：123456......已经存在首部了，不再重复加入处理完成:D:\Blog\bolg5\source\_posts\MyApplications\HexoTools\java自动生成HexoFontMatter.md已经存在首部了，不再重复加入......处理所有文章结束可以看到我最新写的文章D:\Blog\bolg5\source\_posts\MyApplications\HexoTools\java自动生成HexoFontMatter.md已经处理完毕。其他文章已经有front-matter程序不在添加。使用方案2的好处就是我只管复制路径，然后调用程序，或者调用程序(默认)即可。而使用命令行参数的话还需要粘贴一次。本次优化到此结束。整个程序的代码为：package front.matter.tools;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FilenameFilter;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.regex.Matcher;import java.util.regex.Pattern;import clipboard.util.SysClipboardUtil;public class HexoAddFrontMatterAllInDir&#123; public static void main(String[] args) &#123; String dirPath = SysClipboardUtil.getSysClipboardText(); File file=new File(dirPath); if(file.isDirectory()||file.isFile()) &#123; dealDir(dirPath); System.out.println("遍历结束"); &#125; //如果剪贴板没有东西就默认对所有的文章进行处理 else &#123; // 默认的博客文章地址 String defaultPath = "D:\\Blog\\bolg5\\source\\_posts"; dealDir(defaultPath); System.out.println("处理所有文章结束"); &#125; &#125; /** * 对该目录下的所有markdown文档加Front-matter首部 * * @param dirpath */ public static void dealDir(String dirpath) &#123; File dirFile = new File(dirpath); // 如果是文件夹的话 if (dirFile.isDirectory()) &#123; // 获取md文件，或者是目录的列表 File[] fileList = dirFile.listFiles(new FilenameFilter() &#123; @Override public boolean accept(File dir, String name) &#123; // 如果是markdown文件的话 if (name.endsWith(".md")) return true; // 如果是一个目录的话 else if (new File(dir, name).isDirectory()) return true; // 其他不相关的文件不返回 return false; &#125; &#125;); try &#123; for (File file : fileList) &#123; // 输出正在处理的文件名 // System.out.println(file.getAbsolutePath()); // 如果是文件的话 if (file.isFile()) &#123; // 在文章首部添加文件首部 addIfHasNotFrontMatter(file); // 更新文章首部，使用最近修改的时间作为文章的创建时间 // updateIfHasFrontMatter(file); &#125; else // 递归调用下层目录 dealDir(file.getAbsolutePath()); &#125; &#125; catch (UnsupportedEncodingException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; // 如果是markdown文件的话也可以直接使用进行首部追加 else if (dirFile.isFile() &amp;&amp; dirFile.getAbsolutePath().endsWith(".md")) &#123; // 在文章首部添加文件首部 try &#123; addIfHasNotFrontMatter(dirFile); &#125; catch (UnsupportedEncodingException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; /** * @param file * @throws IOException * @throws FileNotFoundException * @throws UnsupportedEncodingException */ private static void addIfHasNotFrontMatter(File file) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; // TODO Auto-generated method stub addIfHasNotFrontMatter(file.getAbsolutePath()); &#125; /** * @param path * @throws UnsupportedEncodingException * @throws FileNotFoundException * @throws IOException */ public static void addIfHasNotFrontMatter(String path) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; File file = new File(path); // 如果是markdown文档 if (file.isFile() &amp;&amp; path.endsWith(".md")) &#123; // 读取文件到文章缓冲article中 StringBuilder article = readFile(file); // 如果在文章中没有发现首部存在 if (!hasFrontMatter(article)) &#123; // 就添加首部 StringBuilder frontmatter = createFrontMatter(file); // 然后在正文前面首部 article.insert(0, frontmatter); // 处理结果写回该文件 writeFile(file, article); System.out.println("处理完成:" + path); &#125; else &#123; System.out.println("已经存在首部了，不再重复加入"); &#125; &#125; &#125; /** * @param file * @throws IOException * @throws FileNotFoundException * @throws UnsupportedEncodingException */ private static void updateIfHasFrontMatter(File file) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; // TODO Auto-generated method stub updateIfHasFrontMatter(file.getAbsolutePath()); &#125; /** * @param path * @throws UnsupportedEncodingException * @throws FileNotFoundException * @throws IOException */ public static void updateIfHasFrontMatter(String path) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; File file = new File(path); // 如果是markdown文档 if (file.isFile() &amp;&amp; path.endsWith(".md")) &#123; // 读取文件到文章缓冲article中 StringBuilder article = readFile(file); // 从文章中移除原来的首部 removeOldFrontMatter(article); // 根据文件名生成新的首部 StringBuilder frontmatter = createFrontMatter(file); // 然后在正文前面首部 article.insert(0, frontmatter); // 处理结果写回该文件 writeFile(file, article); System.out.println("更新首部：" + path); &#125; &#125; /** * @param file * @param article * @throws UnsupportedEncodingException * @throws FileNotFoundException * @throws IOException */ public static void writeFile(File file, StringBuilder article) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; BufferedWriter writer = new BufferedWriter( new OutputStreamWriter(new FileOutputStream(file), "utf-8")); writer.write(article.toString()); writer.close(); &#125; /** * @param path * @param file * @return */ public static StringBuilder createFrontMatter(File file) &#123; String path = file.getAbsolutePath(); // 生成首部 StringBuilder frontmatter = new StringBuilder(); String filename = file.getName(); // 获取不含后缀的文件名,作为未标题 String title = filename.substring(0, filename.length() - 3); frontmatter.append("title: " + title); // 获取子目录列表 int categoriesStart = path.indexOf("\\source\\_posts") + "\\source\\_posts".length(); int categoriesEnd = path.indexOf(filename) - 1; String categoriesStr = path.substring(categoriesStart, categoriesEnd); categoriesStr = categoriesStr.replaceAll("\\\\", "\n- "); frontmatter.append("\ncategories: " + categoriesStr); // 生成时间项 SimpleDateFormat dateFormat = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss");// 使用24小时制 Date date = new Date(file.lastModified()); frontmatter.append("\ndate: " + dateFormat.format(date)); frontmatter.append("\n---\n");// 加入frontmatter首部 return frontmatter; &#125; /** * @param builder */ public static void removeOldFrontMatter(StringBuilder builder) &#123; // 检查文章中是否有首部 Pattern hasFrontMatter = Pattern.compile("(?:---\\n)?(?:.*\\n)+---\\n"); // System.out.println("使用的正则表达式:" + hasFrontMatter); Matcher matcherFrontMatter = hasFrontMatter.matcher(builder); int start = 0, end = 0; // 从文章首部开始匹配，匹配到了就不再匹配 if (matcherFrontMatter.lookingAt()) &#123; start = matcherFrontMatter.start(); end = matcherFrontMatter.end(); // 移除首部 builder.delete(start, end); &#125; &#125; /** * @param builder */ public static boolean hasFrontMatter(StringBuilder builder) &#123; // 检查文章中是否有首部 Pattern hasFrontMatter = Pattern.compile("(?:---\\n)?(?:.*\\n)+---\\n"); Matcher matcherFrontMatter = hasFrontMatter.matcher(builder); return matcherFrontMatter.lookingAt(); &#125; /** * @param file * @param builder * @throws UnsupportedEncodingException * @throws FileNotFoundException * @throws IOException */ public static StringBuilder readFile(File file) throws UnsupportedEncodingException, FileNotFoundException, IOException &#123; StringBuilder builder = new StringBuilder(5000); // 先把文章读入缓冲中 BufferedReader reader = new BufferedReader( new InputStreamReader(new FileInputStream(file), "utf-8")); String line = null; // 一行一行的读取 while ((line = reader.readLine()) != null) &#123; builder.append(line + "\n");// 添加到缓冲中 &#125; reader.close();// 关闭文件 return builder; &#125;&#125;依赖代码：本文链接: 使用java给Hexo博客内文章生成HexoFrontMatter]]></content>
      <categories>
        <category>我的软件</category>
        <category>Hexo博客工具程序</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30个要点帮你完成java代码优化]]></title>
    <url>%2Fblog%2F5ab73df2%2F</url>
    <content type="text"><![CDATA[本文转载自：https://www.cnblogs.com/zhaoyan001/p/6078196.html通过java代码规范来优化程序，优化内存使用情况，防止内存泄露可供程序利用的资源（内存、CPU时间、网络带宽等）是有限的，优化的目的就是让程序用尽可能少的资源完成预定的任务。优化通常包含两方面的内容：减小代码的体积提高代码的运行效率。本文讨论的主要是如何提高代码的效率。在Java程序中，性能问题的大部分原因并不在于Java语言，而是在于程序本身。养成好的代码编写习惯非常重要，比如正确地、巧妙地运用java.lang.String类和java.util.Vector类，它能够显著地提高程序的性能。下面我们就来具体地分析一下这方面的问题。1、 尽量指定类的final修饰符 带有final修饰符的类是不可派生的在Java核心API中，有许多应用final的例子，例如java.lang.String。为String类指定final防止了人们覆盖length()方法。另外，如果指定一个类为final，则该类所有的方法都是final。Java编译器会寻找机会内联（inline）所有的final方法（这和具体的编译器实现有关）。此举能够使性能平均提高50% 。2、 尽量重用对象特别是String 对象的使用中，频繁出现字符串连接情况时应用StringBuffer 代替。由于系统不仅要花时间生成对象，以后可能还需花时间对这些对象进行垃圾回收和处理。因此，生成过多的对象将会给程序的性能带来很大的影响。3、 尽量使用局部变量调用方法时传递的参数以及在调用中创建的临时变量都保存在栈（Stack）中，速度较快。其他变量，如静态变量、实例变量等，都在堆（Heap）中创建，速度较慢。另外，依赖于具体的编译器/JVM，局部变量还可能得到进一步优化。请参见《尽可能使用堆栈变量》。4、 不要重复初始化变量默认情况下，调用类的构造函数时， Java会把变量初始化成确定的值：所有的对象被设置成null，整数变量（byte、short、int、long）设置成0，float和double变量设置成0.0，逻辑值设置成false。当一个类从另一个类派生时，这一点尤其应该注意，因为用new关键词创建一个对象时，构造函数链中的所有构造函数都会被自动调用。5、 在JAVA + ORACLE 的应用系统开发中，java中内嵌的SQL语句尽量使用大写的形式，以减轻ORACLE解析器的解析负担。6、 Java 编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，及时关闭以释放资源。因为对这些大对象的操作会造成系统大的开销，稍有不慎，会导致严重的后果。7、 由于JVM的有其自身的GC机制，不需要程序开发者的过多考虑，从一定程度上减轻了开发者负担，但同时也遗漏了隐患，过分的创建对象会消耗系统的大量内存，严重时会导致内存泄露，因此，保证过期对象的及时回收具有重要意义。JVM回收垃圾的条件是：对象不在被引用；然而，JVM的GC并非十分的机智，即使对象满足了垃圾回收的条件也不一定会被立即回收。所以，建议我们在对象使用完毕，应手动置成null。8、 在使用同步机制时，应尽量使用方法同步代替代码块同步。这里就有问题了，为什么我看有的文章说尽量使用同步代码块？9、 尽量减少对变量的重复计算例如：123for(int i = 0;i &lt; list.size; i ++) &#123;…&#125;应替换为：1234for(int i = 0,int len = list.size();i &lt; len; i ++)&#123;…&#125;10、尽量采用懒加载的策略，即在需要的时候才开始创建。例如：1234String str = “aaa”;if(i == 1) &#123;list.add(str);&#125;应替换为：12345if(i == 1) &#123; String str = “aaa”; list.add(str);&#125;11、慎用异常异常对性能不利。抛出异常首先要创建一个新的对象。Throwable接口的构造函数调用名为fillInStackTrace()的本地（Native）方法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，VM就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。 异常只能用于错误处理，不应该用来控制程序流程。12、不要在循环中使用：Try {} catch() {}应把其放置在最外层。13、StringBuffer 的使用：StringBuffer表示了可变的、可写的字符串。有三个构造方法 :StringBuffer(); //默认分配16个字符的空间StringBuffer (int size); //分配size个字符的空间StringBuffer (String str); //分配16个字符+str.length()个字符空间你可以通过StringBuffer的构造函数来设定它的初始化容量，这样可以明显地提升性能。这里提到的构造函数是StringBuffer(int length)，length参数表示当前的StringBuffer能保持的字符数量。你也可以使用ensureCapacity(int minimumcapacity)方法在StringBuffer对象创建之后设置它的容量。首先我们看看StringBuffer的缺省行为，然后再找出一条更好的提升性能的途径。StringBuffer在内部维护一个字符数组，当你使用缺省的构造函数来创建StringBuffer对象的时候，因为没有设置初始化字符长度，StringBuffer的容量被初始化为16个字符，也就是说缺省容量就是16个字符。当StringBuffer达到最大容量的时候，它会将自身容量增加到当前的2倍再加2，也就是（2*旧值+2）。如果你使用缺省值，初始化之后接着往里面追加字符，在你追加到第16个字符的时候它会将容量增加到34（216+2），当追加到34个字符的时候就会将容量增加到70（234+2）。无论何时只要StringBuffer到达它的最大容量它就不得不创建一个新的字符数组然后重新将旧字符和新字符都拷贝一遍――这也太昂贵了点。所以总是给StringBuffer设置一个合理的初始化容量值是错不了的，这样会带来立竿见影的性能增益。StringBuffer初始化过程的调整的作用由此可见一斑。所以，使用一个合适的容量值来初始化StringBuffer永远都是一个最佳的建议。14、合理的使用Java类 java.util.Vector。简单地说，一个Vector就是一个java.lang.Object实例的数组。Vector与数组相似，它的元素可以通过整数形式的索引访问。但是，Vector类型的对象在创建之后，对象的大小能够根据元素的增加或者删除而扩展、缩小。请考虑下面这个向Vector加入元素的例子：123456Object bj = new Object();Vector v = new Vector(100000);for(int I=0;I&lt;100000; I++)&#123; v.add(0,obj);&#125;除非有绝对充足的理由要求每次都把新元素插入到Vector的前面，否则上面的代码对性能不利。在默认构造函数中，Vector的初始存储能力是10个元素，如果新元素加入时存储能力不足，则以后存储能力每次加倍。Vector类就对象StringBuffer类一样，每次扩展存储能力时，所有现有的元素都要复制到新的存储空间之中。下面的代码片段要比前面的例子快几个数量级：123456Object bj = new Object();Vector v = new Vector(100000);for(int I=0; I&lt;100000; I++) &#123; v.add(obj);&#125;同样的规则也适用于Vector类的remove()方法。由于Vector中各个元素之间不能含有“空隙”，删除除最后一个元素之外的任意其他元素都导致被删除元素之后的元素向前移动，也就是说，从Vector删除最后一个元素要比删除第一个元素“开销”低好几倍。假设要从前面的Vector删除所有元素，我们可以使用这种代码：1234for(int I=0; I&lt;100000; I++)&#123;v.remove(0);&#125;但是，与下面的代码相比，前面的代码要慢几个数量级：1234for(int I=0; I&lt;100000; I++)&#123;v.remove(v.size()-1);&#125;从Vector类型的对象v删除所有元素的最好方法是：v.removeAllElements();假设Vector类型的对象v包含字符串“Hello”。考虑下面的代码，它要从这个Vector中删除“Hello”字符串：123456String s = "Hello";int i = v.indexOf(s);if(I != -1)&#123; v.remove(s);&#125;这些代码看起来没什么错误，但它同样对性能不利。在这段代码中，indexOf()方法对v进行顺序搜索寻找字符串“Hello”，remove(s)方法也要进行同样的顺序搜索。改进之后的版本是：123456String s = "Hello";int index = v.indexOf(s);if(index != -1)&#123; v.remove(index);&#125;这个版本中我们直接在remove()方法中给出待删除元素的精确索引位置，从而避免了第二次搜索。一个更好的版本是：1String s = "Hello"; v.remove(s);最后，我们再来看一个有关Vector类的代码片段：1for(int I=0; I++;I &lt; v.length)如果v包含100,000个元素，这个代码片段将调用v.size()方法100,000次。虽然size方法是一个简单的方法，但它仍旧需要一次方法调用的开销，至少JVM需要为它配置以及清除堆栈环境。在这里，for循环内部的代码不会以任何方式修改Vector类型对象v的大小，因此上面的代码最好改写成下面这种形式：1for(int size = v.size(),int I=0; I++;I&lt;size)虽然这是一个简单的改动，但它仍旧赢得了性能。毕竟，每一个CPU周期都是宝贵的。15、当复制大量数据时，使用System.arraycopy()命令。123int[] src=&#123;1,3,5,6,7,8&#125;;int[] dest = new int[6];System.arraycopy(src, 0, dest, 0, 6);src:源数组; srcPos:源数组要复制的起始位置;dest:目的数组; destPos:目的数组放置的起始位置;length:复制的长度.注意：src and dest都必须是同类型或者可以进行转换类型的数组．16、代码重构：增强代码的可读性。12345678910111213141516171819202122232425262728public class ShopCart &#123; private List carts ; … public void add (Object item) &#123; if(carts == null) &#123; carts = new ArrayList(); &#125; crts.add(item); &#125; public void remove(Object item) &#123; if(carts. contains(item)) &#123; carts.remove(item); &#125; &#125; public List getCarts() &#123; //返回只读列表 return Collections.unmodifiableList(carts); &#125; //不推荐这种方式 //this.getCarts().add(item); &#125;17、不用new关键词创建类的实例用new关键词创建类的实例时，构造函数链中的所有构造函数都会被自动调用。但如果一个对象实现了Cloneable接口，我们可以调用它的clone()方法。clone()方法不会调用任何类构造函数。在使用设计模式（Design Pattern）的场合，如果用Factory模式创建对象，则改用clone()方法创建新的对象实例非常简单。例如，下面是Factory模式的一个典型实现：1234public static Credit getNewCredit() &#123; return new Credit();&#125;改进后的代码使用clone()方法，如下所示：12345private static Credit BaseCredit = new Credit();public static Credit getNewCredit() &#123; return (Credit) BaseCredit.clone();&#125;上面的思路对于数组处理同样很有用。18、对于2的整数倍的乘法和除法用移位操作替代考虑下面的代码：1234for (val = 0; val &lt; 100000; val +=5) &#123; alterX = val * 8; myResult = val * 2;&#125;用移位操作替代乘法操作可以极大地提高性能。下面是修改后的代码：1234for (val = 0; val &lt; 100000; val += 5) &#123; alterX = val &lt;&lt; 3; myResult = val &lt;&lt; 1;&#125;修改后的代码不再做乘以8的操作，而是改用等价的左移3位操作，每左移1位相当于乘以2。相应地，右移1位操作相当于除以2。值得一提的是，虽然移位操作速度快，但可能使代码比较难于理解，所以最好加上一些注释。19、在JSP页面中关闭无用的会话。一个常见的误解是以为session在有客户端访问时就被创建，然而事实是直到某server端程序调用HttpServletRequest.getSession(true)这样的语句时才被创建，注意如果JSP没有显示的使用 &lt;&gt; 关闭session，则JSP文件在编译成Servlet时将会自动加上这样一条语句HttpSession session = HttpServletRequest.getSession(true);这也是JSP中隐含的session对象的来历。由于session会消耗内存资源，因此，如果不打算使用session，应该在所有的JSP中关闭它。对于那些无需跟踪会话状态的页面，关闭自动创建的会话可以节省一些资源。使用如下page指令：&lt;%@ page session=&quot;false&quot;%&gt;20、JDBC与I/O如果应用程序需要访问一个规模很大的数据集，则应当考虑使用块提取方式。默认情况下，JDBC每次提取32行数据。举例来说，假设我们要遍历一个5000行的记录集，JDBC必须调用数据库157次才能提取到全部数据。如果把块大小改成512，则调用数据库的次数将减少到10次。21、Servlet与内存使用许多开发者随意地把大量信息保存到用户会话之中。一些时候，保存在会话中的对象没有及时地被垃圾回收机制回收。从性能上看，典型的症状是用户感到系统周期性地变慢，却又不能把原因归于任何一个具体的组件。如果监视JVM的堆空间，它的表现是内存占用不正常地大起大落。解决这类内存问题主要有二种办法。第一种办法是，在所有作用范围为会话的Bean中实现HttpSessionBindingListener接口。这样，只要实现valueUnbound()方法，就可以显式地释放Bean使用的资源。另外一种办法就是尽快地把会话作废。大多数应用服务器都有设置会话作废间隔时间的选项。另外，也可以用编程的方式调用会话的setMaxInactiveInterval()方法，该方法用来设定在作废会话之前，Servlet容器允许的客户请求的最大间隔时间，以秒计。22、使用缓冲标记一些应用服务器加入了面向JSP的缓冲标记功能。例如，BEA的WebLogic Server从6.0版本开始支持这个功能，Open Symphony工程也同样支持这个功能。JSP缓冲标记既能够缓冲页面片断，也能够缓冲整个页面。当JSP页面执行时，如果目标片断已经在缓冲之中，则生成该片断的代码就不用再执行。页面级缓冲捕获对指定URL的请求，并缓冲整个结果页面。对于购物篮、目录以及门户网站的主页来说，这个功能极其有用。对于这类应用，页面级缓冲能够保存页面执行的结果，供后继请求使用。23、选择合适的引用机制在典型的JSP应用系统中，页头、页脚部分往往被抽取出来，然后根据需要引入页头、页脚。当前，在JSP页面中引入外部资源的方法主要有两种：include指令，以及include动作。include指令：例如&lt;%@ include file=”copyright.html” %&gt;。该指令在编译时引入指定的资源。在编译之前，带有include指令的页面和指定的资源被合并成一个文件。被引用的外部资源在编译时就确定，比运行时才确定资源更高效。include动作：例如&lt;jsp:include page=”copyright.jsp” /&gt;。该动作引入指定页面执行后生成的结果。由于它在运行时完成，因此对输出结果的控制更加灵活。但时，只有当被引用的内容频繁地改变时，或者在对主页面的请求没有出现之前，被引用的页面无法确定时，使用include动作才合算。24、及时清除不再需要的会话为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多会话时，如果内存容量不足，操作系统会把部分内存数据转移到磁盘，应用服务器也可能根据“最近最频繁使用”（Most Recently Used）算法把部分不活跃的会话转储到磁盘，甚至可能抛出“内存不足”异常。在大规模系统中，串行化会话的代价是很昂贵的。当会话不再需要时，应当及时调用HttpSession.invalidate()方法清除会话。HttpSession.invalidate()方法通常可以在应用的退出页面调用。25、不要将数组声明为：public static final 。26、HashMap的遍历效率讨论经常遇到对HashMap中的key和value值对的遍历操作，有如下两种方法：Map&lt;String, String[]&gt; paraMap = new HashMap&lt;String, String[]&gt;();//第一个循环SetappFieldDefIds = paraMap.keySet();for (String appFieldDefId : appFieldDefIds) {String[] values = paraMap.get(appFieldDefId);……}//第二个循环for(Entry&lt;String, String[]&gt; entry : paraMap.entrySet()){String appFieldDefId = entry.getKey();String[] values = entry.getValue();…….}第一种实现明显的效率不如第二种实现。分析如下 SetappFieldDefIds = paraMap.keySet(); 是先从HashMap中取得keySet代码如下：public SetkeySet() {Setks = keySet;return (ks != null ? ks : (keySet = new KeySet()));}private class KeySet extends AbstractSet{public Iteratoriterator() {return newKeyIterator();}public int size() {return size;}public boolean contains(Object o) {return containsKey(o);}public boolean remove(Object o) {return HashMap.this.removeEntryForKey(o) != null;}public void clear() {HashMap.this.clear();}}其实就是返回一个私有类KeySet, 它是从AbstractSet继承而来，实现了Set接口。再来看看for/in循环的语法for(declaration : expression)statement在执行阶段被翻译成如下各式for(Iterator#i = (expression).iterator(); #i.hashNext();){declaration = #i.next();statement}因此在第一个for语句for (String appFieldDefId : appFieldDefIds) 中调用了HashMap.keySet().iterator()而这个方法调用了newKeyIterator()IteratornewKeyIterator() {return new KeyIterator();}private class KeyIterator extends HashIterator{public K next() {return nextEntry().getKey();}}所以在for中还是调用了在第二个循环for(Entry&lt;String, String[]&gt; entry : paraMap.entrySet())中使用的Iterator是如下的一个内部类private class EntryIterator extends HashIterator&lt;Map.Entry&lt;K,V&gt;&gt; {public Map.Entry&lt;K,V&gt; next() {return nextEntry();}}此时第一个循环得到key，第二个循环得到HashMap的Entry效率就是从循环里面体现出来的第二个循环此致可以直接取key和value值而第一个循环还是得再利用HashMap的get(Object key)来取value值现在看看HashMap的get(Object key)方法public V get(Object key) {Object k = maskNull(key);int hash = hash(k);int i = indexFor(hash, table.length); //Entry[] tableEntry&lt;K,V&gt; e = table;while (true) {if (e == null)return null;if (e.hash == hash &amp;&amp; eq(k, e.key))return e.value;e = e.next;}}其实就是再次利用Hash值取出相应的Entry做比较得到结果，所以使用第一中循环相当于两次进入HashMap的Entry中而第二个循环取得Entry的值之后直接取key和value，效率比第一个循环高。其实按照Map的概念来看也应该是用第二个循环好一点，它本来就是key和value的值对，将key和value分开操作在这里不是个好选择。27、array(数组) 和 ArryList的使用array（[]）：最高效；但是其容量固定且无法动态改变；ArrayList：容量可动态增长；但牺牲效率；基于效率和类型检验，应尽可能使用array，无法确定数组大小时才使用ArrayList！ArrayList是Array的复杂版本ArrayList内部封装了一个Object类型的数组，从一般的意义来说，它和数组没有本质的差别，甚至于ArrayList的许多方法，如Index、IndexOf、Contains、Sort等都是在内部数组的基础上直接调用Array的对应方法。ArrayList存入对象时，抛弃类型信息，所有对象屏蔽为Object，编译时不检查类型，但是运行时会报错。注：jdk5中加入了对泛型的支持，已经可以在使用ArrayList时进行类型检查。从这一点上看来，ArrayList与数组的区别主要就是由于动态增容的效率问题了28、尽量使用HashMap 和ArrayList ,除非必要，否则不推荐使用HashTable和Vector ，后者由于使用同步机制，而导致了性能的开销。29、StringBuffer 和StringBuilder的区别：java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。StringBuilder。与该类相比，通常应该优先使用 java.lang.StringBuilder类，因为它支持所有相同的操作，但由于它不执行同步，所以速度更快。为了获得更好的性能，在构造 StirngBuffer 或 StirngBuilder 时应尽可能指定它的容量。当然，如果你操作的字符串长度不超过 16 个字符就不用了。 相同情况下使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%-15% 左右的性能提升，但却要冒多线程不安全的风险。而在现实的模块化编程中，负责某一模块的程序员不一定能清晰地判断该模块是否会放入多线程的环境中运行，因此：除非你能确定你的系统的瓶颈是在 StringBuffer 上，并且确定你的模块不会运行在多线程模式下，否则还是用 StringBuffer 吧。30、尽量避免使用split除非是必须的，否则应该避免使用split，split由于支持正则表达式，所以效率比较低，如果是频繁的几十，几百万的调用将会耗费大量资源，如果确实需要频繁的调用split，可以考虑使用apache的 StringUtils.split(string,char)，频繁split的可以缓存结果。其他补充:1、及时清除不再使用的对象，设为null2、尽可能使用final,static等关键字3、尽可能使用buffered对象如何优化代码使JAVA源文件及编译后CLASS文件更小1 尽量使用继承，继承的方法越多，你要写的代码量也就越少2 打开JAVA编译器的优化选项： javac -O 这个选项将删除掉CLASS文件中的行号，并能把一些private, static,final的小段方法申明为inline方法调用3 把公用的代码提取出来4 不要初始化很大的数组，尽管初始化一个数组在JAVA代码中只是一行的代码量，但编译后的代码是一行代码插入一个数组的元素，所以如果你有大量的数据需要存在数组中的话，可以先把这些数据放在String中，然后在运行期把字符串解析到数组中5 日期类型的对象会占用很大的空间，如果你要存储大量的日期对象，可以考虑把它存储为long型，然后在使用的时候转换为Date类型6 类名，方法名和变量名尽量使用简短的名字，可以考虑使用Hashjava, Jobe, Obfuscate and Jshrink等工具自动完成这个工作7 将static final类型的变量定义到Interface中去8 算术运算 能用左移/右移的运算就不要用*和/运算，相同的运算不要运算多次不要两次初始化变量Java通过调用独特的类构造器默认地初始化变量为一个已知的值。所有的对象被设置成null，integers (byte, short, int, long)被设置成0，float和double设置成0.0，Boolean变量设置成false。这对那些扩展自其它类的类尤其重要，这跟使用一个新的关键词创建一个对象时所有一连串的构造器被自动调用一样。在任何可能的地方让类为Final标记为final的类不能被扩展。在《核心Java API》中有大量这个技术的例子，诸如java.lang.String。将String类标记为final阻止了开发者创建他们自己实现的长度方法。更深入点说，如果类是final的，所有类的方法也是final的。Java编译器可能会内联所有的方法（这依赖于编译器的实现）。在我的测试里，我已经看到性能平均增加了50%。异常在需要抛出的地方抛出，try catch能整合就整合try {some.method1(); // Difficult for javac} catch( method1Exception e ) { // and the JVM runtime// Handle exception 1 // to optimize this} // codetry {some.method2();} catch( method2Exception e ) {// Handle exception 2}try {some.method3();} catch( method3Exception e ) {// Handle exception 3}已下代码 更容易被编译器优化try {some.method1(); // Easier to optimizesome.method2();some.method3();} catch( method1Exception e ) {// Handle exception 1} catch( method2Exception e ) {// Handle exception 2} catch( method3Exception e ) {// Handle exception 3}For循环的优化Replace…for( int i = 0; i &lt; collection.size(); i++ ) {…}with…for( int i = 0, n = collection.size(); i &lt; n; i++ ) {…}5、 在JAVA + ORACLE 的应用系统开发中，java中内嵌的SQL语句尽量使用大写的形式，以减轻ORACLE解析器的解析负担。10、尽量采用lazy loading 的策略，即在需要的时候才开始创建。例如： String str = “aaa”;if(i == 1) {list.add(str);}应替换为：12345if(i == 1) &#123;String str = “aaa”;list.add(str);&#125;12、不要在循环中使用：Try {} catch() {}应把其放置在最外层以上所述就是本文的全部内容了，希望能够对大家的java优化有所帮助。本文链接: 30个要点帮你完成java代码优化]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
</search>
